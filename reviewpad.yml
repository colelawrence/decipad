# This file is used to configure Reviewpad.
# The configuration is a proposal to help you get started.
# You can use it as a starting point and customize it to your needs.
# For more details see https://docs.reviewpad.com/guides/syntax.

# Define the list of labels to be used by Reviewpad.
# For more details see https://docs.reviewpad.com/guides/syntax#label.
labels:
  small:
    description: Pull request is small
    color: '#76dbbe'
  medium:
    description: Pull request is medium
    color: '#2986cc'
  large:
    description: Pull request is large
    color: '#c90076'

# Define the list of workflows to be run by Reviewpad.
# A workflow is a list of actions that will be executed based on the defined rules.
# For more details see https://docs.reviewpad.com/guides/syntax#workflow.
workflows:
  # This workflow assigns the most relevant reviewer to pull requests.
  # This helps guarantee that pull requests are reviewed by at least one person.
  - name: reviewer-assignment
    description: Assign the most relevant reviewer to pull requests
    always-run: true
    if:
      # Automatically assign reviewer when the pull request is ready for review.
      - rule: $isDraft() == false
        extra-actions:
          - $assignCodeAuthorReviewers()

  # This workflow praises contributors on their pull request contributions.
  # This helps contributors feel appreciated.
  - name: praise-contributors-on-milestones
    description: Praise contributors based on their contributions
    always-run: true
    if:
      # Praise contributors on their first pull request.
      - rule: $pullRequestCountBy($author()) == 1
        extra-actions:
          - $commentOnce($sprintf("Thank you @%s for this first contribution!", [$author()]))

  # This workflow validates best practices for pull request management.
  # This helps developers follow best practices.
  - name: best-practices
    description: Validate best practices for pull request management
    always-run: true
    if:
      # Warn pull requests if their description is empty.
      - rule: $description() == ""
        extra-actions:
          - $warn("Please provide a description for the pull request")

  # This workflow labels pull requests based on the total number of lines changed.
  # This helps pick pull requests based on their size and to incentivize small pull requests.
  - name: size-labeling
    description: Label pull request based on the number of lines changed
    always-run: true
    if:
      - rule: $size() < 100
        extra-actions:
          - $removeLabels(["medium", "large"])
          - $addLabel("small")
      - rule: $size() >= 100 && $size() < 300
        extra-actions:
          - $removeLabels(["small", "large"])
          - $addLabel("medium")
      - rule: $size() >= 300
        extra-actions:
          - $removeLabels(["small", "medium"])
          - $addLabel("large")

  # This workflow signals pull requests waiting for reviews.
  # This helps guarantee that pull requests are reviewed and approved by at least one person.
  - name: check-approvals
    description: Check that pull requests have the required number of approvals
    always-run: true
    if:
      # Label pull requests with `waiting-for-review` if there are no approvals;
      - rule: $isDraft() == false && $approvalsCount() < 1
        extra-actions:
          - $addLabel("waiting-for-review")

  # This workflow labels pull requests based on the pull request change type.
  # This helps pick pull requests based on their change type.
  - name: change-type-labelling
    description: Label pull requests based on the type of changes
    always-run: true
    if:
      # Label pull requests with `docs` if they only modify Markdown or txt files.
      - rule: $hasFileExtensions([".md", ".txt"])
        extra-actions:
          - $addLabel("docs")
      # Label pull requests with `infra` if they modify YAML files.
      - rule: $hasFileExtensions([".yaml", ".yml"])
        extra-actions:
          - $addLabel("infra")
      # Label pull requests with `dependencies` if they only modify `package.json` and `package.lock` files.
      - rule: $hasFileExtensions(["package.json", "yarn-lock.json"])
        extra-actions:
          - $addLabel("dependencies")

  # This workflow validates that the PR title follows the conventional commit standard
  # Also, it automatically adds a label X when the title ends with [X]
  - name: Pull request title workflow
    run:
      - $titleLint()
      - if: $matchString("\[(\w+)\]$", $title())
        then: $addLabel($sprintf("%s", $subMatchesString("\[(\w+)\]$", $title())))

  # This workflow checks if there is any missing check item in the Product Pledge section
  - name: Check product pledge checklist
    run:
      - if: $matchString("- \[ \]", $extractMarkdownHeadingContent($description(), "Product Pledge", 2))
        then: $fail("Product pledge checklist incomplete")

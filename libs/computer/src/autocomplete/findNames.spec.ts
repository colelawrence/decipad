import { timeout } from '@decipad/utils';
import { computerWithBlocks } from '../testUtils';
import { findNames } from './findNames';

it('finds names', async () => {
  const computer = await computerWithBlocks(
    `This_name_was_autogenerated = "Do not show in autocomplete"`,
    `Table1 = { Hello = ["World"] }`,
    `Table1.Column2 = [1]`,
    `Table1.ColumnThatImIn = [1]`,
    `f(x) = x + 1`,
    `NewTableRef = Table1`
  );

  const idOfColumnThatImIn = 'block-3';

  await timeout(0);

  expect([
    ...findNames(
      computer,
      computer.getLatestProgram(),
      new Set(['This_name_was_autogenerated']),
      idOfColumnThatImIn
    ),
  ]).toMatchInlineSnapshot(`
    Array [
      Object {
        "blockId": "block-0",
        "kind": "variable",
        "name": "This_name_was_autogenerated",
        "type": Object {
          "kind": "string",
        },
      },
      Object {
        "blockId": "block-1",
        "kind": "variable",
        "name": "Table1",
        "type": Object {
          "columnNames": Array [],
          "columnTypes": Array [],
          "delegatesIndexTo": undefined,
          "indexName": "exprRef_block_1",
          "kind": "table",
        },
      },
      Object {
        "blockId": "block-1",
        "columnId": "block-1_0",
        "inTable": "Table1",
        "isLocal": true,
        "kind": "column",
        "name": "Hello",
        "type": Object {
          "cellType": Object {
            "kind": "string",
          },
          "indexedBy": "exprRef_block_1",
          "kind": "column",
        },
      },
      Object {
        "blockId": "block-1",
        "columnId": "block-2",
        "inTable": "Table1",
        "isLocal": true,
        "kind": "column",
        "name": "Column2",
        "type": Object {
          "cellType": Object {
            "kind": "number",
            "unit": null,
          },
          "indexedBy": "exprRef_block_1",
          "kind": "column",
        },
      },
      Object {
        "blockId": "block-4",
        "kind": "function",
        "name": "f",
        "type": Object {
          "argNames": Array [
            "x",
          ],
          "ast": null,
          "body": Object {
            "args": Array [
              Object {
                "args": Array [
                  Object {
                    "args": Array [
                      "+",
                    ],
                    "end": Object {
                      "char": 9,
                      "column": 10,
                      "line": 1,
                    },
                    "start": Object {
                      "char": 9,
                      "column": 10,
                      "line": 1,
                    },
                    "type": "funcref",
                  },
                  Object {
                    "args": Array [
                      Object {
                        "args": Array [
                          "x",
                        ],
                        "end": Object {
                          "char": 7,
                          "column": 8,
                          "line": 1,
                        },
                        "isMissing": false,
                        "start": Object {
                          "char": 7,
                          "column": 8,
                          "line": 1,
                        },
                        "type": "ref",
                      },
                      Object {
                        "args": Array [
                          "number",
                          DeciNumber {
                            "d": 1n,
                            "infinite": false,
                            "n": 1n,
                            "s": 1n,
                          },
                        ],
                        "end": Object {
                          "char": 11,
                          "column": 12,
                          "line": 1,
                        },
                        "start": Object {
                          "char": 11,
                          "column": 12,
                          "line": 1,
                        },
                        "type": "literal",
                      },
                    ],
                    "end": Object {
                      "char": 11,
                      "column": 12,
                      "line": 1,
                    },
                    "start": Object {
                      "char": 7,
                      "column": 8,
                      "line": 1,
                    },
                    "type": "argument-list",
                  },
                ],
                "end": Object {
                  "char": 11,
                  "column": 12,
                  "line": 1,
                },
                "start": Object {
                  "char": 7,
                  "column": 8,
                  "line": 1,
                },
                "type": "function-call",
              },
            ],
            "end": Object {
              "char": 11,
              "column": 12,
              "line": 1,
            },
            "start": Object {
              "char": 7,
              "column": 8,
              "line": 1,
            },
            "type": "block",
          },
          "kind": "function",
          "name": "exprRef_block_4",
        },
      },
      Object {
        "blockId": "block-5",
        "kind": "variable",
        "name": "NewTableRef",
        "type": Object {
          "columnNames": Array [
            "Hello",
            "Column2",
            "ColumnThatImIn",
          ],
          "columnTypes": Array [
            Object {
              "kind": "string",
            },
            Object {
              "kind": "number",
              "unit": null,
            },
            Object {
              "kind": "number",
              "unit": null,
            },
          ],
          "delegatesIndexTo": "exprRef_block_1",
          "indexName": "exprRef_block_1",
          "kind": "table",
        },
      },
    ]
  `);
});

it('places local vars first', async () => {
  const computer = await computerWithBlocks(
    `Table1 = {}`,
    `Table1.Column1 = [1]`,
    `SomeVar = 1`,
    `Table1.Column2 = [1]`
  );

  const idOfColumnThatImIn = 'block-1';

  await timeout(0);

  expect([
    ...findNames(
      computer,
      computer.getLatestProgram(),
      new Set(),
      idOfColumnThatImIn
    ),
  ]).toMatchInlineSnapshot(`
    Array [
      Object {
        "blockId": "block-0",
        "kind": "variable",
        "name": "Table1",
        "type": Object {
          "columnNames": Array [],
          "columnTypes": Array [],
          "delegatesIndexTo": undefined,
          "indexName": "exprRef_block_0",
          "kind": "table",
        },
      },
      Object {
        "blockId": "block-2",
        "kind": "variable",
        "name": "SomeVar",
        "type": Object {
          "kind": "number",
          "unit": null,
        },
      },
      Object {
        "blockId": "block-0",
        "columnId": "block-3",
        "inTable": "Table1",
        "isLocal": true,
        "kind": "column",
        "name": "Column2",
        "type": Object {
          "cellType": Object {
            "kind": "number",
            "unit": null,
          },
          "indexedBy": "exprRef_block_0",
          "kind": "column",
        },
      },
    ]
  `);
});

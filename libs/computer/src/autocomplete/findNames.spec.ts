import { expect, it } from 'vitest';
import { timeout } from '@decipad/utils';
import { computerWithBlocks } from '../testUtils';
import { findNames } from './findNames';

it('finds names', async () => {
  const computer = await computerWithBlocks(
    `This_name_was_autogenerated = "Do not show in autocomplete"`,
    `Table1 = { Hello = ["World"] }`,
    `Table1.Column2 = [1]`,
    `Table1.ColumnThatImIn = [1]`,
    `f(x) = x + 1`,
    `NewTableRef = Table1`
  );

  const idOfColumnThatImIn = 'block-3';

  await timeout(0);

  expect([
    ...findNames(
      computer,
      computer.getLatestProgram(),
      new Set(['This_name_was_autogenerated']),
      idOfColumnThatImIn
    ),
  ]).toMatchInlineSnapshot(`
    [
      {
        "autocompleteGroup": "variable",
        "blockId": "block-0",
        "kind": "string",
        "name": "This_name_was_autogenerated",
        "serializedType": {
          "kind": "string",
        },
      },
      {
        "autocompleteGroup": "variable",
        "blockId": "block-1",
        "kind": "table",
        "name": "Table1",
        "serializedType": {
          "columnNames": [],
          "columnTypes": [],
          "delegatesIndexTo": undefined,
          "indexName": "exprRef_block_1",
          "kind": "table",
        },
      },
      {
        "autocompleteGroup": "column",
        "blockId": "block-1",
        "columnId": "block-1_0",
        "inTable": "Table1",
        "isLocal": true,
        "kind": "column",
        "name": "Hello",
        "serializedType": {
          "cellType": {
            "kind": "string",
          },
          "indexedBy": "exprRef_block_1",
          "kind": "column",
        },
      },
      {
        "autocompleteGroup": "column",
        "blockId": "block-1",
        "columnId": "block-2",
        "inTable": "Table1",
        "isLocal": true,
        "kind": "column",
        "name": "Column2",
        "serializedType": {
          "cellType": {
            "kind": "number",
            "unit": null,
          },
          "indexedBy": "exprRef_block_1",
          "kind": "column",
        },
      },
      {
        "autocompleteGroup": "function",
        "blockId": "block-4",
        "kind": "function",
        "name": "f",
        "serializedType": {
          "argNames": [
            "x",
          ],
          "ast": {
            "args": [
              {
                "args": [
                  "exprRef_block_4",
                ],
                "end": {
                  "char": 0,
                  "column": 1,
                  "line": 1,
                },
                "start": {
                  "char": 0,
                  "column": 1,
                  "line": 1,
                },
                "type": "funcdef",
              },
              {
                "args": [
                  {
                    "args": [
                      "x",
                    ],
                    "end": {
                      "char": 2,
                      "column": 3,
                      "line": 1,
                    },
                    "start": {
                      "char": 2,
                      "column": 3,
                      "line": 1,
                    },
                    "type": "def",
                  },
                ],
                "end": {
                  "char": 3,
                  "column": 4,
                  "line": 1,
                },
                "start": {
                  "char": 1,
                  "column": 2,
                  "line": 1,
                },
                "type": "argument-names",
              },
              {
                "args": [
                  {
                    "args": [
                      {
                        "args": [
                          "+",
                        ],
                        "end": {
                          "char": 9,
                          "column": 10,
                          "line": 1,
                        },
                        "start": {
                          "char": 9,
                          "column": 10,
                          "line": 1,
                        },
                        "type": "funcref",
                      },
                      {
                        "args": [
                          {
                            "args": [
                              "x",
                            ],
                            "end": {
                              "char": 7,
                              "column": 8,
                              "line": 1,
                            },
                            "isMissing": false,
                            "start": {
                              "char": 7,
                              "column": 8,
                              "line": 1,
                            },
                            "type": "ref",
                          },
                          {
                            "args": [
                              "number",
                              DeciNumber {
                                "d": 1n,
                                "infinite": false,
                                "n": 1n,
                                "s": 1n,
                              },
                            ],
                            "end": {
                              "char": 11,
                              "column": 12,
                              "line": 1,
                            },
                            "start": {
                              "char": 11,
                              "column": 12,
                              "line": 1,
                            },
                            "type": "literal",
                          },
                        ],
                        "end": {
                          "char": 11,
                          "column": 12,
                          "line": 1,
                        },
                        "start": {
                          "char": 7,
                          "column": 8,
                          "line": 1,
                        },
                        "type": "argument-list",
                      },
                    ],
                    "end": {
                      "char": 11,
                      "column": 12,
                      "line": 1,
                    },
                    "start": {
                      "char": 7,
                      "column": 8,
                      "line": 1,
                    },
                    "type": "function-call",
                  },
                ],
                "end": {
                  "char": 11,
                  "column": 12,
                  "line": 1,
                },
                "start": {
                  "char": 7,
                  "column": 8,
                  "line": 1,
                },
                "type": "block",
              },
            ],
            "end": {
              "char": 11,
              "column": 12,
              "line": 1,
            },
            "start": {
              "char": 0,
              "column": 1,
              "line": 1,
            },
            "type": "function-definition",
          },
          "body": {
            "args": [
              {
                "args": [
                  {
                    "args": [
                      "+",
                    ],
                    "end": {
                      "char": 9,
                      "column": 10,
                      "line": 1,
                    },
                    "start": {
                      "char": 9,
                      "column": 10,
                      "line": 1,
                    },
                    "type": "funcref",
                  },
                  {
                    "args": [
                      {
                        "args": [
                          "x",
                        ],
                        "end": {
                          "char": 7,
                          "column": 8,
                          "line": 1,
                        },
                        "isMissing": false,
                        "start": {
                          "char": 7,
                          "column": 8,
                          "line": 1,
                        },
                        "type": "ref",
                      },
                      {
                        "args": [
                          "number",
                          DeciNumber {
                            "d": 1n,
                            "infinite": false,
                            "n": 1n,
                            "s": 1n,
                          },
                        ],
                        "end": {
                          "char": 11,
                          "column": 12,
                          "line": 1,
                        },
                        "start": {
                          "char": 11,
                          "column": 12,
                          "line": 1,
                        },
                        "type": "literal",
                      },
                    ],
                    "end": {
                      "char": 11,
                      "column": 12,
                      "line": 1,
                    },
                    "start": {
                      "char": 7,
                      "column": 8,
                      "line": 1,
                    },
                    "type": "argument-list",
                  },
                ],
                "end": {
                  "char": 11,
                  "column": 12,
                  "line": 1,
                },
                "start": {
                  "char": 7,
                  "column": 8,
                  "line": 1,
                },
                "type": "function-call",
              },
            ],
            "end": {
              "char": 11,
              "column": 12,
              "line": 1,
            },
            "start": {
              "char": 7,
              "column": 8,
              "line": 1,
            },
            "type": "block",
          },
          "kind": "function",
          "name": "exprRef_block_4",
        },
      },
      {
        "autocompleteGroup": "variable",
        "blockId": "block-5",
        "kind": "table",
        "name": "NewTableRef",
        "serializedType": {
          "columnNames": [
            "Hello",
            "Column2",
            "ColumnThatImIn",
          ],
          "columnTypes": [
            {
              "kind": "string",
            },
            {
              "kind": "number",
              "unit": null,
            },
            {
              "kind": "number",
              "unit": null,
            },
          ],
          "delegatesIndexTo": "exprRef_block_1",
          "indexName": "exprRef_block_1",
          "kind": "table",
        },
      },
    ]
  `);
});

it('places local vars first', async () => {
  const computer = await computerWithBlocks(
    `Table1 = {}`,
    `Table1.Column1 = [1]`,
    `SomeVar = 1`,
    `Table1.Column2 = [1]`
  );

  const idOfColumnThatImIn = 'block-1';

  await timeout(0);

  expect([
    ...findNames(
      computer,
      computer.getLatestProgram(),
      new Set(),
      idOfColumnThatImIn
    ),
  ]).toMatchInlineSnapshot(`
    [
      {
        "autocompleteGroup": "variable",
        "blockId": "block-0",
        "kind": "table",
        "name": "Table1",
        "serializedType": {
          "columnNames": [],
          "columnTypes": [],
          "delegatesIndexTo": undefined,
          "indexName": "exprRef_block_0",
          "kind": "table",
        },
      },
      {
        "autocompleteGroup": "variable",
        "blockId": "block-2",
        "kind": "number",
        "name": "SomeVar",
        "serializedType": {
          "kind": "number",
          "unit": null,
        },
      },
      {
        "autocompleteGroup": "column",
        "blockId": "block-0",
        "columnId": "block-3",
        "inTable": "Table1",
        "isLocal": true,
        "kind": "column",
        "name": "Column2",
        "serializedType": {
          "cellType": {
            "kind": "number",
            "unit": null,
          },
          "indexedBy": "exprRef_block_0",
          "kind": "column",
        },
      },
    ]
  `);
});

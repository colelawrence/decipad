import { timeout } from '@decipad/utils';
import { computerWithBlocks } from '../testUtils';
import { findNames } from './findNames';

it('finds names', async () => {
  const computer = await computerWithBlocks(
    `This_name_was_autogenerated = "Do not show in autocomplete"`,
    `Table1 = { Hello = ["World"] }`,
    `Table1.Column2 = [1]`,
    `Table1.ColumnThatImIn = [1]`,
    `f(x) = x + 1`
  );

  const idOfColumnThatImIn = 'block-3';

  await timeout(400);

  expect([
    ...findNames(
      computer.computationRealm,
      computer.getLatestProgram().flatMap((block) => block.block ?? []),
      new Set(['This_name_was_autogenerated']),
      idOfColumnThatImIn
    ),
  ]).toMatchInlineSnapshot(`
    Array [
      Object {
        "blockId": "block-1",
        "kind": "variable",
        "name": "Table1",
        "type": Object {
          "columnNames": Array [
            "Hello",
          ],
          "columnTypes": Array [
            Object {
              "kind": "string",
            },
          ],
          "indexName": "Table1",
          "kind": "table",
        },
      },
      Object {
        "isLocal": true,
        "kind": "column",
        "name": "Hello",
        "type": Object {
          "kind": "string",
        },
      },
      Object {
        "isLocal": true,
        "kind": "column",
        "name": "Column2",
        "type": Object {
          "cellType": Object {
            "kind": "number",
            "unit": null,
          },
          "columnSize": "unknown",
          "indexedBy": "Table1",
          "kind": "column",
        },
      },
      Object {
        "blockId": "block-4",
        "kind": "function",
        "name": "f",
        "type": Object {
          "argCount": 1,
          "ast": null,
          "kind": "function",
          "name": "f",
        },
      },
    ]
  `);
});

import { runCode } from '..';

it('single items (non-col) are expanded to fit the currently known table size', async () => {
  expect(
    await testGrowTable({ startingColumns: ['A = [1, 2]'], newColumn: '1' })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "A",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 2n,
            "s": 1n,
          },
        ],
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
        ],
      ],
    }
  `);
});

it('accepts multi-d non-indexed columns as having the tables dimension on top', async () => {
  expect(
    await testGrowTable({ startingColumns: ['A = [[1], [2]]'], newColumn: '1' })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "A",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": Type {
              "anythingness": false,
              "atParentIndex": null,
              "cellType": null,
              "columnNames": null,
              "columnTypes": null,
              "date": null,
              "delegatesIndexTo": undefined,
              "errorCause": null,
              "functionArgCount": undefined,
              "functionName": undefined,
              "functionScopeDepth": undefined,
              "functionness": false,
              "indexName": null,
              "indexedBy": null,
              "node": null,
              "nothingness": false,
              "numberError": null,
              "numberFormat": null,
              "pending": false,
              "rangeOf": null,
              "rowCellNames": null,
              "rowCellTypes": null,
              "rowCount": undefined,
              "rowIndexName": null,
              "symbol": null,
              "type": "number",
              "unit": null,
              Symbol(immer-draftable): true,
            },
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": null,
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 1n,
              "s": 1n,
            },
          ],
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 2n,
              "s": 1n,
            },
          ],
        ],
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
        ],
      ],
    }
  `);
});

it('juggles dimensions so the tables dimension is on top', async () => {
  expect(
    await testGrowTable({
      startingColumns: ['Nums = [1, 2, 3]'],
      newColumn: 'Table.Nums + OtherTable.Nums',
    })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "Nums",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": 0,
            "cellType": Type {
              "anythingness": false,
              "atParentIndex": null,
              "cellType": null,
              "columnNames": null,
              "columnTypes": null,
              "date": null,
              "delegatesIndexTo": undefined,
              "errorCause": null,
              "functionArgCount": undefined,
              "functionName": undefined,
              "functionScopeDepth": undefined,
              "functionness": false,
              "indexName": null,
              "indexedBy": "OtherTable",
              "node": null,
              "nothingness": false,
              "numberError": null,
              "numberFormat": null,
              "pending": false,
              "rangeOf": null,
              "rowCellNames": null,
              "rowCellTypes": null,
              "rowCount": undefined,
              "rowIndexName": null,
              "symbol": null,
              "type": "number",
              "unit": null,
              Symbol(immer-draftable): true,
            },
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "OtherTable",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": null,
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 2n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 3n,
            "s": 1n,
          },
        ],
        Array [
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 101n,
              "s": 1n,
            },
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 201n,
              "s": 1n,
            },
          ],
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 102n,
              "s": 1n,
            },
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 202n,
              "s": 1n,
            },
          ],
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 103n,
              "s": 1n,
            },
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 203n,
              "s": 1n,
            },
          ],
        ],
      ],
    }
  `);
});

it('juggles dimensions so the tables dimension is on top (2)', async () => {
  expect(
    await testGrowTable({
      startingColumns: ['Nums = [1, 2, 3]'],
      newColumn: 'OtherTable.Nums + Table.Nums',
    })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "Nums",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": 0,
            "cellType": Type {
              "anythingness": false,
              "atParentIndex": null,
              "cellType": null,
              "columnNames": null,
              "columnTypes": null,
              "date": null,
              "delegatesIndexTo": undefined,
              "errorCause": null,
              "functionArgCount": undefined,
              "functionName": undefined,
              "functionScopeDepth": undefined,
              "functionness": false,
              "indexName": null,
              "indexedBy": "Table",
              "node": null,
              "nothingness": false,
              "numberError": null,
              "numberFormat": null,
              "pending": false,
              "rangeOf": null,
              "rowCellNames": null,
              "rowCellTypes": null,
              "rowCount": undefined,
              "rowIndexName": null,
              "symbol": null,
              "type": "number",
              "unit": null,
              Symbol(immer-draftable): true,
            },
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "OtherTable",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": null,
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 2n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 3n,
            "s": 1n,
          },
        ],
        Array [
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 101n,
              "s": 1n,
            },
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 201n,
              "s": 1n,
            },
          ],
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 102n,
              "s": 1n,
            },
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 202n,
              "s": 1n,
            },
          ],
          Array [
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 103n,
              "s": 1n,
            },
            DeciNumber {
              "d": 1n,
              "infinite": false,
              "n": 203n,
              "s": 1n,
            },
          ],
        ],
      ],
    }
  `);
});

it('juggles dimensions so the tables dimension is on top (3)', async () => {
  expect(
    await testGrowTable({
      startingColumns: ['Nums = [0.01]'],
      newColumn: 'OtherTable.Nums + Table.Nums + [1, 2, 3]',
    })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "Nums",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": 0,
            "cellType": Type {
              "anythingness": false,
              "atParentIndex": null,
              "cellType": Type {
                "anythingness": false,
                "atParentIndex": null,
                "cellType": null,
                "columnNames": null,
                "columnTypes": null,
                "date": null,
                "delegatesIndexTo": undefined,
                "errorCause": null,
                "functionArgCount": undefined,
                "functionName": undefined,
                "functionScopeDepth": undefined,
                "functionness": false,
                "indexName": null,
                "indexedBy": null,
                "node": null,
                "nothingness": false,
                "numberError": null,
                "numberFormat": null,
                "pending": false,
                "rangeOf": null,
                "rowCellNames": null,
                "rowCellTypes": null,
                "rowCount": undefined,
                "rowIndexName": null,
                "symbol": null,
                "type": "number",
                "unit": null,
                Symbol(immer-draftable): true,
              },
              "columnNames": null,
              "columnTypes": null,
              "date": null,
              "delegatesIndexTo": undefined,
              "errorCause": null,
              "functionArgCount": undefined,
              "functionName": undefined,
              "functionScopeDepth": undefined,
              "functionness": false,
              "indexName": null,
              "indexedBy": null,
              "node": null,
              "nothingness": false,
              "numberError": null,
              "numberFormat": null,
              "pending": false,
              "rangeOf": null,
              "rowCellNames": null,
              "rowCellTypes": null,
              "rowCount": undefined,
              "rowIndexName": null,
              "symbol": null,
              "type": null,
              "unit": null,
              Symbol(immer-draftable): true,
            },
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "OtherTable",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": null,
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 100n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
        ],
        Array [
          Array [
            Array [
              DeciNumber {
                "d": 100n,
                "infinite": false,
                "n": 10101n,
                "s": 1n,
              },
              DeciNumber {
                "d": 100n,
                "infinite": false,
                "n": 10201n,
                "s": 1n,
              },
              DeciNumber {
                "d": 100n,
                "infinite": false,
                "n": 10301n,
                "s": 1n,
              },
            ],
            Array [
              DeciNumber {
                "d": 100n,
                "infinite": false,
                "n": 20101n,
                "s": 1n,
              },
              DeciNumber {
                "d": 100n,
                "infinite": false,
                "n": 20201n,
                "s": 1n,
              },
              DeciNumber {
                "d": 100n,
                "infinite": false,
                "n": 20301n,
                "s": 1n,
              },
            ],
          ],
        ],
      ],
    }
  `);
});

it('usage of previous() does not affect length rules', async () => {
  expect(
    await testGrowTable({
      startingColumns: ['A = 1'],
      newColumn: 'previous(0) + 100',
    })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "A",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
        ],
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 100n,
            "s": 1n,
          },
        ],
      ],
    }
  `);

  expect(
    await testGrowTable({
      startingColumns: ['A = [1, 2]'],
      newColumn: 'previous(0) + 100',
    })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "A",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 2n,
            "s": 1n,
          },
        ],
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 100n,
            "s": 1n,
          },
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 200n,
            "s": 1n,
          },
        ],
      ],
    }
  `);

  expect(
    await testGrowTable({
      startingColumns: ['A = previous(0) + 1'],
      newColumn: 'previous(0) + 100',
    })
  ).toMatchInlineSnapshot(`
    Object {
      "type": Type {
        "anythingness": false,
        "atParentIndex": null,
        "cellType": null,
        "columnNames": Array [
          "A",
          "NewCol",
        ],
        "columnTypes": Array [
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
          Type {
            "anythingness": false,
            "atParentIndex": null,
            "cellType": null,
            "columnNames": null,
            "columnTypes": null,
            "date": null,
            "delegatesIndexTo": undefined,
            "errorCause": null,
            "functionArgCount": undefined,
            "functionName": undefined,
            "functionScopeDepth": undefined,
            "functionness": false,
            "indexName": null,
            "indexedBy": "Table",
            "node": null,
            "nothingness": false,
            "numberError": null,
            "numberFormat": null,
            "pending": false,
            "rangeOf": null,
            "rowCellNames": null,
            "rowCellTypes": null,
            "rowCount": undefined,
            "rowIndexName": null,
            "symbol": null,
            "type": "number",
            "unit": null,
            Symbol(immer-draftable): true,
          },
        ],
        "date": null,
        "delegatesIndexTo": "Table",
        "errorCause": null,
        "functionArgCount": undefined,
        "functionName": undefined,
        "functionScopeDepth": undefined,
        "functionness": false,
        "indexName": "Table",
        "indexedBy": null,
        "node": null,
        "nothingness": false,
        "numberError": null,
        "numberFormat": null,
        "pending": false,
        "rangeOf": null,
        "rowCellNames": null,
        "rowCellTypes": null,
        "rowCount": undefined,
        "rowIndexName": null,
        "symbol": null,
        "type": null,
        "unit": null,
        Symbol(immer-draftable): true,
      },
      "value": Array [
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 1n,
            "s": 1n,
          },
        ],
        Array [
          DeciNumber {
            "d": 1n,
            "infinite": false,
            "n": 100n,
            "s": 1n,
          },
        ],
      ],
    }
  `);
});

async function testGrowTable({
  startingColumns = [],
  newColumn,
}: {
  startingColumns?: string[];
  newColumn: string;
}) {
  const prefixCode = `
    OtherTable = {
      Nums = [100, 200]
    }
  `;
  const codeAllInOneExpression = `
    ${prefixCode}
    Table = {
      ${startingColumns.join(', ')}
      NewCol = ${newColumn}
    }
  `;
  const resultAllInOneTable = await runCode(codeAllInOneExpression).catch(
    String
  );

  // Evaluate adding one column
  const codeAddingOneColumn = `
    ${prefixCode}
    Table = {
      ${startingColumns.join(', ')}
    }
    Table.NewCol = ${newColumn}
    Table
  `;
  const resultAddingOneColumn = await runCode(codeAddingOneColumn).catch(
    String
  );
  expect(resultAddingOneColumn).toEqual(resultAllInOneTable);

  // Evaluate adding preceding columns one by one
  const codeColByCol = `
    ${prefixCode}
    Table = {}
    ${startingColumns.map((colAssign) => `Table.${colAssign}`).join('\n')}
    Table.NewCol = ${newColumn}
    Table
  `;
  const resultColByCol = await runCode(codeColByCol).catch(String);
  expect(resultColByCol).toEqual(resultAllInOneTable);

  return resultAllInOneTable;
}

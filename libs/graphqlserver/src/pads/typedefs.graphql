input PadInput {
  name: String
  icon: String
  status: String
  archived: Boolean
  section_id: String
  tags: [String!]
  isTemplate: Boolean
  canPublicDuplicate: Boolean
}

type SecretAccess {
  secret: String!
  permission: PermissionType!
  canComment: Boolean!
}

type PadConnectionParams {
  url: String!
  token: String!
}

enum Gist {
  AI
}

type Pad {
  id: ID!
  name: String!
  access: ResourceAccess!
  myPermissionType: PermissionType

  # Helps with resolvers and frontend.
  workspaceId: ID
  workspace: Workspace

  createdAt: DateTime!

  isPublic: Boolean

  # Has the user published to the internet?
  # And allow us to feature this notebook on our website.
  userAllowsPublicHighlighting: Boolean

  icon: String
  status: String
  archived: Boolean

  # Helps with resolvers and frontend.
  sectionId: ID
  section: Section

  # Gist | Is this notebook a gist, meaning the doesnt belong to anyone.
  # And can be claimed by any user.
  gist: Gist

  canPublicDuplicate: Boolean

  padConnectionParams: PadConnectionParams!
  initialState: String
  snapshots: [PadSnapshot!]!
  document: String!
  isTemplate: Boolean

  banned: Boolean
}

type PagedPadResult {
  items: [Pad!]!
  count: Int!
  hasNextPage: Boolean!
  cursor: String
}

type PadChanges {
  added: [Pad!]!
  removed: [ID!]!
  updated: [Pad!]!
}

type PadSnapshot {
  snapshotName: String!
  createdAt: DateTime
  updatedAt: DateTime
  data: String
  version: String
}

input CreateOrUpdateSnapshotInput {
  notebookId: ID!
  snapshotName: String!
  remoteState: String
  remoteVersion: String
  forceSearchIndexUpdate: Boolean
}

enum PUBLISH_STATE {
  PRIVATE
  # Anyone with a link can access the notebook.
  PUBLIC
  # Anyone with a link, but also featured on our website.
  PUBLICLY_HIGHLIGHTED
}

extend type Query {
  getPadById(id: ID!, snapshotName: String): Pad
  pads(workspaceId: ID!, page: PageInput!): PagedPadResult!
  padsSharedWithMe(page: PageInput!): PagedPadResult!
  featuredPad: Pad
  publiclyHighlightedPads(page: PageInput!): PagedPadResult!
}

extend type Mutation {
  createPad(workspaceId: ID!, pad: PadInput!, sectionId: ID): Pad!
  updatePad(id: ID!, pad: PadInput!): Pad!
  removePad(id: ID!): Boolean
  duplicatePad(id: ID!, targetWorkspace: ID!, document: String): Pad!
  importPad(workspaceId: ID!, source: String!): Pad!
  # fromWorkspaceId is only used for caching purposes.
  movePad(id: ID!, workspaceId: ID!, fromWorkspaceId: ID): Pad!

  setPadPublic(id: ID!, publishState: PUBLISH_STATE!): Boolean!

  sharePadWithRole(
    id: ID!
    roleId: ID!
    permissionType: PermissionType!
    canComment: Boolean!
  ): Boolean

  unsharePadWithRole(id: ID!, roleId: ID!): Boolean

  sharePadWithUser(
    id: ID!
    userId: ID!
    permissionType: PermissionType!
    canComment: Boolean!
  ): Pad

  unsharePadWithUser(id: ID!, userId: ID!): Pad

  sharePadWithEmail(
    id: ID!
    email: String!
    permissionType: PermissionType!
    canComment: Boolean!
  ): Pad!

  sharePadWithSecret(
    id: ID!
    permissionType: PermissionType!
    canComment: Boolean!
  ): String!

  unshareNotebookWithSecret(id: ID!, secret: String!): Boolean

  createOrUpdateSnapshot(params: CreateOrUpdateSnapshotInput!): Boolean!

  createSnapshot(notebookId: ID!): Boolean!

  claimNotebook(notebookId: ID!): Pad
}

extend type Subscription {
  padsChanged(workspaceId: ID!): PadChanges!
}

extend type Section {
  pads: [Pad!]!
}

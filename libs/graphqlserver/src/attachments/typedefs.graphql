type KeyValue {
  key: String!
  value: String!
}

type CreateAttachmentForm {
  url: String!
  handle: String!
  fields: [KeyValue!]!
}

union AttachmentResource = Pad | Workspace

enum AttachmentOwnership {
  PAD
  WORKSPACE
}

type Attachment {
  id: ID!
  fileName: String!
  fileType: String!
  fileSize: Int!
  userId: String
  uploadedBy: User
  createdAt: DateTime
  url: String!

  padId: String # DEPRECATE LATER.
  resourceId: String!
  resourceType: AttachmentOwnership!

  resource: AttachmentResource
}

extend type Mutation {
  getCreateAttachmentForm(
    padId: ID!
    fileName: String!
    fileType: String!
  ): CreateAttachmentForm!

  getCreateAttachmentFormWorkspace(
    workspaceId: ID!
    fileName: String!
    fileType: String!
  ): CreateAttachmentForm!

  addAttachmentToPad(attachmentId: ID!, padId: ID!): Attachment

  attachFileToPad(handle: ID!): Attachment
  attachFileToWorkspace(handle: ID!): Attachment

  removeAttachmentFromPad(attachmentId: ID!): Boolean

  # Return atachment resource so the frontend can do some caching
  removeAttachmentFromWorkspace(attachmentId: ID!): AttachmentResource

  undeleteAttachment(attachmentId: ID!): Boolean
}

extend type Pad {
  attachments: [Attachment!]!
}

extend type Workspace {
  attachments: [Attachment!]!
}

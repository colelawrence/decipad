openapi: 3.0.1
info:
  title: Create and modify a Decipad notebook
  description: >-
    Create and modify a Decipad notebook where you can build a numerical model,
    adding and manipulating text, tables, data views, sliders.

    Column names and variable names must not have spaces or weird characters in them.
  version: v1
servers:
  - url: http://localhost:3000
paths:
  /api/notebook/describeAllNotebookElements:
    post:
      summary: Retrieves a brief description of all notebook elements
      description: Retrieves a brief description of all notebook elements
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/describeAllNotebookElementsParameters'
      responses:
        '200':
          $ref: '#/components/responses/describeAllNotebookElementsResponse'
  /api/notebook/getElementById:
    post:
      summary: fetches an element from the notebook with the given id
      description: fetches an element from the notebook with the given id
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/getElementByIdParameters'
      responses:
        '200':
          $ref: '#/components/responses/getElementByIdResponse'
  /api/notebook/removeElement:
    post:
      summary: removes an entire existing element from the notebook
      description: removes an entire existing element from the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/removeElementParameters'
      responses:
        '200':
          $ref: '#/components/responses/removeElementResponse'
  /api/notebook/appendElement:
    post:
      summary: Appends any element to the end of the notebook
      description: Appends any element to the end of the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendElementParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendElementResponse'
  /api/notebook/appendText:
    post:
      summary: Appends markdown text to the end of the notebook
      description:
        splits the markdown into separate elements and inserts them one at
        a time in the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendTextParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendTextResponse'
  /api/notebook/changeText:
    post:
      summary: Changes the text in a text element
      description: Changes the text in a text element
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/changeTextParameters'
      responses:
        '200':
          $ref: '#/components/responses/changeTextResponse'
  /api/notebook/appendCodeLine:
    post:
      summary: appends a code line to the notebook
      description: appends a code line to the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendCodeLineParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendCodeLineResponse'
  /api/notebook/updateCodeLine:
    post:
      summary: changes an existing code line in the notebook
      description: changes an existing code line in the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/updateCodeLineParameters'
      responses:
        '200':
          $ref: '#/components/responses/updateCodeLineResponse'
  /api/notebook/appendEmptyTable:
    post:
      summary: appends an empty table to the end of the notebook
      description: appends an empty table to the end of the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendEmptyTableParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendEmptyTableResponse'
  /api/notebook/appendFilledTable:
    post:
      summary: appends a filled table to the end of the notebook
      description: appends a filled table to the end of the notebook
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendFilledTableParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendFilledTableResponse'
  /api/notebook/fillTable:
    post:
      summary: fills the table data
      description: fills the table data
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/fillTableParameters'
      responses:
        '200':
          $ref: '#/components/responses/fillTableResponse'
  /api/notebook/fillColumn:
    post:
      summary: fills the data on a column of the given table
      description: fills the data on a column of the given table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/fillColumnParameters'
      responses:
        '200':
          $ref: '#/components/responses/fillColumnResponse'
  /api/notebook/fillRow:
    post:
      summary: updates the data on a table row
      description: updates the data on a table row
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/fillRowParameters'
      responses:
        '200':
          $ref: '#/components/responses/fillRowResponse'
  /api/notebook/insertEmptyTableColumn:
    post:
      summary: inserts an empty column in an existing table
      description: inserts an empty column in an existing table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/insertEmptyTableColumnParameters'
      responses:
        '200':
          $ref: '#/components/responses/insertEmptyTableColumnResponse'
  /api/notebook/insertFilledTableColumn:
    post:
      summary: inserts a column in an existing table and fills it
      description: inserts a column in an existing table and fills it
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/insertFilledTableColumnParameters'
      responses:
        '200':
          $ref: '#/components/responses/insertFilledTableColumnResponse'
  /api/notebook/insertFormulaTableColumn:
    post:
      summary: inserts a calculated column to an existing table
      description: inserts a calculated column to an existing table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/insertFormulaTableColumnParameters'
      responses:
        '200':
          $ref: '#/components/responses/insertFormulaTableColumnResponse'
  /api/notebook/removeTableColumn:
    post:
      summary: removes a column from a table
      description: removes a column from a table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/removeTableColumnParameters'
      responses:
        '200':
          $ref: '#/components/responses/removeTableColumnResponse'
  /api/notebook/insertTableRow:
    post:
      summary: appends a row to the end of an existing table
      description: appends a row to the end of an existing table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/insertTableRowParameters'
      responses:
        '200':
          $ref: '#/components/responses/insertTableRowResponse'
  /api/notebook/removeTableRow:
    post:
      summary: removes a row from a table
      description: removes a row from a table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/removeTableRowParameters'
      responses:
        '200':
          $ref: '#/components/responses/removeTableRowResponse'
  /api/notebook/updateTableCell:
    post:
      summary: updates the content of a cell on a table
      description: updates the content of a cell on a table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/updateTableCellParameters'
      responses:
        '200':
          $ref: '#/components/responses/updateTableCellResponse'
  /api/notebook/appendDataView:
    post:
      summary:
        appends a data view (pivot table) that summarizes and analyzes the data
        on a given table
      description:
        appends a data view (pivot table) that summarizes and analyzes the
        data on a given table
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendDataViewParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendDataViewResponse'
  /api/notebook/appendSliderVariable:
    post:
      summary: appends a slider component
      description:
        appends a slider component into the notebook. The user will be able
        to change that value by playing with the slider. The value of the slider
        can be used in code using the given variable name.
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendSliderVariableParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendSliderVariableResponse'
  /api/notebook/updateSliderVariable:
    post:
      summary: changes a slider component
      description: changes an existing slider component.
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/updateSliderVariableParameters'
      responses:
        '200':
          $ref: '#/components/responses/updateSliderVariableResponse'
  /api/notebook/appendPlot:
    post:
      summary: appends a plot (or graph) to the notebook
      description:
        plots or graphs can be cartesian or pie charts (plot type "arc").
        Cartesian chart types can be bar, line, area, tick or point.
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendPlotParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendPlotResponse'
  /api/notebook/setPlotParams:
    post:
      summary: changes some of the parameters for a plot
      description: changes some of the parameters for a plot
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/setPlotParamsParameters'
      responses:
        '200':
          $ref: '#/components/responses/setPlotParamsResponse'
  /api/notebook/appendChoice:
    post:
      summary: appends a selection box for the user to choose one value
      description:
        appends a slider component into the notebook. The value of the
        selected option can be used in code using the given variable name.
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/appendChoiceParameters'
      responses:
        '200':
          $ref: '#/components/responses/appendChoiceResponse'
  /api/notebook/createNotebook:
    post:
      summary: removes an existing element from the notebook
      description: removes an existing element from the notebook
      requestBody:
        $ref: '#/components/requestBodies/createNotebookParameters'
      responses:
        '200':
          $ref: '#/components/responses/createNotebookResponse'
  /api/notebook/evalCode:
    post:
      summary: evaluates a snippet of decipad language code
      description: evaluates a snippet of decipad language code
      requestBody:
        $ref: '#/components/requestBodies/evalCodeParameters'
      responses:
        '200':
          $ref: '#/components/responses/evalCodeResponse'
  /api/notebook/generateCode:
    post:
      summary: generates Decipad language code from a prompt
      description: generates Decipad language code from a prompt
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/generateCodeParameters'
      responses:
        '200':
          $ref: '#/components/responses/generateCodeResponse'
components:
  schemas:
    CreateResult:
      type: object
      properties:
        createdElementId:
          type: string
        createdElementType:
          type: string
        createdElementName:
          type: string
    CreateResults:
      type: array
      items:
        $ref: '#/components/schemas/CreateResult'
    AnyElement:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/AnyElement'
  requestBodies:
    describeAllNotebookElementsParameters:
      content:
        application/json:
          schema: {}
      ref: describeAllNotebookElementsParameters
    getElementByIdParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              elementId:
                type: string
                description: the id of the element you want to retrieve
            required:
              - elementId
      ref: getElementByIdParameters
    removeElementParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              elementId:
                type: string
                description: the id of the element you want to remove
            required:
              - elementId
      ref: removeElementParameters
    appendElementParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              element:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  children:
                    type: array
                    items: {}
                required:
                  - id
                  - type
                  - children
                description: the new element getting appended to the notebook
            required:
              - element
      ref: appendElementParameters
    appendTextParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              markdownText:
                type: string
                description: markdown text to add to the notebook
            required:
              - markdownText
      ref: appendTextParameters
    changeTextParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              elementId:
                type: string
                description: the id of the text element you want to change
              newText:
                type: string
                description: the new content of the text element
            required:
              - elementId
              - newText
      ref: changeTextParameters
    appendCodeLineParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              variableName:
                type: string
                description:
                  the name of the variable to create. Should be unique and have no
                  spaces or weird characters.
              codeExpression:
                type: string
                description: decipad language code expression for this variable
            required:
              - variableName
              - codeExpression
      ref: appendCodeLineParameters
    updateCodeLineParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              codeLineId:
                type: string
                description: the id of the code line you need to change
              newVariableName:
                type: string
                description: the new variable name if it needs changing, or the current one.
              newCodeExpression:
                type: string
                description: the new decipad language code expression for this variable
            required:
              - codeLineId
              - newVariableName
              - newCodeExpression
      ref: updateCodeLineParameters
    appendEmptyTableParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableName:
                type: string
                description:
                  the name of the table you want to append. Should have no spaces or
                  special characters.
              columnNames:
                type: array
                items:
                  type: string
                  description: Column name. Should have no spaces or special characters.
                description: the names of the columns you want this table to have
              rowCount:
                type: integer
                description: the number of rows for this new table
            required:
              - tableName
              - columnNames
              - rowCount
      ref: appendEmptyTableParameters
    appendFilledTableParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableName:
                type: string
                description:
                  the name of the table you want to append. Should have no spaces or
                  special characters.
              columnNames:
                type: array
                items:
                  type: string
                  description: Column name. Should have no spaces or special characters.
                description: the column names for the table
              rowsData:
                type: array
                items:
                  type: array
                  items:
                    type: string
                  description: the data for a row
                description: the data for each row in an array for each row.
            required:
              - tableName
              - columnNames
              - rowsData
      ref: appendFilledTableParameters
    fillTableParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to fill
              rowsData:
                type: array
                items:
                  type: array
                  items:
                    type: string
                    description: a cell
                  description: a row of data
                description: the content of the table, row by row
            required:
              - tableId
              - rowsData
      ref: fillTableParameters
    fillColumnParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to fill
              columnName:
                type: string
                description: the name of the column you want to fill
              columnData:
                type: array
                items:
                  type: string
                description: the content of the column
            required:
              - tableId
              - columnName
              - columnData
      ref: fillColumnParameters
    fillRowParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to append a new row into
              rowIndex:
                type: integer
                description: the index of the row you want to change. starts at 0
              rowData:
                type: array
                items:
                  type: string
                description: the content of that row
            required:
              - tableId
              - rowIndex
              - rowData
      ref: fillRowParameters
    insertEmptyTableColumnParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to insert a column into
              columnName:
                type: string
                description:
                  the name of the new column. Must contain no spaces or weird
                  characters
            required:
              - tableId
              - columnName
      ref: insertEmptyTableColumnParameters
    insertFilledTableColumnParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table element
              columnName:
                type: string
                description: the name of the column. Must contain no spaces or weird characters
              cells:
                type: array
                items:
                  type: string
                description: the data for the column
            required:
              - tableId
              - columnName
              - cells
      ref: insertFilledTableColumnParameters
    insertFormulaTableColumnParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table element
              columnName:
                type: string
                description:
                  the name of the new column. Must contain no spaces or weird
                  characters
              formula:
                type: string
                description: the Decipad language formula for this new column
            required:
              - tableId
              - columnName
              - formula
      ref: insertFormulaTableColumnParameters
    removeTableColumnParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to remove a column from
              columnName:
                type: string
                description: the name of the new column you want to remove
            required:
              - tableId
              - columnName
      ref: removeTableColumnParameters
    insertTableRowParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to append a new row into
              row:
                type: array
                items:
                  type: string
                description: the content of that row
            required:
              - tableId
              - row
      ref: insertTableRowParameters
    removeTableRowParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to insert remove a row from
              rowIndex:
                type: integer
                description: the index of the row you want to remove. starts at 0
            required:
              - tableId
              - rowIndex
      ref: removeTableRowParameters
    updateTableCellParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to change
              columnName:
                type: string
                description: the name of the column you want to change
              rowIndex:
                type: integer
                description: the index of the row you want to change. starts at 0
              newCellContent:
                type: string
                description: the new content of the cell
            required:
              - tableId
              - columnName
              - rowIndex
              - newCellContent
      ref: updateTableCellParameters
    appendDataViewParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the table you want to use in the data view
              columns:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Column name
                    aggregation:
                      type: string
                      enum:
                        - average
                        - max
                        - median
                        - min
                        - span
                        - sum
                        - stddev
                      description: Aggregates the data from the column
                    round:
                      type: string
                      description:
                        'Optional. The number of decimal places it rounds to. Use negative
                        numbers to round to decimal points. Example: to round to
                        the thousanth use "-3". When using dates you can round
                        to "quarter", "year", "month" or "day"'
                  required:
                    - name
                description: the columns from the table you want to use to the data view
            required:
              - tableId
              - columns
      ref: appendDataViewParameters
    appendSliderVariableParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              variableName:
                type: string
                description:
                  the name of the variable for this slider. Should be unique and have
                  no spaces or weird characters.
              initialValue:
                type: number
                description: the initial value for this slider
              unit:
                type: string
                description:
                  the unit of the value. Can be something like "USD per month",
                  "GBP", "bananas", "bananas per minute", etc.
              min:
                type: number
                description: the minimum value this slider accepts
              max:
                type: number
                description: the maximum value this slider accepts
              step:
                type: number
                description: the step at which the user can change the value
            required:
              - variableName
              - initialValue
      ref: appendSliderVariableParameters
    updateSliderVariableParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              elementId:
                type: string
                description: the id of the slider element to change
              variableName:
                type: string
                description:
                  the new name of the variable for this slider. Should be unique and
                  have no spaces or weird characters.
              value:
                type: number
                description: the new value for this slider
              unit:
                type: string
                description: the new unit of the value
              min:
                type: number
                description: the new minimum value this slider accepts
              max:
                type: number
                description: the new maximum value this slider accepts
              step:
                type: number
                description: the new step at which the user can change the value
            required:
              - value
      ref: updateSliderVariableParameters
    appendPlotParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              tableId:
                type: string
                description: the id of the source table for this plot
              plotParams:
                type: object
                properties:
                  plotType:
                    type: string
                    enum:
                      - bar
                      - circle
                      - square
                      - tick
                      - line
                      - area
                      - point
                      - arc
                  xColumnName:
                    type: string
                  yColumnName:
                    type: string
                  sizeColumnName:
                    type: string
                  colorColumnName:
                    type: string
                  thetaColumnName:
                    type: string
                  y2ColumnName:
                    type: string
                required:
                  - plotType
                description: parameters for the plot
            required:
              - tableId
              - plotParams
      ref: appendPlotParameters
    setPlotParamsParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              polotId:
                type: string
                description: the id of the plot element to change
              newPlotParams:
                type: object
                properties:
                  plotType:
                    type: string
                    enum:
                      - bar
                      - circle
                      - square
                      - tick
                      - line
                      - area
                      - point
                      - arc
                  xColumnName:
                    type: string
                  yColumnName:
                    type: string
                  sizeColumnName:
                    type: string
                  colorColumnName:
                    type: string
                  thetaColumnName:
                    type: string
                  y2ColumnName:
                    type: string
                required:
                  - plotType
                description:
                  the parameters to change on the plot. Only include those that need
                  to change
            required:
              - polotId
              - newPlotParams
      ref: setPlotParamsParameters
    appendChoiceParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              variableName:
                type: string
                description:
                  the name of the variable for this slider. Should be unique and have
                  no spaces or weird characters.
              options:
                type: array
                items:
                  type: string
                  description: one available option
                description: the options available for the user
              selectedName:
                type: string
                description: contains the initially selected name from the given options.
            required:
              - variableName
              - options
      ref: appendChoiceParameters
    createNotebookParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
            required:
              - title
      ref: createNotebookParameters
    evalCodeParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
            required:
              - code
      ref: evalCodeParameters
    generateCodeParameters:
      content:
        application/json:
          schema:
            type: object
            properties:
              prompt:
                type: string
            required:
              - prompt
      ref: generateCodeParameters
  responses:
    describeAllNotebookElementsResponse:
      description: Ok
      content:
        application/json:
          schema:
            schema:
              type: object
              properties:
                description:
                  type: string
    getElementByIdResponse:
      description: Ok
      content:
        application/json:
          schema:
            schema:
              ref: '#/components/schemas/AnyElement'
    removeElementResponse:
      description: Ok
      content:
        application/json: {}
    appendElementResponse:
      description: Ok
      content:
        application/json: {}
    appendTextResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResults'
              notebookErrors:
                type: array
    changeTextResponse:
      description: Ok
      content:
        application/json: {}
    appendCodeLineResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    updateCodeLineResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    appendEmptyTableResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    appendFilledTableResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    fillTableResponse:
      description: Ok
      content:
        application/json: {}
    fillColumnResponse:
      description: Ok
      content:
        application/json: {}
    fillRowResponse:
      description: Ok
      content:
        application/json: {}
    insertEmptyTableColumnResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    insertFilledTableColumnResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    insertFormulaTableColumnResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    removeTableColumnResponse:
      description: Ok
      content:
        application/json: {}
    insertTableRowResponse:
      description: Ok
      content:
        application/json: {}
    removeTableRowResponse:
      description: Ok
      content:
        application/json: {}
    updateTableCellResponse:
      description: Ok
      content:
        application/json: {}
    appendDataViewResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    appendSliderVariableResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    updateSliderVariableResponse:
      description: Ok
      content:
        application/json: {}
    appendPlotResponse:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                schema:
                  ref: '#/components/schemas/CreateResult'
              notebookErrors:
                type: array
    setPlotParamsResponse:
      description: Ok
      content:
        application/json: {}
    appendChoiceResponse:
      description: Ok
      content:
        application/json:
          schema:
            schema:
              ref: '#/components/schemas/CreateResult'
    createNotebookResponse:
      description: Ok
      content:
        application/json:
          schema:
            schema:
              type: object
              properties:
                createdNotebookId:
                  type: string
                createdNotebookURL:
                  type: string
    evalCodeResponse:
      description: Ok
      content:
        application/json:
          schema:
            schema:
              type: object
              properties:
                error:
                  type: string
                errorLocation:
                  type: object
                  properties:
                    line:
                      type: number
                    column:
                      type: number
                result:
                  type: object
                  properties:
                    type:
                      type: object
                    value:
                      type: object
    generateCodeResponse:
      description: Ok
      content:
        application/json:
          schema:
            schema:
              type: object
              properties:
                error:
                  type: string
                errorLocation:
                  type: object
                  properties:
                    line:
                      type: number
                    column:
                      type: number
                blocks:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - expression
                          - assignment
                      expressionCode:
                        type: string
                      varname:
                        type: string
                      value:
                        type: string

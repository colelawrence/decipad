openapi: 3.0.1
info:
  title: Create and modify a Decipad notebook
  description: >-
    Create and modify a Decipad notebook where you can build a numerical model,
    adding and manipulating text, tables, data views, sliders.

    Column names and variable names must not have spaces or weird characters in them.
  version: v1
servers:
  - url: http://localhost:3000
paths:
  /api/notebook/describeAllNotebookElements:
    post:
      summary: Retrieves a brief description of all notebook elements
      description: Retrieves a brief description of all notebook elements
      operationId: describeAllNotebookElements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
  /api/notebook/getElementById:
    post:
      summary: fetches an element from the notebook with the given id
      description: fetches an element from the notebook with the given id
      operationId: getElementById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyElement'
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                elementId:
                  description: the id of the element you want to retrieve
                  required: true
                  schema:
                    type: string
  /api/notebook/removeElement:
    post:
      summary: removes an entire existing element from the notebook
      description: removes an entire existing element from the notebook
      operationId: removeElement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                elementId:
                  description: the id of the element you want to remove
                  required: true
                  schema:
                    type: string
  /api/notebook/appendElement:
    post:
      summary: Appends any element to the end of the notebook
      description: Appends any element to the end of the notebook
      operationId: appendElement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                element:
                  description: the new element getting appended to the notebook
                  schema:
                    $ref: '#/components/schemas/AnyElement'
                  required: true
  /api/notebook/appendText:
    post:
      summary: Appends markdown text to the end of the notebook
      description:
        splits the markdown into separate elements and inserts them one at
        a time in the notebook
      operationId: appendText
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                markdownText:
                  description: the name of the table you want to append
                  required: true
                  schema:
                    type: string
  /api/notebook/changeText:
    post:
      summary: Changes the text in a text element
      description: Changes the text in a text element
      operationId: changeText
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                elementId:
                  description: the id of the text element you want to change
                  required: true
                  schema:
                    type: string
                newText:
                  description: the new content of the text element
                  required: true
                  schema:
                    type: string
  /api/notebook/appendCodeLine:
    post:
      summary: appends a code line to the notebook
      description: appends a code line to the notebook
      operationId: appendCodeLine
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                variableName:
                  description:
                    the name of the variable to create. Should be unique and have no
                    spaces or weird characters.
                  required: true
                  schema:
                    type: string
                codeExpression:
                  description: decipad language code expression for this variable
                  required: true
                  schema:
                    type: string
  /api/notebook/updateCodeLine:
    post:
      summary: changes an existing code line in the notebook
      description: changes an existing code line in the notebook
      operationId: updateCodeLine
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                codeLineId:
                  description: the id of the code line you need to change
                  required: true
                  schema:
                    type: string
                newVariableName:
                  description: the new variable name if it needs changing, or the current one.
                  required: true
                  schema:
                    type: string
                newCodeExpression:
                  description: the new decipad language code expression for this variable
                  required: true
                  schema:
                    type: string
  /api/notebook/appendEmptyTable:
    post:
      summary: appends an empty table to the end of the notebook
      description: appends an empty table to the end of the notebook
      operationId: appendEmptyTable
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableName:
                  description:
                    the name of the table you want to append. Should have no spaces or
                    special characters.
                  required: true
                  schema:
                    type: string
                columnNames:
                  description: the name of the table you want to append
                  required: true
                  schema:
                    type: array
                    items:
                      type: string
                      description: Column name. Should have no spaces or special characters.
                rowCount:
                  description: the number of rows for this new table
                  required: true
                  schema:
                    type: integer
  /api/notebook/appendFilledTable:
    post:
      summary: appends a filled table to the end of the notebook
      description: appends a filled table to the end of the notebook
      operationId: appendFilledTable
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableName:
                  description:
                    the name of the table you want to append. Should have no spaces or
                    special characters.
                  required: true
                  schema:
                    type: string
                columnNames:
                  description: the column names for the table
                  required: true
                  schema:
                    type: array
                    items:
                      type: string
                      description: Column name. Should have no spaces or special characters.
                rowsData:
                  description: the data for each row in an array for each row.
                  required: true
                  schema:
                    type: array
                    items:
                      type: array
                      description: the data for a row
                      items:
                        type: string
  /api/notebook/fillTable:
    post:
      summary: fills the table data
      description: fills the table data
      operationId: fillTable
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to fill
                  required: true
                  schema:
                    type: string
                rowsData:
                  description: the content of the table, row by row
                  required: true
                  schema:
                    type: array
                    items:
                      description: a row of data
                      type: array
                      items:
                        description: a cell
                        type: string
  /api/notebook/fillColumn:
    post:
      summary: fills the data on a column of the given table
      description: fills the data on a column of the given table
      operationId: fillColumn
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to fill
                  required: true
                  schema:
                    type: string
                columnName:
                  description: the name of the column you want to fill
                  required: true
                  schema:
                    type: string
                columnData:
                  description: the content of the column
                  required: true
                  schema:
                    type: array
                    items:
                      description: a cell
                      type: string
  /api/notebook/fillRow:
    post:
      summary: updates the data on a table row
      description: updates the data on a table row
      operationId: fillRow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to append a new row into
                  required: true
                  schema:
                    type: string
                rowIndex:
                  description: the index of the row you want to change. starts at 0
                  required: true
                  schema:
                    type: integer
                rowData:
                  description: the content of that row
                  required: true
                  schema:
                    type: array
                    items:
                      type: string
  /api/notebook/insertEmptyTableColumn:
    post:
      summary: inserts an empty column in an existing table
      description: inserts an empty column in an existing table
      operationId: insertEmptyTableColumn
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to insert a column into
                  required: true
                  schema:
                    type: string
                columnName:
                  description:
                    the name of the new column. Must contain no spaces or weird
                    characters
                  required: true
                  schema:
                    type: string
  /api/notebook/insertFilledTableColumn:
    post:
      summary: inserts a column in an existing table and fills it
      description: inserts a column in an existing table and fills it
      operationId: insertFilledTableColumn
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table element
                  required: true
                  schema:
                    type: string
                columnName:
                  description: the name of the column. Must contain no spaces or weird characters
                  required: true
                  schema:
                    type: string
                cells:
                  description: the data for the column
                  required: true
                  schema:
                    type: array
                    items:
                      type: string
  /api/notebook/insertFormulaTableColumn:
    post:
      summary: inserts a calculated column to an existing table
      description: inserts a calculated column to an existing table
      operationId: insertFormulaTableColumn
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table element
                  required: true
                  schema:
                    type: string
                columnName:
                  description:
                    the name of the new column. Must contain no spaces or weird
                    characters
                  required: true
                  schema:
                    type: string
                formula:
                  description: the Decipad language formula for this new column
                  required: true
                  schema:
                    type: string
  /api/notebook/removeTableColumn:
    post:
      summary: removes a column from a table
      description: removes a column from a table
      operationId: removeTableColumn
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to remove a column from
                  required: true
                  schema:
                    type: string
                columnName:
                  description: the name of the new column you want to remove
                  required: true
                  schema:
                    type: string
  /api/notebook/insertTableRow:
    post:
      summary: appends a row to the end of an existing table
      description: appends a row to the end of an existing table
      operationId: insertTableRow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to append a new row into
                  required: true
                  schema:
                    type: string
                row:
                  description: the content of that row
                  required: true
                  schema:
                    type: array
                    items:
                      type: string
  /api/notebook/removeTableRow:
    post:
      summary: removes a row from a table
      description: removes a row from a table
      operationId: removeTableRow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to insert remove a row from
                  required: true
                  schema:
                    type: string
                rowIndex:
                  description: the index of the row you want to remove. starts at 0
                  required: true
                  schema:
                    type: number
  /api/notebook/updateTableCell:
    post:
      summary: updates the content of a cell on a table
      description: updates the content of a cell on a table
      operationId: updateTableCell
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to change
                  required: true
                  schema:
                    type: string
                columnName:
                  description: the name of the column you want to change
                  required: true
                  schema:
                    type: string
                rowIndex:
                  description: the index of the row you want to change. starts at 0
                  required: true
                  schema:
                    type: integer
                newCellContent:
                  description: the new content of the cell
                  required: true
                  schema:
                    type: string
  /api/notebook/appendDataView:
    post:
      summary:
        appends a data view (pivot table) that summarizes and analyzes the data
        on a given table
      description:
        appends a data view (pivot table) that summarizes and analyzes the
        data on a given table
      operationId: appendDataView
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the table you want to use in the data view
                  required: true
                  schema:
                    type: string
                columns:
                  description: the columns from the table you want to use to the data view
                  required: true
                  schema:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Column name
                        aggregation:
                          type: string
                          description: Optional. Aggregates the data from the column
                          enum:
                            - average
                            - max
                            - median
                            - min
                            - span
                            - sum
                            - stddev
                        round:
                          type: string
                          description:
                            'Optional. The number of decimal places it rounds to. Use negative
                            numbers to round to decimal points. Example: to
                            round to the thousanth use "-3". When using dates
                            you can round to "quarter", "year", "month" or
                            "day"'
  /api/notebook/appendSliderVariable:
    post:
      summary: appends a slider component
      description:
        appends a slider component into the notebook. The user will be able
        to change that value by playing with the slider. The value of the slider
        can be used in code using the given variable name.
      operationId: appendSliderVariable
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                variableName:
                  description:
                    the name of the variable for this slider. Should be unique and have
                    no spaces or weird characters.
                  required: true
                  schema:
                    type: string
                initialValue:
                  description: the initial value for this slider
                  required: true
                  schema:
                    type: number
                min:
                  description: the minimum value this slider accepts
                  required: false
                  schema:
                    type: number
                max:
                  description: the maximum value this slider accepts
                  required: false
                  schema:
                    type: number
                step:
                  description: the step at which the user can change the value
                  required: false
                  schema:
                    type: number
  /api/notebook/appendPlot:
    post:
      summary: appends a plot (or graph) to the notebook
      description:
        plots or graphs can be cartesian or pie charts (plot type "arc").
        Cartesian chart types can be bar, line, area, tick or point.
      operationId: appendPlot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  description: the id of the source table for this plot
                  required: true
                  schema:
                    type: string
                plotParams:
                  description: parameters for the plot
                  required: true
                  schema:
                    type: object
                    properties:
                      plotType:
                        type: string
                        enum:
                          - bar
                          - circle
                          - square
                          - tick
                          - line
                          - area
                          - point
                          - arc
                      xColumnName:
                        type: string
                      yColumnName:
                        type: string
                      sizeColumnName:
                        type: string
                      colorColumnName:
                        type: string
                      thetaColumnName:
                        type: string
                      y2ColumnName:
                        type: string
  /api/notebook/setPlotParams:
    post:
      summary: changes some of the parameters for a plot
      description: changes some of the parameters for a plot
      operationId: setPlotParams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notebookErrors:
                    type: array
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plotId:
                  description: the id of the plot element to change
                  required: true
                  schema:
                    type: string
                newPlotParams:
                  description:
                    the parameters to change on the plot. Only include those that need
                    to change
                  required: true
                  schema:
                    type: object
                    properties:
                      plotType:
                        type: string
                        enum:
                          - bar
                          - circle
                          - square
                          - tick
                          - line
                          - area
                          - point
                          - arc
                      xColumnName:
                        type: string
                      yColumnName:
                        type: string
                      sizeColumnName:
                        type: string
                      colorColumnName:
                        type: string
                      thetaColumnName:
                        type: string
                      y2ColumnName:
                        type: string
  /api/notebook/appendChoice:
    post:
      summary: appends a selection box for the user to choose one value
      description:
        appends a slider component into the notebook. The value of the
        selected option can be used in code using the given variable name.
      operationId: appendChoice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResult'
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                variableName:
                  description:
                    the name of the variable for this slider. Should be unique and have
                    no spaces or weird characters.
                  required: true
                  schema:
                    type: string
                options:
                  description: the options available for the user
                  required: true
                  schema:
                    type: array
                    items:
                      description: one available option.
                      type: string
                selectedName:
                  description: contains the initially selected name from the given options.
                  required: false
                  schema:
                    type: string
  /api/notebook/createNotebook:
    post:
      summary: removes an existing element from the notebook
      description: removes an existing element from the notebook
      operationId: createNotebook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  createdNotebookId:
                    type: string
                  createdNotebookURL:
                    type: string
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: the title of the notebook you want to create
                  required: true
                  schema:
                    type: string
  /api/notebook/evalCode:
    post:
      summary: evaluates a snippet of decipad language code
      description: evaluates a snippet of decipad language code
      operationId: evalCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  errorLocation:
                    type: object
                    properties:
                      line:
                        type: number
                      column:
                        type: number
                  result:
                    type: object
                    properties:
                      type:
                        type: object
                      value:
                        type: object
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  description: a bit of decipad language code
                  required: true
                  schema:
                    type: string
  /api/notebook/generateCode:
    post:
      summary: generates Decipad language code from a prompt
      description: generates Decipad language code from a prompt
      operationId: generateCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  errorLocation:
                    type: object
                    properties:
                      line:
                        type: number
                      column:
                        type: number
                  blocks:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - expression
                            - assignment
                        expressionCode:
                          type: string
                        varname:
                          type: string
                        value:
                          type: string
      parameters:
        - name: notebookId
          in: query
          description: the notebook id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  description: natural language description of the code to generate
                  required: true
                  schema:
                    type: string
components:
  schemas:
    CreateResult:
      type: object
      properties:
        createdElementId:
          type: string
        createdElementType:
          type: string
        createdElementName:
          type: string
    CreateResults:
      type: array
      items:
        type: object
        properties:
          createdElementId:
            type: string
          createdElementType:
            type: string
          createdElementName:
            type: string
    AnyElement:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/AnyElement'

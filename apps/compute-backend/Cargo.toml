[package]
name = "compute-backend"
version = "0.1.0"
authors = ["John Costa <johncosta027@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]


[dependencies]
wasm-bindgen = "0.2.84"
wasm-bindgen-test = "0.3"
chrono = "0.4"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }
js-sys = "0.3.69"
num = "0.4.3"
num-traits = "0.2"
csv = "1.3.0"
conv = "0.3.3"
criterion = { version = "0.5.1", optional = true}
flamegraph = "0.6.5"
getrandom = { version = "0.2", features = ["js"] }
rayon = { version = "1.5", default-features = false, optional = true}
num-bigint = "0.4.6"
num-integer = "0.1.46"
rand-unique = "0.2.2"
rand = "0.8.5"
serde_json = "1.0"
serde = { version=  "1.0.210", features = ["derive"] }
web-sys = { version = "0.3.70", features = ["Blob"] }
tsify-next = { version = "0.5.4", features = ["js"] }
thiserror = "1.0.63"
lazy_static = "1.5.0"
fraction = "0.15.3"

[target.'cfg(target_arch = "wasm32")'.dependencies]
rayon = {version = "1.5", default-features = false, optional = true}

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
criterion = {version = "0.5.1"}

[dev-dependencies]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"


[[bench]]
name = "sum_runtime"
harness = false

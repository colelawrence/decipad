{
  "version": 3,
  "sources": ["../../../lib/architect/queues/fileattachments-changes/index.ts", "../../../lib/queues/handler.ts", "../../../lib/s3/attachments.ts", "../../../lib/config.ts"],
  "sourcesContent": ["import assert from 'assert';\nimport handle from '../../../queues/handler';\nimport { remove } from '../../../s3/attachments';\n\nexport const handler = handle(attachmentsChangesHandler);\n\nasync function attachmentsChangesHandler(\n  event: TableRecordChanges<FileAttachmentRecord>\n) {\n  const { table, action, recordBeforeDelete } = event;\n\n  assert.equal(table, 'fileattachments');\n  if (action !== 'delete') {\n    return;\n  }\n\n  if (!recordBeforeDelete) {\n    return;\n  }\n\n  await remove(recordBeforeDelete.filename);\n}\n", "type Handler = (payload: any) => Promise<void>;\n\ntype Event = {\n  Records: Array<{\n    body: string;\n  }>;\n};\n\nexport default function queueHandler(handler: Handler) {\n  return async (event: Event) => {\n    for (const record of event.Records) {\n      const message = JSON.parse(record.body);\n      try {\n        await handler(message);\n      } catch (err) {\n        console.error('Error processing queue element: %j', message);\n        console.error(err);\n        // do not throw\n      }\n    }\n    return { statusCode: 200 };\n  };\n}\n", "import S3 from 'aws-sdk/clients/s3';\nimport { nanoid } from 'nanoid';\nimport { s3 as s3Config, app as appConfig } from '../config';\n\nconst { buckets, ...config } = s3Config();\nconst options = {\n  ...config,\n  sslEnabled: process.env.NODE_ENV !== 'testing',\n  s3ForcePathStyle: true,\n  signatureVersion: 'v4',\n};\n\nconst Bucket = buckets.attachments;\nconst s3 = new S3(options);\n\nconst {\n  limits: {\n    maxAttachmentSize,\n    maxAttachmentUploadTokenExpirationSeconds,\n    maxAttachmentDownloadTokenExpirationSeconds,\n  },\n} = appConfig();\n\nexport async function getCreateAttachmentForm(\n  padId: string,\n  fileName: string,\n  fileType: string\n): Promise<CreateAttachmentFormResult> {\n  return new Promise((resolve, reject) => {\n    const key = `/pads/${padId}/${fileName}/${nanoid()}`;\n    try {\n      s3.createPresignedPost(\n        {\n          Bucket,\n          Fields: {\n            key,\n            'Content-Type': fileType,\n          },\n          Expires: maxAttachmentUploadTokenExpirationSeconds,\n          Conditions: [['content-length-range', 0, maxAttachmentSize]],\n        },\n        (err, data) => {\n          if (err) {\n            return reject(err);\n          }\n          resolve({\n            ...data,\n            fileName: key,\n            fileType,\n          });\n        }\n      );\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nexport async function getSize(fileName: string): Promise<number> {\n  return new Promise((resolve, reject) => {\n    if (fileName.startsWith('/')) {\n      fileName = fileName.substring(1);\n    }\n    try {\n      s3.headObject(\n        {\n          Bucket,\n          Key: fileName,\n        },\n        (err, data) => {\n          if (err) {\n            return reject(err);\n          }\n          if (!data) {\n            throw new Error(`Attachment file with name ${fileName} not found`);\n          }\n          resolve(data.ContentLength!);\n        }\n      );\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nexport async function getURL(fileName: string): Promise<string> {\n  if (fileName.startsWith('/')) {\n    fileName = fileName.substring(1);\n  }\n  return await s3.getSignedUrlPromise('getObject', {\n    Bucket,\n    Key: fileName,\n    Expires: maxAttachmentDownloadTokenExpirationSeconds,\n  });\n}\n\nexport async function remove(fileName: string) {\n  if (fileName.startsWith('/')) {\n    fileName = fileName.substring(1);\n  }\n\n  await s3.deleteObject({\n    Bucket,\n    Key: fileName,\n  });\n}\n", "import { fail } from 'assert';\n\nexport function s3() {\n  return {\n    endpoint: env('DECI_S3_ENDPOINT', 'localhost:4568'),\n    accessKeyId: env('DECI_S3_ACCESS_KEY_ID'),\n    secretAccessKey: env('DECI_S3_SECRET_ACCESS_KEY'),\n    buckets: {\n      pads: env('DECI_S3_PADS_BUCKET'),\n      attachments: env('DECI_S3_ATTACHMENTS_BUCKET'),\n    },\n  };\n}\n\nexport function app() {\n  return {\n    urlBase: env('DECI_APP_URL_BASE', 'http://localhost:4200'),\n    limits: {\n      maxAttachmentSize: Number(env('DECI_MAX_ATTACHMENT_SIZE', '10485760')),\n      maxAttachmentUploadTokenExpirationSeconds: Number(\n        env('DECI_MAX_ATTACHMENT_UPLOAD_TOKEN_EXPIRATION_SECONDS', '600')\n      ),\n      maxAttachmentDownloadTokenExpirationSeconds: Number(\n        env('DECI_MAX_ATTACHMENT_DOWNLOAD_TOKEN_EXPIRATION_SECONDS', '600')\n      ),\n    },\n  };\n}\n\nexport function auth() {\n  return {\n    userKeyValidationExpirationSeconds: Number(\n      env('DECI_KEY_VALIDATION_EXPIRATION_SECONDS', '2592000')\n    ),\n    inviteExpirationSeconds: Number(\n      env('DECI_INVITE_EXPIRATION_SECONDS', '86400')\n    ),\n    jwt: {\n      secret: env('JWT_SECRET'),\n      signingKey: Buffer.from(\n        env('JWT_SIGNING_PRIVATE_KEY'),\n        'base64'\n      ).toString(),\n      maxAge: Number(env('JWT_MAX_AGE', '2592000')),\n    },\n    providers: {\n      github: {\n        clientId: env('GITHUB_CLIENT_ID'),\n        clientSecret: env('GITHUB_CLIENT_SECRET'),\n      },\n    },\n  };\n}\n\nexport function email() {\n  return {\n    ses: {\n      accessKeyId: env('DECI_SES_ACCESS_KEY_ID'),\n      secretAccessKey: env('DECI_SES_SECRET_ACCESS_KEY'),\n      region: env('AWS_REGION', 'eu-west-2'),\n    },\n    senderEmailAddress: env('DECI_FROM_EMAIL_ADDRESS'),\n  };\n}\n\nfunction env(\n  name: string,\n  defaultValue: string | undefined = undefined\n): string {\n  let value = process.env[name];\n  if (value == null) {\n    if (defaultValue !== undefined) {\n      value = defaultValue;\n    } else {\n      fail(`${name} env var must be defined`);\n    }\n  }\n  return value;\n}\n"],
  "mappings": "unCAAA,iCAAmB,qBCQJ,WAAsB,EAAkB,CACrD,MAAO,MAAO,IAAiB,CAC7B,OAAW,KAAU,GAAM,QAAS,CAClC,GAAM,GAAU,KAAK,MAAM,EAAO,MAClC,GAAI,CACF,KAAM,GAAQ,SACP,EAAP,CACA,QAAQ,MAAM,qCAAsC,GACpD,QAAQ,MAAM,IAIlB,MAAO,CAAE,WAAY,MAZD,oBCRxB,MAAe,iCCAf,MAAqB,qBAEd,YAAc,CACnB,MAAO,CACL,SAAU,EAAI,mBAAoB,kBAClC,YAAa,EAAI,yBACjB,gBAAiB,EAAI,6BACrB,QAAS,CACP,KAAM,EAAI,uBACV,YAAa,EAAI,gCAPP,UAYT,YAAe,CACpB,MAAO,CACL,QAAS,EAAI,oBAAqB,yBAClC,OAAQ,CACN,kBAAmB,OAAO,EAAI,2BAA4B,aAC1D,0CAA2C,OACzC,EAAI,sDAAuD,QAE7D,4CAA6C,OAC3C,EAAI,wDAAyD,UATrD,WAmDhB,WACE,EACA,EAAmC,OAC3B,CACR,GAAI,GAAQ,QAAQ,IAAI,GACxB,MAAI,IAAS,MACX,CAAI,IAAiB,OACnB,EAAQ,EAER,WAAK,GAAG,8BAGL,EAZA,WD7DT,GAA+B,OAAvB,YAAuB,EAAX,IAAW,EAAX,CAAZ,YACF,EAAU,OACX,GADW,CAEd,WAAY,QAAQ,IAAI,WAAa,UACrC,iBAAkB,GAClB,iBAAkB,OAGd,EAAS,EAAQ,YACjB,EAAK,GAAI,WAAG,GAEZ,CACJ,OAAQ,CACN,oBACA,4CACA,gDAEA,IA2EJ,iBAA6B,EAAkB,CAC7C,AAAI,EAAS,WAAW,MACtB,GAAW,EAAS,UAAU,IAGhC,KAAM,GAAG,aAAa,CACpB,SACA,IAAK,IAPa,cF5Ff,GAAM,GAAU,EAAO,GAE9B,iBACE,EACA,CACA,GAAM,CAAE,QAAO,SAAQ,sBAAuB,EAG9C,AADA,UAAO,MAAM,EAAO,mBAChB,IAAW,UAIX,EAAC,GAIL,KAAM,GAAO,EAAmB,WAdnB",
  "names": []
}

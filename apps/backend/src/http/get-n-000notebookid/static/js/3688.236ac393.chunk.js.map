{"version":3,"file":"static/js/3688.236ac393.chunk.js","mappings":"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","sources":["../../../node_modules/fuse.js/dist/fuse.esm.js","../../../node_modules/search-query-parser/index.js","../../../node_modules/search-query-parser/lib/search-query-parser.js"],"sourcesContent":["/**\n * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2022 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.6.2';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","module.exports = require('./lib/search-query-parser');\n","/*!\n * search-query-parser.js\n * Copyright(c) 2014-2019\n * MIT Licensed\n */\n\nexports.parse = function (string, options) {\n\n  // Set a default options object when none is provided\n  if (!options) {\n    options = {offsets: true};\n  } else {\n    // If options offsets was't passed, set it to true\n    options.offsets = (typeof options.offsets === 'undefined' ? true : options.offsets)\n  }\n\n  if (!string) {\n    string = '';\n  }\n\n  // When a simple string, return it\n  if (-1 === string.indexOf(':') && !options.tokenize) {\n    return string;\n  }\n  // When no keywords or ranges set, treat as a simple string\n  else if (!options.keywords && !options.ranges && !options.tokenize){\n    return string;\n  }\n  // Otherwise parse the advanced query syntax\n  else {\n    // Our object to store the query object\n    var query = {text: []};\n    // When offsets is true, create their array\n    if (options.offsets) {\n      query.offsets = [];\n    }\n    var exclusion = {};\n    var terms = [];\n    // Get a list of search terms respecting single and double quotes\n    var regex = /(\\S+:'(?:[^'\\\\]|\\\\.)*')|(\\S+:\"(?:[^\"\\\\]|\\\\.)*\")|(-?\"(?:[^\"\\\\]|\\\\.)*\")|(-?'(?:[^'\\\\]|\\\\.)*')|\\S+|\\S+:\\S+/g;\n    var match;\n    while ((match = regex.exec(string)) !== null) {\n      var term = match[0];\n      var sepIndex = term.indexOf(':');\n      if (sepIndex !== -1) {\n        var split = term.split(':'),\n            key = term.slice(0, sepIndex),\n            val = term.slice(sepIndex + 1);\n        // Strip surrounding quotes\n        val = val.replace(/^\\\"|\\\"$|^\\'|\\'$/g, '');\n        // Strip backslashes respecting escapes\n        val = (val + '').replace(/\\\\(.?)/g, function (s, n1) {\n          switch (n1) {\n          case '\\\\':\n            return '\\\\';\n          case '0':\n            return '\\u0000';\n          case '':\n            return '';\n          default:\n            return n1;\n          }\n        });\n        terms.push({\n          keyword: key,\n          value: val,\n          offsetStart: match.index,\n          offsetEnd: match.index + term.length\n        });\n      } else {\n        var isExcludedTerm = false;\n        if (term[0] === '-') {\n          isExcludedTerm = true;\n          term = term.slice(1);\n        }\n\n        // Strip surrounding quotes\n        term = term.replace(/^\\\"|\\\"$|^\\'|\\'$/g, '');\n        // Strip backslashes respecting escapes\n        term = (term + '').replace(/\\\\(.?)/g, function (s, n1) {\n          switch (n1) {\n          case '\\\\':\n            return '\\\\';\n          case '0':\n            return '\\u0000';\n          case '':\n            return '';\n          default:\n            return n1;\n          }\n        });\n\n        if (isExcludedTerm) {\n          if (exclusion['text']) {\n            if (exclusion['text'] instanceof Array) {\n              exclusion['text'].push(term);\n            } else {\n              exclusion['text'] = [exclusion['text']];\n              exclusion['text'].push(term);\n            }\n          } else {\n            // First time seeing an excluded text term\n            exclusion['text'] = term;\n          }\n        } else {\n          terms.push({\n            text: term,\n            offsetStart: match.index,\n            offsetEnd: match.index + term.length\n          });\n        }\n      }\n    }\n    // Reverse to ensure proper order when pop()'ing.\n    terms.reverse();\n    // For each search term\n    var term;\n    while (term = terms.pop()) {\n      // When just a simple term\n      if (term.text) {\n        // We add it as pure text\n        query.text.push(term.text);\n        // When offsets is true, push a new offset\n        if (options.offsets) {\n          query.offsets.push(term);\n        }\n      }\n      // We got an advanced search syntax\n      else {\n        var key = term.keyword;\n        // Check if the key is a registered keyword\n        options.keywords = options.keywords || [];\n        var isKeyword = false;\n        var isExclusion = false;\n        if (!/^-/.test(key)) {\n            isKeyword = !(-1 === options.keywords.indexOf(key));\n        } else  if (key[0] === '-') {\n            var _key = key.slice(1);\n            isKeyword = !(-1 === options.keywords.indexOf(_key))\n            if (isKeyword) {\n                key = _key;\n                isExclusion = true;\n            }\n        }\n\n        // Check if the key is a registered range\n        options.ranges = options.ranges || [];\n        var isRange = !(-1 === options.ranges.indexOf(key));\n        // When the key matches a keyword\n        if (isKeyword) {\n          // When offsets is true, push a new offset\n          if (options.offsets) {\n            query.offsets.push({\n              keyword: key,\n              value: term.value,\n              offsetStart: isExclusion ? term.offsetStart + 1 : term.offsetStart,\n              offsetEnd: term.offsetEnd\n            });\n          }\n\n          var value = term.value;\n          // When value is a thing\n          if (value.length) {\n            // Get an array of values when several are there\n            var values = value.split(',');\n            if (isExclusion) {\n              if (exclusion[key]) {\n                // ...many times...\n                if (exclusion[key] instanceof Array) {\n                  // ...and got several values this time...\n                  if (values.length > 1) {\n                    // ... concatenate both arrays.\n                    exclusion[key] = exclusion[key].concat(values);\n                  }\n                  else {\n                    // ... append the current single value.\n                    exclusion[key].push(value);\n                  }\n                }\n                // We saw that keyword only once before\n                else {\n                  // Put both the current value and the new\n                  // value in an array\n                  exclusion[key] = [exclusion[key]];\n                  exclusion[key].push(value);\n                }\n              }\n              // First time we see that keyword\n              else {\n                // ...and got several values this time...\n                if (values.length > 1) {\n                  // ...add all values seen.\n                  exclusion[key] = values;\n                }\n                // Got only a single value this time\n                else {\n                  // Record its value as a string\n                  if (options.alwaysArray) {\n                    // ...but we always return an array if option alwaysArray is true\n                    exclusion[key] = [value];\n                  } else {\n                    // Record its value as a string\n                    exclusion[key] = value;\n                  }\n                }\n              }\n            } else {\n              // If we already have seen that keyword...\n              if (query[key]) {\n                // ...many times...\n                if (query[key] instanceof Array) {\n                  // ...and got several values this time...\n                  if (values.length > 1) {\n                    // ... concatenate both arrays.\n                    query[key] = query[key].concat(values);\n                  }\n                  else {\n                    // ... append the current single value.\n                    query[key].push(value);\n                  }\n                }\n                // We saw that keyword only once before\n                else {\n                  // Put both the current value and the new\n                  // value in an array\n                  query[key] = [query[key]];\n                  query[key].push(value);\n                }\n              }\n              // First time we see that keyword\n              else {\n                // ...and got several values this time...\n                if (values.length > 1) {\n                  // ...add all values seen.\n                  query[key] = values;\n                }\n                // Got only a single value this time\n                else {\n                  if (options.alwaysArray) {\n                    // ...but we always return an array if option alwaysArray is true\n                    query[key] = [value];\n                  } else {\n                    // Record its value as a string\n                    query[key] = value;\n                  }\n                }\n              }\n            }\n          }\n        }\n        // The key allows a range\n        else if (isRange) {\n          // When offsets is true, push a new offset\n          if (options.offsets) {\n            query.offsets.push(term);\n          }\n\n          var value = term.value;\n          // Range are separated with a dash\n          var rangeValues = value.split('-');\n          // When both end of the range are specified\n          // keyword:XXXX-YYYY\n          query[key] = {};\n          if (2 === rangeValues.length) {\n            query[key].from = rangeValues[0];\n            query[key].to = rangeValues[1];\n          }\n          // When pairs of ranges are specified\n          // keyword:XXXX-YYYY,AAAA-BBBB\n          else if (!rangeValues.length % 2) {\n          }\n          // When only getting a single value,\n          // or an odd number of values\n          else {\n            query[key].from = value;\n          }\n        }\n        else {\n          // We add it as pure text\n          var text = term.keyword + ':' + term.value;\n          query.text.push(text);\n\n          // When offsets is true, push a new offset\n          if (options.offsets) {\n            query.offsets.push({\n              text: text,\n              offsetStart: term.offsetStart,\n              offsetEnd: term.offsetEnd\n            });\n          }\n        }\n      }\n    }\n\n    // Concatenate all text terms if any\n    if (query.text.length) {\n      if (!options.tokenize) {\n        query.text = query.text.join(' ').trim();\n      }\n    }\n    // Just remove the attribute text when it's empty\n    else {\n      delete query.text;\n    }\n\n    // Return forged query object\n    query.exclude = exclusion;\n    return query;\n  }\n\n};\n\nexports.stringify = function (queryObject, options, prefix) {\n\n  // Set a default options object when none is provided\n  if (!options) {\n    options = {offsets: true};\n  }\n\n  // If the query object is falsy we can just return an empty string\n  if (!queryObject) {\n    return '';\n  }\n\n  // If the query object is already a string, we can return it immediately\n  if (typeof queryObject === 'string') {\n    return queryObject;\n  }\n\n  // If the query object is an array, we can return it concatenated with a space\n  if (Array.isArray(queryObject)) {\n    return queryObject.join(' ');\n  }\n\n  // If the query object does not have any keys, we can return an empty string\n  if (!Object.keys(queryObject).length) {\n    return '';\n  }\n\n  // If the query object contains only text which is a string, we can return it immediately\n  if (Object.keys(queryObject).length === 3 && !!queryObject.text && !!queryObject.offsets && !!queryObject.exclude && typeof queryObject.text === 'string') {\n    return queryObject.text;\n  }\n\n  // We will use a prefix for the exclude syntax later one\n  if (!prefix) {\n    prefix = ''\n  }\n\n  // Helpers\n  var addQuotes = function (string) {\n    return string.indexOf(' ') > - 1 ? JSON.stringify(string) : string;\n  };\n  var addPrefix = function (string) {\n    return prefix + string;\n  };\n\n  // Keep track of all single parts in this array\n  var parts = [];\n\n  // Text\n  if (queryObject.text) {\n    var value = [];\n    if (typeof queryObject.text === 'string') {\n      value.push(queryObject.text);\n    } else {\n      value.push.apply(value, queryObject.text);\n    }\n\n    if (value.length > 0) {\n      parts.push(value.map(addQuotes).map(addPrefix).join(' '));\n    }\n  }\n\n  // Keywords\n  if (options.keywords) {\n    options.keywords.forEach(function (keyword) {\n      if (!queryObject[keyword]) {\n        return\n      }\n\n      var value = [];\n      if (typeof queryObject[keyword] === 'string') {\n        value.push(queryObject[keyword]);\n      } else {\n        value.push.apply(value, queryObject[keyword]);\n      }\n\n      if (value.length > 0) {\n        parts.push(addPrefix(keyword + ':' + value.map(addQuotes).join(',')));\n      }\n    });\n  }\n\n  // Ranges\n  if (options.ranges) {\n    options.ranges.forEach(function (range) {\n      if (!queryObject[range]) {\n        return\n      }\n\n      var value = queryObject[range].from;\n      var to = queryObject[range].to;\n      if (to) {\n        value = value + '-' + to;\n      }\n\n      if (value) {\n        parts.push(addPrefix(range + ':' + value));\n      }\n    });\n  }\n\n  // Exclude\n  if (queryObject.exclude) {\n    if (Object.keys(queryObject.exclude).length > 0) {\n      parts.push(exports.stringify(queryObject.exclude, options, '-'));\n    }\n  }\n\n  return parts.join(' ');\n\n};\n"],"names":["isArray","value","Array","getTag","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","undefined","isBlank","trim","length","Object","prototype","toString","call","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","hasOwn","hasOwnProperty","KeyStore","constructor","keys","this","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","get","keyId","toJSON","JSON","stringify","path","src","getFn","createKeyPath","createKeyId","Error","name","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","list","arr","deepGet","index","result","baseToString","i","len","ignoreLocation","ignoreFieldNorm","fieldNormWeight","SPACE","FuseIndex","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","createPatternAlphabet","mask","char","charAt","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","text","isMatch","allIndices","totalScore","hasMatches","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","binMin","binMid","floor","finish","bitArr","j","charMatch","search","BaseMatch","static","getMatch","multiRegex","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","type","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","parseQuery","_","numMatches","qLen","pLen","registeredSearchers","createSearcher","searcherClass","condition","LogicalOperator","KeyType","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","Number","EPSILON","computeScore","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","parseIndex","config","register","module","exports","string","offsets","tokenize","keywords","ranges","exclusion","terms","regex","exec","term","sepIndex","val","replace","s","n1","keyword","offsetStart","offsetEnd","isExcludedTerm","reverse","isKeyword","isExclusion","test","_key","isRange","values","concat","alwaysArray","rangeValues","from","to","exclude","queryObject","prefix","addQuotes","addPrefix","parts","apply","range"],"sourceRoot":""}
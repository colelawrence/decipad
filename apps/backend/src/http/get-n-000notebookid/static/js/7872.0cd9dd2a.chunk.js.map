{"version":3,"file":"static/js/7872.0cd9dd2a.chunk.js","mappings":"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","sources":["../../editor-types/src/mark-kinds.ts","../../editor-types/src/value.ts","../../editor-types/src/utils.ts","../../editor-types/src/index.ts","../../slate-yjs/src/plugin/yjsEditor.ts","../../slate-yjs/src/plugin/cursorEditor.ts","../../y-indexeddb/src/y-indexeddb.ts","../../y-websocket/src/receive/index.ts","../../y-websocket/src/messageHandlers.ts","../../y-websocket/src/y-websocket.ts","../../support/src/isSupportedBrowser.ts","../../support/src/supports.ts","../../docsync/src/docSyncEditor.ts","../../docsync/src/utils/ensureInitialDocument.ts","../../docsync/src/setupUndo.ts","../../docsync/src/asLocalEditor.ts","../../docsync/src/docsync.ts","../../live-connect/src/notebook/liveConnections.ts","../../live-connect/src/notebook/startNotebook.ts"],"sourcesContent":["export {\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_HIGHLIGHT,\n  MARK_ITALIC,\n  MARK_STRIKETHROUGH,\n  MARK_UNDERLINE,\n} from '@udecode/plate';\n\nexport const MARK_MAGICNUMBER = 'magicnumberz';\nexport const MARK_SPOILER = 'spoiler';\n","import { TElement, TImageElement, TMediaEmbedElement } from '@udecode/plate';\nimport { Unit } from '@decipad/language';\nimport {\n  DEPRECATED_ELEMENT_CODE_BLOCK,\n  DEPRECATED_ELEMENT_TABLE_INPUT,\n  ElementKind,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_CODE_LINE,\n  ELEMENT_COLUMNS,\n  ELEMENT_EVAL,\n  ELEMENT_FETCH,\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  ELEMENT_IMAGE,\n  ELEMENT_INLINE_NUMBER,\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_LINK,\n  ELEMENT_MEDIA_EMBED,\n  ELEMENT_OL,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_PLOT,\n  ELEMENT_TABLE,\n  ELEMENT_UL,\n  EvalElement,\n  InteractiveElement,\n  MarkKind,\n} from '.';\nimport {\n  DataViewCaptionElement,\n  DataViewElement,\n  DataViewHeader,\n  DataViewHeaderRowElement,\n  DataViewNameElement,\n} from './data-view';\nimport {\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_VARNAME,\n  ELEMENT_DATA_VIEW,\n  ELEMENT_DRAW,\n  ELEMENT_IMPORT,\n  ELEMENT_LIVE_CONNECTION,\n  ELEMENT_SMART_REF,\n  ELEMENT_STRUCTURED_IN,\n  ELEMENT_STRUCTURED_IN_CHILD,\n  ELEMENT_VARIABLE_DEF,\n} from './element-kinds';\nimport {\n  CaptionElement,\n  DisplayElement,\n  DropdownElement,\n  ExpressionElement,\n  LiveConnectionVarNameElement,\n  SliderElement,\n  VariableDefinitionElement,\n} from './interactive-elements';\nimport {\n  DeprecatedTableInputElement,\n  TableCaptionElement,\n  TableCellElement,\n  TableColumnFormulaElement,\n  TableElement,\n  TableHeaderElement,\n  TableHeaderRowElement,\n  TableRowElement,\n  TableVariableNameElement,\n} from './table';\nimport { DrawElement, DrawElements, DrawElementDescendant } from './draw';\n\nexport type { DrawElement, DrawElements, DrawElementDescendant };\n\n// Defining specific elements\n\nexport interface BaseElement extends TElement {\n  type: ElementKind;\n  id: string;\n  isHidden?: boolean;\n}\n\n// Headings\nexport interface H1Element extends BaseElement {\n  type: typeof ELEMENT_H1;\n  children: PlainTextChildren;\n}\nexport interface H2Element extends BaseElement {\n  type: typeof ELEMENT_H2;\n  children: PlainTextChildren;\n}\nexport interface H3Element extends BaseElement {\n  type: typeof ELEMENT_H3;\n  children: PlainTextChildren;\n}\n\n// Text blocks\nexport interface ParagraphElement extends BaseElement {\n  type: typeof ELEMENT_PARAGRAPH;\n  children: InlineChildren;\n}\nexport interface BlockquoteElement extends BaseElement {\n  type: typeof ELEMENT_BLOCKQUOTE;\n  children: InlineChildren;\n}\nexport interface CalloutElement extends BaseElement {\n  type: typeof ELEMENT_CALLOUT;\n  children: InlineChildren;\n  icon?: string;\n  color?: string;\n}\nexport interface DividerElement extends BaseElement {\n  type: typeof ELEMENT_HR;\n  children: [EmptyText];\n}\n\n// Media Blocks\nexport interface ImageElement extends TImageElement, BaseElement {\n  type: typeof ELEMENT_IMAGE;\n  children: [EmptyText];\n}\nexport interface MediaEmbedElement extends TMediaEmbedElement, BaseElement {\n  type: typeof ELEMENT_MEDIA_EMBED;\n  children: [EmptyText];\n}\n\n// Code\nexport interface CodeLineElement extends BaseElement {\n  type: typeof ELEMENT_CODE_LINE;\n  children: Array<PlainText | SmartRefElement>;\n}\nexport interface CodeLineV2Element extends BaseElement {\n  type: typeof ELEMENT_CODE_LINE_V2;\n  unit?: '%' | Unit[];\n  children: [StructuredVarnameElement, CodeLineV2ElementCode];\n}\nexport interface StructuredVarnameElement extends BaseElement {\n  type: typeof ELEMENT_STRUCTURED_VARNAME;\n  children: [PlainText];\n}\nexport interface CodeLineV2ElementCode extends BaseElement {\n  type: typeof ELEMENT_CODE_LINE_V2_CODE;\n  children: Array<PlainText | SmartRefElement>;\n}\nexport interface DeprecatedCodeBlockElement extends BaseElement {\n  type: typeof DEPRECATED_ELEMENT_CODE_BLOCK;\n  children: Array<CodeLineElement>;\n}\n\nexport interface StructuredInputElement extends BaseElement {\n  type: typeof ELEMENT_STRUCTURED_IN;\n  unit?: string | Unit[];\n  children: [StructuredVarnameElement, StructuredInputElementChildren];\n}\n\nexport interface StructuredInputElementChildren extends BaseElement {\n  type: typeof ELEMENT_STRUCTURED_IN_CHILD;\n  children: [PlainText];\n}\n\n// Lists\nexport interface UnorderedListElement extends BaseElement {\n  type: typeof ELEMENT_UL;\n  children: Array<ListItemElement>;\n}\nexport interface OrderedListElement extends BaseElement {\n  type: typeof ELEMENT_OL;\n  children: Array<ListItemElement>;\n}\n\nexport type ListElement = UnorderedListElement | OrderedListElement;\n\nexport interface ListItemElement extends BaseElement {\n  type: typeof ELEMENT_LI;\n  children: [ListItemContentElement];\n}\nexport interface ListItemContentElement extends BaseElement {\n  type: typeof ELEMENT_LIC;\n  children: InlineChildren;\n}\n\n// Inline\nexport interface LinkElement extends BaseElement {\n  type: typeof ELEMENT_LINK;\n  children: Array<RichText>;\n  url: string;\n}\n\nexport interface InlineNumberElement extends BaseElement {\n  type: typeof ELEMENT_INLINE_NUMBER;\n  blockId: string;\n  children: [EmptyText];\n}\n\nexport interface SmartRefElement extends BaseElement {\n  type: typeof ELEMENT_SMART_REF;\n  lastSeenVariableName?: string;\n  blockId: string;\n  children: [PlainText];\n}\n\n// Layout\nexport interface ColumnsElement extends BaseElement {\n  type: typeof ELEMENT_COLUMNS;\n  children: [\n    VariableDefinitionElement,\n    VariableDefinitionElement,\n    ...Array<VariableDefinitionElement>\n  ];\n}\n\n// Overall node types\n\nexport type EmptyText = {\n  text: '';\n};\nexport type PlainText = EmptyText | { text: string };\nexport type RichText = PlainText & Partial<Record<MarkKind, true>>;\nexport type Text = PlainText | RichText;\n\nexport type BlockElement =\n  // Headings\n  | H1Element\n  | H2Element\n  | H3Element\n  // Text blocks\n  | ParagraphElement\n  | BlockquoteElement\n  | CalloutElement\n  | DividerElement\n  // Media\n  | ImageElement\n  | MediaEmbedElement\n  | DrawElement\n  // Code\n  | DeprecatedCodeBlockElement\n  | CodeLineElement\n  | CodeLineV2Element\n  // Lists\n  | UnorderedListElement\n  | OrderedListElement\n  | ListItemElement\n  | ListItemContentElement\n  // Layout\n  | ColumnsElement\n  // Special elements\n  | InteractiveElement\n  | LiveConnectionVarNameElement\n  // Table elements\n  | DeprecatedTableInputElement\n  | TableElement\n  | TableCaptionElement\n  | TableVariableNameElement\n  | TableRowElement\n  | TableHeaderRowElement\n  | TableHeaderElement\n  | TableCellElement\n  | ExpressionElement\n  | DisplayElement\n  | CaptionElement\n  | SliderElement\n  | DataViewElement\n  | DataViewHeaderRowElement\n  | DataViewHeader\n  | DropdownElement\n  | StructuredInputElement\n  | StructuredInputElementChildren\n  | TableColumnFormulaElement\n  // Draw Elements\n  | DrawElementDescendant;\n\ntype InlineElement = LinkElement | InlineNumberElement | SmartRefElement;\n\nexport type MyValue = [\n  H1Element,\n  ...Array<\n    | H1Element\n    | H2Element\n    | H3Element\n    | ParagraphElement\n    | BlockquoteElement\n    | InlineNumberElement\n    | SmartRefElement\n    | CalloutElement\n    | CodeLineElement\n    | CodeLineV2Element\n    | StructuredInputElement\n    | DividerElement\n    | EvalElement\n    | ImageElement\n    | MediaEmbedElement\n    | DrawElement\n    | DeprecatedCodeBlockElement\n    | UnorderedListElement\n    | OrderedListElement\n    | ColumnsElement\n    | InteractiveElement\n    | DataViewElement\n  >\n];\n\nexport type Document = {\n  children: MyValue;\n};\n\ntype InlineDescendant = InlineElement | RichText;\n\ntype InlineChildren = Array<InlineDescendant>;\ntype PlainTextChildren = [PlainText];\n\nexport type AnyElement =\n  | BlockElement\n  | InlineElement\n  | CodeLineV2ElementCode\n  | StructuredVarnameElement\n  | DataViewCaptionElement\n  | DataViewNameElement;\n\nexport const topLevelBlockKinds: string[] = [\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_CALLOUT,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_IMAGE,\n  DEPRECATED_ELEMENT_CODE_BLOCK, // Legacy\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_STRUCTURED_IN,\n  ELEMENT_UL,\n  ELEMENT_OL,\n  DEPRECATED_ELEMENT_TABLE_INPUT,\n  ELEMENT_TABLE,\n  ELEMENT_DATA_VIEW,\n  ELEMENT_FETCH,\n  ELEMENT_PLOT,\n  ELEMENT_COLUMNS,\n  ELEMENT_EVAL,\n  ELEMENT_VARIABLE_DEF,\n  ELEMENT_LIVE_CONNECTION,\n  ELEMENT_IMPORT,\n  ELEMENT_DRAW,\n];\n","import {\n  AutoformatPlugin,\n  createAutoformatPlugin,\n  createPlateEditor,\n  CreatePlateEditorOptions,\n  createPluginFactory,\n  getTEditor,\n  NoInfer,\n  PlatePlugin,\n  PluginOptions,\n  useEditorRef,\n  usePlateEditorRef,\n  usePlateEditorState,\n  usePlateSelectors,\n} from '@udecode/plate';\nimport { MyValue } from './value';\nimport { MyEditor } from './nodes';\nimport { MyOverrideByKey, MyPlatePlugin } from './plate';\n\n/**\n * Plate store, Slate context\n */\n\nexport const getMyEditor = (editor: MyEditor) =>\n  getTEditor<MyValue, MyEditor>(editor);\nexport const useTEditorRef = () => useEditorRef<MyValue, MyEditor>();\nexport const useTPlateEditorRef = (id?: string) =>\n  usePlateEditorRef<MyValue, MyEditor>(id);\nexport const useTPlateEditorState = (id?: string) =>\n  usePlateEditorState<MyValue, MyEditor>(id);\nexport const useTPlateSelectors = (id?: string) =>\n  usePlateSelectors<MyValue, MyEditor>(id);\n\n/**\n * Utils\n */\n\nexport const createTPlateEditor = (\n  options: CreatePlateEditorOptions<MyValue, MyEditor> = {}\n) => createPlateEditor<MyValue, MyEditor>(options);\nexport const createTPluginFactory = <P = PluginOptions>(\n  defaultPlugin: PlatePlugin<NoInfer<P>, MyValue, MyEditor>\n) => createPluginFactory(defaultPlugin);\n\n/**\n * My plugins\n */\n\nexport const createTAutoformatPlugin = (\n  override?: Partial<MyPlatePlugin<AutoformatPlugin<MyValue, MyEditor>>>,\n  overrideByKey?: MyOverrideByKey\n) =>\n  createAutoformatPlugin<\n    AutoformatPlugin<MyValue, MyEditor>,\n    MyValue,\n    MyEditor\n  >(override, overrideByKey);\n","/* eslint-disable import/newline-after-import */\n/* eslint-disable import/first */\nimport { SerializedType } from '@decipad/computer';\n\nexport * from './event-interception';\nexport * from './decorator-kinds';\n\nexport * from './mark-kinds';\nimport * as markKinds from './mark-kinds';\nimport * as elementKindsModule from './element-kinds';\nexport { markKinds };\n\nimport type { TableCellType } from './table';\n\nexport type MarkKind = typeof markKinds[keyof typeof markKinds];\n\nexport * from './decorator-kinds';\nexport * from './element-kinds';\nexport const elementKinds = Object.values(elementKindsModule);\nexport type ElementKind =\n  typeof elementKindsModule[keyof typeof elementKindsModule];\n\nexport * from './interactive-elements';\nexport * from './value';\nexport * from './table';\nexport * from './components';\nexport * from './data-view';\nexport * from './utils';\nexport * from './nodes';\nexport * from './plate';\n\nexport const alwaysWritableElementTypes = [\n  elementKindsModule.ELEMENT_TABLE,\n  elementKindsModule.ELEMENT_VARIABLE_DEF,\n  elementKindsModule.ELEMENT_COLUMNS,\n];\n\nexport const allElementKinds: readonly string[] = Object.freeze(\n  Object.values(elementKinds)\n);\n\nexport type CellValueType = TableCellType | SerializedType;\n","import {\n  isHistoryEditor,\n  TEditor,\n  TOperation,\n  withoutNormalizing,\n  withoutSavingHistory,\n} from '@udecode/plate';\nimport invariant from 'tiny-invariant';\nimport * as Y from 'yjs';\nimport { applyYjsEvents } from '../applyToSlate';\nimport applySlateOps from '../applyToYjs';\nimport { SharedType, slateYjsSymbol } from '../model';\nimport { toSlateDoc } from '../utils';\n\nconst IS_REMOTE: WeakSet<TEditor> = new WeakSet();\nconst LOCAL_OPERATIONS: WeakMap<TEditor, Set<TOperation>> = new WeakMap();\nconst SHARED_TYPES: WeakMap<TEditor, SharedType> = new WeakMap();\n\nexport interface YjsEditor extends TEditor {\n  sharedType: SharedType;\n  destroy: () => void;\n  synchronizeValue: () => void;\n}\n\nexport type WithYjsOptions = {\n  synchronizeValue?: boolean;\n};\n\nexport const YjsEditor = {\n  /**\n   * Set the editor value to the content of the to the editor bound shared type.\n   */\n  synchronizeValue: (e: YjsEditor): void => {\n    withoutNormalizing(e, () => {\n      e.children = toSlateDoc(e.sharedType) as YjsEditor['children'];\n      e.onChange();\n    });\n  },\n  /**\n   * Returns whether the editor currently is applying remote changes.\n   */\n  sharedType: (editor: YjsEditor): SharedType => {\n    const sharedType = SHARED_TYPES.get(editor);\n    invariant(sharedType, 'YjsEditor without attached shared type');\n    return sharedType;\n  },\n\n  /**\n   * Returns whether the editor currently is applying remote changes.\n   */\n  isRemote: (editor: YjsEditor): boolean => {\n    return IS_REMOTE.has(editor);\n  },\n\n  /**\n   * Performs an action as a remote operation.\n   */\n  asRemote: (editor: YjsEditor, fn: () => void): void => {\n    const wasRemote = YjsEditor.isRemote(editor);\n    IS_REMOTE.add(editor);\n\n    fn();\n\n    if (!wasRemote) {\n      IS_REMOTE.delete(editor);\n    }\n  },\n  asLocal: <T>(editor: YjsEditor, fn: () => T): T => {\n    const wasRemote = YjsEditor.isRemote(editor);\n    if (wasRemote) {\n      IS_REMOTE.delete(editor);\n    }\n\n    const ret = fn();\n\n    if (wasRemote) {\n      IS_REMOTE.add(editor);\n    }\n\n    return ret;\n  },\n};\n\nfunction localOperations(editor: YjsEditor): Set<TOperation> {\n  const operations = LOCAL_OPERATIONS.get(editor);\n  invariant(operations, 'YjsEditor without attached local operations');\n  return operations;\n}\n\nfunction trackLocalOperations(editor: YjsEditor, operation: TOperation): void {\n  if (!YjsEditor.isRemote(editor)) {\n    localOperations(editor).add(operation);\n  }\n}\n\n/**\n * Applies a slate operations to the bound shared type.\n */\nfunction applyLocalOperations(editor: YjsEditor): void {\n  const ops = localOperations(editor);\n  const editorLocalOperations = Array.from(ops).flat();\n\n  applySlateOps(\n    YjsEditor.sharedType(editor),\n    editorLocalOperations,\n    slateYjsSymbol\n  );\n\n  ops.clear();\n}\n\n/**\n * Apply Yjs events to slate\n */\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst yjsApply = (editor: YjsEditor, events: Y.YEvent<any>[]) =>\n  withoutNormalizing(editor, () =>\n    YjsEditor.asRemote(editor, () => {\n      try {\n        applyYjsEvents(\n          editor,\n          events.filter((event) => event.transaction?.origin !== slateYjsSymbol)\n        );\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.error('Error applying remote event', err);\n        throw err;\n      }\n    })\n  );\n\nfunction applyRemoteYjsEvents(\n  _editor: YjsEditor,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  events: Y.YEvent<any>[]\n): void {\n  try {\n    if (isHistoryEditor(_editor)) {\n      withoutSavingHistory(_editor, () => {\n        yjsApply(_editor, events);\n      });\n    } else {\n      yjsApply(_editor, events);\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Error applying remote events', { error: err, events });\n  }\n}\n\nexport function withYjs<T extends TEditor>(\n  editor: T,\n  sharedType: SharedType\n): T & YjsEditor {\n  const e = editor as T & YjsEditor;\n\n  e.sharedType = sharedType;\n  SHARED_TYPES.set(editor, sharedType);\n  LOCAL_OPERATIONS.set(editor, new Set());\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const observer = (events: Y.YEvent<any>[]) => applyRemoteYjsEvents(e, events);\n  sharedType.observeDeep(observer);\n\n  const { apply, onChange, destroy } = e;\n\n  e.apply = (op: TOperation) => {\n    trackLocalOperations(e, op);\n\n    apply(op);\n  };\n\n  e.onChange = () => {\n    applyLocalOperations(e);\n\n    onChange();\n  };\n\n  e.destroy = () => {\n    sharedType.unobserveDeep(observer);\n    e.apply = apply;\n    e.onChange = onChange;\n    destroy.call(e);\n  };\n\n  e.synchronizeValue = () => {\n    YjsEditor.synchronizeValue(e);\n  };\n\n  return e;\n}\n","import { TEditor } from '@udecode/plate';\nimport invariant from 'tiny-invariant';\nimport { Awareness } from 'y-protocols/awareness';\nimport { debounce } from 'lodash';\nimport { Session } from 'next-auth';\nimport { YjsEditor } from './yjsEditor';\n\nconst AWARENESS: WeakMap<TEditor, Awareness> = new WeakMap();\n\nconst cursorChangeDebounceMs = 2_000;\n\nexport interface CursorEditor extends YjsEditor {\n  awareness: Awareness;\n  destroy: () => void;\n}\n\nexport const CursorEditor = {\n  awareness(editor: CursorEditor): Awareness {\n    const awareness = AWARENESS.get(editor);\n    invariant(awareness, 'CursorEditor without attaches awareness');\n    return awareness;\n  },\n\n  updateCursor: (editor: CursorEditor, session: Session | undefined): void => {\n    try {\n      const { selection } = editor;\n\n      const { anchor } = selection ?? {};\n      const { focus } = selection ?? {};\n\n      const awareness = CursorEditor.awareness(editor);\n      const localState = awareness.getLocalState();\n      const { user } = session ?? {};\n      const newState = {\n        ...localState,\n        anchor,\n        focus,\n        user: user && {\n          email: user.email,\n          name: user.name,\n        },\n      };\n      awareness.setLocalState(newState);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  },\n};\n\nexport function withCursor<T extends YjsEditor>(\n  editor: T,\n  awareness: Awareness,\n  getSession: () => Session | undefined\n): T & CursorEditor {\n  const e = editor as T & CursorEditor;\n\n  AWARENESS.set(e, awareness);\n  e.awareness = awareness;\n\n  const { onChange, destroy } = editor;\n\n  const debouncedOnChange = debounce(async () => {\n    try {\n      CursorEditor.updateCursor(e, getSession());\n    } catch (err) {\n      // do nothing, not important\n    }\n  }, cursorChangeDebounceMs);\n\n  e.onChange = () => {\n    debouncedOnChange();\n\n    onChange();\n  };\n\n  e.destroy = () => {\n    e.onChange = onChange;\n    destroy.call(e);\n  };\n\n  return e;\n}\n","import * as Y from 'yjs';\nimport * as idb from 'lib0/indexeddb';\nimport { Observable } from 'lib0/observable';\nimport { getDefined } from '@decipad/utils';\nimport { fnQueue } from '@decipad/fnqueue';\n\nexport const updatesStoreName = 'updates';\nexport const versionsStoreName = 'versions';\n\nexport const PREFERRED_TRIM_SIZE = 500;\n\nexport async function fetchUpdates(\n  idbPersistence: IndexeddbPersistence\n): Promise<void> {\n  return idbPersistence._mux.push(async () => {\n    await maybeWithStore(idbPersistence, false, async (store) => {\n      const updates = await idb.getAll(\n        store,\n        idb.createIDBKeyRangeLowerBound(idbPersistence._dbref, false)\n      );\n\n      if (idbPersistence._destroyed) {\n        return;\n      }\n\n      idbPersistence.doc.transact(() =>\n        updates.forEach((val) => Y.applyUpdate(idbPersistence.doc, val))\n      );\n\n      await maybeWithStore(idbPersistence, false, async (store2) => {\n        const lastKey = await idb.getLastKey(store2);\n        // eslint-disable-next-line no-param-reassign\n        idbPersistence._dbref = lastKey + 1;\n        await maybeWithStore(idbPersistence, false, async (store3) => {\n          const cnt = await idb.count(store3);\n          // eslint-disable-next-line no-param-reassign\n          idbPersistence._dbsize = cnt;\n        });\n      });\n    });\n  });\n}\n\nfunction getUpdatesStore(\n  idbPersistence: IndexeddbPersistence,\n  write = false\n): IDBObjectStore | null {\n  try {\n    const [updatesStore] = idb.transact(\n      getDefined(idbPersistence.db),\n      [updatesStoreName],\n      write ? 'readwrite' : 'readonly'\n    );\n    return updatesStore;\n  } catch (err) {\n    if ((err as Error).name === 'InvalidStateError') {\n      return null;\n    }\n    throw err;\n  }\n}\n\nfunction getVersionsStore(\n  idbPersistence: IndexeddbPersistence,\n  write = false\n): IDBObjectStore | null {\n  try {\n    const [versionsStore] = idb.transact(\n      getDefined(idbPersistence.db),\n      [updatesStoreName],\n      write ? 'readwrite' : 'readonly'\n    );\n    return versionsStore;\n  } catch (err) {\n    if ((err as Error).name === 'InvalidStateError') {\n      return null;\n    }\n    throw err;\n  }\n}\n\nasync function maybeWithStore<T>(\n  idbPersistence: IndexeddbPersistence,\n  write: boolean,\n  fn: (store: IDBObjectStore) => Promise<T> | void\n): Promise<T | void> {\n  if (idbPersistence._destroyed) {\n    return;\n  }\n  const store = getUpdatesStore(idbPersistence, write);\n  if (store) {\n    return fn(store);\n  }\n}\n\nexport async function storeState(\n  idbPersistence: IndexeddbPersistence,\n  forceStore = true\n): Promise<void> {\n  await fetchUpdates(idbPersistence);\n\n  if (forceStore || idbPersistence._dbsize >= PREFERRED_TRIM_SIZE) {\n    await maybeWithStore(idbPersistence, true, async (store) => {\n      await idb.addAutoKey(store, Y.encodeStateAsUpdate(idbPersistence.doc));\n      idbPersistence.emit('saved', [idbPersistence]);\n      await maybeWithStore(idbPersistence, true, async (store2) => {\n        await idb.del(\n          store2,\n          idb.createIDBKeyRangeUpperBound(idbPersistence._dbref, true)\n        );\n        await maybeWithStore(idbPersistence, false, async (store3) => {\n          // eslint-disable-next-line no-param-reassign\n          idbPersistence._dbsize = await idb.count(store3);\n        });\n      });\n    });\n  }\n}\n\nexport async function clearDocument(name: string): Promise<void> {\n  await idb.deleteDB(name);\n}\n\ninterface DocumentVersion {\n  name: string;\n  version: string;\n  createdAt: number;\n}\n\ninterface IndexeddbPersistenceOptions {\n  readOnly?: boolean;\n}\n\nexport class IndexeddbPersistence extends Observable<string> {\n  public db: IDBDatabase | null = null;\n  public doc: Y.Doc;\n  public name: string;\n  public synced = false;\n  public whenSynced: Promise<IndexeddbPersistence>;\n\n  public _dbref = 0;\n  public _dbsize = 0;\n  public _mux = fnQueue();\n  public _destroyed = false;\n\n  private _db: Promise<IDBDatabase>;\n  private _storeTimeoutId: ReturnType<typeof setTimeout> | undefined;\n  /**\n   * Timeout in ms untill data is merged and persisted in idb.\n   */\n  private _storeTimeout = 1000;\n\n  constructor(\n    name: string,\n    doc: Y.Doc,\n    { readOnly = false }: IndexeddbPersistenceOptions = {}\n  ) {\n    super();\n    this.doc = doc;\n    this.name = readOnly ? `${name}:readonly` : name;\n    this._db = idb.openDB(this.name, (db) =>\n      idb.createStores(db, [['updates', { autoIncrement: true }]])\n    );\n    this.whenSynced = this._init();\n    this._storeUpdate = this._storeUpdate.bind(this);\n    this.destroy = this.destroy.bind(this);\n    doc.on('update', this._storeUpdate);\n    doc.on('destroy', this.destroy);\n  }\n\n  private async _init(): Promise<IndexeddbPersistence> {\n    this.db = await this._db;\n    const currState = Y.encodeStateAsUpdate(this.doc);\n    await fetchUpdates(this);\n    return maybeWithStore(\n      this,\n      true,\n      async (store): Promise<IndexeddbPersistence> => {\n        await idb.addAutoKey(store, currState);\n        return this;\n      }\n    ).then((store) => {\n      if (!this._destroyed) {\n        this.emit('synced', [this]);\n        this.synced = true;\n      }\n      return new Promise((resolve) => {\n        if (store) {\n          resolve(store);\n        }\n      });\n    });\n  }\n\n  private async _storeUpdate(\n    update: Uint8Array,\n    _origin: unknown,\n    _doc: Y.Doc,\n    tr: Y.Transaction\n  ) {\n    await this._mux.push(async () => {\n      await this.whenSynced;\n      await maybeWithStore(this, true, async (store) => {\n        await idb.addAutoKey(store, update);\n        this.emit('saved', [this, tr.local]);\n        this._dbsize += 1;\n        if (this._dbsize >= PREFERRED_TRIM_SIZE) {\n          // debounce store call\n          if (this._storeTimeoutId) {\n            clearTimeout(this._storeTimeoutId);\n          }\n          this._storeTimeoutId = setTimeout(async () => {\n            await storeState(this, false);\n            this._storeTimeoutId = undefined;\n          }, this._storeTimeout);\n        }\n      });\n    });\n  }\n\n  async destroy(): Promise<void> {\n    this._destroyed = true;\n    if (this._storeTimeoutId) {\n      clearTimeout(this._storeTimeoutId);\n    }\n    this.doc.off('update', this._storeUpdate);\n    this.doc.off('destroy', this.destroy);\n    const db = await this._db;\n    await db.close();\n  }\n\n  async remove(): Promise<void> {\n    await maybeWithStore(this, true, async (store) => {\n      store.clear();\n    });\n  }\n\n  async markVersion(versionName: string): Promise<void> {\n    const versionsStore = getDefined(getVersionsStore(this, true));\n    const version: DocumentVersion = {\n      name: versionName,\n      version: Buffer.from(Y.encodeStateVector(this.doc)).toString('hex'),\n      createdAt: Date.now(),\n    };\n    await idb.add(versionsStore, JSON.stringify(version), versionName);\n  }\n\n  async sameVersion(versionName: string): Promise<boolean> {\n    const versionsStore = getDefined(getVersionsStore(this, false));\n    const versionString = await idb.get(versionsStore, versionName);\n    if (versionString && typeof versionString === 'string') {\n      const version = JSON.parse(versionString);\n      const currentVersion = Buffer.from(\n        Y.encodeStateVector(this.doc)\n      ).toString('hex');\n      return version.version !== currentVersion;\n    }\n    return false;\n  }\n}\n","import { Subject } from 'rxjs';\nimport { version1 } from './version1';\nimport { version2 } from './version2';\n\nexport interface MessageHandler {\n  message: Subject<Buffer>;\n  receive: (message: Uint8Array) => void;\n}\n\nconst protocolHandlers: Record<number, () => MessageHandler> = {\n  1: version1,\n  2: version2,\n};\n\nexport const receiver = (protocolVersion: number): MessageHandler => {\n  const handlerBuilder = protocolHandlers[protocolVersion];\n  if (!handlerBuilder) {\n    throw new Error(`Invalid protocol version: ${protocolVersion}`);\n  }\n  return handlerBuilder();\n};\n","import * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\nimport * as syncProtocol from 'y-protocols/sync';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport * as authProtocol from 'y-protocols/auth';\nimport {\n  messageAuth,\n  messageAwareness,\n  MessageHandler,\n  messageQueryAwareness,\n  messageSync,\n  TWebSocketProvider,\n} from './types';\n\nconst permissionDeniedHandler = (\n  provider: TWebSocketProvider,\n  reason: string\n) =>\n  // eslint-disable-next-line no-console\n  console.warn(`Permission denied to access ${provider.url}.\\n${reason}`);\n\nexport const messageHandlers: MessageHandler[] = [];\n\nmessageHandlers[messageSync] = (\n  encoder: encoding.Encoder,\n  decoder: decoding.Decoder,\n  provider: TWebSocketProvider,\n  emitSynced: boolean\n) => {\n  encoding.writeVarUint(encoder, messageSync);\n  const syncMessageType = syncProtocol.readSyncMessage(\n    decoder,\n    encoder,\n    provider.doc,\n    provider\n  );\n  if (\n    emitSynced &&\n    syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n    !provider.synced\n  ) {\n    // eslint-disable-next-line no-param-reassign\n    provider.synced = true;\n  }\n};\n\nmessageHandlers[messageQueryAwareness] = (\n  encoder: encoding.Encoder,\n  _decoder: decoding.Decoder,\n  provider: TWebSocketProvider\n) => {\n  encoding.writeVarUint(encoder, messageAwareness);\n  encoding.writeVarUint8Array(\n    encoder,\n    awarenessProtocol.encodeAwarenessUpdate(\n      provider.awareness,\n      Array.from(provider.awareness.getStates().keys())\n    )\n  );\n};\n\nmessageHandlers[messageAwareness] = (\n  _encoder: encoding.Encoder,\n  decoder: decoding.Decoder,\n  provider: TWebSocketProvider\n) => {\n  awarenessProtocol.applyAwarenessUpdate(\n    provider.awareness,\n    decoding.readVarUint8Array(decoder),\n    provider\n  );\n};\n\nmessageHandlers[messageAuth] = (\n  _encoder: encoding.Encoder,\n  decoder: decoding.Decoder,\n  provider: TWebSocketProvider\n) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler);\n};\n","/* eslint-disable no-param-reassign */\nimport { getDefined } from '@decipad/utils';\nimport { Buffer } from 'buffer';\nimport * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\nimport * as mutex from 'lib0/mutex';\nimport { Observable } from 'lib0/observable';\nimport * as time from 'lib0/time';\nimport { debounce } from 'lodash';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport * as syncProtocol from 'y-protocols/sync';\nimport { Doc as YDoc, mergeUpdates } from 'yjs';\nimport { receiver } from './receive';\nimport { messageHandlers } from './messageHandlers';\nimport {\n  messageAwareness,\n  MessageHandler,\n  messageSync,\n  MessageType,\n  TWebSocketProvider,\n} from './types';\n\nexport type { TWebSocketProvider };\n\nexport interface WSStatus {\n  status: 'disconnected' | 'connected' | 'connecting';\n}\n\nexport interface Options {\n  readOnly?: boolean;\n  connect?: boolean;\n  awareness?: awarenessProtocol.Awareness;\n  params?: Record<string, string>;\n  WebSocketPolyfill?: typeof WebSocket;\n  resyncInterval?: number;\n  protocol?: string;\n  protocolVersion: number;\n  beforeConnect?: (provider: TWebSocketProvider) => Promise<void> | void;\n  onError?: (err: Error | Event) => void;\n}\n\ntype ClientId = number;\n\ninterface AwarenessUpdate {\n  added: ClientId[];\n  updated: ClientId[];\n  removed: ClientId[];\n}\n\nconst reconnectTimeoutBase = 2_000;\nconst maxReconnectTimeout = 20_000;\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000;\nconst debounceBroadcast = 1000;\n\nconst encodeMessage = (message: Uint8Array): string =>\n  Buffer.from(message).toString('base64');\n\nconst decodeMessage = (message: string | Uint8Array): Buffer => {\n  if (typeof message === 'string') {\n    return decodeMessage(Buffer.from(message, 'base64'));\n  }\n  return Buffer.from(message);\n};\n\nconst isAcceptableMessage = (buf: string | Buffer | Uint8Array): boolean => {\n  return (\n    typeof buf === 'string' || Buffer.isBuffer(buf) || buf instanceof Uint8Array\n  );\n};\n\nexport const readMessage = (\n  provider: TWebSocketProvider,\n  buf: Uint8Array,\n  emitSynced: boolean\n): undefined | encoding.Encoder => {\n  if (!isAcceptableMessage(buf)) {\n    // eslint-disable-next-line no-console\n    console.warn('message is unnacceptable', buf);\n    return;\n  }\n  try {\n    const message = Buffer.from(buf);\n    const decoder = decoding.createDecoder(message);\n    const encoder = encoding.createEncoder();\n    const messageType = decoding.readVarUint(decoder);\n    const messageHandler = provider.messageHandlers[messageType];\n    if (messageHandler) {\n      messageHandler(\n        encoder,\n        decoder,\n        provider,\n        emitSynced,\n        messageType as MessageType\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(\n        `Could not find handler for message of type ${messageType}`\n      );\n    }\n    return encoder;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Error trying to decode message', err);\n  }\n  return undefined;\n};\n\nconst setupWS = async (provider: TWebSocketProvider) => {\n  const scheduleReconnect = () => {\n    if (provider.shouldConnect) {\n      const timeout = Math.min(\n        2 ** provider.wsUnsuccessfulReconnects * reconnectTimeoutBase,\n        maxReconnectTimeout\n      );\n      setTimeout(setupWS, timeout, provider);\n    }\n  };\n\n  try {\n    if (provider.shouldConnect && !provider.ws && !provider.wsconnecting) {\n      if (provider.beforeConnect) {\n        await provider.beforeConnect(provider);\n      }\n\n      provider.emit('status', [\n        {\n          status: 'connecting',\n        },\n      ]);\n\n      const websocket = new provider._WS(\n        getDefined(provider.url),\n        provider.protocol\n      );\n      websocket.binaryType = 'arraybuffer';\n      provider.ws = websocket;\n      provider.wsconnecting = true;\n      provider.wsconnected = false;\n      provider.synced = false;\n\n      websocket.onerror = (err) => {\n        // do nothing\n        // eslint-disable-next-line no-console\n        console.warn('Error caught on websocket:', err);\n      };\n\n      const { message, receive } = receiver(provider.protocolVersion);\n      const messageSubscription = message.subscribe((m) => {\n        try {\n          const encoder = readMessage(provider, m, true);\n          if (!provider.readOnly && encoder && encoding.length(encoder) > 1) {\n            const reply = encoding.toUint8Array(encoder);\n            provider.send(reply);\n          }\n        } catch (err) {\n          // eslint-disable-next-line no-console\n          console.error(\n            'An error was detected while reading a message from a websocket'\n          );\n          // eslint-disable-next-line no-console\n          console.error(err);\n          provider.onError?.(err as Error);\n        }\n      });\n\n      websocket.onmessage = (event) => {\n        if (provider.destroyed || !event.data) {\n          return;\n        }\n        provider.wsLastMessageReceived = time.getUnixTime();\n        receive(decodeMessage(event.data));\n      };\n\n      websocket.onclose = (ev) => {\n        // eslint-disable-next-line no-console\n        console.info('WS closed', ev);\n        messageSubscription.unsubscribe();\n        provider.ws = undefined;\n        provider.wsconnecting = false;\n        if (!provider.destroyed && provider.wsconnected) {\n          provider.wsconnected = false;\n          provider.synced = false;\n          // update awareness (all users except local left)\n          awarenessProtocol.removeAwarenessStates(\n            provider.awareness,\n            Array.from(provider.awareness.getStates().keys()).filter(\n              (client) => client !== provider.doc.clientID\n            ),\n            provider\n          );\n          provider.emit('status', [\n            {\n              status: 'disconnected',\n            },\n          ]);\n        } else {\n          provider.wsUnsuccessfulReconnects += 1;\n        }\n\n        if (provider.shouldConnect) {\n          scheduleReconnect();\n        }\n      };\n\n      websocket.onopen = () => {\n        // eslint-disable-next-line no-console\n        console.info('WS: opened');\n        provider.wsLastMessageReceived = time.getUnixTime();\n        provider.wsconnecting = false;\n        provider.wsconnected = true;\n        provider.wsUnsuccessfulReconnects = 0;\n        provider.emit('status', [\n          {\n            status: 'connected',\n          },\n        ]);\n        // always send sync step 1 when connected\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, messageSync);\n        syncProtocol.writeSyncStep1(encoder, provider.doc);\n        provider.send(encoding.toUint8Array(encoder));\n        // broadcast local awareness state\n        if (provider.awareness.getLocalState() != null) {\n          const encoderAwarenessState = encoding.createEncoder();\n          encoding.writeVarUint(encoderAwarenessState, messageAwareness);\n          encoding.writeVarUint8Array(\n            encoderAwarenessState,\n            awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [\n              provider.doc.clientID,\n            ])\n          );\n          provider.send(encoding.toUint8Array(encoderAwarenessState));\n        }\n      };\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n    if (provider.ws && provider.ws.readyState === provider.ws.OPEN) {\n      provider.ws.close();\n    }\n    provider.ws = undefined;\n    provider.wsconnecting = false;\n    scheduleReconnect();\n  }\n};\n\nconst broadcastMessage = (provider: WebsocketProvider, buf: Uint8Array) => {\n  if (provider.destroyed || provider.readOnly) {\n    return;\n  }\n  if (provider.wsconnected) {\n    try {\n      provider.send(buf);\n    } catch (err) {\n      if (\n        (err as Error).message !==\n        'WebSocket is already in CLOSING or CLOSED state'\n      ) {\n        throw err;\n      }\n    }\n  }\n};\n\nclass WebsocketProvider\n  extends Observable<string>\n  implements TWebSocketProvider\n{\n  doc: YDoc;\n  protocol: string | undefined;\n  protocolVersion: number;\n  beforeConnect: Options['beforeConnect'];\n  _WS: typeof WebSocket;\n  awareness: awarenessProtocol.Awareness;\n  url?: string;\n  readOnly: boolean;\n  shouldConnect: boolean;\n  onError?: Options['onError'];\n  ws: WebSocket | undefined;\n  wsconnected = false;\n  wsconnecting = false;\n  wsLastMessageReceived = 0;\n  wsUnsuccessfulReconnects = 0;\n  messageHandlers: MessageHandler[];\n  mux: mutex.mutex;\n  destroyed = false;\n  outUpdates: Uint8Array[] = [];\n  debouncedBroadcastUpdateMessage: () => void = debounce(\n    this.broadcastPendingUpdateMessages.bind(this),\n    debounceBroadcast\n  );\n  outAwarenessUpdates: number[] = [];\n  debouncedBroadcastAwarenessUpdateMessage: () => void = debounce(\n    this.broadcastPendingAwarenessUpdateMessages.bind(this),\n    debounceBroadcast\n  );\n\n  private _selfAwareness = false;\n  private _synced = false;\n  private _resyncInterval: 0 | ReturnType<typeof setInterval> = 0;\n  private _checkInterval: ReturnType<typeof setInterval> | undefined;\n\n  constructor(doc: YDoc, options: Options = { protocolVersion: 1 }) {\n    super();\n    const {\n      readOnly = false,\n      connect = true,\n      awareness,\n      WebSocketPolyfill = WebSocket,\n      resyncInterval = -1,\n      protocol,\n      beforeConnect,\n      onError,\n      protocolVersion,\n    } = options;\n\n    this.readOnly = readOnly;\n    this.doc = doc;\n    this.protocol = protocol;\n    this.beforeConnect = beforeConnect;\n    this._WS = WebSocketPolyfill;\n    this.onError = onError;\n    this.protocolVersion = protocolVersion;\n\n    if (!awareness) {\n      this.awareness = new awarenessProtocol.Awareness(doc);\n      this._selfAwareness = true;\n    } else {\n      this.awareness = awareness;\n    }\n\n    this.messageHandlers = messageHandlers.slice();\n    this.mux = mutex.createMutex();\n    this.shouldConnect = connect;\n\n    if (resyncInterval > 0) {\n      this._resyncInterval = setInterval(() => {\n        if (this.ws && this.wsconnected && !this.readOnly) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder();\n          encoding.writeVarUint(encoder, messageSync);\n          syncProtocol.writeSyncStep1(encoder, doc);\n          try {\n            this.send(encoding.toUint8Array(encoder));\n          } catch (err) {\n            if (\n              (err as Error).message !==\n              'WebSocket is already in CLOSING or CLOSED state'\n            ) {\n              throw err;\n            }\n          }\n        }\n      }, resyncInterval);\n    }\n\n    if ('addEventListener' in global) {\n      global.addEventListener('online', this._onOfflineOnlineStatusChange);\n      global.addEventListener('offline', this._onOfflineOnlineStatusChange);\n    }\n\n    this._updateHandler = this._updateHandler.bind(this);\n    this._beforeUnloadHandler = this._beforeUnloadHandler.bind(this);\n    this._awarenessUpdateHandler = this._awarenessUpdateHandler.bind(this);\n\n    if (!this.readOnly) {\n      this.doc.on('update', this._updateHandler);\n    }\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler);\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', () => this._beforeUnloadHandler);\n    }\n    if (!readOnly) {\n      this.awareness.on('update', this._awarenessUpdateHandler);\n    }\n    this._checkInterval = setInterval(() => {\n      if (\n        this.wsconnected &&\n        messageReconnectTimeout <\n          time.getUnixTime() - this.wsLastMessageReceived\n      ) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        this.shouldConnect = true;\n        this.ws?.close();\n      }\n    }, messageReconnectTimeout / 10);\n\n    if (connect) {\n      this.connect();\n    }\n  }\n\n  set serverUrl(serverUrl: string | undefined) {\n    if (serverUrl) {\n      const url = new URL(serverUrl).href;\n      this.url = url;\n    }\n  }\n\n  get serverUrl(): string | undefined {\n    return this.url;\n  }\n\n  send(message: Uint8Array): void {\n    if (this.wsconnected && this.ws) {\n      this.ws.send(encodeMessage(message));\n    }\n  }\n\n  private _updateHandler(update: Uint8Array, origin: unknown) {\n    if (origin !== this && !this.readOnly && this.wsconnected) {\n      this.outUpdates.push(update);\n      this.debouncedBroadcastUpdateMessage();\n    }\n  }\n\n  private broadcastPendingUpdateMessages() {\n    const toSend = Array.from(this.outUpdates);\n    this.outUpdates = [];\n    const encoder = encoding.createEncoder();\n    encoding.writeVarUint(encoder, messageSync);\n    syncProtocol.writeUpdate(encoder, mergeUpdates(toSend));\n    if (encoding.length(encoder) > 1) {\n      broadcastMessage(this, encoding.toUint8Array(encoder));\n    }\n    this.emit('saved', [this]);\n  }\n\n  private _awarenessUpdateHandler(changes: AwarenessUpdate) {\n    const { added, updated, removed } = changes;\n    const changedClients = added.concat(updated).concat(removed);\n    this.outAwarenessUpdates = this.outAwarenessUpdates.concat(changedClients);\n    this.debouncedBroadcastAwarenessUpdateMessage();\n  }\n\n  private broadcastPendingAwarenessUpdateMessages() {\n    const changedClients = Array.from(this.outAwarenessUpdates);\n    if (changedClients.length > 0) {\n      this.outAwarenessUpdates = [];\n      const update = awarenessProtocol.encodeAwarenessUpdate(\n        this.awareness,\n        changedClients\n      );\n      const encoder = encoding.createEncoder();\n      encoding.writeVarUint(encoder, messageAwareness);\n      encoding.writeVarUint8Array(encoder, update);\n      if (encoding.length(encoder) > 1) {\n        broadcastMessage(this, encoding.toUint8Array(encoder));\n      }\n    }\n  }\n\n  private _beforeUnloadHandler() {\n    awarenessProtocol.removeAwarenessStates(\n      this.awareness,\n      [this.doc.clientID],\n      'window unload'\n    );\n  }\n\n  private _onOfflineOnlineStatusChange = () => {\n    // if the navigator turns offline, we need to close the websocket so that\n    // we know the messages are not being able to be sent\n    if (!navigator.onLine && this.ws && (this.ws.CONNECTING || this.ws?.OPEN)) {\n      this.shouldConnect = true;\n      try {\n        // eslint-disable-next-line no-console\n        console.info('WS: closing websocket because offline');\n        this.ws.close();\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.warn('Error closing websocket:', err);\n      }\n    }\n  };\n\n  get synced(): boolean {\n    return this._synced;\n  }\n\n  set synced(state: boolean) {\n    if (this._synced !== state) {\n      this._synced = state;\n      this.emit('synced', [state]);\n      this.emit('sync', [state]);\n    }\n  }\n\n  destroy(): void {\n    this.destroyed = true;\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval);\n    }\n    if (this._checkInterval) {\n      clearInterval(this._checkInterval);\n    }\n\n    this.disconnect();\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler);\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', () => this._beforeUnloadHandler);\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler);\n    if (this._selfAwareness) {\n      this.awareness.destroy();\n    }\n\n    this.doc.off('update', this._updateHandler);\n\n    if ('removeEventListener' in global) {\n      global.removeEventListener('online', this._onOfflineOnlineStatusChange);\n      global.removeEventListener('offline', this._onOfflineOnlineStatusChange);\n    }\n\n    super.destroy();\n  }\n\n  disconnect(): void {\n    if (this.wsconnected) {\n      this.broadcastPendingUpdateMessages();\n    }\n    this.shouldConnect = false;\n    if (this.ws != null) {\n      try {\n        this.ws.close();\n      } catch (err) {\n        // do nothing\n      }\n      this.emit('status', [\n        {\n          status: 'disconnected',\n        },\n      ]);\n    }\n  }\n\n  async connect(): Promise<void> {\n    this.shouldConnect = true;\n    if (!this.wsconnected && !this.ws) {\n      await setupWS(this);\n    }\n  }\n}\n\nexport const createWebsocketProvider = (\n  doc: YDoc,\n  options: Options = { protocolVersion: 1 }\n): TWebSocketProvider => {\n  return new WebsocketProvider(doc, options);\n};\n","import Bowser from 'bowser';\n\nexport const isSupportedBrowser = () => {\n  const browser = Bowser.getParser(window.navigator.userAgent);\n\n  return browser.satisfies({\n    chrome: '>=100',\n  });\n};\n","export type SupportFeature = 'websockets' | 'indexeddb';\n\nexport const supports = (feature: SupportFeature): boolean => {\n  switch (feature) {\n    case 'websockets':\n      return typeof WebSocket !== 'undefined';\n    case 'indexeddb':\n      return typeof indexedDB !== 'undefined';\n  }\n};\n","import { CursorEditor, toSlateDoc, YjsEditor } from '@decipad/slate-yjs';\nimport { IndexeddbPersistence } from '@decipad/y-indexeddb';\nimport { TWebSocketProvider } from '@decipad/y-websocket';\nimport EventEmitter from 'events';\nimport md5 from 'md5';\nimport { Doc as YDoc } from 'yjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { MyEditor } from '@decipad/editor-types';\nimport { supportBigIntToJSON } from '@decipad/utils';\nimport {\n  DocSyncEditor,\n  OnLoadedCallback,\n  OnSavedCallback,\n  SyncSource,\n  OnConnectedCallback,\n} from './types';\n\nsupportBigIntToJSON();\n\nexport function docSyncEditor<E extends MyEditor>(\n  editor: E & YjsEditor & CursorEditor,\n  doc: YDoc,\n  store?: IndexeddbPersistence,\n  ws?: TWebSocketProvider\n): E & DocSyncEditor {\n  const events = new EventEmitter();\n\n  store?.on('synced', function onStoreSynced() {\n    events.emit('loaded', 'local');\n  });\n  store?.on(\n    'saved',\n    function onStoreSaved(_provider: IndexeddbPersistence, isLocal?: boolean) {\n      const source: SyncSource = isLocal ? 'local' : 'remote';\n      events.emit('saved', source);\n    }\n  );\n\n  if (ws) {\n    ws.on('synced', function onWsSynced(synced: boolean) {\n      if (synced) {\n        events.emit('loaded', 'remote');\n        isSavedRemotely.next(true);\n      }\n    });\n    ws.on('saved', function onWsSaved() {\n      events.emit('saved', 'remote');\n      isSavedRemotely.next(true);\n    });\n    ws.on('status', function onWsStatus(event: { status: string }) {\n      if (event.status === 'connected') {\n        events.emit('connected');\n      }\n    });\n    ws.on('error', (err: Error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error caught in websocket:', err);\n    });\n  }\n\n  const hasLocalChanges = new BehaviorSubject<boolean>(false);\n  const isSavedRemotely = new BehaviorSubject<boolean>(false);\n\n  const onceStoreSynced = () => {\n    let savedCount = 0;\n    events.on('saved', (source: SyncSource) => {\n      savedCount += 1;\n      if (savedCount > 1) {\n        savedCount = 1;\n        if (source === 'local') {\n          hasLocalChanges.next(true);\n          isSavedRemotely.next(false);\n        }\n      }\n    });\n  };\n  if (store) {\n    store.once('synced', onceStoreSynced);\n  } else {\n    onceStoreSynced();\n  }\n\n  let destroyed = false;\n  events.once('destroyed', () => {\n    destroyed = true;\n  });\n\n  const useEditor = Object.assign(editor, {\n    onLoaded(cb: OnLoadedCallback) {\n      events.on('loaded', cb);\n    },\n    offLoaded(cb: OnLoadedCallback) {\n      events.removeListener('loaded', cb);\n    },\n    onSaved(cb: OnSavedCallback) {\n      events.on('saved', cb);\n    },\n    offSaved(cb: OnSavedCallback) {\n      events.removeListener('saved', cb);\n    },\n    onConnected(cb: OnConnectedCallback) {\n      events.on('connected', cb);\n    },\n    onDestroyed(cb: () => void) {\n      events.on('destroyed', cb);\n    },\n    offDestroyed(cb: () => void) {\n      events.removeListener('destroyed', cb);\n    },\n    destroy() {\n      events.emit('destroyed');\n      events.removeAllListeners();\n      doc.destroy();\n      store?.destroy();\n      ws?.destroy();\n    },\n    connect() {\n      ws?.connect();\n    },\n    disconnect() {\n      ws?.disconnect();\n    },\n    hasLocalChanges() {\n      return hasLocalChanges;\n    },\n    isSavedRemotely() {\n      return isSavedRemotely;\n    },\n    removeLocalChanges() {\n      return store?.remove() || Promise.resolve();\n    },\n    setLoadedRemotely() {\n      events.emit('loaded', 'remote');\n    },\n    isDocSyncEnabled: true,\n    markVersion: (version: string) =>\n      store?.markVersion(version) || Promise.resolve(),\n    sameVersion: (version: string) =>\n      store?.sameVersion(version) || Promise.resolve(false),\n    equals: (checksumRemote: string) => {\n      const checksumLocal = md5(JSON.stringify(toSlateDoc(doc.getArray())));\n      return checksumLocal === checksumRemote;\n    },\n    get destroyed() {\n      return destroyed;\n    },\n  });\n\n  return useEditor;\n}\n","import { nanoid } from 'nanoid';\nimport { H1Element, MyEditor, ParagraphElement } from '@decipad/editor-types';\nimport {\n  ELEMENT_H1,\n  ELEMENT_PARAGRAPH,\n  insertNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\n\nexport function ensureInitialDocument(editor: MyEditor): void {\n  const { children } = editor;\n  if (children.length > 1) {\n    return;\n  }\n  if (children.length === 0) {\n    withoutNormalizing(editor, () => {\n      insertNodes<H1Element>(\n        editor,\n        {\n          type: ELEMENT_H1,\n          children: [{ text: 'My notebook title' }],\n          id: nanoid(),\n        },\n        { at: [0] }\n      );\n      insertNodes<ParagraphElement>(\n        editor,\n        {\n          type: ELEMENT_PARAGRAPH,\n          children: [{ text: '' }],\n          id: nanoid(),\n        },\n        { at: [1] }\n      );\n    });\n  }\n}\n","import { slateYjsSymbol } from 'libs/slate-yjs/src/model';\nimport { UndoManager } from 'yjs';\nimport { DocSyncEditor } from '.';\n\nexport const setupUndo = (editor: DocSyncEditor): DocSyncEditor => {\n  let captureTransaction = true;\n  const undoManager = new UndoManager(editor.sharedType, {\n    trackedOrigins: new Set([slateYjsSymbol]),\n    captureTransaction: () => captureTransaction,\n    captureTimeout: 200,\n  });\n  editor.undo = () => {\n    undoManager.undo();\n  };\n  editor.redo = () => {\n    undoManager.redo();\n  };\n  editor.withoutCapturingUndo = (cb: () => void) => {\n    const beforeCapturing = captureTransaction;\n    captureTransaction = false;\n    try {\n      cb();\n    } finally {\n      captureTransaction = beforeCapturing;\n    }\n  };\n  editor.undoManager = undoManager;\n\n  return editor;\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { YjsEditor } from '@decipad/slate-yjs';\n\nexport const asLocalEditor = <T>(editor: MyEditor, fn: () => T): T => {\n  return YjsEditor.asLocal(editor as unknown as YjsEditor, fn);\n};\n","import { Session } from 'next-auth';\nimport { Awareness } from 'y-protocols/awareness';\nimport { applyUpdate, Doc as YDoc } from 'yjs';\nimport { PlateEditor } from '@udecode/plate';\nimport { fetch } from '@decipad/fetch';\nimport { SyncElement, withCursor, withYjs } from '@decipad/slate-yjs';\nimport { IndexeddbPersistence } from '@decipad/y-indexeddb';\nimport {\n  TWebSocketProvider,\n  createWebsocketProvider,\n} from '@decipad/y-websocket';\nimport { MyEditor } from '@decipad/editor-types';\nimport { supports } from '@decipad/support';\nimport { docSyncEditor } from './docSyncEditor';\nimport { ensureInitialDocument } from './utils/ensureInitialDocument';\nimport { setupUndo } from './setupUndo';\nimport { asLocalEditor } from './asLocalEditor';\n\nconst tokenTimeoutMs = 60 * 1000;\n\ninterface DocSyncConnectionParams {\n  url: string;\n  token: string;\n}\n\nexport interface DocSyncOptions {\n  editor: MyEditor;\n  readOnly?: boolean;\n  authSecret?: string;\n  WebSocketPolyfill?: typeof WebSocket;\n  onError?: (event: Error | Event) => void;\n  ws?: boolean;\n  connect?: boolean;\n  connectionParams?: DocSyncConnectionParams;\n  initialState?: string;\n  protocolVersion: number;\n}\n\nasync function fetchToken(): Promise<string> {\n  const resp = await fetch(`/api/auth/token?for=pubsub`);\n  if (!resp?.ok) {\n    throw new Error(\n      `Error fetching token: response code was ${resp.status}: ${\n        resp.statusText\n      }. response was ${(await resp?.text()) || JSON.stringify(resp)}`\n    );\n  }\n  return resp?.text();\n}\n\nasync function wsAddress(docId: string): Promise<string> {\n  return `${await (await fetch('/api/ws'))?.text()}?doc=${encodeURIComponent(\n    docId\n  )}&protocol=2`;\n}\n\nexport function createDocSyncEditor(\n  docId: string,\n  {\n    editor,\n    readOnly = false,\n    authSecret,\n    onError,\n    ws = true,\n    connect = ws,\n    WebSocketPolyfill,\n    connectionParams,\n    initialState,\n    protocolVersion,\n  }: DocSyncOptions,\n  getSession: () => Session | undefined = () => undefined\n) {\n  (editor as PlateEditor).children = [];\n  const doc = new YDoc();\n  const store = supports('indexeddb')\n    ? new IndexeddbPersistence(docId, doc, { readOnly })\n    : undefined;\n  const initialTokenTime = Date.now();\n\n  const isInitialTokenStale = () =>\n    Date.now() - initialTokenTime > tokenTimeoutMs;\n\n  const getToken = () =>\n    isInitialTokenStale() ? undefined : connectionParams?.token;\n\n  const beforeConnect = async (provider: TWebSocketProvider) => {\n    try {\n      provider.serverUrl = connectionParams?.url\n        ? `${connectionParams.url}`\n        : await wsAddress(docId);\n      provider.protocol = authSecret || getToken() || (await fetchToken());\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  };\n\n  let wsp: TWebSocketProvider | undefined;\n  let awareness: Awareness | undefined;\n\n  const startWebsocket =\n    ws && supports('websockets') && (!readOnly || initialState == null);\n  if (startWebsocket) {\n    wsp = createWebsocketProvider(doc, {\n      WebSocketPolyfill,\n      readOnly,\n      connect: false,\n      beforeConnect,\n      resyncInterval: 60000,\n      onError,\n      protocolVersion,\n    });\n    awareness = wsp.awareness;\n  } else {\n    awareness = new Awareness(doc);\n  }\n\n  // Yjs editor\n  const shared = doc.getArray<SyncElement>();\n  const yjsEditor = withYjs(editor as MyEditor, shared);\n\n  yjsEditor.synchronizeValue();\n\n  let destroyed = false;\n  let synced = false;\n\n  const onceSynced = () => {\n    if (synced) {\n      return;\n    }\n    synced = true;\n    if (connect && !destroyed) {\n      if (initialState != null) {\n        try {\n          const update = Buffer.from(initialState, 'base64');\n          applyUpdate(doc, update);\n          setTimeout(() => syncEditor.setLoadedRemotely(), 0);\n        } catch (err) {\n          // eslint-disable-next-line no-console\n          console.error('Error applying initial update', err);\n        }\n      }\n      wsp?.connect();\n    }\n  };\n\n  if (store) {\n    store.once('synced', onceSynced);\n  } else {\n    setTimeout(onceSynced, 0);\n  }\n\n  // Cursor editor\n  const cursorEditor = withCursor(yjsEditor, awareness, getSession);\n\n  const { normalizeNode } = cursorEditor;\n  cursorEditor.normalizeNode = (entry) =>\n    asLocalEditor(cursorEditor, () => normalizeNode(entry));\n\n  // Sync editor\n  let syncEditor = docSyncEditor(cursorEditor, doc, store, wsp);\n  syncEditor.destroy = () => {\n    destroyed = true;\n    store?.destroy();\n    wsp?.destroy();\n  };\n\n  syncEditor.isDocSyncEnabled = true;\n\n  let loadedLocally = false;\n  let loadedRemotely = false;\n\n  const onLoaded = (source: 'remote' | 'local') => {\n    if (\n      !readOnly &&\n      !destroyed &&\n      !loadedRemotely &&\n      (!ws || source === 'remote')\n    ) {\n      ensureInitialDocument(editor);\n    }\n    if (source === 'remote') {\n      loadedRemotely = true;\n    }\n    if (source === 'local') {\n      loadedLocally = true;\n    }\n    if (loadedRemotely && loadedLocally) {\n      syncEditor.offLoaded(onLoaded);\n    }\n  };\n  syncEditor.onLoaded(onLoaded);\n\n  syncEditor = setupUndo(syncEditor);\n\n  syncEditor.isReadOnly = readOnly;\n\n  return syncEditor;\n}\n","import {\n  AnyElement,\n  LiveConnectionElement,\n  ELEMENT_LIVE_CONNECTION,\n  MyValue,\n} from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { BehaviorSubject, SubscriptionLike } from 'rxjs';\nimport { ConnectionResult, Observe } from '../types';\n\ntype LiveConnectionElementWithConnections = LiveConnectionElement & {\n  result?: {\n    subject: BehaviorSubject<ConnectionResult | undefined>;\n    subscription: SubscriptionLike;\n  };\n};\n\ntype BlockId = string;\n\ntype Connections = Map<BlockId, LiveConnectionElementWithConnections>;\n\nconst isLiveConnection = (block: AnyElement): boolean => {\n  return block.type === ELEMENT_LIVE_CONNECTION;\n};\n\nconst diffAndProcessNew = async (\n  oldConnections: Connections,\n  newConnections: Connections,\n  observeExternal: Observe\n): Promise<Connections> => {\n  const newConnectionsResult = new Map(oldConnections);\n  const connectionsToAdd = Array.from(newConnections.entries()).filter(\n    ([key]) => !oldConnections.has(key)\n  );\n  for (const [key, conn] of connectionsToAdd) {\n    const subject = new BehaviorSubject<ConnectionResult | undefined>(\n      undefined\n    );\n    // eslint-disable-next-line no-await-in-loop\n    const subscription = await observeExternal(\n      {\n        params: {\n          url: conn.url,\n          source: conn.source,\n          useFirstRowAsHeader: conn.isFirstRowHeaderRow,\n          columnTypeCoercions: conn.columnTypeCoercions,\n        },\n        notify: (result) => {\n          subject.next({ source: conn, result });\n        },\n      },\n      true\n    );\n    if (subscription) {\n      newConnectionsResult.set(key, {\n        ...conn,\n        result: {\n          subject,\n          subscription,\n        },\n      });\n    }\n  }\n\n  return newConnectionsResult;\n};\n\nconst diffAndUnsubscribeOld = (\n  oldConnections: Connections,\n  newConnections: Connections\n): void => {\n  const old = Array.from(oldConnections.entries()).filter(\n    ([key]) => !newConnections.has(key)\n  );\n\n  for (const [, sub] of old) {\n    sub.result?.subscription.unsubscribe();\n  }\n};\n\nconst diffAndProcess = async (\n  oldConnections: Connections,\n  newConnections: Connections,\n  observeExternal: Observe\n): Promise<Connections> => {\n  const connections = await diffAndProcessNew(\n    oldConnections,\n    newConnections,\n    observeExternal\n  );\n\n  diffAndUnsubscribeOld(oldConnections, newConnections);\n\n  return connections;\n};\n\ninterface LiveConnections {\n  update: (value: MyValue) => Promise<void>;\n  destroy: () => void;\n  getExternalData$: BehaviorSubject<Map<string, ConnectionResult>>;\n}\n\nexport const liveConnections = (observe: Observe): LiveConnections => {\n  let connections: Connections = new Map();\n  const subscriptions: Map<string, SubscriptionLike> = new Map();\n  const results: Map<string, ConnectionResult> = new Map();\n\n  const getExternalData$ = new BehaviorSubject<Map<string, ConnectionResult>>(\n    new Map()\n  );\n\n  const update = async (value: MyValue) => {\n    const newLiveConnections = value\n      .filter(isLiveConnection)\n      .reduce<Connections>((connectionsAcc, elem: AnyElement) => {\n        assertElementType(elem, ELEMENT_LIVE_CONNECTION);\n        connectionsAcc.set(elem.id, elem);\n        return connectionsAcc;\n      }, new Map());\n\n    connections = await diffAndProcess(\n      connections,\n      newLiveConnections,\n      observe\n    );\n\n    // subscribe to new connections\n    for (const [key, conn] of connections) {\n      if (!subscriptions.has(key)) {\n        const newSubscription = conn.result?.subject.subscribe((result) => {\n          if (result) {\n            results.set(key, result);\n          } else {\n            results.delete(key);\n          }\n          getExternalData$.next(results);\n        });\n        if (newSubscription) {\n          subscriptions.set(key, newSubscription);\n        }\n        // retrieve and expose current value\n        const currentValue = conn.result?.subject.getValue();\n        if (currentValue) {\n          results.set(key, currentValue);\n          getExternalData$.next(results);\n        }\n      }\n    }\n\n    // unsubscribe from old connections\n    for (const [key, sub] of subscriptions) {\n      if (!connections.has(key)) {\n        sub.unsubscribe();\n        subscriptions.delete(key);\n      }\n    }\n  };\n\n  const destroy = () => {\n    for (const [, sub] of subscriptions) {\n      sub.unsubscribe();\n    }\n    subscriptions.clear();\n    results.clear();\n  };\n\n  return { update, getExternalData$, destroy };\n};\n","import { dequal } from 'dequal';\nimport { map, debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { debounce, noop } from 'lodash';\nimport { createDocSyncEditor } from '@decipad/docsync';\nimport { getDefined } from '@decipad/utils';\nimport { editorToProgram } from '@decipad/editor-language-elements';\nimport {\n  Computer,\n  IdentifiedError,\n  IdentifiedResult,\n  identifiedErrorToMessage,\n} from '@decipad/computer';\nimport { createTPlateEditor } from '@decipad/editor-types';\nimport { getURLComponents } from '@decipad/editor-utils';\nimport type { Observe, Subscription } from '../types';\nimport { liveConnections } from './liveConnections';\n\nconst debounceGetValueMs = 500;\n\nexport type OnErrorCallback = (error: Error) => void;\n\nexport const startNotebook = async (\n  subscription: Subscription,\n  observeExternal: Observe,\n  onError: OnErrorCallback\n): Promise<Computer> => {\n  const { docId, blockId } = getURLComponents(subscription.params.url);\n  const editor = createTPlateEditor();\n  editor.normalizeNode = noop;\n  const syncEditor = createDocSyncEditor(docId, {\n    readOnly: true,\n    editor,\n    protocolVersion: 2,\n  });\n\n  const computer = new Computer();\n  const { unsubscribe } = computer.results\n    .pipe(\n      map((result) => result.blockResults[blockId]),\n      debounceTime(250),\n      distinctUntilChanged((cur, next) => dequal(cur, next))\n    )\n    .subscribe((result: IdentifiedResult | IdentifiedError | undefined) => {\n      if (result) {\n        const identifier = computer.getSymbolDefinedInBlock(blockId);\n        if (result.type === 'identified-error') {\n          onError(new Error(identifiedErrorToMessage(result)));\n        } else if (result.type === 'computer-result') {\n          subscription.notify({\n            meta: { title: identifier },\n            result: result.result,\n          });\n        }\n      }\n    });\n\n  const {\n    update: updateLiveConnections,\n    destroy: destroyLiveConnections,\n    getExternalData$,\n  } = liveConnections(observeExternal);\n\n  const getValue = debounce(async () => {\n    computer.pushCompute(await editorToProgram(syncEditor, computer));\n  }, debounceGetValueMs);\n\n  const externalDataSubscription = getExternalData$.subscribe((data) => {\n    if (data.has(blockId)) {\n      subscription.notify(getDefined(data.get(blockId)).result);\n    }\n    getValue();\n  });\n\n  let closed = false;\n  // eslint-disable-next-line no-param-reassign\n  subscription.subscription = {\n    get closed() {\n      return closed;\n    },\n    unsubscribe: () => {\n      closed = true;\n      externalDataSubscription.unsubscribe();\n      unsubscribe();\n      destroyLiveConnections();\n      syncEditor.disconnect();\n      syncEditor.destroy();\n    },\n  };\n\n  syncEditor.onLoaded(getValue);\n  const { onChange } = syncEditor;\n  syncEditor.onChange = () => {\n    (async () => {\n      try {\n        await updateLiveConnections(syncEditor.children);\n        getValue();\n      } catch (err) {\n        onError(err as Error);\n      }\n    })();\n\n    onChange();\n  };\n\n  return computer;\n};\n"],"names":["MARK_MAGICNUMBER","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_HR","ELEMENT_PARAGRAPH","ELEMENT_CALLOUT","ELEMENT_BLOCKQUOTE","ELEMENT_IMAGE","DEPRECATED_ELEMENT_CODE_BLOCK","ELEMENT_CODE_LINE","ELEMENT_CODE_LINE_V2","ELEMENT_STRUCTURED_IN","ELEMENT_UL","ELEMENT_OL","DEPRECATED_ELEMENT_TABLE_INPUT","ELEMENT_TABLE","ELEMENT_DATA_VIEW","ELEMENT_FETCH","ELEMENT_PLOT","ELEMENT_COLUMNS","ELEMENT_EVAL","ELEMENT_VARIABLE_DEF","ELEMENT_LIVE_CONNECTION","ELEMENT_IMPORT","ELEMENT_DRAW","createTPlateEditor","options","createPlateEditor","elementKinds","Object","values","elementKindsModule","freeze","IS_REMOTE","WeakSet","LOCAL_OPERATIONS","WeakMap","SHARED_TYPES","YjsEditor","synchronizeValue","e","withoutNormalizing","children","toSlateDoc","sharedType","onChange","editor","get","invariant","isRemote","has","asRemote","fn","wasRemote","add","delete","asLocal","ret","localOperations","operations","yjsApply","events","applyYjsEvents","filter","event","transaction","origin","slateYjsSymbol","err","console","error","withYjs","set","Set","observer","_editor","isHistoryEditor","withoutSavingHistory","applyRemoteYjsEvents","observeDeep","apply","destroy","op","operation","trackLocalOperations","ops","editorLocalOperations","Array","from","flat","applySlateOps","clear","applyLocalOperations","unobserveDeep","call","AWARENESS","CursorEditor","awareness","updateCursor","session","selection","anchor","focus","localState","getLocalState","user","newState","email","name","setLocalState","withCursor","getSession","debouncedOnChange","debounce","async","updatesStoreName","fetchUpdates","idbPersistence","_mux","push","maybeWithStore","updates","idb","store","_dbref","_destroyed","doc","transact","forEach","val","Y","lastKey","store2","cnt","store3","_dbsize","getVersionsStore","write","versionsStore","getDefined","db","updatesStore","getUpdatesStore","IndexeddbPersistence","Observable","constructor","readOnly","super","fnQueue","this","_db","autoIncrement","whenSynced","_init","_storeUpdate","bind","on","currState","then","emit","synced","Promise","resolve","update","_origin","_doc","tr","local","_storeTimeoutId","clearTimeout","setTimeout","forceStore","storeState","undefined","_storeTimeout","off","close","versionName","version","Buffer","toString","createdAt","Date","now","JSON","stringify","versionString","parse","currentVersion","protocolHandlers","version1","version2","permissionDeniedHandler","provider","reason","warn","url","messageHandlers","messageSync","encoder","decoder","emitSynced","encoding","syncMessageType","syncProtocol","messageQueryAwareness","_decoder","messageAwareness","awarenessProtocol","getStates","keys","_encoder","decoding","messageAuth","authProtocol","decodeMessage","message","readMessage","buf","Uint8Array","isAcceptableMessage","messageType","messageHandler","setupWS","scheduleReconnect","shouldConnect","timeout","Math","min","wsUnsuccessfulReconnects","ws","wsconnecting","beforeConnect","status","websocket","_WS","protocol","binaryType","wsconnected","onerror","receive","protocolVersion","handlerBuilder","Error","receiver","messageSubscription","subscribe","m","reply","send","onError","onmessage","destroyed","data","wsLastMessageReceived","time","onclose","ev","info","unsubscribe","client","clientID","onopen","encoderAwarenessState","readyState","OPEN","broadcastMessage","WebsocketProvider","broadcastPendingUpdateMessages","broadcastPendingAwarenessUpdateMessages","navigator","onLine","CONNECTING","connect","WebSocketPolyfill","WebSocket","resyncInterval","_selfAwareness","slice","mux","mutex","_resyncInterval","setInterval","global","addEventListener","_onOfflineOnlineStatusChange","_updateHandler","_beforeUnloadHandler","_awarenessUpdateHandler","window","process","_checkInterval","messageReconnectTimeout","serverUrl","URL","href","encodeMessage","outUpdates","debouncedBroadcastUpdateMessage","toSend","mergeUpdates","changes","added","updated","removed","changedClients","concat","outAwarenessUpdates","debouncedBroadcastAwarenessUpdateMessage","length","_synced","state","clearInterval","disconnect","removeEventListener","createWebsocketProvider","supports","feature","indexedDB","docSyncEditor","EventEmitter","_provider","isLocal","source","isSavedRemotely","next","hasLocalChanges","BehaviorSubject","onceStoreSynced","savedCount","once","assign","onLoaded","cb","offLoaded","removeListener","onSaved","offSaved","onConnected","onDestroyed","offDestroyed","removeAllListeners","removeLocalChanges","remove","setLoadedRemotely","isDocSyncEnabled","markVersion","sameVersion","equals","checksumRemote","md5","getArray","supportBigIntToJSON","ensureInitialDocument","insertNodes","type","text","id","nanoid","at","setupUndo","captureTransaction","undoManager","UndoManager","trackedOrigins","captureTimeout","undo","redo","withoutCapturingUndo","beforeCapturing","asLocalEditor","fetchToken","resp","fetch","ok","statusText","wsAddress","docId","encodeURIComponent","isLiveConnection","block","diffAndProcess","oldConnections","newConnections","observeExternal","connections","newConnectionsResult","Map","connectionsToAdd","entries","key","conn","subject","subscription","params","useFirstRowAsHeader","isFirstRowHeaderRow","columnTypeCoercions","notify","result","diffAndProcessNew","old","sub","diffAndUnsubscribeOld","startNotebook","blockId","getURLComponents","normalizeNode","noop","syncEditor","authSecret","connectionParams","initialState","YDoc","initialTokenTime","isInitialTokenStale","getToken","token","wsp","Awareness","shared","yjsEditor","onceSynced","applyUpdate","cursorEditor","entry","loadedLocally","loadedRemotely","isReadOnly","createDocSyncEditor","computer","Computer","results","pipe","map","blockResults","debounceTime","distinctUntilChanged","cur","dequal","identifier","getSymbolDefinedInBlock","identifiedErrorToMessage","meta","title","updateLiveConnections","destroyLiveConnections","getExternalData$","observe","subscriptions","newLiveConnections","value","reduce","connectionsAcc","elem","assertElementType","newSubscription","currentValue","getValue","liveConnections","pushCompute","editorToProgram","externalDataSubscription","closed"],"sourceRoot":""}
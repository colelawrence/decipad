{"version":3,"file":"static/js/8248.b87549a1.chunk.js","mappings":"mIAGO,MC4CMA,EAAeC,UAC1B,MAAMC,EAAY,IAAIC,KAChB,OAAEC,EAAM,IAAEC,QAnCMJ,WACtB,MAAMG,EAAS,IAAIE,OAAO,IAAIC,IAAI,oBAE5BF,EAAM,IAAIG,EAAAA,IAAI,CAClBC,OAAQ,CACNC,YAAcC,IACZP,EAAOM,YAAYC,KAGvBC,SAAU,CACRC,aAAeC,IACb,MAAMC,EAAYC,IAChBF,EAAGE,IAIL,OAFAZ,EAAOa,iBAAiB,UAAWF,GAE5B,IAAMX,EAAOc,oBAAoB,UAAWH,KAGvDI,UAAW,iBAKb,aAFMd,EAAIe,QAEH,CAAEhB,SAAQC,QAWagB,GAiB9B,OAfAhB,EAAIiB,OACF,UACA,IAA6C,IAA5C,eAAEC,EAAc,MAAEC,EAAK,YAAEC,GAAa,EACrC,MAAMV,EAAWb,EAAUwB,IAAIH,GAC/B,GAAIR,EAAU,CACZ,MAAMY,EAAWF,GAA8BA,EAC/C,IACEV,EAAmB,MAATS,GAAiB,IAAII,MAAMJ,SAAWK,EAAWF,GAC3D,MAAOG,GACPC,QAAQP,MAAM,0CAA2CM,QAM1D,CACLE,UAAW/B,MAAOgC,EAAQlB,KACxB,MAAMQ,QAAuBlB,EAAI6B,KAAa,YAAaD,GAE3D,OADA/B,EAAUiC,IAAIZ,EAAgBR,GACvBd,UACLC,EAAUkC,OAAOb,SACXlB,EAAI6B,KAAK,cAAe,CAAEX,qBAGpCc,UAAW,KACTnC,EAAUoC,QACVlC,EAAOiC,aAETjC","sources":["../../live-connect/src/createResponse.ts","../../live-connect/src/createWorker.ts"],"sourcesContent":["import { ImportResult } from '@decipad/import';\nimport { RPCResponse } from './types';\n\nexport const createResponse = (result: ImportResult): ImportResult => {\n  return result; // TODO: un-serialize JSON-unfriendly structs (like Fraction and bigints)\n};\n\nexport const createRPCResponse = (result: ImportResult): RPCResponse => {\n  return result; // TODO: serialize JSON-unfriendly structs (like Fraction and bigints)\n};\n","import { RPC } from '@mixer/postmessage-rpc';\nimport { createResponse } from './createResponse';\nimport {\n  LiveConnectionWorker,\n  RPCResponse,\n  SubscriptionId,\n  SubscriptionListener,\n} from './types';\n\ninterface StartWorkerResult {\n  worker: Worker;\n  rpc: RPC;\n}\n\nconst createRPCWorker = async (): Promise<StartWorkerResult> => {\n  const worker = new Worker(new URL('./LiveConnect.worker', import.meta.url));\n\n  const rpc = new RPC({\n    target: {\n      postMessage: (data) => {\n        worker.postMessage(data);\n      },\n    },\n    receiver: {\n      readMessages: (cb) => {\n        const listener = (ev: MessageEvent) => {\n          cb(ev);\n        };\n        worker.addEventListener('message', listener);\n\n        return () => worker.removeEventListener('message', listener);\n      },\n    },\n    serviceId: 'live-connect',\n  });\n\n  await rpc.isReady;\n\n  return { worker, rpc };\n};\n\ntype Notification = {\n  subscriptionId: SubscriptionId;\n  newResponse?: RPCResponse;\n  error?: string;\n};\n\nexport const createWorker = async (): Promise<LiveConnectionWorker> => {\n  const listeners = new Map<SubscriptionId, SubscriptionListener>();\n  const { worker, rpc } = await createRPCWorker();\n\n  rpc.expose<Notification>(\n    'notify',\n    ({ subscriptionId, error, newResponse }) => {\n      const listener = listeners.get(subscriptionId);\n      if (listener) {\n        const response = newResponse && createResponse(newResponse);\n        try {\n          listener((error != null && new Error(error)) || undefined, response);\n        } catch (err) {\n          console.error('Error caught while notifying subscriber', err);\n        }\n      }\n    }\n  );\n\n  return {\n    subscribe: async (params, listener) => {\n      const subscriptionId = await rpc.call<string>('subscribe', params);\n      listeners.set(subscriptionId, listener);\n      return async () => {\n        listeners.delete(subscriptionId);\n        await rpc.call('unsubscribe', { subscriptionId });\n      };\n    },\n    terminate: () => {\n      listeners.clear();\n      worker.terminate();\n    },\n    worker,\n  };\n};\n"],"names":["createWorker","async","listeners","Map","worker","rpc","Worker","URL","RPC","target","postMessage","data","receiver","readMessages","cb","listener","ev","addEventListener","removeEventListener","serviceId","isReady","createRPCWorker","expose","subscriptionId","error","newResponse","get","response","Error","undefined","err","console","subscribe","params","call","set","delete","terminate","clear"],"sourceRoot":""}
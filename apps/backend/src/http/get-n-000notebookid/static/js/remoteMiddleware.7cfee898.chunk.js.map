{"version":3,"file":"static/js/remoteMiddleware.7cfee898.chunk.js","mappings":"yKAOM,SAAgBA,EACpBC,EACAC,EACAC,G,+HAEA,OAAIC,EAAAA,EAAAA,KACK,CAAC,EAAD,KAEHC,GAAOC,EAAAA,EAAAA,MACPC,EAA6C,QAA1B,EAAAL,EAASM,yBAAiB,QAAI,GACjDC,EAAQC,OAAOC,QAAQJ,GAC1BK,QAAO,SAACC,GAAE,KAAe,OAAN,QACnBC,KAAI,SAACD,GAAW,OAAN,QAEPE,EAAUN,EAAMK,KAAI,SAAOE,GAAI,2C,oEAC7BC,EAAgBD,EAAKE,QAAQ,YAAa,IAC5CC,EAAaF,EACbd,IACFgB,EAAaC,KAAKH,GAAeC,QAAQ,KAAM,KAE3CG,EAAW,UAAGhB,EAAI,uBAAec,EAAU,mBAAWA,EAAU,U,iBAGpE,O,sBAAA,IAAMG,EAAAA,EAAAA,GAAWD,I,OAEjB,OAFAR,EAAAA,OAEO,CAAP,EAAOU,OAAO,UAAGN,EAAa,gB,yBAE9BhB,EAAIuB,IAAI,QAASC,GACjBxB,EAAIyB,MAAMC,UAAU,4B,iCAIP,GAAMC,QAAQC,IAAId,K,OAGnC,MAAO,CAAP,EAHiBe,EAAAA,OACOlB,OAAOmB","sources":["../../../node_modules/@segment/analytics-next/src/plugins/remote-middleware/index.ts"],"sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { loadScript } from '../../lib/load-script'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { MiddlewareFunction } from '../middleware'\n\nexport async function remoteMiddlewares(\n  ctx: Context,\n  settings: LegacySettings,\n  obfuscate?: boolean\n): Promise<MiddlewareFunction[]> {\n  if (isServer()) {\n    return []\n  }\n  const path = getNextIntegrationsURL()\n  const remoteMiddleware = settings.enabledMiddleware ?? {}\n  const names = Object.entries(remoteMiddleware)\n    .filter(([_, enabled]) => enabled)\n    .map(([name]) => name)\n\n  const scripts = names.map(async (name) => {\n    const nonNamespaced = name.replace('@segment/', '')\n    let bundleName = nonNamespaced\n    if (obfuscate) {\n      bundleName = btoa(nonNamespaced).replace(/=/g, '')\n    }\n    const fullPath = `${path}/middleware/${bundleName}/latest/${bundleName}.js.gz`\n\n    try {\n      await loadScript(fullPath)\n      // @ts-ignore\n      return window[`${nonNamespaced}Middleware`] as MiddlewareFunction\n    } catch (error: any) {\n      ctx.log('error', error)\n      ctx.stats.increment('failed_remote_middleware')\n    }\n  })\n\n  let middleware = await Promise.all(scripts)\n  middleware = middleware.filter(Boolean)\n\n  return middleware as MiddlewareFunction[]\n}\n"],"names":["remoteMiddlewares","ctx","settings","obfuscate","isServer","path","getNextIntegrationsURL","remoteMiddleware","enabledMiddleware","names","Object","entries","filter","_a","map","scripts","name","nonNamespaced","replace","bundleName","btoa","fullPath","loadScript","window","log","error_1","stats","increment","Promise","all","_b","Boolean"],"sourceRoot":""}
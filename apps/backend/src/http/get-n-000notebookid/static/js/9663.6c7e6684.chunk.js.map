{"version":3,"file":"static/js/9663.6c7e6684.chunk.js","mappings":"gJAYA,MAAMA,EAAM,qIAONC,EAAiB,6IAWVC,EAAc,IAGc,IAHb,MAC1BC,EAAK,SACLC,GACiB,EACjB,OACE,eACEC,KAAK,SACL,gBAAeD,EACfE,IAAG,CACDN,EACA,CACEO,gBAAiBJ,EAAMK,IACvBC,OAAO,aAAD,QAAeC,EAAAA,EAAAA,GAAO,oBAC5BC,UAAU,mBAAD,QACPC,EAAAA,EAAAA,IAAaC,EAAAA,GAAUC,EAAAA,IAAaC,MAEtC,iBAAkB,CAChBJ,UAAU,mBAAD,QACPC,EAAAA,EAAAA,IAAaC,EAAAA,GAAUC,EAAAA,IAAaC,KAAI,yBAC1BH,EAAAA,EAAAA,IAAaT,EAAOa,EAAAA,IAAeD,QAGvDX,EACI,CACEO,UAAU,mBAAD,QACPC,EAAAA,EAAAA,IAAaC,EAAAA,GAAUC,EAAAA,IAAaC,KAAI,yBAC1BH,EAAAA,EAAAA,IAAaT,EAAOa,EAAAA,IAAeD,OAErD,GAAG,qCACP,UAEF,gBAAMT,IAAKL,EAAkB,SAAEG,GAAW,QAAC,IAAK,IAAM,S,+ICjD5D,MAAMa,GAAeX,EAAAA,EAAAA,KAAI,KACpBY,EAAAA,EAAAA,GAAU,oBAAoBR,EAAAA,EAAAA,GAAO,oBACxCS,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdd,gBAAiBe,EAAAA,GAAAA,IACjBC,QAAS,OACTC,WAAY,UACb,6CAEKC,EAAQ,uMAiBDC,EAA0C,IAIhD,IAJiD,SACtDC,EAAQ,QACRC,EAAO,MACPzB,EAAQ0B,EAAAA,GAAAA,UACT,EACC,OACE,eACEvB,IAAG,CACDW,GACAX,EAAAA,EAAAA,KAAI,CACFC,iBAAiBK,EAAAA,EAAAA,IAAaT,EAAOa,EAAAA,IAAeD,KACpD,iBAAkB,CAChBR,gBAAiBJ,EAAM2B,MAE1B,mDAAE,mDAELF,QAASA,EAAQ,UAEjB,gBAAMtB,IAAKmB,EAAS,SAAEE,O,gDClC5B,MAAMI,GAAiBzB,EAAAA,EAAAA,KAAI,CACzB0B,UAAW,MACXzB,iBAAiBG,EAAAA,EAAAA,GAAO,mBACxBuB,QAAS,OACTZ,aAAc,MACda,SAAU,QACVvB,UAAU,eAAD,QAAiBD,EAAAA,EAAAA,GAAO,kBAAiB,2BAAkBA,EAAAA,EAAAA,GAClE,oBAEH,wCAEKyB,EAAoB,oKAMpBC,GAAoB9B,EAAAA,EAAAA,KAAI+B,EAAAA,GAAW,KACpCnB,EAAAA,EAAAA,GAAU,mBAAoBoB,EAAAA,GAAAA,MAClC,2CAEKC,GAAmBjC,EAAAA,EAAAA,KAAI,KACxBY,EAAAA,EAAAA,GAAU,mBAAoBsB,EAAAA,GAAAA,KACjCrB,MAAO,OACPC,OAAQ,QACT,0CAEKqB,EAAY,yKAMf,mPASI,MAAMC,EAAc,IAKc,IALb,MAC1BvC,EAAK,QACLwC,EAAO,aACPC,EAAeC,EAAAA,GAAI,cACnBC,EAAgBD,EAAAA,IACC,EACjB,MAAOE,IAAaC,EAAAA,EAAAA,MACdnB,GAAeoB,EAAAA,EAAAA,IAAeF,GACpC,OACE,QAAC,KAAY,YACX,QAAC,KAAe,CAACG,SAAO,WAAEP,KAC1B,QAAC,KAAe,CAACrC,IAAKyB,EAAe,WACnC,eAAKzB,IAAK6B,EAAqB,WAC7B,cAAI7B,IAAK8B,EAAkB,SAAC,kBAC5B,QAAC,KAAa,CAAC9B,IAAKiC,EAAiB,UACnC,QAACY,EAAA,EAAK,UAGV,eAAK7C,IAAG,EAAwB,UAC9B,QAAC8C,EAAA,EAAO,OAEV,eACE9C,IAAG,EAID,SAED+C,EAAAA,GAAAA,KAAiBC,IAEd,kBAEE,aAAYA,EACZ,0CAAkCA,GAClC1B,QAAS,KACPkB,EAAcQ,IACd,UAEF,QAACpD,EAAA,EAAW,CACVC,MAAO0B,EAAayB,GACpBlD,SAAUkD,IAAQnD,KATfmD,QAeb,eAAKhD,IAAKmC,EAAa,SACpBc,EAAAA,EAAAA,KAAkBC,IACjB,MAAMC,EAAOC,EAAMF,GACnB,OACE,QAAC,KAAa,CAEZ,aAAYA,EACZ,oCAA4BA,GAAS,UAErC,QAAC9B,EAAkB,CACjBvB,MAAO0B,EAAa1B,GACpByB,QAAS,KACPgB,EAAaY,IACb,UAEF,QAACC,EAAI,OAVFD","sources":["../../ui/src/atoms/ColorPicker/ColorPicker.tsx","../../ui/src/atoms/NotebookIconButton/NotebookIconButton.tsx","../../ui/src/molecules/IconPopover/IconPopover.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { Check } from '../../icons';\nimport {\n  cssVar,\n  normalOpacity,\n  offBlack,\n  OpaqueColor,\n  transparency,\n  weakOpacity,\n} from '../../primitives';\n\nconst styles = css({\n  width: '27px', // 3px of border\n  height: '27px',\n  borderRadius: '50%',\n  position: 'relative',\n});\n\nconst iconWrapperStyles = css({\n  display: 'grid',\n  placeItems: 'center',\n  padding: '7px',\n});\n\ntype ColorPickerProps = {\n  readonly color: OpaqueColor;\n  readonly selected: boolean;\n};\n\nexport const ColorPicker = ({\n  color,\n  selected,\n}: ColorPickerProps): ReturnType<FC> => {\n  return (\n    <div\n      role=\"option\"\n      aria-selected={selected}\n      css={[\n        styles,\n        {\n          backgroundColor: color.hex,\n          border: `1px solid ${cssVar('backgroundColor')}`,\n          boxShadow: `inset 0 0 0 1px ${\n            transparency(offBlack, weakOpacity).rgba\n          }`,\n          ':hover, :focus': {\n            boxShadow: `inset 0 0 0 1px ${\n              transparency(offBlack, weakOpacity).rgba\n            },  0 0 0 1px ${transparency(color, normalOpacity).rgba}`,\n          },\n        },\n        selected\n          ? {\n              boxShadow: `inset 0 0 0 1px ${\n                transparency(offBlack, weakOpacity).rgba\n              },  0 0 0 1px ${transparency(color, normalOpacity).rgba}`,\n            }\n          : {},\n      ]}\n    >\n      <span css={iconWrapperStyles}>{selected ? <Check /> : ''}</span>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport {\n  grey200,\n  normalOpacity,\n  OpaqueColor,\n  setCssVar,\n  transparency,\n  cssVar,\n} from '../../primitives';\nimport { baseSwatches } from '../../utils';\n\nconst buttonStyles = css({\n  ...setCssVar('currentTextColor', cssVar('strongTextColor')),\n  width: '24px',\n  height: '24px',\n  borderRadius: '4px',\n  backgroundColor: grey200.rgb,\n  display: 'grid',\n  placeItems: 'center',\n});\n\nconst iconSize = css({\n  mixBlendMode: 'luminosity',\n  opacity: '90%',\n  display: 'inline-block',\n  width: '22px',\n  height: '22px',\n  '> svg > rect': {\n    fill: 'none',\n  },\n});\n\ntype IconButtonProps = {\n  readonly onClick?: () => void;\n  readonly children: ReactNode;\n  readonly color?: OpaqueColor;\n};\n\nexport const NotebookIconButton: FC<IconButtonProps> = ({\n  children,\n  onClick,\n  color = baseSwatches.Catskill,\n}) => {\n  return (\n    <div\n      css={[\n        buttonStyles,\n        css({\n          backgroundColor: transparency(color, normalOpacity).rgba,\n          ':hover, :focus': {\n            backgroundColor: color.rgb,\n          },\n        }),\n      ]}\n      onClick={onClick}\n    >\n      <span css={iconSize}>{children}</span>\n    </div>\n  );\n};\n","import { useThemeFromStore } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport * as Popover from '@radix-ui/react-popover';\nimport { FC } from 'react';\nimport { ColorPicker, Divider, NotebookIconButton } from '../../atoms';\nimport * as icons from '../../icons';\nimport { Close } from '../../icons';\nimport {\n  cssVar,\n  grey500,\n  grey600,\n  p13Medium,\n  setCssVar,\n} from '../../primitives';\nimport {\n  AvailableSwatchColor,\n  swatchesThemed,\n  swatchNames,\n  UserIconKey,\n  userIconKeys,\n} from '../../utils';\n\nconst contentWrapper = css({\n  marginTop: '6px',\n  backgroundColor: cssVar('backgroundColor'),\n  padding: '12px',\n  borderRadius: '8px',\n  maxWidth: '272px',\n  boxShadow: `0px 1px 2px ${cssVar('highlightColor')}, 0px 2px 12px ${cssVar(\n    'highlightColor'\n  )}`,\n});\n\nconst contentHeaderWrapper = css({\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n});\n\nconst contentHeaderText = css(p13Medium, {\n  ...setCssVar('currentTextColor', grey500.rgb),\n});\n\nconst closeIconWrapper = css({\n  ...setCssVar('currentTextColor', grey600.rgb),\n  width: '16px',\n  height: '16px',\n});\n\nconst iconsWrapper = css({\n  paddingTop: '12px',\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n  gap: '6px',\n});\n\ntype IconPopoverProps = {\n  readonly color: AvailableSwatchColor;\n  readonly trigger: JSX.Element;\n  readonly onChangeIcon?: (newIcon: UserIconKey) => void;\n  readonly onChangeColor?: (newColor: AvailableSwatchColor) => void;\n};\n\nexport const IconPopover = ({\n  color,\n  trigger,\n  onChangeIcon = noop,\n  onChangeColor = noop,\n}: IconPopoverProps): ReturnType<FC> => {\n  const [darkTheme] = useThemeFromStore();\n  const baseSwatches = swatchesThemed(darkTheme);\n  return (\n    <Popover.Root>\n      <Popover.Trigger asChild>{trigger}</Popover.Trigger>\n      <Popover.Content css={contentWrapper}>\n        <div css={contentHeaderWrapper}>\n          <h2 css={contentHeaderText}>Pick a style</h2>\n          <Popover.Close css={closeIconWrapper}>\n            <Close />\n          </Popover.Close>\n        </div>\n        <div css={{ padding: '12px 0' }}>\n          <Divider />\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            gap: '8px',\n            justifyContent: 'space-between',\n          }}\n        >\n          {swatchNames.map((key) => {\n            return (\n              <button\n                key={key}\n                aria-label={key}\n                data-testid={`icon-color-picker-${key}`}\n                onClick={() => {\n                  onChangeColor(key);\n                }}\n              >\n                <ColorPicker\n                  color={baseSwatches[key]}\n                  selected={key === color}\n                />\n              </button>\n            );\n          })}\n        </div>\n        <div css={iconsWrapper}>\n          {userIconKeys.map((choice) => {\n            const Icon = icons[choice];\n            return (\n              <Popover.Close\n                key={choice}\n                aria-label={choice}\n                data-testid={`icon-picker-${choice}`}\n              >\n                <NotebookIconButton\n                  color={baseSwatches[color]}\n                  onClick={() => {\n                    onChangeIcon(choice);\n                  }}\n                >\n                  <Icon />\n                </NotebookIconButton>\n              </Popover.Close>\n            );\n          })}\n        </div>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n"],"names":["styles","iconWrapperStyles","ColorPicker","color","selected","role","css","backgroundColor","hex","border","cssVar","boxShadow","transparency","offBlack","weakOpacity","rgba","normalOpacity","buttonStyles","setCssVar","width","height","borderRadius","grey200","display","placeItems","iconSize","NotebookIconButton","children","onClick","baseSwatches","rgb","contentWrapper","marginTop","padding","maxWidth","contentHeaderWrapper","contentHeaderText","p13Medium","grey500","closeIconWrapper","grey600","iconsWrapper","IconPopover","trigger","onChangeIcon","noop","onChangeColor","darkTheme","useThemeFromStore","swatchesThemed","asChild","Close","Divider","swatchNames","key","userIconKeys","choice","Icon","icons"],"sourceRoot":""}
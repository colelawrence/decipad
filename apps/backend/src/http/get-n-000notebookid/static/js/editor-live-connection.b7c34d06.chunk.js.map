{"version":3,"file":"static/js/editor-live-connection.b7c34d06.chunk.js","mappings":"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","sources":["../../editor-utils/src/useCache.ts","../../live-connect/src/useLiveConnectionWorker.ts","../../live-connect/src/utils/isFatalError.ts","../../live-connect/src/useLiveConnectionResponse.ts","../../ui/src/molecules/ImportTableRowControls/ImportTableRowControls.tsx","../../ui/src/templates/LiveConnectionResult/LiveConnectionResult.tsx","../../editor-plugins/src/plugins/LiveConnection/components/LiveConnection.tsx","../../live-connect/src/useLiveConnection.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\n\ninterface UseCacheProps<V> {\n  blockId: string;\n  value: V | undefined;\n  deleted: boolean;\n  cacheKey?: string;\n}\n\nconst fetchValue = (key: string) => {\n  try {\n    const serializedValue = localStorage.getItem(key);\n    if (serializedValue) {\n      return JSON.parse(serializedValue);\n    }\n  } catch (err) {\n    console.error('Error fetching value:', err);\n  }\n};\n\nconst saveValue = <V>(key: string, value: V): void => {\n  try {\n    const serializedValue = JSON.stringify(value);\n    localStorage.setItem(key, serializedValue);\n  } catch (err) {\n    console.error('Error storing value:', err);\n  }\n};\n\nexport const useCache = <V>({\n  blockId,\n  value,\n  deleted,\n  cacheKey = 'cache',\n}: UseCacheProps<V>): V | undefined => {\n  const [cachedValue, setCachedValue] = useState(() => value);\n\n  const fullCacheKey = useMemo(\n    () => `${blockId}:${cacheKey}`,\n    [cacheKey, blockId]\n  );\n  useEffect(() => {\n    if (deleted) {\n      localStorage.removeItem(fullCacheKey);\n    }\n  }, [deleted, fullCacheKey]);\n\n  useEffect(() => {\n    // fetch the value\n    if (!cachedValue) {\n      setCachedValue(fetchValue(fullCacheKey));\n    }\n  }, [cachedValue, fullCacheKey]);\n\n  useEffect(() => {\n    if (value) {\n      setCachedValue(value);\n      requestAnimationFrame(() => {\n        saveValue(fullCacheKey, value);\n      });\n    }\n  }, [fullCacheKey, value]);\n\n  useEffect(() => {\n    if (cachedValue && deleted) {\n      localStorage.removeItem(fullCacheKey);\n    }\n  });\n\n  return cachedValue;\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { LiveConnectionWorker } from './types';\n\nexport const useLiveConnectionWorker = (): LiveConnectionWorker | undefined => {\n  const workerRef = useRef<LiveConnectionWorker>();\n  const [worker, setWorker] = useState<LiveConnectionWorker | undefined>();\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!workerRef.current) {\n      (async () => {\n        const { createWorker } = await import('./createWorker');\n        const w = await createWorker();\n        workerRef.current = w;\n        if (cancelled) return;\n        setWorker(w);\n      })();\n    }\n    return () => {\n      cancelled = true;\n\n      const w = workerRef.current;\n      if (w) {\n        workerRef.current = undefined;\n        setWorker(undefined);\n        w.terminate();\n      }\n    };\n  }, []);\n\n  return worker;\n};\n","export const isFatalError = (err: string) => {\n  return (\n    !err.includes('querySelectorAll is not a') && !err.includes('Uncaught')\n  );\n};\n","import {\n  ColIndex,\n  ImportElementSource,\n  TableCellType,\n} from '@decipad/editor-types';\nimport { formatError } from '@decipad/format';\nimport { ImportResult } from '@decipad/import';\nimport { useEffect, useState } from 'react';\nimport { Unsubscribe } from './types';\nimport { useLiveConnectionWorker } from './useLiveConnectionWorker';\nimport { isFatalError } from './utils/isFatalError';\n\nexport interface LiveConnectionResponseResult {\n  error?: Error;\n  result?: ImportResult;\n}\n\nexport interface LiveConnectionProps {\n  url: string;\n  options?: RequestInit;\n  source?: ImportElementSource;\n  useFirstRowAsHeader?: boolean;\n  columnTypeCoercions: Record<ColIndex, TableCellType>;\n  timeoutMs?: number;\n  maxCellCount?: number;\n}\n\nexport const useLiveConnectionResponse = ({\n  url,\n  source,\n  options,\n  useFirstRowAsHeader,\n  columnTypeCoercions,\n  timeoutMs = 5000,\n  maxCellCount,\n}: LiveConnectionProps): LiveConnectionResponseResult => {\n  const worker = useLiveConnectionWorker();\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<ImportResult | undefined>();\n\n  useEffect(() => {\n    let unsubscribe: Unsubscribe | undefined;\n    let canceled = false;\n    (async () => {\n      if (worker) {\n        try {\n          unsubscribe = await worker.subscribe(\n            {\n              url,\n              options,\n              source,\n              useFirstRowAsHeader,\n              columnTypeCoercions,\n              maxCellCount,\n            },\n            (err, res) => {\n              if (!canceled) {\n                if (err && !isFatalError(err.message)) {\n                  return;\n                }\n                setError(err);\n                if (res) {\n                  if (res.result.type.kind === 'type-error') {\n                    setError(\n                      new Error(\n                        formatError('en-US', res.result.type.errorCause)\n                      )\n                    );\n                  } else {\n                    setResult(res);\n                  }\n                }\n              }\n            }\n          );\n        } catch (err) {\n          if (err && !isFatalError((err as Error).message)) {\n            return;\n          }\n          console.error(err);\n          setError(err as Error);\n        }\n      }\n    })();\n\n    return () => {\n      canceled = true;\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, [\n    columnTypeCoercions,\n    maxCellCount,\n    options,\n    source,\n    url,\n    useFirstRowAsHeader,\n    worker,\n  ]);\n\n  useEffect(() => {\n    worker?.worker.addEventListener('error', (ev) => {\n      if (!isFatalError(ev.message)) {\n        return;\n      }\n      console.error('Error detected on worker', ev);\n      setError(new Error(ev.message));\n    });\n  }, [worker?.worker]);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (!result && !error) {\n        setError(new Error(\"Could not find the result you're looking for\"));\n      }\n    }, timeoutMs);\n    return () => clearTimeout(timeout);\n  }, [error, result, timeoutMs]);\n\n  return { error, result };\n};\n","import { css } from '@emotion/react';\nimport { once } from 'ramda';\nimport { FC, useState } from 'react';\nimport { MenuItem } from '../../atoms';\nimport { Crown, DragHandle } from '../../icons/index';\nimport {\n  mouseMovingOverTransitionDelay,\n  shortAnimationDuration,\n} from '../../primitives';\nimport { editorLayout } from '../../styles';\nimport { importTableDragHandleStyles } from '../../styles/table';\nimport { MenuList } from '../MenuList/MenuList';\n\nexport interface ImportTableRowControlsProps {\n  readonly isFirstRow?: boolean;\n  readonly toggleFirstRowIsHeader: (isFirstRow: boolean) => void;\n}\n\nconst gridStyles = once(() =>\n  css({\n    display: 'grid',\n    gridTemplate: `\n      \".                          handle                             \" ${editorLayout.gutterHandleHeight()}\n      \"menu                       .                                  \" auto\n      /minmax(max-content, 144px) ${editorLayout.gutterHandleWidth()}\n    `,\n    justifyContent: 'end',\n  })\n);\n\nconst importTableRowControlsWrapperStyles = css({\n  '*:hover > &': {\n    opacity: 'unset',\n  },\n  transition: `opacity ${shortAnimationDuration} ease-in-out ${mouseMovingOverTransitionDelay}`,\n  verticalAlign: 'middle',\n});\n\nconst menuOpenedStyles = css({\n  opacity: 1,\n});\n\nconst menuClosedStyles = css({\n  opacity: 0,\n});\n\nexport const ImportTableRowControls: FC<ImportTableRowControlsProps> = ({\n  isFirstRow = false,\n  toggleFirstRowIsHeader,\n}) => {\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n  const handleMenuClick = () => {\n    setMenuIsOpen(!menuIsOpen);\n  };\n\n  const menuButton = (\n    <button onClick={() => handleMenuClick()} css={importTableDragHandleStyles}>\n      <DragHandle />\n    </button>\n  );\n\n  return (\n    <th\n      contentEditable={false}\n      css={[\n        importTableRowControlsWrapperStyles,\n        menuIsOpen ? menuOpenedStyles : menuClosedStyles,\n      ]}\n    >\n      {isFirstRow && (\n        <div css={gridStyles()}>\n          <MenuList\n            root\n            open={menuIsOpen}\n            onChangeOpen={setMenuIsOpen}\n            trigger={menuButton}\n            dropdown\n          >\n            <MenuItem\n              icon={<Crown />}\n              onSelect={() => toggleFirstRowIsHeader(true)}\n              selected={false}\n            >\n              Make this the header row\n            </MenuItem>\n          </MenuList>\n        </div>\n      )}\n    </th>\n  );\n};\n","import { Result } from '@decipad/computer';\nimport { AnyElement, TableCellType } from '@decipad/editor-types';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { ImportTableRowControls } from '../../molecules';\nimport { CodeResult } from '../../organisms';\nimport { code } from '../../primitives';\n\ninterface LiveConnectionResultProps {\n  result: Result.Result;\n  isFirstRowHeaderRow?: boolean;\n  setIsFirstRowHeader?: (is: boolean) => void;\n  onChangeColumnType?: (columnIndex: number, type: TableCellType) => void;\n  element: AnyElement;\n}\n\nexport const LiveConnectionResult: FC<LiveConnectionResultProps> = ({\n  result,\n  isFirstRowHeaderRow,\n  setIsFirstRowHeader = noop,\n  onChangeColumnType = noop,\n  element,\n}) => {\n  return (\n    result && (\n      <div css={css(code)}>\n        <CodeResult\n          type={result.type}\n          value={result.value}\n          variant=\"block\"\n          isLiveResult\n          firstTableRowControls={\n            <ImportTableRowControls\n              isFirstRow={!isFirstRowHeaderRow}\n              toggleFirstRowIsHeader={setIsFirstRowHeader}\n            />\n          }\n          onChangeColumnType={onChangeColumnType}\n          element={element}\n        ></CodeResult>\n      </div>\n    )\n  );\n};\n","import { Result } from '@decipad/computer';\nimport { BlockErrorBoundary, DraggableBlock } from '@decipad/editor-components';\nimport {\n  ELEMENT_LIVE_CONNECTION,\n  LiveConnectionElement,\n  PlateComponent,\n  TableCellType,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  pluginStore,\n  useElementMutatorCallback,\n  useNodePath,\n} from '@decipad/editor-utils';\nimport { useLiveConnection } from '@decipad/live-connect';\nimport { useComputer } from '@decipad/react-contexts';\nimport { CodeError, LiveConnectionResult, Spinner } from '@decipad/ui';\nimport { varNamify } from '@decipad/utils';\nimport { getNodeString, insertText, setNodes } from '@udecode/plate';\nimport { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nconst MAX_CELL_COUNT = 3000;\n\ninterface LiveConnectionInnerProps {\n  element: LiveConnectionElement;\n  deleted: boolean;\n}\n\ninterface StoreResult {\n  result?: Result.Result;\n  error?: Error;\n}\n\nconst createStore = () => new WeakMap<LiveConnectionElement, StoreResult>();\n\nconst LiveConnectionInner: FC<LiveConnectionInnerProps> = ({\n  element,\n  deleted,\n}) => {\n  assertElementType(element, ELEMENT_LIVE_CONNECTION);\n  const editor = useTEditorRef();\n  const computer = useComputer();\n  const path = useNodePath(element);\n\n  const { error, result } = useLiveConnection(computer, {\n    blockId: element.id,\n    url: element.url,\n    source: element.source,\n    useFirstRowAsHeader: element.isFirstRowHeaderRow,\n    columnTypeCoercions: element.columnTypeCoercions,\n    maxCellCount: MAX_CELL_COUNT,\n    deleted,\n  });\n\n  const onChangeColumnType = useCallback(\n    (columnIndex: number, type: TableCellType) => {\n      if (path) {\n        setNodes<LiveConnectionElement>(\n          editor,\n          {\n            columnTypeCoercions: {\n              ...element.columnTypeCoercions,\n              [columnIndex]: type,\n            },\n          },\n          { at: path }\n        );\n      }\n    },\n    [editor, element.columnTypeCoercions, path]\n  );\n\n  const setIsFirstRowHeader = useElementMutatorCallback(\n    editor,\n    element,\n    'isFirstRowHeaderRow'\n  );\n\n  // sync connection metadata title if needed\n  useEffect(() => {\n    if (path && result) {\n      const caption = element.children[0];\n      const currentTitle = getNodeString(caption);\n      if (!currentTitle) {\n        const newTitle = result.meta?.title || 'LiveConnection';\n        insertText(\n          editor,\n          computer.getAvailableIdentifier(varNamify(newTitle), 1),\n          { at: [...path, 0] }\n        );\n      }\n    }\n  }, [computer, editor, element.children, path, result]);\n\n  // persist results\n\n  const store = useMemo(\n    () => pluginStore(editor, 'PLUGIN_LIVE_CONNECTION_COMPONENT', createStore),\n    [editor]\n  );\n\n  const [, setVersion] = useState(0);\n\n  useEffect(() => {\n    const persistedResult = store.get(element);\n    if (result && persistedResult?.result !== result.result) {\n      store.set(element, { result: result.result, error: undefined });\n      setVersion((v) => v + 1);\n    } else if (error && persistedResult?.error !== error) {\n      store.set(element, { result: undefined, error });\n      setVersion((v) => v + 1);\n    }\n  }, [element, error, result, store]);\n\n  const {\n    result: persistedResult = result?.result,\n    error: persistedError = error,\n  } = store.get(element) ?? {};\n\n  return (\n    <div contentEditable={false}>\n      {persistedResult && (\n        <LiveConnectionResult\n          result={persistedResult}\n          isFirstRowHeaderRow={element.isFirstRowHeaderRow}\n          setIsFirstRowHeader={setIsFirstRowHeader}\n          onChangeColumnType={onChangeColumnType}\n          element={element}\n        ></LiveConnectionResult>\n      )}\n      {persistedError ? (\n        persistedError.message?.includes('Could not find the result') ? (\n          <CodeError\n            message={\"We don't support importing this block type yet\"}\n            url={'/docs/'}\n          />\n        ) : (\n          <CodeError\n            message={\n              persistedError?.message ||\n              \"There's an error in the source document\"\n            }\n            defaultDocsMessage={'Go to source'}\n            url={element.url || '/docs/'}\n          />\n        )\n      ) : null}\n      {!persistedError && !persistedResult && (\n        <div>\n          <Spinner />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst LiveConnection: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_LIVE_CONNECTION);\n  const [deleted, setDeleted] = useState(false);\n  const onceDeleted = useCallback(() => setDeleted(true), []);\n\n  return (\n    <DraggableBlock\n      blockKind=\"editorTable\"\n      element={element}\n      {...attributes}\n      onceDeleted={onceDeleted}\n      dependencyId={element.id}\n    >\n      <BlockErrorBoundary element={element}>\n        {children}\n        <LiveConnectionInner element={element} deleted={deleted} />\n      </BlockErrorBoundary>\n    </DraggableBlock>\n  );\n};\n\n// use export default for React.lazy\nexport default LiveConnection;\n","import { useEffect } from 'react';\nimport { Computer } from '@decipad/computer';\nimport {\n  ColIndex,\n  ImportElementSource,\n  TableCellType,\n} from '@decipad/editor-types';\nimport { ImportResult } from '@decipad/import';\nimport { useCache } from '@decipad/editor-utils';\nimport { useLiveConnectionResponse } from './useLiveConnectionResponse';\n\nexport interface LiveConnectionResult {\n  error?: Error;\n  result?: ImportResult;\n}\n\nexport interface LiveConnectionProps {\n  blockId: string;\n  url: string;\n  options?: RequestInit;\n  source?: ImportElementSource;\n  useFirstRowAsHeader?: boolean;\n  columnTypeCoercions: Record<ColIndex, TableCellType>;\n  maxCellCount: number;\n  deleted: boolean;\n}\n\nexport const useLiveConnection = (\n  computer: Computer,\n  {\n    blockId,\n    url,\n    options,\n    source,\n    useFirstRowAsHeader,\n    columnTypeCoercions,\n    maxCellCount,\n    deleted,\n  }: LiveConnectionProps\n): LiveConnectionResult => {\n  const { error, result: liveConnectionResult } = useLiveConnectionResponse({\n    url,\n    options,\n    source,\n    useFirstRowAsHeader,\n    columnTypeCoercions,\n    maxCellCount,\n  });\n\n  const result = useCache({\n    blockId,\n    deleted,\n    value: liveConnectionResult,\n  });\n\n  useEffect(() => {\n    const computerResult = result?.result;\n    if (\n      computerResult?.value != null &&\n      typeof computerResult.value !== 'symbol'\n    ) {\n      computer.pushExternalDataUpdate(blockId, computerResult);\n    } else {\n      computer.pushExternalDataDelete(blockId);\n    }\n  }, [blockId, computer, result]);\n\n  useEffect(() => {\n    return () => {\n      computer.pushExternalDataDelete(blockId);\n    };\n  }, [computer, blockId]);\n\n  return { error, result };\n};\n"],"names":["useCache","blockId","value","deleted","cacheKey","cachedValue","setCachedValue","useState","fullCacheKey","useMemo","useEffect","localStorage","removeItem","key","serializedValue","getItem","JSON","parse","err","console","error","fetchValue","requestAnimationFrame","stringify","setItem","saveValue","isFatalError","includes","useLiveConnectionResponse","url","source","options","useFirstRowAsHeader","columnTypeCoercions","timeoutMs","maxCellCount","worker","workerRef","useRef","setWorker","cancelled","current","createWorker","w","undefined","terminate","useLiveConnectionWorker","setError","result","setResult","unsubscribe","canceled","subscribe","res","message","type","kind","Error","formatError","errorCause","addEventListener","ev","timeout","setTimeout","clearTimeout","gridStyles","once","css","display","gridTemplate","editorLayout","justifyContent","importTableRowControlsWrapperStyles","opacity","transition","shortAnimationDuration","mouseMovingOverTransitionDelay","verticalAlign","menuOpenedStyles","menuClosedStyles","ImportTableRowControls","isFirstRow","toggleFirstRowIsHeader","menuIsOpen","setMenuIsOpen","menuButton","onClick","importTableDragHandleStyles","DragHandle","D","contentEditable","MenuList","root","open","onChangeOpen","trigger","dropdown","MenuItem","icon","Crown","onSelect","selected","LiveConnectionResult","isFirstRowHeaderRow","setIsFirstRowHeader","noop","onChangeColumnType","element","code","CodeResult","variant","isLiveResult","firstTableRowControls","createStore","WeakMap","LiveConnectionInner","assertElementType","ELEMENT_LIVE_CONNECTION","editor","useTEditorRef","computer","useComputer","path","useNodePath","liveConnectionResult","computerResult","pushExternalDataUpdate","pushExternalDataDelete","useLiveConnection","id","useCallback","columnIndex","setNodes","at","useElementMutatorCallback","caption","children","getNodeString","newTitle","meta","title","insertText","getAvailableIdentifier","varNamify","store","pluginStore","setVersion","persistedResult","get","set","v","persistedError","CodeError","defaultDocsMessage","Spinner","attributes","setDeleted","onceDeleted","blockKind","dependencyId"],"sourceRoot":""}
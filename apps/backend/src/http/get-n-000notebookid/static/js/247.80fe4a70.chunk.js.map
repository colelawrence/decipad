{"version":3,"file":"static/js/247.80fe4a70.chunk.js","mappings":"2MAcA,MAAMA,EAAmBC,IACvBC,EAAAA,EAAAA,KAAI,CACFC,EAAAA,GACAF,GAAW,CAAEG,OAAQ,WACrB,CACEC,YAAa,QACbC,SAAU,OACVC,UAAW,OACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,SAAU,WAEV,sCAAuC,CACrCA,SAAU,WACVC,cAAe,OACf,MAAO,CACLD,SAAU,WACVE,IAAK,EACLC,KAAM,MAIb,oCAEGC,EAAa,CAACC,EAAAA,IASdC,EAA0B,IAKK,IALJ,MAC/BC,EAAK,UACLC,EAAS,QACTlB,EAAO,cACPmB,GAC6B,EAC7B,OAAOlB,EAAAA,EAAAA,KAAI,CACTmB,WAAW,QAAD,OAAUC,EAAAA,GAAsB,gBAC1CC,KAAMtB,GACFuB,EAAAA,EAAAA,GAAO,mBACPL,EACAM,EAAAA,GAAAA,IACAP,EAAMQ,IACV,CAAC,GAAD,OAAIN,EAAa,OAAO,CACtBG,MAAMI,EAAAA,EAAAA,IAAaR,EAAYM,EAAAA,GAAUP,EAAO,KAAMU,OAEzD,6CAGGC,EAAiB,mJAIpB,+LAcI,MAAMC,EAAS,IAUc,IAVb,KACrBC,EAAI,MACJC,EAAQ,sCAAqC,cAC7CC,GAAgB,EAAK,cACrBb,EAAa,UACbD,GAAY,EAAK,gBACjBe,EAAe,QACfjC,GAAU,EAAK,QACfkC,EAAO,MACPC,GACY,EACZ,MAAMC,EAAaN,EAChBO,MAAM,IACNC,KAAKC,GAAcA,EAAEC,WAAW,KAChCC,QAAO,CAACC,EAAWC,IAAcD,EAAIC,GAAG,GACrCC,EACW,OAAfX,QAAe,IAAfA,EAAAA,EAAmBnB,EAAWsB,EAAatB,EAAW+B,QACxD,OACE,eACEC,KAAK,MACL,aAAiB,OAALX,QAAK,IAALA,EAAAA,EAAK,yBAAsBL,EAAK,IAC5C7B,IAAKF,EAAgBC,GACrBkC,QAASA,EAAQ,WAEjB,eAAKjC,IAAG,EAAqD,UAC3D,eACEA,IAAG,CACD,CAAE8C,MAAO,OAAQC,aAAchB,EAAgB,MAAQ,OACvDhC,GAAW,CACTiD,OAAO,aAAD,QAAe1B,EAAAA,EAAAA,GAAO,iBAC5B,2BACF,UAEF,eACEtB,KAAG,SAAE,CACH8C,MAAO,OACPG,OAAQ,OACRF,aAAchB,EAAgB,MAAQ,MACtCmB,OAAQ,GACT,2BAAC,WAEF,gBACEJ,MAAM,MACNG,OAAO,MACPjD,IAAKe,EAAwB,CAC3BC,MAAO2B,EACP1B,YACAlB,UACAmB,qBAGJ,gBACEiC,EAAE,MACFC,EAAE,MACFpD,KAAKA,EAAAA,EAAAA,KAAI,CACPC,EAAAA,GACA0B,EACA5B,EACI,CAAEsB,MAAMC,EAAAA,EAAAA,GAAO,qBACf,CAAED,MAAMC,EAAAA,EAAAA,GAAO,mBACpB,2BAAE,UAEFO,EAAK,GAAGwB,cACRxB,EAAK,IAAMA,EAAK,GAAGyB,+BAK5B,eAAKtD,IAAG,EAA2B,UACjC,QAAC,IAAQ,CACPuD,IAAKA,IAAIzB,EAAO,CAAE0B,SAAU,WAC5BC,MAAO,CAAEV,aAAchB,EAAgB,MAAQ,MAAOmB,OAAQ,GAC9DQ,QAAS,iB,gDC3JZ,MAAMC,EACXC,IAEOC,EAAAA,EAAAA,cACJC,IACCA,EAAGC,kBACHD,EAAGE,iBACCJ,GACFA,MAGJ,CAACA","sources":["../../ui/src/atoms/Avatar/Avatar.tsx","../../ui/src/utils/useEventNoEffect.ts"],"sourcesContent":["import { css } from '@emotion/react';\nimport md5 from 'md5';\nimport { FC } from 'react';\nimport Gravatar from 'react-gravatar';\nimport {\n  cssVar,\n  grey200,\n  OpaqueColor,\n  p12Medium,\n  purple300,\n  shortAnimationDuration,\n  transparency,\n} from '../../primitives';\n\nconst containerStyles = (variant: boolean) =>\n  css([\n    p12Medium,\n    variant && { cursor: 'pointer' },\n    {\n      aspectRatio: '1 / 1',\n      minWidth: '28px',\n      minHeight: '28px',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      position: 'relative',\n\n      '@supports not (aspect-ratio: 1 / 1)': {\n        position: 'relative',\n        paddingBottom: '100%',\n        '> *': {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n        },\n      },\n    },\n  ]);\n\nconst baseColors = [purple300];\n\ninterface InitialBackgroundStylesProps {\n  color: OpaqueColor;\n  greyedOut: boolean;\n  variant: boolean;\n  hoverSelector?: string;\n}\n\nconst initialBackgroundStyles = ({\n  color,\n  greyedOut,\n  variant,\n  hoverSelector,\n}: InitialBackgroundStylesProps) => {\n  return css({\n    transition: `fill ${shortAnimationDuration} ease-in-out`,\n    fill: variant\n      ? cssVar('backgroundColor')\n      : greyedOut\n      ? grey200.rgb\n      : color.rgb,\n    [`${hoverSelector} &`]: {\n      fill: transparency(greyedOut ? grey200 : color, 0.65).rgba,\n    },\n  });\n};\n\nconst initialTextStyles = css({\n  dominantBaseline: 'central',\n  textAnchor: 'middle',\n  fontSize: '1.2em',\n});\n\ninterface AvatarProps {\n  readonly name: string;\n  readonly email?: string;\n  readonly roundedSquare?: boolean;\n  readonly hoverSelector?: string;\n  readonly greyedOut?: boolean;\n  readonly backgroundColor?: OpaqueColor;\n  readonly variant?: boolean;\n  readonly title?: string;\n  readonly onClick?: () => void;\n}\n\nexport const Avatar = ({\n  name,\n  email = 'thisemaildoesnthaveagravatar@n1n.co',\n  roundedSquare = false,\n  hoverSelector,\n  greyedOut = false,\n  backgroundColor,\n  variant = false,\n  onClick,\n  title,\n}: AvatarProps): ReturnType<FC> => {\n  const hashString = name\n    .split('')\n    .map((c: string) => c.charCodeAt(0))\n    .reduce((a: number, b: number) => a + b, 0);\n  const avatarColor =\n    backgroundColor ?? baseColors[hashString % baseColors.length];\n  return (\n    <div\n      role=\"img\"\n      aria-label={title ?? `Avatar of user ${name[0]}`}\n      css={containerStyles(variant)}\n      onClick={onClick}\n    >\n      <div css={{ display: 'flex', height: '100%', width: '100%' }}>\n        <div\n          css={[\n            { width: '100%', borderRadius: roundedSquare ? '8px' : '50%' },\n            variant && {\n              border: `1px solid ${cssVar('borderColor')}`,\n            },\n          ]}\n        >\n          <svg\n            css={{\n              width: '100%',\n              height: '100%',\n              borderRadius: roundedSquare ? '8px' : '50%',\n              zIndex: 1,\n            }}\n          >\n            <rect\n              width=\"100\"\n              height=\"100\"\n              css={initialBackgroundStyles({\n                color: avatarColor,\n                greyedOut,\n                variant,\n                hoverSelector,\n              })}\n            />\n            <text\n              x=\"50%\"\n              y=\"50%\"\n              css={css([\n                p12Medium,\n                initialTextStyles,\n                variant\n                  ? { fill: cssVar('currentTextColor') }\n                  : { fill: cssVar('iconColorDark') },\n              ])}\n            >\n              {name[0].toUpperCase()}\n              {name[1] && name[1].toLocaleLowerCase()}\n            </text>\n          </svg>\n        </div>\n      </div>\n      <div css={{ position: 'absolute' }}>\n        <Gravatar\n          md5={md5(email, { encoding: 'binary' })}\n          style={{ borderRadius: roundedSquare ? '8px' : '50%', zIndex: 2 }}\n          default={'blank'}\n        />\n      </div>\n    </div>\n  );\n};\n","import { UIEvent, useCallback } from 'react';\n\nexport const useEventNoEffect = <T, E extends UIEvent = UIEvent>(\n  cb?: () => T\n): ((ev: E) => void) => {\n  return useCallback(\n    (ev: UIEvent) => {\n      ev.stopPropagation();\n      ev.preventDefault();\n      if (cb) {\n        cb();\n      }\n    },\n    [cb]\n  );\n};\n"],"names":["containerStyles","variant","css","p12Medium","cursor","aspectRatio","minWidth","minHeight","display","flexDirection","alignItems","position","paddingBottom","top","left","baseColors","purple300","initialBackgroundStyles","color","greyedOut","hoverSelector","transition","shortAnimationDuration","fill","cssVar","grey200","rgb","transparency","rgba","initialTextStyles","Avatar","name","email","roundedSquare","backgroundColor","onClick","title","hashString","split","map","c","charCodeAt","reduce","a","b","avatarColor","length","role","width","borderRadius","border","height","zIndex","x","y","toUpperCase","toLocaleLowerCase","md5","encoding","style","default","useEventNoEffect","cb","useCallback","ev","stopPropagation","preventDefault"],"sourceRoot":""}
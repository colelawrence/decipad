{"version":3,"file":"static/js/3133.c27f8821.chunk.js","mappings":"oIAGA,MAAMA,GAASC,EAAAA,EAAAA,KAAI,CACjBC,OAAQ,OACRC,UAAU,eAAD,QAAiBC,EAAAA,EAAAA,GAAO,0BAClC,4BAEYC,EAAU,KAA4B,cAAIJ,IAAKD,K,8ECH5D,MAAMA,GAASC,EAAAA,EAAAA,KAAI,CACjBK,OAAQ,QACRC,iBAAiBC,EAAAA,EAAAA,IAAaC,EAAAA,GAAU,KAAMC,MAC/C,4BAMYC,EAAU,IAAoD,IAAnD,YAAEC,GAA2B,EACnD,MAA8B,kBAAhBA,GACZ,QAAC,IAAM,CAACX,IAAKD,EAAQ,aAAW,QAAQa,KAAMD,EAAY,SAEtD,QAIJ,kBACEX,IAAKD,EACL,aAAW,QACXc,UAAWF,EACXG,QAASH,K,eCrBf,MAAMI,EAAe,0LAYfC,EAAa,yGAKbC,GAAejB,EAAAA,EAAAA,KAAI,CACvBkB,SAAU,QACVC,YAAa,SACbC,UAAW,SACXC,SAAU,0BACVC,UAAW,MACXC,UAAW,OAEXC,QAAS,OACTlB,iBAAiBH,EAAAA,EAAAA,GAAO,mBACxBF,OAAO,aAAD,QAAeE,EAAAA,EAAAA,GAAO,gBAC5BsB,aAAc,OACdC,MAAO,QACPxB,UAAU,sBAAD,QACQK,EAAAA,EAAAA,IAAaoB,EAAAA,GAAS,KAAMlB,KAAI,+BACjCF,EAAAA,EAAAA,IAAaC,EAAAA,GAAU,KAAMC,KAAI,SAElD,gCAMYmB,EAAQ,IAGoB,IAHnB,SACpBC,KACGC,GACQ,EACX,OACE,eAAK9B,IAAKe,EAAgB,WACxB,eAAKf,IAAKgB,EAAc,UACtB,QAACN,EAAO,IAAKoB,OAEf,eAAKC,KAAK,SAAS/B,IAAKiB,EAAa,SAClCY,S,+GCjDT,MAAM9B,EAAM,oHAKNiC,EAAc,8IAIdC,EAAW,wIAKXC,GAAclC,EAAAA,EAAAA,KAAImC,EAAAA,GAAU,yDAQrBC,EAAsB,IAIoB,IAJnB,QAClCC,EAAO,MACPC,EAAK,YACL3B,GACyB,EACzB,OACE,eAAKX,IAAKD,EAAO,WACf,eAAKC,IAAKgC,EAAe,WACvB,QAACK,EAAO,CAACrC,IAAKkC,EAAY,SAAEI,IACJ,kBAAhB3B,GACN,QAAC,IAAM,CAACX,IAAKiC,EAAarB,KAAMD,EAAY,UAC1C,QAAC4B,EAAA,EAAK,OAGR,kBAAQvC,IAAKiC,EAAanB,QAASH,EAAY,UAC7C,QAAC4B,EAAA,EAAK,UAIZ,QAACnC,EAAA,EAAO,QC9C+C,4HAKtD,MAAMoC,EAAgB,IAGoB,IAHnB,SAC5BX,KACGC,GACgB,EACnB,OACE,QAACF,EAAA,EAAK,CAACjB,YAAamB,EAAMnB,YAAY,UACpC,eAAKX,IAAG,EAAsC,WAC5C,QAACoC,EAAmB,IAAKN,IACxBD","sources":["../../ui/src/atoms/Divider/Divider.tsx","../../ui/src/atoms/Overlay/Overlay.tsx","../../ui/src/molecules/Modal/Modal.tsx","../../ui/src/molecules/ClosableModalHeader/ClosableModalHeader.tsx","../../ui/src/organisms/ClosableModal/ClosableModal.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { cssVar } from '../../primitives';\n\nconst styles = css({\n  border: 'none',\n  boxShadow: `0 0 0 0.5px ${cssVar('strongHighlightColor')}`,\n});\n\nexport const Divider = (): ReturnType<React.FC> => <hr css={styles} />;\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { offBlack, transparency } from '../../primitives';\nimport { Anchor } from '../../utils';\n\nconst styles = css({\n  cursor: 'unset',\n  backgroundColor: transparency(offBlack, 0.16).rgba,\n});\n\ninterface OverlayProps {\n  readonly closeAction?: string | (() => void);\n}\n\nexport const Overlay = ({ closeAction }: OverlayProps): ReturnType<FC> => {\n  return typeof closeAction === 'string' ? (\n    <Anchor css={styles} aria-label=\"Close\" href={closeAction}>\n      {\n        null // Yes, we really want this link to be empty, it has an aria-label instead\n      }\n    </Anchor>\n  ) : (\n    <button\n      css={styles}\n      aria-label=\"Close\"\n      disabled={!closeAction}\n      onClick={closeAction}\n    />\n  );\n};\n","import { css } from '@emotion/react';\nimport { ComponentProps, ReactNode } from 'react';\nimport { Overlay } from '../../atoms';\nimport { cssVar, grey700, offBlack, transparency } from '../../primitives';\n\nconst pageCoverStyles = css({\n  position: 'fixed',\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n\n  display: 'grid',\n  gridTemplate: '100% / 100%',\n  overflow: 'hidden',\n});\n\nconst overlayStyles = css({\n  gridArea: '1 / 1',\n  display: 'grid',\n});\n\nconst dialogStyles = css({\n  gridArea: '1 / 1',\n  justifySelf: 'center',\n  alignSelf: 'center',\n  maxWidth: 'min(100% - 24px, 480px)',\n  maxHeight: '75%',\n  overflowY: 'auto',\n\n  padding: '24px',\n  backgroundColor: cssVar('backgroundColor'),\n  border: `1px solid ${cssVar('borderColor')}`,\n  borderRadius: '10px',\n  width: '480px',\n  boxShadow: `\n    0px 2px 20px ${transparency(grey700, 0.04).rgba},\n    0px 2px 8px ${transparency(offBlack, 0.02).rgba}\n  `,\n});\n\ntype ModalProps = {\n  readonly children: ReactNode;\n} & ComponentProps<typeof Overlay>;\n\nexport const Modal = ({\n  children,\n  ...props\n}: ModalProps): ReturnType<React.FC> => {\n  return (\n    <div css={pageCoverStyles}>\n      <div css={overlayStyles}>\n        <Overlay {...props} />\n      </div>\n      <div role=\"dialog\" css={dialogStyles}>\n        {children}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { Divider } from '../../atoms';\nimport { Close } from '../../icons';\nimport { p15Medium } from '../../primitives';\nimport { Anchor } from '../../utils';\n\nconst styles = css({\n  display: 'grid',\n  rowGap: '12px',\n});\n\nconst titleRowStyles = css({\n  display: 'flex',\n  flexWrap: 'wrap-reverse',\n});\nconst closeStyles = css({\n  width: '16px',\n  height: '16px',\n  display: 'grid',\n});\nconst titleStyles = css(p15Medium, { flexGrow: 1 });\n\ninterface ClosableModalHeaderProps {\n  readonly Heading: 'h1' | 'h2';\n  readonly title: string;\n  readonly closeAction: string | (() => void);\n}\n\nexport const ClosableModalHeader = ({\n  Heading,\n  title,\n  closeAction,\n}: ClosableModalHeaderProps): ReturnType<React.FC> => {\n  return (\n    <div css={styles}>\n      <div css={titleRowStyles}>\n        <Heading css={titleStyles}>{title}</Heading>\n        {typeof closeAction === 'string' ? (\n          <Anchor css={closeStyles} href={closeAction}>\n            <Close />\n          </Anchor>\n        ) : (\n          <button css={closeStyles} onClick={closeAction}>\n            <Close />\n          </button>\n        )}\n      </div>\n      <Divider />\n    </div>\n  );\n};\n","import { ComponentProps } from 'react';\nimport { ClosableModalHeader, Modal } from '../../molecules';\n\ntype ClosableModalProps = ComponentProps<typeof ClosableModalHeader> &\n  ComponentProps<typeof Modal>;\n\nexport const ClosableModal = ({\n  children,\n  ...props\n}: ClosableModalProps): ReturnType<React.FC> => {\n  return (\n    <Modal closeAction={props.closeAction}>\n      <div css={{ display: 'grid', rowGap: '12px' }}>\n        <ClosableModalHeader {...props} />\n        {children}\n      </div>\n    </Modal>\n  );\n};\n"],"names":["styles","css","border","boxShadow","cssVar","Divider","cursor","backgroundColor","transparency","offBlack","rgba","Overlay","closeAction","href","disabled","onClick","pageCoverStyles","overlayStyles","dialogStyles","gridArea","justifySelf","alignSelf","maxWidth","maxHeight","overflowY","padding","borderRadius","width","grey700","Modal","children","props","role","titleRowStyles","closeStyles","titleStyles","p15Medium","ClosableModalHeader","Heading","title","Close","ClosableModal"],"sourceRoot":""}
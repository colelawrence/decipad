{"version":3,"file":"static/js/840.c2f3a47b.chunk.js","mappings":"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","sources":["../../ui/src/atoms/TextAndIconButton/TextAndIconButton.tsx","../../ui/src/atoms/Toggle/Toggle.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { blue100, blue200, cssVar, p13Medium } from '../../primitives';\nimport { Anchor, TextChildren } from '../../utils';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\n\nconst wrapperStyles = {\n  display: 'inline-block',\n};\n\nconst styles = css({\n  borderRadius: '6px',\n  border: `1px solid ${cssVar('borderColor')}`,\n  backgroundColor: cssVar('tintedBackgroundColor'),\n\n  ':hover, :focus': {\n    backgroundColor: cssVar('strongHighlightColor'),\n  },\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  padding: '4px',\n});\n\nconst buttonTextStyles = css(p13Medium, {\n  whiteSpace: 'nowrap',\n  padding: '0 4px',\n});\n\nconst blueBackgroundStyles = css({\n  backgroundColor: blue100.rgb,\n\n  ':hover, :focus': {\n    backgroundColor: blue200.rgb,\n  },\n});\n\nconst iconStyles = css({\n  width: '12px',\n});\n\ntype IconButtonProps = {\n  readonly children: ReactNode;\n  readonly text: TextChildren;\n  readonly color?: 'blue';\n  readonly iconPosition?: 'left' | 'right';\n} & (\n  | {\n      readonly href: string;\n      readonly onClick?: undefined;\n    }\n  | {\n      readonly onClick: () => void;\n      readonly href?: undefined;\n    }\n);\n\nexport const TextAndIconButton = ({\n  children,\n  text,\n  onClick,\n  href,\n  color,\n  iconPosition = 'right',\n}: IconButtonProps): ReturnType<FC> => {\n  const onButtonClick = useEventNoEffect(onClick);\n  const textElement = <span css={buttonTextStyles}>{text}</span>;\n  const iconElement = <span css={iconStyles}>{children}</span>;\n  return (\n    <div css={wrapperStyles}>\n      {onClick ? (\n        <button\n          css={[styles, color === 'blue' && blueBackgroundStyles]}\n          onClick={onButtonClick}\n        >\n          {iconPosition === 'left' ? (\n            <>\n              {iconElement}\n              {textElement}\n            </>\n          ) : (\n            <>\n              {textElement}\n              {iconElement}\n            </>\n          )}\n        </button>\n      ) : (\n        <Anchor href={href} css={css([styles])}>\n          {iconPosition === 'left' ? iconElement : null}\n          {textElement}\n          {iconPosition === 'right' ? iconElement : null}\n        </Anchor>\n      )}\n    </div>\n  );\n};\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { cssVar, shortAnimationDuration } from '../../primitives';\nimport {\n  BooleanCheckboxSelected,\n  BooleanCheckboxUnselected,\n} from '../../icons';\n\n// Skinny = true means the toggle will be in a table.\n// Therefore needs to be smaller\nconst toggleStyles = (skinny: boolean) => (skinny ? makeCheckbox : makeToggle);\n\nconst BooleanCheckboxSelectedsvgString = encodeURIComponent(\n  renderToStaticMarkup(<BooleanCheckboxSelected />)\n);\n\nconst BooleanCheckboxSelectedsvgStringdataUri = `url(\"data:image/svg+xml,${BooleanCheckboxSelectedsvgString}\")`;\n\nconst BooleanCheckboxUnselectedsvgString = encodeURIComponent(\n  renderToStaticMarkup(<BooleanCheckboxUnselected />)\n);\nconst BooleanCheckboxUnselectedsvgStringdataUri = `url(\"data:image/svg+xml,${BooleanCheckboxUnselectedsvgString}\")`;\n\nconst makeCheckbox = css({\n  background: BooleanCheckboxUnselectedsvgStringdataUri,\n  width: '16px',\n  height: '16px',\n  display: 'flex',\n  alignItems: 'center',\n  position: 'relative',\n  backgroundRepeat: 'no-repeat',\n});\n\nconst makeToggle = css({\n  backgroundColor: cssVar('strongHighlightColor'),\n  width: '46px',\n  height: '24px',\n  borderRadius: '100vmax',\n  display: 'flex',\n  alignItems: 'center',\n  padding: '2px',\n  transition: `background-color ${shortAnimationDuration} ease-in-out`,\n  position: 'relative',\n});\n\nconst activeSwitchBgStyles = css({\n  backgroundColor: cssVar('normalTextColor'),\n});\n\nconst activeCheckboxBgStyles = css({\n  background: BooleanCheckboxUnselectedsvgStringdataUri,\n  width: '16px',\n  height: '16px',\n  display: 'flex',\n  alignItems: 'center',\n  position: 'relative',\n});\n\nconst toggleSwitchStyles = css({\n  backgroundColor: cssVar('backgroundColor'),\n  width: '18px',\n  height: '18px',\n  borderRadius: '100vmax',\n  position: 'absolute',\n  left: '2px',\n  transition: `left ${shortAnimationDuration} ease-out`,\n});\n\nconst checkboxSwitchStyles = css({\n  background: BooleanCheckboxUnselectedsvgStringdataUri,\n  width: '16px',\n  height: '16px',\n  display: 'flex',\n  alignItems: 'center',\n  position: 'relative',\n  backgroundRepeat: 'no-repeat',\n});\n\nconst activeSwitchStyles = css({\n  left: `calc(100% - 20px)`,\n});\n\nconst activeCheckboxStyles = css({\n  background: BooleanCheckboxSelectedsvgStringdataUri,\n  width: '16px',\n  height: '16px',\n  display: 'flex',\n  alignItems: 'center',\n  position: 'relative',\n  backgroundRepeat: 'no-repeat',\n});\n\nexport interface ToggleProps {\n  parentType?: 'table' | 'input';\n  active?: boolean;\n  onChange?: (newActive: boolean) => void;\n  ariaRoleDescription?: string;\n}\n\nexport const Toggle = ({\n  active,\n  onChange = noop,\n  ariaRoleDescription,\n  parentType = 'input',\n}: ToggleProps): ReturnType<FC> => {\n  const skinny = parentType !== 'input';\n  return (\n    <button\n      aria-roledescription={ariaRoleDescription}\n      css={[\n        toggleStyles(skinny),\n        skinny\n          ? active && activeCheckboxBgStyles\n          : active && activeSwitchBgStyles,\n      ]}\n      onClick={() => {\n        onChange(!active);\n      }}\n    >\n      <span\n        role=\"checkbox\"\n        aria-checked={active}\n        css={[\n          skinny ? checkboxSwitchStyles : toggleSwitchStyles,\n          skinny\n            ? active && activeCheckboxStyles\n            : active && activeSwitchStyles,\n        ]}\n      />\n    </button>\n  );\n};\n"],"names":["wrapperStyles","display","styles","css","borderRadius","border","cssVar","backgroundColor","flexDirection","alignItems","padding","buttonTextStyles","p13Medium","blueBackgroundStyles","blue100","blue200","iconStyles","TextAndIconButton","children","text","onClick","href","color","iconPosition","onButtonClick","useEventNoEffect","textElement","iconElement","toggleStyles","skinny","makeCheckbox","makeToggle","BooleanCheckboxSelectedsvgString","encodeURIComponent","renderToStaticMarkup","BooleanCheckboxSelectedsvgStringdataUri","BooleanCheckboxUnselectedsvgString","BooleanCheckboxUnselectedsvgStringdataUri","background","width","height","position","backgroundRepeat","transition","shortAnimationDuration","activeSwitchBgStyles","activeCheckboxBgStyles","toggleSwitchStyles","left","checkboxSwitchStyles","activeSwitchStyles","activeCheckboxStyles","Toggle","active","onChange","noop","ariaRoleDescription","parentType","role"],"sourceRoot":""}
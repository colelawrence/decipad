{"version":3,"file":"static/js/8112.874783fa.chunk.js","mappings":"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","sources":["../../client-config/src/default.ts","../../client-config/src/index.ts","../../editor-utils/src/deduplicateVarNameInBlock.ts","../../editor-utils/src/clone.ts","../../editor-utils/src/isElement.ts","../../ui/src/organisms/ErrorBlock/ErrorBlock.tsx","../../editor-components/src/BlockErrorBoundary/BlockErrorBoundary.tsx","../../editor-components/src/BlockSelection/BlockSelectable.tsx","../../editor-components/src/block-management/DraggableBlock.tsx","../../editor-components/src/BlockLengthSynchronization/initialGroups.ts","../../editor-components/src/BlockLengthSynchronization/helpers.ts","../../editor-components/src/BlockLengthSynchronization/BlockLengthSynchronizationProvider.tsx","../../editor-components/src/BlockLengthSynchronization/BlockLengthSynchronizationReceiver.tsx","../../editor-components/src/TeleportEditor/ensureSelectionHack.ts","../../editor-components/src/TeleportEditor/useDeletionTrap.ts","../../editor-components/src/TeleportEditor/useSelectionTrap.ts","../../editor-components/src/TeleportEditor/useFocusControl.ts","../../editor-components/src/TeleportEditor/TeleportEditor.tsx","../../editor-utils/src/useNodeText.ts","../../editor-utils/src/placeholders.ts","../../editor-components/src/hooks/useTextTypeInference.ts","../../editor-components/src/hooks/useOnBlurNormalize.ts","../../ui/src/atoms/CodeLineFloat/CodeLineFloat.tsx","../../ui/src/atoms/CodeLinePlaceholder/CodeLinePlaceholder.tsx","../../editor-components/src/CodeLine/CodeLineTeleport.tsx","../../editor-components/src/CodeLine/getSyntaxError.ts","../../editor-components/src/CodeLine/onDragStartInlineResult.ts","../../editor-components/src/CodeLine/onDragStartTableCellResult.ts","../../editor-components/src/CodeLine/useCodeLineClickReference.ts","../../editor-components/src/CodeLine/useSiblingCodeLines.ts","../../editor-components/src/CodeLine/useTurnIntoProps.ts","../../editor-components/src/CodeLine/CodeLine.tsx","../../editor-utils/src/isStructuredElement.ts","../../ui/src/molecules/StructuredInputLines/styles.ts","../../ui/src/molecules/StructuredInputLines/StructuredInputLines.tsx","../../ui/src/organisms/CodeLineStructured/styles.ts","../../ui/src/organisms/CodeLineStructured/CodeLineStructured.tsx","../../ui/src/molecules/CodeVariableDefinition/CodeVariableDefinition.tsx","../../editor-components/src/CodeLine/CodeLineV2.tsx","../../ui/src/organisms/DisplayWidget/DisplayWidget.tsx","../../editor-components/src/Display/Display.tsx","../../ui/src/molecules/Import/Import.tsx","../../editor-components/src/Import/importTable.ts","../../editor-components/src/Import/Import.tsx","../../ui/src/atoms/InlineMenuItem/InlineMenuItem.tsx","../../ui/src/molecules/InlineMenuGroup/InlineMenuGroup.tsx","../../ui/src/organisms/InlineMenu/InlineMenu.tsx","../../ui/src/templates/SlashCommandsMenu/SlashCommandsMenu.tsx","../../ui/src/templates/ImportFromLinkMenu/ImportFromLinkMenu.tsx","../../editor-components/src/Media/drawDummyElement.ts","../../editor-components/src/utils/draw.ts","../../editor-components/src/utils/input.ts","../../editor-components/src/utils/plot.ts","../../editor-components/src/utils/table.ts","../../editor-components/src/InteractiveParagraph/useSlashMenu.tsx","../../editor-utils/src/getNotebook.ts","../../editor-components/src/InteractiveParagraph/insertLiveConnection.ts","../../editor-utils/src/getUrlComponents.ts","../../editor-components/src/InteractiveParagraph/useInteractiveMenu.tsx","../../editor-components/src/InteractiveParagraph/insertImport.ts","../../editor-components/src/InteractiveParagraph/InteractiveParagraph.tsx","../../editor-components/src/utils/slashCommands.ts","../../ui/src/organisms/Draw/Draw.tsx","../../editor-components/src/Media/fixElement.ts","../../editor-components/src/Media/findElementsDiff.ts","../../editor-components/src/Media/applyElementsDiffToEditor.ts","../../editor-components/src/Media/useApplyUserChanges.ts","../../editor-components/src/Media/Draw.tsx","../../editor-components/src/Media/useApplyEditorChanges.ts","../../ui/src/images/image-load.svg","../../ui/src/utils/resizing.tsx","../../ui/src/styles/floating.ts","../../ui/src/atoms/Floating/FloatingVerticalDivider.ts","../../ui/src/atoms/RemoveNodeButton/RemoveNodeButton.tsx","../../ui/src/atoms/Floating/FloatingInputWrapper.ts","../../ui/src/atoms/Floating/FloatingIconWrapper.ts","../../ui/src/organisms/FloatingMedia/FloatingMedia.tsx","../../ui/src/organisms/MediaEmbed/styles.ts","../../ui/src/organisms/Image/Image.tsx","../../editor-components/src/Media/Image.tsx","../../ui/src/organisms/MediaEmbed/MediaEmbed.tsx","../../editor-components/src/Media/MediaEmbed.tsx","../../ui/src/atoms/Counter/Counter.tsx","../../ui/src/organisms/NumberCatalog/NumberCatalogHeading.tsx","../../ui/src/organisms/NumberCatalog/NumberCatalogItem.tsx","../../ui/src/organisms/NumberCatalog/NumberCatalog.tsx","../../editor-components/src/NumberCatalog/selectCatalogNames.ts","../../editor-components/src/NumberCatalog/findParent.ts","../../editor-components/src/NumberCatalog/catalogItems.ts","../../editor-components/src/NumberCatalog/toVar.ts","../../editor-components/src/NumberCatalog/NumberCatalog.tsx","../../ui/src/atoms/Blockquote/Blockquote.tsx","../../editor-utils/src/turnInto.ts","../../editor-components/src/utils/useTurnIntoProps.ts","../../editor-components/src/text/Blockquote.tsx","../../ui/src/atoms/Callout/Callout.tsx","../../editor-components/src/text/Callout.tsx","../../editor-components/src/text/Divider.tsx","../../ui/src/atoms/Heading1/Heading1.tsx","../../editor-components/src/text/Heading1.tsx","../../ui/src/atoms/Heading2/Heading2.tsx","../../editor-components/src/text/Heading2.tsx","../../editor-components/src/text/inline/Link.tsx","../../editor-components/src/text/inline/InlineNumber.tsx","../../editor-components/src/text/ListItem.tsx","../../ui/src/atoms/ListItemContent/ListItemContent.tsx","../../editor-components/src/text/ListItemContent.tsx","../../ui/src/atoms/Bold/Bold.tsx","../../editor-components/src/text/mark/Bold.tsx","../../ui/src/atoms/InlineCode/InlineCode.tsx","../../editor-components/src/text/mark/Code.tsx","../../ui/src/styles/highlight.ts","../../ui/src/atoms/Highlight/Highlight.tsx","../../editor-components/src/text/mark/Highlight.tsx","../../ui/src/atoms/Italic/Italic.tsx","../../editor-components/src/text/mark/Italic.tsx","../../ui/src/atoms/MagicNumber/MagicNumber.tsx","../../editor-components/src/text/mark/MagicNumber.tsx","../../ui/src/atoms/Spoiler/Spoiler.tsx","../../editor-components/src/text/mark/Spoiler.tsx","../../ui/src/atoms/Strikethrough/Strikethrough.tsx","../../editor-components/src/text/mark/Strikethrough.tsx","../../ui/src/atoms/Underline/Underline.tsx","../../editor-components/src/text/mark/Underline.tsx","../../ui/src/molecules/OrderedList/OrderedList.tsx","../../editor-components/src/text/OrderedList.tsx","../../ui/src/atoms/ParagraphPlaceholder/ParagraphPlaceholder.tsx","../../ui/src/atoms/Paragraph/Paragraph.tsx","../../editor-components/src/text/Paragraph.tsx","../../editor-utils/src/getRangeSafe.ts","../../ui/src/atoms/Display/Display.tsx","../../ui/src/molecules/EditorTitle/EditorTitle.tsx","../../editor-components/src/text/Title.tsx","../../ui/src/molecules/UnorderedList/UnorderedList.tsx","../../editor-components/src/text/UnorderedList.tsx","../../editor-components/src/utils/data-view.ts","../../editor-components/src/utils/useDnd.ts","../../ui/src/atoms/DataViewTableHeader/DataViewTableHeader.tsx","../../editor-data-view/src/components/DataViewTableHeader/DataViewTableHeader.tsx","../../ui/src/molecules/VariableNameSelector/VariableNameSelector.tsx","../../ui/src/organisms/DataView/DataView.tsx","../../ui/src/atoms/VoidBlock/VoidBlock.tsx","../../ui/src/molecules/DataViewMenu/DataViewMenu.tsx","../../editor-data-view/src/components/DataViewData/DataViewData.tsx","../../editor-data-view/src/hooks/useDataViewActions.ts","../../editor-data-view/src/hooks/useAvailableColumns.ts","../../editor-data-view/src/hooks/useSourceTableNames.ts","../../editor-data-view/src/hooks/useDataView.ts","../../editor-utils/src/matchNodeType.ts","../../editor-data-view/src/hooks/useDataViewLayoutData/generateSmartRow.ts","../../editor-data-view/src/hooks/useDataViewLayoutData/generateGroups.ts","../../editor-utils/src/generateHash.ts","../../editor-data-view/src/hooks/useDataViewLayoutData/sliceToGroup.ts","../../editor-data-view/src/hooks/useDataViewLayoutData/useDataViewLayoutData.ts","../../editor-data-view/src/hooks/useDataViewLayoutData/generateTotalGroup.ts","../../editor-data-view/src/hooks/useSortColumns.ts","../../ui/src/templates/DataViewColumnHeader/DataViewColumnHeader.tsx","../../editor-data-view/src/components/DataViewColumnHeader/DataViewColumnHeader.tsx","../../ui/src/atoms/DataViewColumnHeaderRow/DataViewColumnHeaderRow.tsx","../../ui/src/molecules/DataViewRow/DataViewRow.tsx","../../editor-data-view/src/utils/treeToTable.ts","../../editor-data-view/src/components/DataViewDataGroup/DataViewDataGroup.tsx","../../ui/src/templates/SmartCell/SmartCell.tsx","../../editor-data-view/src/components/SmartCell/SmartCell.tsx","../../editor-data-view/src/utils/maybeAggregate.ts","../../editor-data-view/src/components/SmartCell/onDragStartSmartCell.ts","../../editor-data-view/src/components/DataViewDataLayout/DataViewDataLayout.tsx","../../editor-data-view/src/plugins/createNormalizeDataViewPlugin.ts","../../editor-data-view/src/plugins/createDataViewPlugin.ts","../../editor-data-view/src/components/DataView/DataView.tsx","../../editor-data-view/src/constants.ts","../../editor-data-view/src/components/DataViewCaption/DataViewCaption.tsx","../../editor-data-view/src/components/DataViewColumnHeaderRow/DataViewColumnHeaderRow.tsx","../../editor-data-view/src/hooks/useDragColumn.ts","../../editor-data-view/src/hooks/useDropColumn.ts","../../editor-utils/src/noopPromise.ts","../../editor-variable-def/src/constants.ts","../../editor-utils/src/mutateText.ts","../../editor-variable-def/src/utils/useTurnIntoProps.ts","../../editor-variable-def/src/components/VariableEditorContext.tsx","../../editor-variable-def/src/components/VariableDef.tsx","../../ui/src/molecules/Caption/Caption.tsx","../../editor-variable-def/src/components/Caption.tsx","../../ui/src/molecules/Expression/Expression.tsx","../../editor-variable-def/src/components/Expression.tsx","../../ui/src/atoms/CodeSyntax/CodeSyntax.tsx","../../editor-variable-def/src/components/CodeSyntax.tsx","../../ui/src/atoms/Slider/Slider.tsx","../../editor-variable-def/src/components/Slider.tsx","../../editor-variable-def/src/plugins/createNormalizeVariableDefPlugin.ts","../../editor-variable-def/src/plugins/createMigrateElementInputToVariableDefPlugin.ts","../../editor-variable-def/src/utils/inputElementToVariableDef.ts","../../editor-variable-def/src/utils/expressionFromEditorSource.ts","../../editor-variable-def/src/utils/decorateExpression.ts","../../editor-variable-def/src/plugins/createNormalizeSliderPlugin.ts","../../editor-variable-def/src/plugins/createSliderExpressionSyncPlugin.ts","../../ui/src/molecules/WidgetDisplay/WidgetDisplay.tsx","../../editor-variable-def/src/components/Dropdown.tsx","../../editor-variable-def/src/plugins/createNormalizeCaptionPlugin.ts","../../editor-variable-def/src/plugins/createNormalizeExpressionPlugin.ts","../../editor-variable-def/src/plugins/createVariableDefPlugin.tsx","../../editor-config/src/configuration/autoformat/doesSelectionAllowTextStyling.ts","../../editor-config/src/configuration/autoformat/autoformatBlocks.ts","../../editor-config/src/utils/image.ts","../../editor-config/src/configuration/autoformat/autoformatImages.ts","../../editor-config/src/utils/link.ts","../../editor-config/src/configuration/autoformat/autoformatLinks.ts","../../editor-config/src/configuration/autoformat/autoformatLists.ts","../../editor-config/src/configuration/autoformat/autoformatMarks.ts","../../editor-config/src/configuration/autoformat/index.ts","../../editor-config/src/configuration/components.ts","../../editor-config/src/configuration/exitBreakOptions.ts","../../editor-config/src/configuration/resetBlockTypeOptions.ts","../../editor-config/src/configuration/plugins.ts","../../editor-config/src/useEditorPlugins.ts","../../editor-plugins/src/plugins/AutoCompleteMenu/commitAutocompleteItem.ts","../../editor-plugins/src/plugins/AutoCompleteMenu/AutoCompleteMenu.tsx","../../editor-plugins/src/plugins/AutoCompleteMenu/createAutoCompleteMenuPlugin.tsx","../../editor-plugins/src/constants.ts","../../editor-plugins/src/plugins/AutoFormatCodeLine/utils.ts","../../editor-plugins/src/pluginFactories/createEventInterceptorPluginFactory.ts","../../editor-plugins/src/pluginFactories/normalizerPlugin.ts","../../editor-plugins/src/pluginFactories/onKeyDownPlugin.ts","../../editor-plugins/src/pluginFactories/overrideApplyPlugin.ts","../../editor-plugins/src/pluginFactories/createOnCursorChangePluginFactory.ts","../../editor-plugins/src/plugins/AutoFormatCodeLine/createAutoFormatCodeLinePlugin.ts","../../editor-plugins/src/plugins/AutoPairs/createAutoPairsPlugin.ts","../../editor-plugins/src/plugins/BlockSelection/createBlockSelectionPlugin.tsx","../../editor-plugins/src/utils/cleanString.ts","../../editor-plugins/src/plugins/Callout/deserializeCalloutHtml.ts","../../editor-plugins/src/plugins/Callout/createCalloutPlugin.ts","../../editor-plugins/src/plugins/Callout/serializeCalloutHtml.tsx","../../editor-plugins/src/plugins/CodeLine/deserializeCodeLineHtml.ts","../../editor-plugins/src/plugins/CodeLine/serializeCodeLineHtml.tsx","../../editor-plugins/src/plugins/CodeLine/onDropInlineResult.ts","../../editor-plugins/src/plugins/CodeLine/onDropSmartCell.ts","../../editor-plugins/src/plugins/CodeLine/onDropCodeLine.ts","../../editor-plugins/src/plugins/CodeLine/onDropTableCellResult.ts","../../editor-plugins/src/plugins/CodeLine/CodeLine.tsx","../../editor-plugins/src/plugins/CodeLine/normalizeInsertNodeText.ts","../../editor-plugins/src/plugins/CodeLine/normalizeCodeLineSpace.ts","../../editor-plugins/src/plugins/CodeLine/applyCodeLineSelection.ts","../../editor-plugins/src/plugins/CodeLine/withCodeLine.ts","../../editor-plugins/src/plugins/CodeLine/filterStatementSeparator.ts","../../editor-plugins/src/plugins/CodeLine/onKeyDownCodeLine.ts","../../editor-plugins/src/plugins/CodeLine/createCodeLinePlugin.ts","../../editor-plugins/src/utils/normalize.ts","../../editor-plugins/src/plugins/NormalizeCodeLine/createNormalizeCodeLinePlugin.ts","../../editor-plugins/src/utils/normalizePlainTextChildren.ts","../../editor-plugins/src/plugins/CodeLineV2/normalization.ts","../../editor-plugins/src/plugins/CodeLineV2/selectionContainmentPlugin.ts","../../editor-plugins/src/plugins/CodeLineV2/createCodeLineV2Plugin.ts","../../editor-plugins/src/plugins/CodeVariableHighlight/CodeVariable.tsx","../../editor-plugins/src/plugins/CodeVariableHighlight/createCodeVariableHighlightPlugin.tsx","../../editor-plugins/src/plugins/Divider/deserializeDividerHtml.ts","../../editor-plugins/src/plugins/Divider/createDividerPlugin.ts","../../editor-plugins/src/plugins/Divider/serializeDividerHtml.tsx","../../editor-plugins/src/plugins/DndSmartRef/onDrop/insertSmartRef.ts","../../editor-plugins/src/plugins/DndSmartRef/onDrop/onDropSmartRef.ts","../../editor-plugins/src/plugins/DndSmartRef/createDndSmartRefPlugin.ts","../../editor-plugins/src/stores/cursorStore.ts","../../editor-plugins/src/plugins/DragOverCursor/createDragOverCursorPlugin.ts","../../ui/src/templates/LoadingIndicator/LoadingIndicator.tsx","../../editor-plugins/src/utils/lazyElement.tsx","../../editor-plugins/src/plugins/Draw/createDrawPlugin.ts","../../editor-plugins/src/plugins/EditorApplyErrorReporter/createEditorApplyErrorReporterPlugin.ts","../../ui/src/organisms/EvalCodeArea/EvalCodeArea.tsx","../../editor-plugins/src/plugins/Eval/component/EvalCodeArea.tsx","../../editor-plugins/src/plugins/Eval/createEvalPlugin.ts","../../editor-plugins/src/plugins/EventInterception/isCursorAtBlockEdge.ts","../../editor-plugins/src/plugins/EventInterception/createEventInterceptionSuperHandlerPlugin.ts","../../editor-plugins/src/plugins/EventInterception/findClosestBlockOrColumn.ts","../../queries/src/lib/operations/mutations/ATTACH_FILE_TO_PAD.ts","../../queries/src/lib/operations/mutations/CREATE_EXTERNAL_DATA_SOURCE.ts","../../queries/src/lib/operations/mutations/RENAME_PAD.ts","../../queries/src/lib/operations/queries/GET_CREATE_ATTACHMENT_FORM.ts","../../queries/src/lib/operations/queries/GET_PAD_BY_ID.ts","../../queries/__generated__/globalTypes.ts","../../editor-plugins/src/plugins/Import/withImportOverrides.ts","../../editor-plugins/src/plugins/Import/createImportPlugin.ts","../../ui/src/atoms/EditorColumns/EditorColumns.tsx","../../editor-plugins/src/plugins/LayoutColumns/createLayoutColumnsPlugin.ts","../../editor-plugins/src/plugins/LayoutColumns/Columns.tsx","../../ui/src/molecules/FloatingLink/FloatingLink.tsx","../../editor-plugins/src/plugins/Link/createLinkPlugin.ts","../../ui/src/atoms/Tag/Tag.tsx","../../ui/src/molecules/EditableLiveDataCaption/EditableLiveDataCaption.tsx","../../editor-plugins/src/plugins/LiveConnection/components/LiveConnectionVarName.tsx","../../editor-plugins/src/plugins/LiveConnection/createLiveConnectionPlugin.ts","../../editor-plugins/src/plugins/MagicNumber/transforms/removeMagicNumberInput.ts","../../editor-plugins/src/plugins/MagicNumber/queries/findMagicNumberInput.ts","../../editor-plugins/src/plugins/MagicNumber/utils/isMagicNumber.ts","../../editor-plugins/src/plugins/MagicNumber/plugins/createNormalizeMagicNumbersPlugin.ts","../../editor-plugins/src/plugins/MagicNumber/plugins/createMagicNumberCursorPlugin.ts","../../editor-plugins/src/plugins/MagicNumber/plugins/createMagicCursorKeysPlugin.ts","../../editor-plugins/src/plugins/MagicNumber/createMagicNumberPlugin.tsx","../../editor-plugins/src/plugins/MagicNumber/withMagicNumberOverrides.ts","../../editor-plugins/src/plugins/MagicNumber/createInlineNumberPlugin.tsx","../../editor-plugins/src/plugins/Marks/createSpoilerPlugin.ts","../../editor-plugins/src/plugins/Marks/createMarksPlugins.ts","../../editor-plugins/src/plugins/Media/createImagePlugin.ts","../../editor-plugins/src/plugins/Media/createMediaEmbedPlugin.ts","../../editor-plugins/src/plugins/Migrations/createMigrateStructuredIn.ts","../../editor-plugins/src/plugins/NormalizeCodeBlock/utils.ts","../../editor-plugins/src/plugins/NormalizeCodeBlock/offsets.ts","../../editor-plugins/src/plugins/NormalizeCodeBlock/reconcileStatements.ts","../../editor-plugins/src/plugins/NormalizeCodeBlock/splitCodeIntoStatements.ts","../../editor-plugins/src/plugins/NormalizeCodeBlock/createNormalizeCodeBlockPlugin.ts","../../editor-plugins/src/plugins/NormalizeCodeBlock/codeBlockToCode.ts","../../editor-plugins/src/plugins/NormalizeColumns/createNormalizeColumnsPlugin.ts","../../editor-plugins/src/plugins/NormalizeEditor/createNormalizeEditorPlugin.ts","../../editor-plugins/src/plugins/NormalizeElementId/withOverrides.ts","../../editor-plugins/src/plugins/NormalizeElementId/createNormalizeElementIdPlugin.ts","../../editor-plugins/src/plugins/NormalizeElementId/normalizeElementIdPlugin.ts","../../editor-plugins/src/plugins/NormalizeImagePlugin/createNormalizeImagePlugin.ts","../../editor-plugins/src/plugins/NormalizeLinkPlugin/createNormalizeLinkPlugin.ts","../../editor-plugins/src/plugins/NormalizeListPlugin/createNormalizeListPlugin.ts","../../editor-plugins/src/plugins/NormalizePlainTextBlock/createNormalizePlainTextBlockPlugin.ts","../../editor-plugins/src/plugins/NormalizeRichTextBlock/createNormalizeRichTextBlockPlugin.ts","../../editor-plugins/src/plugins/NormalizeText/createNormalizeTextPlugin.ts","../../editor-plugins/src/plugins/NormalizeVoidPlugin/createNormalizeVoidPlugin.ts","../../editor-plugins/src/plugins/NotebookTitle/createNotebookTitlePlugin.tsx","../../editor-plugins/src/plugins/OperationsBlackboxPlugin/createOperationsBlackboxPlugin.ts","../../editor-plugins/src/plugins/PersistSelection/selectionStorageKey.ts","../../editor-plugins/src/plugins/PersistSelection/createPersistSelectionPlugin.ts","../../editor-plugins/src/plugins/PersistSelection/saveSelection.ts","../../editor-plugins/src/plugins/PersistSelection/getPersistedSelection.ts","../../editor-plugins/src/plugins/Plot/createPlotPlugin.ts","../../editor-plugins/src/plugins/PotentialFormulaHighlight/decorate/languageSubset.ts","../../editor-plugins/src/plugins/PotentialFormulaHighlight/decorate/findPotentialFormulas.ts","../../editor-plugins/src/plugins/PotentialFormulaHighlight/decorate/decoratePotentialFormula.ts","../../ui/src/molecules/PotentialFormulaHighlight/PotentialFormulaHighlight.tsx","../../editor-plugins/src/plugins/PotentialFormulaHighlight/component/useIsPotentialFormulaSelected.tsx","../../editor-plugins/src/plugins/PotentialFormulaHighlight/component/PotentialFormulaHighlight.tsx","../../editor-plugins/src/plugins/PotentialFormulaHighlight/createPotentialFormulaHighlightPlugin.tsx","../../editor-plugins/src/plugins/SelectionShortcutPlugin/createSelectionShortcutPlugin.ts","../../editor-plugins/src/plugins/SentryBreadcrumbsPlugin/createSentryBreadcrumbsPlugin.ts","../../ui/src/atoms/SmartRef/SmartRef.tsx","../../editor-plugins/src/plugins/SmartRef/utils/isSmartRef.ts","../../editor-plugins/src/plugins/SmartRef/plugins/createSmartRefKeysPlugin.ts","../../editor-plugins/src/plugins/SmartRef/createSmartRefPlugin.ts","../../editor-plugins/src/plugins/SmartRef/components/SmartRef.tsx","../../editor-plugins/src/plugins/SoftBreakPlugin/getSoftBreakOnKeyDown.ts","../../editor-plugins/src/plugins/SoftBreakPlugin/createSoftBreakPlugin.ts","../../editor-plugins/src/plugins/SyntaxErrorHighlight/SyntaxErrorHighlight.tsx","../../editor-plugins/src/plugins/SyntaxErrorHighlight/createSyntaxErrorHighlightPlugin.tsx","../../editor-plugins/src/plugins/KeyboardNavigation/createNavigationPlugin.ts","../../editor-plugins/src/plugins/UpdateComputer/createUpdateComputerPlugin.ts","../../editor-plugins/src/plugins/WithDocSyncHistory/createWithDocSyncHistoryPlugin.ts","../../editor-plugins/src/plugins/UserEvent/createUserEventPlugin.ts","../../editor-plugins/src/plugins/Display/createDisplayPlugin.tsx","../../editor-plugins/src/plugins/TrailingParagraph/createTrailingParagraphPlugin.ts","../../editor-plugins/src/plugins/ExitBreakPlugin/exitBreak.ts","../../editor-plugins/src/plugins/ExitBreakPlugin/exitBreakAtEdges.ts","../../editor-plugins/src/plugins/ExitBreakPlugin/createExitBreakPlugin.ts","../../editor-plugins/src/plugins/ExitBreakPlugin/onKeyDownExitBreak.ts","../../editor-plugins/src/plugins/RenderPerformanceStats/createRenderPerformanceStatsPlugin.tsx","../../editor-plugins/src/plugins/RemoteCursors/createRemoteCursorsPlugin.ts","../../editor-plugins/src/plugins/RemoteCursors/cursorColor.ts","../../editor-plugins/src/plugins/StructuredKeyboard/createStructuredKeyboardPlugin.tsx","../../editor-plugins/src/plugins/DeduplicateElementIds/createDeduplicateElementIdsPlugin.ts","../../editor-plugins/src/plugins/Eval/component/evalUnsafeCode.ts","../../editor-table/src/components/SmartColumnCell/onDragSmartCellResultStarted.ts","../../ui/src/organisms/SmartRow/SmartRow.tsx","../../editor-table/src/components/SmartRow/SmartRow.tsx","../../ui/src/organisms/SmartColumnCell/SmartColumnCell.tsx","../../ui/src/organisms/Select/Select.tsx","../../editor-table/src/components/SmartColumnCell/SmartColumnCell.tsx","../../editor-table/src/utils/findColumnAndDragItem.ts","../../editor-table/src/utils/focusEditorForColumnDnd.ts","../../editor-table/src/components/TableDndProvider/TableDndProvider.tsx","../../editor-table/src/components/Table/useSelectedCells.ts","../../editor-table/src/components/Table/Table.tsx","../../editor-table/src/constants.ts","../../editor-table/src/components/TableCaption/TableCaption.tsx","../../editor-table/src/utils/selectRow.ts","../../editor-table/src/components/TableRow/TableRow.tsx","../../editor-table/src/utils/selectColumn.ts","../../editor-table/src/hooks/useDragColumn.ts","../../editor-utils/src/getEmptyImage.ts","../../editor-table/src/components/TableHeaderCell/TableHeaderCell.tsx","../../ui/src/atoms/DropLine/RowDropLine.tsx","../../editor-table/src/components/TableCell/TableCell.tsx","../../editor-table/src/components/TableColumnFormula/TableColumnFormula.tsx","../../editor-table/src/contexts/TableDndContext.tsx","../../editor-table/src/contexts/tableStore.ts","../../editor-table/src/hooks/tableActions.ts","../../editor-table/src/hooks/useDropColumn.ts","../../editor-table/src/hooks/useColumnDropDirection.ts","../../editor-table/src/utils/getColumnDropDirection.ts","../../editor-utils/src/useElementAbove.ts","../../editor-table/src/utils/isTable.ts","../../editor-table/src/hooks/useTableColumnHeaderOfTableAbove.ts","../../editor-table/src/hooks/useTableColumnCount.ts","../../editor-table/src/hooks/useIsCellSelected.ts","../../editor-table/src/hooks/useColumnInferredType.ts","../../editor-table/src/hooks/useCellType.ts","../../editor-table/src/hooks/useIsColumnSelected.ts","../../editor-table/src/hooks/useColumnsInferredTypes.ts","../../editor-table/src/hooks/useTable.ts","../../editor-table/src/hooks/useColumnAggregationTypes.ts","../../editor-table/src/plugins/createNormalizeTableFormulaPlugin.ts","../../editor-table/src/plugins/createNormalizeTableFormulaAndSeriesCellsPlugin.ts","../../editor-table/src/utils/createTableCaption.ts","../../editor-table/src/utils/convertLegacyType.ts","../../editor-table/src/utils/normalizeTable.ts","../../editor-table/src/plugins/createNormalizeTablesPlugin.ts","../../editor-table/src/utils/tableFromLegacyTableInputElement.ts","../../editor-table/src/plugins/createPreventEnterToCreateCellPlugin.ts","../../editor-table/src/plugins/createPreventDestructiveDeleteOnTablePlugin.ts","../../editor-table/src/plugins/createCellFormulaShortcutPlugin.ts","../../editor-table/src/plugins/onDropSmartCellResult.ts","../../editor-table/src/plugins/withTable.ts","../../editor-table/src/plugins/onKeyDownTable.ts","../../editor-table/src/plugins/createTablePlugin.ts","../../editor-table/src/plugins/createCursorFocusPlugin.ts","../../editor-table/src/utils/findTableFormulaPath.ts","../../editor-table/src/utils/changeColumnType.ts","../../editor-table/src/utils/columnAggregationTypes.ts","../../editor-table/src/utils/getColumnNames.ts","../../editor-table/src/utils/getColumnName.ts","../../editor-table/src/utils/getHoverDirection.ts","../../editor-table/src/utils/findSwappableColumns.ts","../../editor-table/src/utils/findColumnByCell.ts","../../editor-table/src/utils/isCellAlignRight.ts","../../editor-types/src/decorator-kinds.ts","../../editor-types/src/mark-kinds.ts","../../editor-types/src/value.ts","../../editor-types/src/utils.ts","../../editor-types/src/index.ts","../../editor-utils/src/block.ts","../../editor-utils/src/codeBlock.ts","../../editor-utils/src/createCodeLine.ts","../../editor-utils/src/decorateCode.ts","../../editor-utils/src/filterDecorate.ts","../../editor-utils/src/focusAndSetSelection.ts","../../editor-utils/src/getAboveNodeSafe.ts","../../editor-utils/src/getSlateFragment.ts","../../editor-utils/src/getSyntaxErrorRanges.ts","../../editor-utils/src/getVariableRanges.ts","../../editor-utils/src/insertNodes.ts","../../editor-utils/src/layout.ts","../../editor-utils/src/memoizeDecorate.ts","../../editor-utils/src/normalizeIdentifierElement.ts","../../editor-utils/src/normalizeSmartRefs.ts","../../editor-utils/src/onDragStartSmartRef.ts","../../editor-utils/src/path.ts","../../editor-utils/src/pluginStore.ts","../../editor-utils/src/safeDelete.ts","../../editor-utils/src/selectEventRange.ts","../../editor-utils/src/selection.ts","../../editor-utils/src/setSelectionNext.ts","../../editor-utils/src/setSlateFragment.ts","../../editor-utils/src/useElementMutatorCallback.ts","../../editor-utils/src/useEnsureValidVariableName.ts","../../editor-utils/src/useNodePath.ts","../../editor-utils/src/useSelection.ts","../../editor-utils/src/useTableColumnFormulaResultForColumn.ts","../../editor-utils/src/withPath.ts","../../ui/src/templates/LoadingFilter/LoadingFilter.tsx","../../ui/src/atoms/EditorLayout/EditorLayout.tsx","../../ui/src/index.ts","../../ui/src/atoms/FloatingButton/FloatingButton.tsx","../../editor/src/components/Tooltip/styles/divider.ts","../../editor/src/components/Tooltip/buttons/ToggleMarkButton/ToggleMarkButton.tsx","../../editor/src/components/Tooltip/styles/wrapper.ts","../../editor/src/components/Tooltip/buttons/LinkButton.tsx","../../editor/src/components/Tooltip/Tooltip.tsx","../../editor/src/components/Tooltip/hooks/useEditorTooltip.ts","../../editor/src/components/CursorOverlay/CursorOverlay.tsx","../../ui/src/atoms/RemoteAvatarOverlay/RemoteAvatarOverlay.tsx","../../ui/src/molecules/RemoteAvatar/RemoteAvatar.tsx","../../editor-utils/src/isTopLevelBlock.ts","../../editor-utils/src/isPotentiallyWideElement.ts","../../editor/src/components/RemoteAvatarOverlay/RemoteAvatar.tsx","../../editor/src/components/RemoteAvatarOverlay/RemoteAvatarOverlay.tsx","../../editor/src/components/DndPreview/DndCellPreview.tsx","../../editor/src/components/DndPreview/DndColumnPreview.tsx","../../editor/src/components/DndPreview/DndPreview.tsx","../../ui/src/molecules/NotebookState/NotebookState.tsx","../../editor/src/components/NotebookState/NotebookState.tsx","../../editor-utils/src/useIsOffline.ts","../../editor/src/hooks/useAutoAnimate.ts","../../editor/src/hooks/useUndo.ts","../../editor/src/utils/useWriteLock.ts","../../editor/src/Editor.component.tsx","../../editor/src/exampleNotebooks.ts","../../editor/src/NoDocSyncEditor.component.tsx","../../editor/src/utils/storage.ts","../../import/src/http/request.ts","../../import/src/import.ts","../../import/src/importFromArrow.ts","../../import/src/importFromCsv.ts","../../import/src/importFromUnknown.ts","../../import/src/importFromUnknownJson.ts","../../import/src/isImportUrl.ts","../../import/src/isRandomImportUrl.ts","../../import/src/parseSourceUrl.ts","../../import/src/providers/decipad/index.ts","../../import/src/providers/gsheets/getDataRangeUrlFromSheet.ts","../../import/src/providers/gsheets/getDataUrlFromSheetUrl.ts","../../import/src/providers/gsheets/getSheetMeta.ts","../../import/src/providers/gsheets/getSheetRequestDataFromUrl.ts","../../import/src/providers/gsheets/importGsheet.ts","../../import/src/providers/gsheets/index.ts","../../import/src/providers/gsheets/parseGsheetsSourceUrl.ts","../../import/src/providers/index.ts","../../import/src/utils/HttpError.ts","../../import/src/utils/errorResult.ts","../../import/src/utils/matrix.ts","../../import/src/utils/pivot.ts","../../import/src/utils/sameType.ts","../../import/src/utils/sheetColumnName.ts","../../import/src/utils/sheetIslands.ts","../../import/src/utils/trimSheet.ts","../../parse/src/inferBoolean.ts","../../parse/src/parseDate.ts","../../parse/src/inferDate.ts","../../parse/src/inferExpression.ts","../../parse/src/inferText.ts","../../parse/src/inferNumber.ts","../../parse/src/inferType.ts","../../parse/src/utils/memoize.ts","../../parse/src/inferColumn.ts","../../parse/src/columnNameFromIndex.ts","../../parse/src/fastNumber.ts","../../parse/src/inferTable.ts","../../parse/src/utils/astNode.ts","../../parse/src/utils/dateToAST.ts","../../parse/src/parseCell.ts","../../parse/src/utils/unitToAST.ts","../../parse/src/parseSeriesStart.ts","../../parse/src/seriesIterator.ts","../../parse/src/textify.ts","../../ui/src/atoms/CodeError/CodeError.tsx","../../ui/src/atoms/DropLine/ColumnDropLine.tsx","../../ui/src/atoms/DropLine/DropLine.tsx","../../ui/src/atoms/EditorBlock/EditorBlock.tsx","../../ui/src/atoms/Label/Label.tsx","../../ui/src/atoms/NewElementLine/NewElementLine.tsx","../../ui/src/atoms/Spinner/Spinner.tsx","../../ui/src/atoms/TableData/TableData.tsx","../../ui/src/atoms/TableHeader/TableHeader.tsx","../../ui/src/hooks/useMergedRef.ts","../../ui/src/molecules/CellEditor/BooleanEditor.tsx","../../ui/src/utils/dateFormatForGranularity.ts","../../ui/src/molecules/CellEditor/DateEditor.tsx","../../ui/src/molecules/CellEditor/DropdownEditor.tsx","../../ui/src/molecules/CellEditor/CellEditor.tsx","../../ui/src/molecules/CodeVariableTooltip/CodeVariableTooltip.tsx","../../ui/src/molecules/CodeVariable/CodeVariable.tsx","../../ui/src/organisms/TableButton/TableButton.tsx","../../ui/src/organisms/FormulasDrawer/FormulasDrawer.tsx","../../ui/src/molecules/EditableTableCaption/EditableTableCaption.tsx","../../ui/src/atoms/TableFormulaCell/TableFormulaCell.tsx","../../ui/src/molecules/FormulaTableData/FormulaTableData.tsx","../../ui/src/molecules/SyntaxErrorHighlight/SyntaxErrorHighlight.tsx","../../ui/src/molecules/TableHeaderRow/TableHeaderRow.tsx","../../ui/src/molecules/TableCellControls/TableCellControls.tsx","../../ui/src/molecules/TableRow/TableRow.tsx","../../ui/src/atoms/AutoCompleteMenuItem/AutoCompleteMenuItem.tsx","../../ui/src/molecules/AutoCompleteMenuGroup/AutoCompleteMenuGroup.tsx","../../ui/src/organisms/AutoCompleteMenu/AutoCompleteMenu.tsx","../../ui/src/organisms/CodeLine/CodeLine.tsx","../../ui/src/organisms/TableResult/TableResult.tsx","../../ui/src/organisms/ColumnResult/ColumnResult.tsx","../../ui/src/organisms/InlineColumnResult/InlineColumnResult.tsx","../../ui/src/organisms/RowResult/RowResult.tsx","../../ui/src/organisms/InlineRowResult/InlineRowResult.tsx","../../ui/src/organisms/RangeResult/RangeResult.tsx","../../ui/src/atoms/NumberResult/NumberResult.tsx","../../ui/src/atoms/BooleanResult/BooleanResult.tsx","../../ui/src/atoms/DateResult/DateResult.tsx","../../ui/src/atoms/DefaultFunctionResult/DefaultFunctionResult.tsx","../../ui/src/atoms/AnyResult/AnyResult.tsx","../../ui/src/molecules/InlineCodeError/InlineCodeError.tsx","../../ui/src/organisms/CodeResult/CodeResult.tsx","../../ui/src/molecules/DeleteWithDepsMenuItem/DeleteWithDepsMenuItem.tsx","../../ui/src/organisms/BlockDragHandle/BlockDragHandle.tsx","../../ui/src/organisms/DraggableBlock/DraggableBlock.tsx","../../ui/src/molecules/DropdownOption/DropdownOption.tsx","../../ui/src/atoms/SelectItem/SelectItem.tsx","../../ui/src/organisms/DropdownMenuGroup/DropdownMenuGroup.tsx","../../ui/src/organisms/DropdownMenu/DropdownMenu.tsx","../../ui/src/molecules/AddTableRowButton/AddTableRowButton.tsx","../../ui/src/organisms/EditorTable/EditorTable.tsx","../../ui/src/hooks/useAutoAnimate.ts","../../ui/src/organisms/Table/Table.tsx","../../ui/src/molecules/UnitMenuItem/UnitMenuItem.tsx","../../ui/src/organisms/TableColumnMenu/TableColumnMenu.tsx","../../ui/src/organisms/TableColumnHeader/TableColumnHeader.tsx","../../ui/src/molecules/InputMenuItem/InputMenuItem.tsx","../../ui/src/organisms/VariableEditorMenu/VariableEditorMenu.tsx","../../ui/src/organisms/VariableEditor/VariableEditor.tsx","../../ui/src/styles/block-alignment.ts","../../ui/src/styles/code-block.ts","../../ui/src/styles/drop-line.ts","../../ui/src/styles/results.ts","../../ui/src/styles/table.ts","../../ui/src/utils/counter.ts","../../ui/src/utils/results.ts","../../ui/src/utils/table.ts"],"sourcesContent":["// these are the values that are good for the development sandbox\n// there are no important secrets here, so you can relax.\n// we need this to be JS because of our build script, which injects default\n// values into the builkd targets.\nconst defaultEnvValues = {\n  REACT_APP_SENTRY_DSN: '',\n  REACT_APP_GOOGLE_SHEETS_API_KEY: 'AIzaSyC1rl_w_G-RMx6hJJZRJ9rSbyD00POLIEM',\n};\n\nexport type SupportedEnvKey = keyof typeof defaultEnvValues;\nexport function defaultEnv(key: SupportedEnvKey): string {\n  return defaultEnvValues[key];\n}\n","import { once } from 'ramda';\nimport { defaultEnv, SupportedEnvKey } from './default';\n\nexport { defaultEnv };\n\nconst valueOrDefault = (key: SupportedEnvKey, value?: string): string => {\n  if (!value) {\n    // empty string or undefined\n    return defaultEnv(key);\n  }\n  return value;\n};\n\nexport const thirdParty = once(() => ({\n  googleSheets: {\n    apiKey: valueOrDefault('REACT_APP_GOOGLE_SHEETS_API_KEY'),\n  },\n}));\n","import { Computer, parseStatement } from '@decipad/computer';\nimport {\n  AnyElement,\n  CodeLineElement,\n  CodeLineV2Element,\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_STRUCTURED_IN,\n  ELEMENT_TABLE,\n  ELEMENT_VARIABLE_DEF,\n  StructuredInputElement,\n  TableElement,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport { getNodeString } from '@udecode/plate';\n\nfunction deduplicateVarNameInDef(\n  computer: Computer,\n  e: VariableDefinitionElement\n) {\n  e.children[0].children[0].text = computer.getAvailableIdentifier(\n    `${getNodeString(e.children[0])}Copy`,\n    1\n  );\n}\n\nfunction deduplicateAssignmentVarName(computer: Computer, e: CodeLineElement) {\n  const code = getNodeString(e);\n  const parsed = parseStatement(code);\n  if (!parsed.error && parsed.solution && parsed.solution.type === 'assign') {\n    const varName = parsed.solution.args[0].args[0];\n    const newVarName = computer.getAvailableIdentifier(`${varName}Copy`, 1);\n    e.children[0].text = code.replace(varName, newVarName);\n  }\n}\n\nfunction deduplicateVarNameInCodeLineV2(\n  computer: Computer,\n  e: CodeLineV2Element\n) {\n  e.children[0].children[0].text = computer.getAvailableIdentifier(\n    `${getNodeString(e.children[0])}Copy`,\n    1\n  );\n}\n\nfunction deduplicateVarNameInStructuredIn(\n  computer: Computer,\n  e: StructuredInputElement\n) {\n  e.children[0].children[0].text = computer.getAvailableIdentifier(\n    `${getNodeString(e.children[0])}Copy`,\n    1\n  );\n}\n\nfunction deduplicateTableVarName(computer: Computer, e: TableElement) {\n  const captionEl = e.children[0].children[0];\n  const varName = getNodeString(captionEl);\n  e.children[0].children[0].children[0].text = computer.getAvailableIdentifier(\n    `${varName}Copy`,\n    1\n  );\n}\n\nexport const deduplicateVarNameInBlock =\n  (computer: Computer) =>\n  <T extends AnyElement>(el: T): T => {\n    switch (el.type) {\n      case ELEMENT_VARIABLE_DEF:\n        deduplicateVarNameInDef(computer, el);\n        break;\n      case ELEMENT_CODE_LINE:\n        deduplicateAssignmentVarName(computer, el);\n        break;\n      case ELEMENT_CODE_LINE_V2:\n        deduplicateVarNameInCodeLineV2(computer, el);\n        break;\n      case ELEMENT_STRUCTURED_IN:\n        deduplicateVarNameInStructuredIn(computer, el);\n        break;\n      case ELEMENT_TABLE:\n        deduplicateTableVarName(computer, el);\n        break;\n    }\n    return el;\n  };\n","import { nanoid } from 'nanoid';\nimport { AnyElement, Text } from '@decipad/editor-types';\nimport { AnyObject, isText } from '@udecode/plate';\nimport { Computer } from '@decipad/computer';\nimport { cloneDeep } from 'lodash';\nimport { deduplicateVarNameInBlock } from './deduplicateVarNameInBlock';\nimport { isElement } from './isElement';\n\ntype WithId = { id: string };\n\nconst hasId = (n: AnyObject): n is WithId => {\n  return n != null && 'id' in n && typeof n.id === 'string';\n};\n\nconst deduplicateId = <T extends AnyElement>(el: T): T => {\n  if (hasId(el)) {\n    // eslint-disable-next-line no-param-reassign\n    el.id = nanoid();\n  }\n  return el;\n};\n\ntype Clone = <T extends AnyElement | Text>(el: T) => T;\n\nexport const clone = (computer: Computer): Clone => {\n  const deduplicateVarName = deduplicateVarNameInBlock(computer);\n  const cloneEl = <T extends AnyElement | Text>(el: T): T => {\n    if (isText(el)) {\n      return cloneDeep(el);\n    }\n    if (isElement(el)) {\n      const elm = deduplicateVarName(deduplicateId(cloneDeep(el)));\n      if (Array.isArray(elm.children)) {\n        elm.children = (elm.children as typeof el.children).map(\n          cloneEl\n        ) as typeof el.children;\n      }\n      return elm;\n    }\n\n    return el;\n  };\n\n  return cloneEl;\n};\n","import { AnyElement, allElementKinds } from '@decipad/editor-types';\nimport { TElement } from '@udecode/plate';\n\nexport function isElement(el: TElement): el is AnyElement {\n  return allElementKinds.includes(el.type);\n}\n","import { css } from '@emotion/react';\nimport { Button } from '../../atoms';\nimport { cssVar, p16Regular, smallScreenQuery } from '../../primitives';\nimport { slimBlockWidth } from '../../styles/editor-layout';\n\nconst centeredFlex = css({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\n\nconst errorBlock = css(centeredFlex, {\n  padding: '16px 24px 16px 24px',\n  gap: 8,\n  borderRadius: 8,\n  width: slimBlockWidth,\n  [smallScreenQuery]: {\n    minWidth: '360px',\n    maxWidth: slimBlockWidth,\n    width: '100%',\n  },\n});\n\nconst errorBlockWrapperStyles = css(centeredFlex, {\n  flexDirection: 'column',\n  gap: 12,\n});\n\nconst errorMessageStypes = css(p16Regular, {\n  color: cssVar('errorBlockColor'),\n});\n\nconst errorBlockRowStyles = css(centeredFlex, {\n  flexDirection: 'row',\n  gap: 8,\n});\n\nconst buttonRow = css({\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'end',\n  alignItems: 'center',\n  gap: 16,\n});\n\n// complete-error should never happen, but if it does it's when the fallback\n// component cannot determine the path of it.\nexport interface ErrorBlockProps {\n  readonly type: 'complete-error' | 'error' | 'warning';\n  readonly onDelete?: () => void;\n  readonly onUndo?: () => void;\n}\n\nexport const ErrorBlock: React.FC<ErrorBlockProps> = ({\n  type,\n  onDelete = () => {},\n  onUndo = () => {},\n}: ErrorBlockProps) => {\n  const getText = () => {\n    if (type === 'error') {\n      return `Delete this block or contact support. We've been notified of the error! What now?`;\n    }\n    if (type === 'warning') {\n      return `Undo, delete this block or contact support. We've been notified of the error! What now?`;\n    }\n    return '';\n  };\n\n  const getButtons = () => {\n    if (type === 'error') {\n      return (\n        <Button type=\"darkDanger\" onClick={onDelete}>\n          Delete this block\n        </Button>\n      );\n    }\n    if (type === 'warning') {\n      return (\n        <>\n          <Button type=\"darkWarningText\" onClick={onDelete}>\n            Delete this block\n          </Button>\n          <Button type=\"darkWarning\" onClick={onUndo}>\n            Undo\n          </Button>\n        </>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <div\n      css={[\n        type === 'warning'\n          ? { backgroundColor: cssVar('errorBlockWarning') }\n          : { backgroundColor: cssVar('errorBlockError') },\n        errorBlock,\n      ]}\n      contentEditable={false}\n    >\n      <div css={errorBlockWrapperStyles}>\n        <div css={errorBlockRowStyles}>\n          <span css={errorMessageStypes}>\n            {`Oops something is broken, and that's on us. The rest of your notebook should be fine.`}\n            {getText()}\n          </span>\n        </div>\n        <div css={buttonRow}>\n          <div css={centeredFlex}>{getButtons()}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { ErrorBoundary } from '@sentry/react';\nimport { MyElement, useTEditorRef } from '@decipad/editor-types';\nimport { removeNodes } from '@udecode/plate';\nimport { ErrorBlock } from '@decipad/ui';\nimport { useNodePath } from '@decipad/editor-utils';\n\ninterface FallbackProps {\n  error: Error;\n  componentStack: string | null;\n  element: MyElement;\n  resetError: () => void;\n}\n\nconst Fallback: FC<FallbackProps> = ({\n  error,\n  element,\n  resetError,\n}: FallbackProps) => {\n  console.error(error);\n  const editor = useTEditorRef();\n\n  const delPath = useNodePath(element);\n  if (delPath === undefined) return <ErrorBlock type=\"complete-error\" />;\n\n  return (\n    <ErrorBlock\n      type={editor.undoManager?.canUndo?.() ? 'warning' : 'error'}\n      onDelete={() => {\n        removeNodes(editor, {\n          at: [delPath[0]],\n        });\n        resetError();\n      }}\n      onUndo={() => {\n        editor.undo();\n        resetError();\n      }}\n    />\n  );\n};\n\nexport function BlockErrorBoundary({\n  children,\n  element,\n}: {\n  children: ReactNode;\n  element: MyElement;\n}): ReturnType<FC> {\n  return (\n    <ErrorBoundary\n      fallback={(props) => <Fallback {...props} element={element} />}\n      showDialog={false}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n","import { TElement } from '@udecode/plate';\nimport { ReactNode } from 'react';\nimport { BlockSelectable as _BlockSelectable } from '@udecode/plate-selection';\n\nexport const BlockSelectable = ({\n  element,\n  children,\n}: {\n  element: TElement;\n  children: ReactNode;\n}) =>\n  _BlockSelectable({\n    element,\n    children,\n    selectedColor: 'rgb(219 234 254)',\n  });\n","import { ClientEventsContext } from '@decipad/client-events';\nimport {\n  alwaysWritableElementTypes,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_TABLE,\n  MyEditor,\n  MyElement,\n  MyReactEditor,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  clone,\n  insertNodes,\n  requirePathBelowBlock,\n  useElementMutatorCallback,\n} from '@decipad/editor-utils';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport {\n  dndPreviewActions,\n  useComputer,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport {\n  DraggableBlock as UIDraggableBlock,\n  EditorBlock,\n  useMergedRef,\n} from '@decipad/ui';\nimport {\n  ELEMENT_CODE_LINE,\n  findNodePath,\n  focusEditor,\n  getEndPoint,\n  getNextNode,\n  getNode,\n  getNodeString,\n  getPreviousNode,\n  getStartPoint,\n  hasNode,\n  insertElements,\n  insertText,\n  removeNodes,\n  select,\n  setSelection,\n} from '@udecode/plate';\nimport copyToClipboard from 'copy-to-clipboard';\nimport { noop } from 'lodash';\nimport { nanoid } from 'nanoid';\nimport {\n  ComponentProps,\n  forwardRef,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useSelected } from 'slate-react';\nimport { BlockErrorBoundary } from '../BlockErrorBoundary';\nimport { BlockSelectable } from '../BlockSelection/BlockSelectable';\nimport { dndStore, useDnd, UseDndNodeOptions } from '../utils/useDnd';\n\ntype DraggableBlockProps = {\n  readonly element: MyElement;\n  readonly children: ReactNode;\n  readonly dependencyId?: string | string[]; // block id\n  readonly [key: string]: unknown; // For organisms.DraggableBlock\n  readonly onceDeleted?: () => void;\n  readonly hasPreviousSibling?: boolean; // used for code line blocks\n} & Pick<\n  ComponentProps<typeof UIDraggableBlock>,\n  | 'blockKind'\n  | 'disableDrag'\n  | 'onDelete'\n  | 'onTurnInto'\n  | 'turnInto'\n  | 'isCentered'\n> &\n  Pick<UseDndNodeOptions, 'accept' | 'getAxis' | 'onDrop'>;\n\ntype OnDelete = (() => void) | 'none' | undefined;\n\nconst defaultOnDelete = (\n  editor: MyReactEditor,\n  element: MyElement,\n  parentOnDelete?: OnDelete\n): void => {\n  const path = findNodePath(editor, element);\n  const onDelete = () => {\n    if (path) {\n      removeNodes(editor, {\n        at: path,\n      });\n      if (hasNode(editor, path)) {\n        const point = getStartPoint(editor, path);\n        setSelection(editor, {\n          anchor: point,\n          focus: point,\n        });\n      }\n    }\n  };\n\n  if (path) {\n    typeof parentOnDelete === 'function' ? parentOnDelete() : onDelete();\n  }\n};\n\nexport const DraggableBlock: React.FC<DraggableBlockProps> = forwardRef<\n  HTMLDivElement,\n  DraggableBlockProps\n>(\n  (\n    {\n      children,\n      element,\n      onDelete: parentOnDelete,\n      onceDeleted = noop,\n      accept,\n      getAxis,\n      onDrop,\n      hasPreviousSibling,\n      isCentered,\n      dependencyId,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const [deleted, setDeleted] = useState(false);\n    const editor = useTEditorRef();\n    const readOnly = useIsEditorReadOnly();\n    const computer = useComputer();\n\n    const dependencyArray = Array.isArray(dependencyId)\n      ? dependencyId\n      : typeof dependencyId === 'string'\n      ? [dependencyId]\n      : [];\n\n    const dependenciesForBlock = computer.blocksInUse$.use(...dependencyArray);\n    const selected = useSelected();\n    const setIsHidden = useElementMutatorCallback(editor, element, 'isHidden');\n\n    const blockRef = useRef<HTMLDivElement>(null);\n    const previewRef = useRef<HTMLDivElement>(null);\n    const { dragRef, dropLine, isDragging } = useDnd({\n      accept,\n      element,\n      getAxis,\n      onDrop,\n      previewRef,\n      nodeRef: blockRef,\n    });\n\n    useEffect(() => {\n      if (!isDragging) {\n        dndPreviewActions.draggingId('');\n      }\n    }, [isDragging]);\n\n    const draggingIds = dndStore.use.draggingIds();\n\n    const ref = useMergedRef(blockRef, forwardedRef);\n\n    const event = useContext(ClientEventsContext);\n\n    const onDelete = useCallback(() => {\n      event({\n        type: 'action',\n        action: 'block deleted',\n        props: { blockType: element.type },\n      });\n      setDeleted(true);\n      defaultOnDelete(editor, element, parentOnDelete);\n      onceDeleted();\n    }, [editor, element, parentOnDelete, event, onceDeleted]);\n\n    const onDuplicate = useCallback(() => {\n      const path = findNodePath(editor, element);\n      if (path) {\n        const newEl = clone(computer)(element);\n        insertElements(editor, newEl, {\n          at: requirePathBelowBlock(editor, path),\n        });\n        event({\n          type: 'action',\n          action: 'block duplicated',\n          props: { blockType: newEl.type },\n        });\n      }\n    }, [computer, editor, element, event]);\n\n    const onAdd = useCallback(() => {\n      const path = findNodePath(editor, element);\n      if (path === undefined) return;\n      const entry = getPreviousNode(editor, {\n        at: path,\n      });\n      const [prevNode] = entry || [];\n      insertNodes(\n        editor,\n        {\n          id: nanoid(),\n          type:\n            prevNode && (prevNode as MyElement).type === ELEMENT_CODE_LINE\n              ? ELEMENT_CODE_LINE\n              : ELEMENT_PARAGRAPH,\n          children: [{ text: '' }],\n        },\n        {\n          at: path,\n        }\n      );\n      select(editor, path);\n    }, [editor, element]);\n\n    const onPlus = useCallback(() => {\n      openSlashMenu(editor, element);\n      event({\n        type: 'action',\n        action: 'click +',\n        props: { blockType: element.type },\n      });\n    }, [editor, element, event]);\n\n    const onCopyHref = useCallback(() => {\n      const url = new URL(window.location.toString());\n      url.hash = element.id;\n      copyToClipboard(url.toString());\n      event({\n        type: 'action',\n        action: 'copy block href',\n        props: { blockType: element.type },\n      });\n    }, [element.id, element.type, event]);\n\n    const onShowHide = useCallback(\n      (a: 'show' | 'hide') => {\n        if (a === 'show') {\n          setIsHidden(false);\n          event({\n            type: 'action',\n            action: 'show block',\n            props: { blockType: element.type },\n          });\n        } else {\n          setIsHidden(true);\n          event({\n            type: 'action',\n            action: 'hide block',\n            props: { blockType: element.type },\n          });\n        }\n      },\n      [element.type, event, setIsHidden]\n    );\n\n    const onMouseDown = useCallback(() => {\n      if (element.type === ELEMENT_TABLE) {\n        dndPreviewActions.draggingId(element.id);\n      }\n    }, [element.id, element.type]);\n\n    // Only show the Blue line to add element on these conditions.\n    // If its a nested element (Such as a list, don't show it in between).\n    const nodePath = findNodePath(editor, element);\n    const showLine =\n      nodePath &&\n      nodePath.length === 1 &&\n      !(\n        editor.children.length === 2 &&\n        editor.children[1].children[0].text === ''\n      );\n\n    if (deleted || (readOnly && element.isHidden)) {\n      return null;\n    }\n    if (readOnly) {\n      return (\n        <EditorBlock\n          {...props}\n          ref={ref}\n          contentEditable={\n            !readOnly || alwaysWritableElementTypes.includes(element.type)\n          }\n          suppressContentEditableWarning\n        >\n          <BlockErrorBoundary element={element}>{children}</BlockErrorBoundary>\n        </EditorBlock>\n      );\n    }\n\n    return (\n      <UIDraggableBlock\n        {...props}\n        isHidden={element.isHidden}\n        isSelected={selected}\n        dragSource={dragRef}\n        blockRef={ref}\n        previewRef={previewRef}\n        dropLine={dropLine || undefined}\n        isBeingDragged={isDragging || draggingIds.has(element.id)}\n        onMouseDown={onMouseDown}\n        onDelete={onDelete}\n        dependenciesForBlock={dependenciesForBlock}\n        onDuplicate={onDuplicate}\n        onShowHide={onShowHide}\n        onAdd={onAdd}\n        onPlus={onPlus}\n        onCopyHref={isFlagEnabled('COPY_HREF') ? onCopyHref : undefined}\n        showLine={showLine}\n        isCentered={isCentered}\n        hasPreviousSibling={hasPreviousSibling}\n      >\n        <BlockSelectable element={element}>\n          <BlockErrorBoundary element={element}>{children}</BlockErrorBoundary>\n        </BlockSelectable>\n      </UIDraggableBlock>\n    );\n  }\n);\n\nconst openSlashMenu = (editor: MyEditor, element: MyElement) => {\n  const selectedBlock = editor.selection?.anchor.path[0];\n  const selectedNode = selectedBlock ? getNode(editor, [selectedBlock]) : null;\n  const selectedLine = selectedNode ? getNodeString(selectedNode) : null;\n  const slashAlreadyCreated = selectedLine === '/' && selectedBlock;\n\n  if (slashAlreadyCreated) {\n    select(editor, getEndPoint(editor, [selectedBlock]));\n    focusEditor(editor);\n    return;\n  }\n\n  const path = findNodePath(editor, element);\n  const currentLine = getNodeString(element);\n  const isParagraph = element.type === ELEMENT_PARAGRAPH;\n\n  if (!path) return;\n  if (currentLine === '/') return;\n\n  const createNewParagraph = currentLine || !isParagraph;\n\n  if (createNewParagraph) {\n    const nextNode = getNextNode(editor, { at: path });\n    const [, nextPath] = nextNode || [];\n    if (!nextPath) return;\n\n    insertNodes(\n      editor,\n      {\n        id: nanoid(),\n        type: ELEMENT_PARAGRAPH,\n        children: [{ text: '/' }],\n      },\n      {\n        at: nextPath,\n      }\n    );\n    select(editor, getEndPoint(editor, nextPath));\n    focusEditor(editor);\n  } else {\n    insertText(editor, '/', { at: path });\n    select(editor, getEndPoint(editor, path));\n    focusEditor(editor);\n  }\n};\n","export const initialGroups = {\n  variableNameColumn: 0,\n  resultColumn: 0,\n} as const;\n","import {\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_STRUCTURED_IN,\n} from '@decipad/editor-types';\nimport type {\n  ColumnGroupName,\n  ColumnWidths,\n} from './BlockLengthSynchronizationProvider';\nimport { initialGroups } from './initialGroups';\n\nconst blockTypes = new Set([ELEMENT_CODE_LINE_V2, ELEMENT_STRUCTURED_IN]);\n\nexport type MeasuredLengths = Map<string, Partial<ColumnWidths>>;\n\nexport function setIn(\n  measuredLengths: MeasuredLengths,\n  blockId: string,\n  group: ColumnGroupName,\n  length: number | undefined\n) {\n  if (length != null) {\n    const current = measuredLengths.get(blockId) ?? {};\n    current[group] = length;\n    measuredLengths.set(blockId, current);\n  } else {\n    const current = measuredLengths.get(blockId) ?? {};\n    delete current[group];\n    if (Object.keys(current).length === 0) {\n      measuredLengths.delete(blockId);\n    }\n  }\n}\n\nexport function getNewGroupsTargetLengths(\n  groups: { memberIds: string[] }[],\n  measuredLengths: Map<string, Partial<ColumnWidths>>\n) {\n  const ret = new Map<string, ColumnWidths>();\n\n  for (const { memberIds } of groups) {\n    const lengthsPerGroup: ColumnWidths = { ...initialGroups };\n\n    for (const groupName of Object.keys(lengthsPerGroup) as ColumnGroupName[]) {\n      const lengths = memberIds.flatMap(\n        (id) => measuredLengths.get(id)?.[groupName] ?? []\n      );\n      lengthsPerGroup[groupName] = Math.max(...lengths);\n    }\n\n    for (const id of memberIds) {\n      ret.set(id, lengthsPerGroup);\n    }\n  }\n\n  return ret;\n}\n\ntype MockableEditorChildren = { id: string; type: string }[];\n/** Groups children into contiguous groups of {blockTypes}-type blocks.\n *\n * - code line \"TaxRate\"\n * - structured inp \"MyTax\"\n * - code line \"TaxAmount\"\n * - paragraph\n * - code line \"Total\"\n * - code line \"GrandTotal\"\n *\n * Would create 2 groups.\n */\nexport function getContiguousGroups(editorChildren: MockableEditorChildren) {\n  const groups: { memberIds: string[] }[] = [];\n  let inGroup = false;\n\n  for (const block of editorChildren) {\n    if (!blockTypes.has(block.type)) {\n      inGroup = false;\n      continue;\n    }\n\n    if (!inGroup) {\n      inGroup = true;\n      groups.push({ memberIds: [block.id] });\n    } else {\n      groups[groups.length - 1].memberIds.push(block.id);\n    }\n  }\n\n  return groups;\n}\n","import { MyEditor } from '@decipad/editor-types';\nimport { EditorChangeContext } from '@decipad/react-contexts';\nimport { createSelectableContext } from '@decipad/react-utils';\nimport { noop } from '@decipad/utils';\nimport { dequal } from 'dequal';\nimport {\n  ReactNode,\n  useState,\n  useMemo,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n} from 'react';\nimport {\n  combineLatestWith,\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  of,\n  mergeWith,\n  Subject,\n} from 'rxjs';\nimport {\n  getContiguousGroups,\n  getNewGroupsTargetLengths,\n  MeasuredLengths,\n  setIn,\n} from './helpers';\n\n/** Finds contiguous groups of blocks with type {blockTypes},\n * each of which will mount a BlockLengthSynchronizationProvider,\n * And makes sure that the lengths of the names in each group are synchronized.\n */\nexport const BlockLengthSynchronizationProvider = ({\n  editor,\n  children,\n}: {\n  editor: MyEditor;\n  children: ReactNode;\n}) => {\n  const measuredLengths = useRef(new Map() as MeasuredLengths);\n  const [targetWidths, setTargetWidths] = useState(\n    () => new Map<string, ColumnWidths>()\n  );\n\n  const [updatedLength$] = useState(() => new Subject<undefined>());\n  const editorChange$ = useContext(EditorChangeContext);\n\n  useEffect(() => {\n    const sub = editorChange$\n      .pipe(\n        debounceTime(100),\n        mergeWith(of(undefined)),\n        map(() => getContiguousGroups(editor.children)),\n        distinctUntilChanged((cur, next) => dequal(cur, next)),\n        // Take in signals of new lengths\n        combineLatestWith(updatedLength$),\n        map(([groups]) =>\n          getNewGroupsTargetLengths(groups, measuredLengths.current)\n        )\n      )\n      .subscribe(setTargetWidths);\n\n    return () => sub.unsubscribe();\n  }, [editor, editorChange$, updatedLength$]);\n\n  const setMeasuredLength = useCallback(\n    (group: ColumnGroupName, blockId: string, length: number | undefined) => {\n      setIn(measuredLengths.current, blockId, group, length);\n\n      updatedLength$.next(undefined);\n    },\n    [updatedLength$]\n  );\n\n  const context = useMemo(\n    () => ({ targetWidths, setMeasuredLength }),\n    [targetWidths, setMeasuredLength]\n  );\n\n  return (\n    <NameSyncContext.Provider value={context}>\n      {children}\n    </NameSyncContext.Provider>\n  );\n};\n\nexport type ColumnWidths = {\n  variableNameColumn: number;\n  resultColumn: number;\n};\n\nexport type ColumnGroupName = keyof ColumnWidths;\n\nexport const NameSyncContext = createSelectableContext({\n  targetWidths: new Map<string, ColumnWidths>(),\n  setMeasuredLength: noop as (\n    group: ColumnGroupName,\n    blockId: string,\n    newLength: number | undefined\n  ) => void,\n});\n","import { useSelectableContext } from '@decipad/react-utils';\nimport { ReactNode, useEffect, useRef } from 'react';\nimport {\n  NameSyncContext,\n  ColumnGroupName,\n} from './BlockLengthSynchronizationProvider';\n\n/**\n * Measures self, sends length to BlockLengthSynchronizationProvider.\n * Also receives length from BlockLengthSynchronizationProvider.\n *\n * These two are not contradictory because it renders two nested elements:\n * a \"width receiver\" and a \"measurable\" which have independent widths.\n */\nexport const BlockLengthSynchronizationReceiver = ({\n  syncGroupName,\n  topLevelBlockId,\n  children,\n  alignment = 'start',\n}: {\n  /** Which column does this visually align with */\n  syncGroupName: ColumnGroupName;\n  /** The block ID this name identifies, findable in editor.children[*].id */\n  topLevelBlockId: string | undefined;\n  /** PlainText node from slate-react */\n  children: ReactNode;\n  alignment?: 'start' | 'end';\n}) => {\n  const { minWidth, setMeasuredLength } = useSelectableContext(\n    NameSyncContext,\n    ({ targetWidths: targetLengths, ...rest }) => ({\n      minWidth:\n        topLevelBlockId && targetLengths.get(topLevelBlockId)?.[syncGroupName],\n      ...rest,\n    })\n  );\n  const measurableRef = useRef<HTMLSpanElement | null>(null);\n\n  // Provide our own length to BlockLengthSynchronizationProvider\n  useEffect(() => {\n    if (!measurableRef.current || !topLevelBlockId) {\n      return;\n    }\n\n    // Use a ResizeObserver to report changes of measurableRef's size\n    const report = () => {\n      const width = measurableRef.current?.getBoundingClientRect()?.width;\n      setMeasuredLength(syncGroupName, topLevelBlockId, width ?? 0);\n    };\n\n    // Initial report\n    report();\n\n    const observer = new ResizeObserver(report);\n    observer.observe(measurableRef.current);\n\n    return () => {\n      setMeasuredLength(syncGroupName, topLevelBlockId, undefined);\n      observer.disconnect();\n    };\n  }, [syncGroupName, topLevelBlockId, setMeasuredLength, children]);\n\n  return (\n    <span\n      css={{\n        display: 'flex',\n        ...(alignment === 'end' && { justifyContent: 'end' }),\n      }}\n      style={{ minWidth }}\n    >\n      <span css={{ whiteSpace: 'nowrap' }} ref={measurableRef}>\n        {children}\n      </span>\n    </span>\n  );\n};\n","import { MyEditor } from '@decipad/editor-types';\n\n/**\n * After initial page load `editor.selection` is not set so `setSelection` does nothing.\n * We use this hack, but further investigation is needed ENG-1465.\n * This way we also make selection differ from the next one, so editorApply is triggered.\n *\n * @see  https://github.com/ianstormtaylor/slate/blob/f55026f0ba4eeea272ab33385ae2a43d3b3d65a0/packages/slate/src/transforms/selection.ts#L190-L192\n * */\nexport const ensureSelectionHack = (editor: MyEditor, force?: boolean) => {\n  const { selection } = editor;\n  if (!selection || force) {\n    const path = [0];\n    const hackSelection = {\n      anchor: { path, offset: 0 },\n      focus: { path, offset: 0 },\n    };\n    // eslint-disable-next-line no-param-reassign\n    editor.selection = hackSelection;\n  }\n};\n","import { useSelection } from '@decipad/editor-utils';\nimport { isCollapsed } from '@udecode/plate';\nimport { useEffect } from 'react';\n\n/**\n * Will prevent backspace from deleting the block if the selection is at the start of the block.\n *\n * @param shouldPreventDeletion - boolean flag to determine if backspace should be cancelled\n * @param onPreventDeletion - callback to run when backspace is cancelled\n */\nexport const useDeletionTrap = (\n  shouldPreventDeletion: boolean,\n  onPreventDeletion?: () => void\n) => {\n  let shouldPreventBackspace = false;\n  const selection = useSelection();\n  const collapsed = isCollapsed(selection);\n\n  if (selection && collapsed) {\n    const isAtBlockStart =\n      selection.anchor.path[1] === 0 && selection.anchor.offset === 0;\n\n    shouldPreventBackspace = isAtBlockStart && shouldPreventDeletion;\n\n    onPreventDeletion?.();\n  }\n\n  useEffect(() => {\n    if (!shouldPreventBackspace) return;\n\n    const onWindowKeyDown = (event: KeyboardEvent) => {\n      if (event.key !== 'Backspace') return;\n\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    document.addEventListener('keydown', onWindowKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', onWindowKeyDown, true);\n    };\n  }, [shouldPreventBackspace]);\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { TOperation } from '@udecode/plate';\nimport { useEffect } from 'react';\n\n/**\n * This hook prevents editor from jumping out of the block.\n * Cursor will not move if you for example press left when the cursor is at the beginning of the block.\n * It prevents only navigation with arrow keys. You can still click outside of the block.\n * Right now it is used in the teleported code lines.\n *\n * @param editor - Slate editor\n * @param shouldPreventJumpingOut - If true, the editor will prevent jumping out of the block.\n */\nexport const useSelectionTrap = (\n  editor: MyEditor,\n  shouldPreventJumpingOut: boolean\n) => {\n  useEffect(() => {\n    if (!shouldPreventJumpingOut) return;\n\n    const { apply } = editor;\n    const tracker = trackArrowKeys();\n\n    const overrideApply: typeof apply = (operation) => {\n      if (operation.type === 'set_selection') {\n        const shouldPreventAction =\n          tracker.arrowKeyUsed && !isSelectionInsideBlock(operation);\n\n        if (shouldPreventAction) {\n          return apply(cancelSetSelectionOperation(operation));\n        }\n      }\n      return apply(operation);\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    editor.apply = overrideApply;\n\n    return () => {\n      // eslint-disable-next-line no-param-reassign\n      editor.apply = apply;\n      tracker.unsubscribe();\n    };\n  }, [editor, shouldPreventJumpingOut]);\n};\n\nconst isSelectionInsideBlock = (operation: TOperation) => {\n  if (operation.type !== 'set_selection') return null;\n\n  const newFocus = operation.newProperties?.focus?.path[0];\n  const newAnchor = operation.newProperties?.anchor?.path[0];\n\n  const focusRoot = operation.properties?.focus?.path[0];\n  const anchorRoot = operation.properties?.anchor?.path[0];\n\n  const allDefined = newFocus && newAnchor && focusRoot && anchorRoot;\n\n  if (allDefined == null) return true;\n\n  return (\n    focusRoot === anchorRoot &&\n    focusRoot === newFocus &&\n    anchorRoot === newAnchor\n  );\n};\n\nconst cancelSetSelectionOperation = (operation: TOperation): TOperation => {\n  if (operation.type !== 'set_selection') return operation;\n\n  if (!operation.properties) return operation;\n  if (!operation.newProperties) return operation;\n\n  return {\n    ...operation,\n    newProperties: operation.properties,\n  };\n};\n\nconst trackArrowKeys = () => {\n  const tracker = {\n    arrowKeyUsed: false,\n    unsubscribe: () => {\n      document.removeEventListener('keydown', onWindowKeyDown, true);\n    },\n  };\n\n  const onWindowKeyDown = (event: KeyboardEvent) => {\n    if (!event.key.startsWith('Arrow')) return;\n\n    tracker.arrowKeyUsed = true;\n\n    setTimeout(() => {\n      tracker.arrowKeyUsed = false;\n    }, 50);\n  };\n\n  document.addEventListener('keydown', onWindowKeyDown, true);\n\n  return tracker;\n};\n","import { MyElement, useTEditorRef } from '@decipad/editor-types';\nimport { focusAndSetSelection, useSelection } from '@decipad/editor-utils';\nimport { ShadowCalcReference } from '@decipad/react-contexts';\nimport { findNodePath } from '@udecode/plate';\nimport { useEffect, useState } from 'react';\nimport { useSelected } from 'slate-react';\nimport { ensureSelectionHack } from './ensureSelectionHack';\nimport { useDeletionTrap } from './useDeletionTrap';\nimport { useSelectionTrap } from './useSelectionTrap';\n\nenum FocusStatus {\n  Focusing = 'focusing',\n  Focused = 'focused',\n  None = 'none',\n}\n\nexport const useFocusControl = (\n  editing?: ShadowCalcReference,\n  closeEditor?: (id: string) => void\n) => {\n  const [focusState, setFocusState] = useState<FocusStatus>(FocusStatus.None);\n\n  const useWatchTeleported = (elementId: string, element: MyElement) => {\n    const editor = useTEditorRef();\n    const selection = useSelection();\n    const selected = useSelected();\n\n    const isTeleported = elementId === editing?.codeLineId;\n    const shouldBeFocused = isTeleported && focusState === FocusStatus.None;\n\n    const anchorRoot = selection?.anchor?.path[0];\n    const focusRoot = selection?.focus?.path[0];\n    const isInsideBlock = selected && isTeleported && anchorRoot === focusRoot;\n\n    const shouldBeBlurred =\n      !isInsideBlock &&\n      focusState === FocusStatus.Focused &&\n      elementId === editing?.codeLineId;\n\n    const shouldPreventArrowKeys =\n      isTeleported && focusState === FocusStatus.Focused;\n\n    const shouldPreventDeletion = isTeleported && isInsideBlock;\n\n    useSelectionTrap(editor, shouldPreventArrowKeys);\n    useDeletionTrap(shouldPreventDeletion);\n\n    useEffect(() => {\n      if (!isTeleported) {\n        setFocusState(FocusStatus.None);\n      }\n    }, [isTeleported]);\n\n    useEffect(() => {\n      if (!shouldBeFocused) return;\n\n      const path = findNodePath(editor, element);\n\n      if (path) {\n        setFocusState(FocusStatus.Focusing);\n        ensureSelectionHack(editor, true);\n        focusAndSetSelection(editor, path);\n      }\n    }, [shouldBeFocused, editor, element]);\n\n    useEffect(() => {\n      if (!isInsideBlock) return;\n\n      setFocusState(FocusStatus.Focused);\n    }, [isInsideBlock]);\n\n    useEffect(() => {\n      if (!shouldBeBlurred) return;\n\n      setFocusState(FocusStatus.None);\n      closeEditor?.(elementId);\n    }, [elementId, shouldBeBlurred]);\n  };\n\n  return { focusState, useWatchTeleported };\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { focusAndSetSelection } from '@decipad/editor-utils';\nimport {\n  EditorTeleportContext,\n  ShadowCalcPortal,\n  ShadowCalcReference,\n} from '@decipad/react-contexts';\nimport { findNodePath } from '@udecode/plate';\nimport { ClientEvent, ClientEventsContext } from '@decipad/client-events';\nimport {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  useContext,\n} from 'react';\nimport { Subject } from 'rxjs';\nimport { ensureSelectionHack } from './ensureSelectionHack';\nimport { useFocusControl } from './useFocusControl';\n\ntype TeleportEditorProps = PropsWithChildren<{ editor: MyEditor }>;\n\nexport const openEditor$ = new Subject<ShadowCalcReference>();\nexport const editorAnalytics$ = new Subject<ClientEvent>();\n\nexport const TeleportEditor: React.FC<TeleportEditorProps> = ({\n  children,\n  editor,\n}) => {\n  const [portal, setPortal] = useState<ShadowCalcPortal>();\n  const [editing, setEditing] = useState<ShadowCalcReference>();\n  const clientEvent = useContext(ClientEventsContext);\n\n  const focusNumber = useCallback(() => {\n    const node = editing?.numberNode;\n    const path = node ? findNodePath(editor, node) : null;\n\n    if (path) {\n      focusAndSetSelection(editor, path);\n    }\n  }, [editor, editing?.numberNode]);\n\n  const focusCodeLine = useCallback(() => {\n    const node = editing?.codeLineNode;\n    const path = node ? findNodePath(editor, node) : null;\n\n    if (!path) return;\n\n    ensureSelectionHack(editor, true);\n    focusAndSetSelection(editor, path);\n  }, [editor, editing?.codeLineNode]);\n\n  const closeEditor = useCallback(\n    (codeLineId?: string, onClose?: () => void) =>\n      setEditing((old) => {\n        const anyCodeLine = codeLineId == null;\n        const matchingCodeLine = old?.codeLineId === codeLineId;\n\n        const shouldClose = anyCodeLine || matchingCodeLine;\n\n        if (shouldClose) {\n          onClose?.();\n          return undefined;\n        }\n\n        clientEvent({\n          type: 'action',\n          action: 'code line teleported back',\n        });\n\n        return old;\n      }),\n    [setEditing, clientEvent]\n  );\n\n  const onBlur = useCallback(() => closeEditor(), [closeEditor]);\n  const { useWatchTeleported } = useFocusControl(editing, closeEditor);\n\n  const openEditor = useCallback(\n    (ref: ShadowCalcReference) => {\n      setEditing(ref);\n\n      clientEvent({\n        type: 'action',\n        action: 'code line teleported',\n      });\n    },\n    [setEditing, clientEvent]\n  );\n\n  useEffect(() => {\n    const sub = openEditor$.subscribe((ref) => openEditor(ref));\n\n    return () => sub.unsubscribe();\n  }, [openEditor]);\n\n  useEffect(() => {\n    const sub = editorAnalytics$.subscribe((event) => clientEvent(event));\n\n    return () => sub.unsubscribe();\n  }, [clientEvent]);\n\n  const value = useMemo(\n    () => ({\n      portal,\n      editing,\n      setPortal,\n      focusNumber,\n      focusCodeLine,\n      closeEditor,\n      openEditor,\n      useWatchTeleported,\n    }),\n    [\n      portal,\n      editing,\n      setPortal,\n      focusNumber,\n      focusCodeLine,\n      closeEditor,\n      openEditor,\n      useWatchTeleported,\n    ]\n  );\n\n  return (\n    <EditorTeleportContext.Provider value={value}>\n      <span onBlur={onBlur}>{children}</span>\n    </EditorTeleportContext.Provider>\n  );\n};\n","import { MyNode } from '@decipad/editor-types';\nimport {\n  useEditorChange,\n  UseEditorChangeOptions,\n} from '@decipad/react-contexts';\nimport { getNodeString } from '@udecode/plate';\nimport { dequal } from 'dequal';\nimport { useState } from 'react';\n\nexport const useNodeText = (\n  node: MyNode,\n  options?: UseEditorChangeOptions\n): string | undefined => {\n  const [text, setText] = useState<string | undefined>(() =>\n    getNodeString(node)\n  );\n  useEditorChange(\n    (newText) => {\n      if (!dequal(text, newText)) {\n        setText(newText);\n      }\n    },\n    () => getNodeString(node),\n    options\n  );\n\n  return text;\n};\n","const CLPlaceholders = [\n  '60 km/h * Time',\n  'Revenue - Cost',\n  '10 minutes per kilometer in miles per hour',\n  'Salary * 3 months',\n  'sum(Budget.Costs)',\n];\n\nexport const placeholderForCalculationLine = () => {\n  return CLPlaceholders[Math.floor(Math.random() * CLPlaceholders.length)];\n};\n","import { MyEditor, VariableDefinitionElement } from '@decipad/editor-types';\nimport { useComputer, useEditorChange } from '@decipad/react-contexts';\nimport { useCallback, useState } from 'react';\nimport { dequal } from 'dequal';\nimport { findNodePath, getNode, getNodeString } from '@udecode/plate';\nimport { inferType } from '@decipad/parse';\nimport { SerializedType } from '@decipad/computer';\n\nexport const useTextTypeInference = (\n  element: VariableDefinitionElement\n): SerializedType => {\n  const computer = useComputer();\n  const [inferredType, setInferredType] = useState<SerializedType>(() => ({\n    kind: 'anything',\n  }));\n\n  const selectTextValue = useCallback(\n    (editor: MyEditor): string | undefined => {\n      const path = findNodePath(editor, element);\n      if (path) {\n        const node = getNode(editor, [...path, 1]);\n        if (node) {\n          return getNodeString(node);\n        }\n      }\n      return undefined;\n    },\n    [element]\n  );\n\n  const inferAndSetType = useCallback(\n    (text: string | undefined) => {\n      (async () => {\n        if (text != null) {\n          const { type: newType } = await inferType(computer, text);\n          if (!dequal(newType, inferredType)) {\n            setInferredType(newType);\n          }\n        }\n      })();\n    },\n    [computer, inferredType]\n  );\n\n  useEditorChange(inferAndSetType, selectTextValue);\n\n  return inferredType;\n};\n","import {\n  CodeLineElement,\n  CodeLineV2Element,\n  CodeLineV2ElementCode,\n  MyEditor,\n  MyElement,\n  TableColumnFormulaElement,\n  TableElement,\n} from '@decipad/editor-types';\nimport { findNodePath } from '@udecode/plate';\nimport { useEffect } from 'react';\nimport { useSelected } from 'slate-react';\n\nexport const useOnBlurNormalize = (\n  editor: MyEditor,\n  element:\n    | CodeLineV2Element\n    | CodeLineV2ElementCode\n    | CodeLineElement\n    | TableColumnFormulaElement\n    | TableElement,\n  targetNode?: MyElement\n) => {\n  const selected = useSelected();\n  useEffect(() => {\n    // allows onBlur in one element trigger normalize on another\n    const nodeToNormalize = targetNode || element;\n    if (!selected) {\n      const path = findNodePath(editor, nodeToNormalize);\n      // in some CodeLine component tests path won't be defined\n      if (path) {\n        editor.normalizeNode([nodeToNormalize, path]);\n      }\n    }\n  }, [selected, editor, element, targetNode]);\n};\n","import { css } from '@emotion/react';\nimport { PropsWithChildren, useEffect, useState } from 'react';\nimport { cssVar, mediumShadow } from '../../primitives';\n\nexport const CodeLineFloat: React.FC<\n  PropsWithChildren<{ offsetTop: number }>\n> = ({ children, offsetTop }) => {\n  const [cssAnim, setCssAnim] = useState(appearStyle);\n\n  useEffect(() => setCssAnim(css({})), []);\n\n  return (\n    <div\n      css={[wrapperStyle(offsetTop), cssAnim]}\n      onClick={(ev) => {\n        ev.stopPropagation();\n      }}\n    >\n      <div data-testid=\"code-line-float\" css={codeLineStyle}>\n        {children}\n      </div>\n\n      <div css={instructionsStyle}>\n        <div css={{ width: '1.5rem' }}></div>\n        <div>Close with ESC or ENTER</div>\n      </div>\n    </div>\n  );\n};\n\nconst wrapperStyle = (offsetTop: number) =>\n  css({\n    position: 'absolute',\n    left: 0,\n    top: `${offsetTop}px`,\n    width: '100%',\n    zIndex: 10,\n    marginTop: '2px',\n\n    cursor: 'initial',\n\n    transition: 'opacity 60ms ease-in, transform 60ms ease-in',\n\n    borderRadius: '12px',\n    backgroundColor: cssVar('backgroundColor'),\n\n    boxShadow: `0px 3px 24px -4px ${mediumShadow.rgba}`,\n  });\n\nconst appearStyle = css({\n  opacity: 0,\n  transform: 'translateY(32px)',\n});\n\nconst codeLineStyle = css({\n  pointerEvents: 'all',\n});\n\nconst instructionsStyle = css({\n  height: '36px',\n  fontSize: '12px',\n  fontWeight: 500,\n\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n\n  padding: '0 12px',\n});\n","import { css } from '@emotion/react';\nimport { cssVar, p14Regular } from '../../primitives';\n\nexport const CodeLinePlaceholder: React.FC<{\n  height: number;\n  onBringBack?(): void;\n}> = ({ height, onBringBack }) => (\n  <div contentEditable={false} css={[wrapperStyle, { height: `${height}px` }]}>\n    This calculation is currently displayed elsewhere.\n    {` `}\n    <button css={linkStyle} onMouseDown={onBringBack}>\n      Bring it back.\n    </button>\n  </div>\n);\n\nconst wrapperStyle = css([\n  p14Regular,\n  {\n    opacity: 0.6,\n    borderRadius: '10px',\n    padding: '6px 12px',\n\n    border: `1px solid ${cssVar('borderColor')}`,\n    backgroundColor: cssVar('highlightColor'),\n\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'default',\n\n    userSelect: 'none',\n  },\n]);\n\nconst linkStyle = css({\n  cursor: 'pointer',\n  textDecoration: 'underline',\n});\n","import { createPortal } from 'react-dom';\nimport { PropsWithChildren, useEffect, useRef, useState } from 'react';\nimport { noop } from 'lodash';\nimport { useWindowListener, useCanUseDom } from '@decipad/react-utils';\nimport { ShadowCalcPortal } from '@decipad/react-contexts';\nimport { CodeLinePlaceholder, CodeLineFloat } from '@decipad/ui';\n\nconst DISMISS_KEYS = ['Escape', 'Enter'];\n\n/**\n * Moves code line to an active number for editing\n */\nexport const CodeLineTeleport: React.FC<\n  PropsWithChildren<{\n    codeLine?: ShadowCalcPortal;\n    onDismiss?(): void;\n    onTeleport?(): void;\n    onBringBack?(): void;\n  }>\n> = ({\n  codeLine,\n  children,\n  onDismiss = noop,\n  onTeleport = noop,\n  onBringBack = noop,\n}) => {\n  const portal = codeLine?.element;\n  const isVisible = codeLine != null && portal != null;\n\n  const teleportRef = useRef<typeof onTeleport>(null);\n\n  // eslint-disable-next-line no-param-reassign\n  // @ts-ignore\n  teleportRef.current = onTeleport;\n\n  useEffect(() => {\n    if (isVisible) {\n      teleportRef.current?.();\n    }\n  }, [isVisible, teleportRef]);\n\n  useWindowListener(\n    'keydown',\n    (event) => {\n      if (isVisible && DISMISS_KEYS.includes(event.key)) {\n        event.stopPropagation();\n        event.preventDefault();\n        onDismiss();\n      }\n    },\n    true\n  );\n\n  const [contentHeight, setContentHeight] = useState(0);\n  const codeLineRef = useRef<HTMLSpanElement>(null);\n  const currentHeight = codeLineRef.current?.offsetHeight || 0;\n\n  useEffect(() => {\n    if (isVisible) return;\n    if (currentHeight === 0) return;\n\n    setContentHeight(currentHeight);\n  }, [isVisible, currentHeight, setContentHeight]);\n\n  const canUseDom = useCanUseDom();\n\n  if (!isVisible) {\n    return <span ref={codeLineRef}>{children}</span>;\n  }\n\n  const editable = (\n    <CodeLineFloat offsetTop={codeLine.offsetY}>{children}</CodeLineFloat>\n  );\n\n  return (\n    <>\n      <CodeLinePlaceholder height={contentHeight} onBringBack={onBringBack} />\n      {canUseDom && createPortal(editable, portal)}\n    </>\n  );\n};\n","import {\n  IdentifiedError,\n  IdentifiedResult,\n  isBracketError,\n  isSyntaxError,\n} from '@decipad/computer';\nimport { docs } from '@decipad/routing';\n\nexport const getSyntaxError = (line?: IdentifiedResult | IdentifiedError) => {\n  const error = line?.error;\n  if (!error) {\n    return undefined;\n  }\n\n  return isSyntaxError(error)\n    ? {\n        ...error,\n        line: error.line != null ? error.line : 1,\n        column: error.column != null ? error.column : 1,\n        url: `${docs({}).page({ name: 'errors' }).$}#syntax-error`,\n      }\n    : isBracketError(error.bracketError)\n    ? {\n        message: 'Bracket error',\n        bracketError: error.bracketError,\n        url: `${docs({}).page({ name: 'errors' }).$}#syntax-error`,\n      }\n    : {\n        message: error.message,\n        url: docs({}).page({ name: 'errors' }).$,\n      };\n};\n","import {\n  CodeLineElement,\n  CodeLineV2Element,\n  MyEditor,\n} from '@decipad/editor-types';\nimport { onDragStartSmartRef, setSlateFragment } from '@decipad/editor-utils';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport React from 'react';\nimport { Computer, Result } from '@decipad/computer';\n\nexport const DRAG_INLINE_RESULT = 'inline-result';\n\nexport const onDragStartInlineResult =\n  (\n    editor: MyEditor,\n    {\n      element,\n      asText = '',\n      computer,\n      result,\n    }: {\n      element: CodeLineElement | CodeLineV2Element;\n      asText?: string;\n      computer: Computer;\n      result: Result.Result;\n    }\n  ) =>\n  (e: React.DragEvent) => {\n    if (isFlagEnabled('EXPR_REFS')) {\n      onDragStartSmartRef(editor)({\n        element,\n        asText,\n        result,\n        computer,\n      })(e);\n    } else {\n      // eslint-disable-next-line no-param-reassign\n      editor.dragging = DRAG_INLINE_RESULT;\n\n      setSlateFragment(e.dataTransfer, [element]);\n\n      editor.setFragmentData(e.dataTransfer, 'drag');\n    }\n  };\n","import { MyEditor } from '@decipad/editor-types';\nimport { ComponentProps } from 'react';\nimport { setSlateFragment } from '@decipad/editor-utils';\nimport { CodeResult } from '@decipad/ui';\nimport { Computer, SerializedTypes } from '@decipad/computer';\nimport { DeciNumber } from '@decipad/number';\nimport { dndPreviewActions } from '@decipad/react-contexts';\n\nexport const DRAG_TABLE_CELL_RESULT = 'table-cell-result';\n\nexport const onDragStartTableCellResult =\n  (\n    editor: MyEditor,\n    {\n      computer,\n    }: {\n      computer: Computer;\n    }\n  ): NonNullable<ComponentProps<typeof CodeResult>['onDragStartCell']> =>\n  (data, { previewRef, result }) =>\n  (e) => {\n    // eslint-disable-next-line no-param-reassign\n    editor.dragging = DRAG_TABLE_CELL_RESULT;\n\n    setSlateFragment(e.dataTransfer, [data]);\n    editor.setFragmentData(e.dataTransfer, 'drag');\n\n    if (editor.previewRef?.current && previewRef?.current) {\n      const formatted = computer.formatNumber(\n        result.type as SerializedTypes.Number,\n        result.value as DeciNumber\n      );\n\n      dndPreviewActions.previewText(formatted.asString);\n\n      e.dataTransfer.setDragImage(editor.previewRef.current, 0, 0);\n    }\n\n    e.dataTransfer.dropEffect = 'copy';\n  };\n","import { useEffect } from 'react';\nimport { Computer, parseBlock } from '@decipad/computer';\nimport { MyEditor } from '@decipad/editor-types';\nimport { useComputer } from '@decipad/react-contexts';\n\nconst ENABLE_CLICK_REFERENCING = false;\n\nexport const useCodeLineClickReference = (\n  editor: MyEditor,\n  isSelected: boolean,\n  code: string\n) => {\n  const computer = useComputer();\n\n  useEffect(() => {\n    if (!isSelected) return;\n    if (!ENABLE_CLICK_REFERENCING) return;\n\n    const onClick = (ev: MouseEvent) => {\n      const elementId = getClickedInlineDef(ev);\n      if (!elementId) return;\n\n      ev.preventDefault();\n\n      const insertName = getInsertableValue(editor, computer, elementId, code);\n      if (!insertName) return;\n\n      editor.insertText(insertName);\n    };\n\n    document.addEventListener('mousedown', onClick);\n\n    return () => {\n      document.removeEventListener('mousedown', onClick);\n    };\n  }, [editor, isSelected, code, computer]);\n};\n\nconst DELIM_END = /[\\s({[,]$/;\n\nconst getInsertableValue = (\n  editor: MyEditor,\n  computer: Computer,\n  elementId: string,\n  code: string\n) => {\n  const offset = editor.selection?.anchor.offset;\n  const [left, right] = [code.slice(0, offset), code.slice(offset)];\n\n  const variableName = getVariableName(computer, elementId);\n  if (!variableName) return null;\n\n  const block = `${left} ${variableName} ${right}`;\n  const insertable = parseBlock(block).error == null;\n  if (!insertable) return null;\n\n  let insertableName = `${variableName} `;\n\n  if (!left.match(DELIM_END) && left) insertableName = ` ${insertableName}`;\n\n  return insertableName;\n};\n\nconst getVariableName = (computer: Computer, elementId: string) => {\n  const res = computer.getStatement(elementId);\n  return res?.type === 'assign' ? res.args[0].args[0] : null;\n};\n\nconst getClickedInlineDef = (ev: MouseEvent): string => {\n  const { target } = ev;\n  const inlineNumberEl =\n    target instanceof HTMLElement ? getInlineElementParent(target) : null;\n\n  return inlineNumberEl?.id || '';\n};\n\nconst getInlineElementParent = (\n  childElement: HTMLElement\n): HTMLElement | null => {\n  let element: HTMLElement | null = childElement;\n\n  while (element) {\n    const isInline =\n      element?.dataset?.slateNode === 'element' &&\n      element?.dataset?.slateInline === 'true';\n\n    if (isInline) return element;\n\n    element = element.parentElement;\n  }\n\n  return null;\n};\n","import { ELEMENT_CODE_LINE, MyElement } from '@decipad/editor-types';\nimport { useEditorChangeState } from '@decipad/react-contexts';\nimport { getNextNode, isElement, getPreviousNode } from '@udecode/plate';\nimport { ReactEditor } from 'slate-react';\nimport { Path } from 'slate';\n\nexport const useSiblingCodeLines = (element: MyElement) =>\n  useEditorChangeState(\n    (editor) => {\n      const currentPath = ReactEditor.findPath(editor as ReactEditor, element);\n      const isNearbyVisibleCodeLine = (n: unknown, p: Path) =>\n        isElement(n) &&\n        n.type === ELEMENT_CODE_LINE &&\n        (Path.equals(Path.next(currentPath), p) ||\n          Path.equals(Path.previous(currentPath), p));\n\n      return {\n        hasNext: !!getNextNode<MyElement>(editor, {\n          at: currentPath,\n          match: isNearbyVisibleCodeLine,\n        }),\n        hasPrevious: !!getPreviousNode<MyElement>(editor, {\n          at: currentPath,\n          match: isNearbyVisibleCodeLine,\n        }),\n      };\n    },\n    { hasNext: false, hasPrevious: false }\n  );\n","import { Computer, Parseable, ParseableDate } from '@decipad/computer';\nimport {\n  ELEMENT_CAPTION,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_EXPRESSION,\n  ELEMENT_VARIABLE_DEF,\n  MyElement,\n  useTEditorRef,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport {\n  findNodePath,\n  focusEditor,\n  getNodeString,\n  removeNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { useCallback, useMemo } from 'react';\n\nconst getElementExpression = (element: MyElement): string => {\n  if (element.type === ELEMENT_CODE_LINE_V2) {\n    return getNodeString(element.children[1]);\n  }\n  return getNodeString(element).split('=')[1]?.trim() ?? getNodeString(element);\n};\n\nexport const useTurnIntoProps = (\n  element: MyElement,\n  computer: Computer,\n  lineId: string\n) => {\n  const editor = useTEditorRef();\n\n  const symbol = computer.getSymbolDefinedInBlock$.use(lineId);\n  const parseableType = computer.getParseableTypeInBlock$.use(lineId);\n\n  const onTurnInto = useCallback(\n    (variant: string) => {\n      const path = findNodePath(editor, element);\n\n      if (!path || !symbol || !parseableType) {\n        return;\n      }\n\n      const coercedKind =\n        variant === 'toggle'\n          ? 'boolean'\n          : variant === 'expression'\n          ? 'number'\n          : variant;\n\n      const date =\n        parseableType.kind === 'date' ? parseableType.dateGranularity : 'day';\n\n      const expression =\n        parseableType.kind === 'date'\n          ? parseableType.dateStr\n          : getElementExpression(element);\n\n      withoutNormalizing(editor, () => {\n        insertNodes(\n          editor,\n          {\n            id: lineId,\n            type: ELEMENT_VARIABLE_DEF,\n            variant,\n            coerceToType: { kind: coercedKind, date },\n            children: [\n              {\n                type: ELEMENT_CAPTION,\n                children: [{ text: symbol }],\n              },\n              {\n                type: ELEMENT_EXPRESSION,\n                children: [{ text: expression }],\n              },\n            ],\n          } as VariableDefinitionElement,\n          { at: requirePathBelowBlock(editor, path) }\n        );\n        removeNodes(editor, { at: path });\n        focusEditor(editor);\n      });\n    },\n    [editor, element, parseableType, symbol, lineId]\n  );\n\n  const turnInto = useMemo(() => {\n    if (symbol && parseableType) {\n      return getWidgetOptionByType(parseableType);\n    }\n    return undefined;\n  }, [parseableType, symbol]);\n\n  return {\n    onTurnInto,\n    turnInto,\n  };\n};\n\nconst getWidgetOptionByType = (type: Parseable | ParseableDate) => {\n  switch (type?.kind) {\n    case 'boolean':\n      return [{ title: 'Toggle Widget', value: 'toggle' }];\n    case 'date':\n      return [{ title: 'Date Widget', value: 'date' }];\n    case 'number':\n    case 'string':\n      return [{ title: 'Input Widget', value: 'expression' }];\n    default:\n      return undefined;\n  }\n};\n","import { Result } from '@decipad/computer';\nimport {\n  DisplayElement,\n  ELEMENT_CODE_LINE,\n  ELEMENT_DISPLAY,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  insertNodes,\n  placeholderForCalculationLine,\n  useNodeText,\n} from '@decipad/editor-utils';\nimport {\n  useComputer,\n  useEditorTeleportContext,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport { CodeLine as UICodeLine } from '@decipad/ui';\nimport { findNodePath } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useSelected } from 'slate-react';\nimport { DraggableBlock } from '../block-management';\nimport { useOnBlurNormalize } from '../hooks';\nimport { CodeLineTeleport } from './CodeLineTeleport';\nimport { getSyntaxError } from './getSyntaxError';\nimport { onDragStartInlineResult } from './onDragStartInlineResult';\nimport { onDragStartTableCellResult } from './onDragStartTableCellResult';\nimport { useCodeLineClickReference } from './useCodeLineClickReference';\nimport { useSiblingCodeLines } from './useSiblingCodeLines';\nimport { useTurnIntoProps } from './useTurnIntoProps';\nimport { useOnDragEnd } from '../utils/useDnd';\n\nexport const CodeLine: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_CODE_LINE);\n\n  const selected = useSelected();\n  const codeLineContent = useNodeText(element, { debounceTimeMs: 0 }) ?? '';\n  const isEmpty = !codeLineContent.trim() && element.children.length <= 1;\n\n  const siblingCodeLines = useSiblingCodeLines(element);\n\n  const editor = useTEditorRef();\n\n  useCodeLineClickReference(editor, selected, codeLineContent);\n\n  // transform variable references into smart refs on blur\n  useOnBlurNormalize(editor, element);\n\n  const computer = useComputer();\n  const { id: lineId } = element;\n  const [syntaxError, lineResult] = computer.getBlockIdResult$.useWithSelector(\n    (line) => [getSyntaxError(line), line?.result] as const,\n    lineId\n  );\n\n  const onClickedResult = useCallback(\n    (result: Result.Result) => {\n      if (\n        result.type.kind !== 'number' &&\n        result.type.kind !== 'date' &&\n        result.type.kind !== 'string' &&\n        result.type.kind !== 'boolean'\n      ) {\n        return;\n      }\n\n      const path = findNodePath(editor, element);\n      if (!path) {\n        return;\n      }\n\n      const newDisplayElement: DisplayElement = {\n        id: nanoid(),\n        type: ELEMENT_DISPLAY,\n        blockId: element.id,\n        children: [{ text: '' }],\n      };\n\n      insertNodes(editor, newDisplayElement, {\n        at: [path[0] + 1],\n      });\n    },\n    [editor, element]\n  );\n\n  const isReadOnly = useIsEditorReadOnly();\n\n  const handleDragStartCell = useMemo(\n    () =>\n      isReadOnly ? undefined : onDragStartTableCellResult(editor, { computer }),\n    [computer, editor, isReadOnly]\n  );\n\n  const handleDragStartInlineResult = useMemo(\n    () =>\n      isReadOnly\n        ? undefined\n        : onDragStartInlineResult(editor, {\n            element,\n            computer,\n            result: lineResult as Result.Result,\n          }),\n    [computer, editor, element, isReadOnly, lineResult]\n  );\n\n  const onDragEnd = useOnDragEnd();\n\n  const {\n    closeEditor,\n    focusNumber,\n    focusCodeLine,\n    portal,\n    editing,\n    useWatchTeleported,\n  } = useEditorTeleportContext();\n\n  useWatchTeleported(lineId, element);\n\n  const teleport = editing?.codeLineId === element.id ? portal : undefined;\n\n  const turnIntoProps = useTurnIntoProps(element, computer, lineId);\n\n  const onTeleportDismiss = useCallback(() => {\n    closeEditor(element.id, focusNumber);\n  }, [focusNumber, closeEditor, element.id]);\n\n  const [aPlaceholder] = useState(placeholderForCalculationLine());\n\n  return (\n    <DraggableBlock\n      blockKind=\"codeLine\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n      dependencyId={lineId}\n      id={lineId}\n      hasPreviousSibling={siblingCodeLines?.hasPrevious}\n    >\n      <CodeLineTeleport\n        codeLine={teleport}\n        onDismiss={onTeleportDismiss}\n        onBringBack={focusCodeLine}\n      >\n        <UICodeLine\n          highlight={selected}\n          result={lineResult}\n          placeholder={aPlaceholder}\n          syntaxError={syntaxError}\n          isEmpty={isEmpty}\n          onDragStartInlineResult={handleDragStartInlineResult}\n          onDragStartCell={handleDragStartCell}\n          onDragEnd={onDragEnd}\n          onClickedResult={isReadOnly ? undefined : onClickedResult}\n          hasNextSibling={!teleport && siblingCodeLines?.hasNext}\n          hasPreviousSibling={!teleport && siblingCodeLines?.hasPrevious}\n        >\n          {children}\n        </UICodeLine>\n      </CodeLineTeleport>\n    </DraggableBlock>\n  );\n};\n","import {\n  CodeLineV2Element,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_STRUCTURED_IN,\n  StructuredInputElement,\n} from '@decipad/editor-types';\nimport { isElement } from '@udecode/plate';\n\nconst types = [ELEMENT_STRUCTURED_IN, ELEMENT_CODE_LINE_V2];\n\nexport function isStructuredElement(\n  element: unknown\n): element is StructuredInputElement | CodeLineV2Element {\n  return isElement(element) && types.includes(element.type);\n}\n","import { css } from '@emotion/react';\nimport { cssVar } from '../../primitives';\n\nexport const structuredInputContainerStyles = css({\n  position: 'relative',\n  display: 'grid',\n  gridTemplate: `\n    \"fadeline-top-left top-border     fadeline-top-right\" 0\n    \".                 children       .                 \" auto\n    \"fadeline-bot-left bot-border     fadeline-bot-right\" 0\n    /0                 1fr            0\n  `,\n});\n\nexport const childrenStyles = css({\n  gridArea: 'children',\n});\n\nexport const borderStyles = (pos: 'top' | 'bot') =>\n  css({\n    gridArea: `${pos}-border`,\n    pointerEvents: 'none',\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    borderTop: `1px solid ${cssVar('borderColor')}`,\n  });\n\nexport const borderTopStyles = borderStyles('top');\nexport const borderBotStyles = borderStyles('bot');\n\nexport const fadeLineStyles = (pos: 'top' | 'bot', side: 'left' | 'right') =>\n  css({\n    gridArea: `fadeline-${pos}-${side}`,\n    pointerEvents: 'none',\n    position: 'absolute',\n    left: side === 'right' ? 0 : undefined,\n    right: side === 'left' ? 0 : undefined,\n    width: 64,\n    borderTop: `1px solid ${cssVar('borderColor')}`,\n    // Fade out the fadeline borders using a mask\n    maskImage:\n      side === 'right'\n        ? `linear-gradient(to right, fuchsia, transparent)`\n        : `linear-gradient(to left, fuchsia, transparent)`,\n  });\n\nexport const fadeLineTopLeftStyles = fadeLineStyles('top', 'left');\nexport const fadeLineTopRightStyles = fadeLineStyles('top', 'right');\nexport const fadeLineBotLeftStyles = fadeLineStyles('bot', 'left');\nexport const fadeLineBotRightStyles = fadeLineStyles('bot', 'right');\n","import { ReactNode } from 'react';\nimport {\n  borderBotStyles,\n  borderTopStyles,\n  fadeLineBotLeftStyles,\n  fadeLineBotRightStyles,\n  fadeLineTopLeftStyles,\n  fadeLineTopRightStyles,\n  structuredInputContainerStyles,\n  childrenStyles,\n} from './styles';\n\ninterface StructuredInputLinesProps {\n  children?: ReactNode;\n}\n\nexport const StructuredInputLines = ({\n  children,\n}: StructuredInputLinesProps): ReturnType<React.FC> => {\n  return (\n    <div css={structuredInputContainerStyles}>\n      <span css={fadeLineTopLeftStyles} contentEditable={false}></span>\n      <span css={borderTopStyles} contentEditable={false}></span>\n      <span css={fadeLineTopRightStyles} contentEditable={false}></span>\n\n      <div css={childrenStyles}>{children}</div>\n\n      <span css={fadeLineBotLeftStyles} contentEditable={false}></span>\n      <span css={borderBotStyles} contentEditable={false}></span>\n      <span css={fadeLineBotRightStyles} contentEditable={false}></span>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport {\n  antiwiggle,\n  code,\n  cssVar,\n  setCssVar,\n  smallScreenQuery,\n  wiggle,\n} from '../../primitives';\nimport { codeBlock } from '../../styles';\n\nconst { lineHeight } = codeBlock;\n\nexport const highlightedLineStyles = {\n  borderColor: cssVar('borderHighlightColor'),\n};\n\nexport const codeLineStyles = css({\n  ':hover': highlightedLineStyles,\n\n  display: 'grid',\n  // `minmax(0, X)` prevents a grid blowout when code line is made out of huge consecutive text.\n  gridTemplate: `\n    \"varname                   code            inline-res    \" 1fr\n    \"mobile-varname            mobile-varname  mobile-varname\" auto\n    \"mobile-code               mobile-code     mobile-code   \" auto\n    \"expanded-res              expanded-res    expanded-res  \" auto\n    /minmax(max-content, auto) minmax(0, 66%)  1fr\n  `,\n\n  [smallScreenQuery]: {\n    // Layout per-line on mobile\n    gridTemplate: `\n      \"varname         \" auto\n      \"code            \" auto\n      \"inline-res      \" auto\n      \"expanded-res    \" auto\n      /1fr\n    `,\n  },\n});\n\nexport const inlineStyles = css({\n  gridArea: 'inline-res',\n  maxWidth: '100%',\n  display: 'flex',\n  justifySelf: 'end',\n  alignSelf: 'flex-start',\n  padding: '5px 0',\n\n  userSelect: 'all',\n});\n\nexport const variableNameContainerStyles = css({\n  gridArea: 'varname',\n  display: 'flex',\n  alignItems: 'center',\n  padding: '4px 6px 4px 0',\n});\n\nexport const codeContainerStyles = css(code, {\n  gridArea: 'code',\n  ...setCssVar('currentTextColor', cssVar('strongTextColor')),\n  lineHeight,\n\n  [smallScreenQuery]: {\n    borderLeft: 'none',\n  },\n});\n\nexport const canGrabStyles = css({\n  cursor: 'grab',\n\n  ':hover': {\n    animation: `${antiwiggle} 0.5s ease-in-out`,\n  },\n\n  ':hover:after': {\n    backgroundColor: 'blue',\n    animation: `${wiggle} 0.5s ease-in-out`,\n  },\n});\n\nexport const grabbingStyles = css({\n  cursor: 'grabbing',\n});\n","import { Result } from '@decipad/computer';\nimport { useDelayedValue } from '@decipad/react-utils';\nimport React, { ComponentProps, ReactNode, useState } from 'react';\nimport { CodeError } from '../../atoms';\nimport { StructuredInputLines } from '../../molecules';\nimport { grey400 } from '../../primitives';\nimport { CodeResultProps } from '../../types';\nimport { useResultInfo } from '../CodeLine/CodeLine';\nimport {\n  canGrabStyles,\n  codeContainerStyles,\n  codeLineStyles,\n  grabbingStyles,\n  highlightedLineStyles,\n  inlineStyles,\n  variableNameContainerStyles,\n} from './styles';\n\ninterface CodeLineStructuredProps {\n  readonly highlight?: boolean;\n  readonly result?: Result.Result;\n  readonly syntaxError?: ComponentProps<typeof CodeError>;\n  readonly onDragStartInlineResult?: (e: React.DragEvent) => void;\n  readonly onDragStartCell?: CodeResultProps<'table'>['onDragStartCell'];\n  readonly onDragEnd?: (e: React.DragEvent) => void;\n  readonly onClickedResult?: (arg0: Result.Result) => void;\n  readonly variableNameChild: ReactNode;\n  readonly codeChild: ReactNode;\n}\n\nexport const CodeLineStructured = ({\n  highlight = false,\n  result,\n  syntaxError,\n  onDragStartInlineResult,\n  onDragStartCell,\n  onDragEnd,\n  onClickedResult,\n  variableNameChild,\n  codeChild,\n}: CodeLineStructuredProps): ReturnType<React.FC> => {\n  const [grabbing, setGrabbing] = useState(false);\n\n  const freshResult = useResultInfo({\n    result,\n    syntaxError,\n    onDragStartCell,\n    onClickedResult,\n    variant: 'inline',\n  });\n  const { inline, expanded } = useDelayedValue(\n    freshResult,\n    freshResult.errored === true\n  );\n\n  /* Now, I know what you're thinking. A DIV inline?.\n   * Slate, seems to allow inline elements (span, var), to be clicked (And therefore the selection changes).\n   * but it doesn't do this for block elements like DIVs.\n   * Hence why we have this, instead of a span.\n   */\n  const getEquals = () => {\n    return (\n      <div\n        contentEditable={false}\n        css={{ color: grey400.rgb, display: 'inline' }}\n      >\n        ={' '}\n      </div>\n    );\n  };\n\n  return (\n    <StructuredInputLines>\n      <div\n        css={[codeLineStyles, highlight && highlightedLineStyles]}\n        spellCheck={false}\n      >\n        <code contentEditable={true} css={variableNameContainerStyles}>\n          {variableNameChild}\n        </code>\n        <code\n          data-testid=\"codeline-code\"\n          contentEditable={true}\n          css={codeContainerStyles}\n        >\n          {getEquals()}\n          {codeChild}\n        </code>\n        <div\n          css={[\n            inlineStyles,\n            (onDragStartInlineResult || onDragStartCell || onClickedResult) &&\n              canGrabStyles,\n            grabbing && grabbingStyles,\n          ]}\n          contentEditable={false}\n          draggable\n          onDragStart={(e) => {\n            onDragStartInlineResult?.(e);\n            setGrabbing(true);\n          }}\n          onDragEnd={(e) => {\n            onDragEnd?.(e);\n            setGrabbing(false);\n          }}\n        >\n          {inline}\n        </div>\n        {expanded}\n      </div>\n    </StructuredInputLines>\n  );\n};\n","import { SerializedType } from '@decipad/computer';\nimport { css } from '@emotion/react';\nimport { ReactNode, useMemo } from 'react';\nimport { CellValueType } from '@decipad/editor-types';\nimport { getTypeIcon } from '../../utils';\nimport { codeBlock } from '../../styles';\nimport { cssVar } from '../../primitives';\nimport { Formula } from '../../icons';\n\nconst varStyles = (type: 'simple' | 'formula') =>\n  css(codeBlock.structuredVariableStyles, {\n    padding: '4px 8px',\n    borderRadius: '6px',\n    background:\n      type === 'formula'\n        ? cssVar('structuredCalculationVariableColor')\n        : cssVar('structuredCalculationSimpleColor'),\n    display: 'flex',\n    alignItems: 'center',\n    width: 'fit-content',\n  });\n\nconst iconStyles = css({\n  display: 'inline-flex',\n  verticalAlign: 'text-top',\n  height: '16px',\n  width: '16px',\n  marginRight: '4px',\n  pointerEvents: 'none',\n  userSelect: 'none',\n});\n\nconst emptyStyles = css({\n  '::after': {\n    display: 'inline',\n    content: '\" \"',\n  },\n  // Slate creates a <br> for us. Pls no\n  br: { display: 'none' },\n});\n\nconst formulaIconStyles = css({\n  position: 'absolute',\n  left: '-18px',\n  width: '16px',\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n});\n\ninterface NonInteractiveCodeVariableProps {\n  readonly children: ReactNode;\n  readonly empty: boolean;\n  readonly type?: SerializedType | CellValueType;\n  readonly isValue?: boolean;\n}\n\nexport const CodeVariableDefinition = ({\n  isValue = true,\n  empty,\n  children,\n  type,\n}: NonInteractiveCodeVariableProps) => {\n  const Icon = useMemo(() => type && getTypeIcon(type), [type]);\n\n  return (\n    <span\n      css={[varStyles(isValue ? 'simple' : 'formula'), empty && emptyStyles]}\n    >\n      {!isValue && (\n        <span css={formulaIconStyles}>\n          <Formula />\n        </span>\n      )}\n      <span css={Icon && iconStyles} contentEditable={false}>\n        {Icon && <Icon />}\n      </span>\n      <span>{children}</span>\n    </span>\n  );\n};\n","import {\n  IdentifiedError,\n  IdentifiedResult,\n  isValue as isCodeValue,\n  parseExpressionOrThrow,\n  Result,\n} from '@decipad/computer';\nimport {\n  DisplayElement,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_DISPLAY,\n  ELEMENT_STRUCTURED_VARNAME,\n  MyElement,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  insertNodes,\n  isStructuredElement,\n  useEnsureValidVariableName,\n  useNodeText,\n} from '@decipad/editor-utils';\nimport {\n  useComputer,\n  useEditorTeleportContext,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport {\n  CodeLineStructured,\n  CodeVariableDefinition,\n  Tooltip,\n} from '@decipad/ui';\nimport { findNodePath, getNodeString, getPreviousNode } from '@udecode/plate';\nimport { dequal } from 'dequal';\nimport { nanoid } from 'nanoid';\nimport {\n  Children,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { debounceTime, Subject, distinctUntilChanged } from 'rxjs';\nimport { useSelected } from 'slate-react';\nimport { DraggableBlock } from '../block-management';\nimport { BlockLengthSynchronizationReceiver } from '../BlockLengthSynchronization/BlockLengthSynchronizationReceiver';\nimport { useOnBlurNormalize } from '../hooks';\nimport { CodeLineTeleport } from './CodeLineTeleport';\nimport { getSyntaxError } from './getSyntaxError';\nimport { onDragStartInlineResult } from './onDragStartInlineResult';\nimport { onDragStartTableCellResult } from './onDragStartTableCellResult';\nimport { useCodeLineClickReference } from './useCodeLineClickReference';\nimport { useTurnIntoProps } from './useTurnIntoProps';\n\nexport const CodeLineV2: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  assertElementType(element, ELEMENT_CODE_LINE_V2);\n\n  const sourceCode = getNodeString(element.children[1]);\n\n  const subValue = useRef(new Subject<boolean>());\n  const [isValue, setIsValue] = useState(isCodeValue(sourceCode));\n\n  useEffect(() => {\n    try {\n      parseExpressionOrThrow(sourceCode);\n      subValue.current.next(isCodeValue(sourceCode));\n    } catch (e) {\n      // do nothing\n    }\n  }, [sourceCode]);\n\n  useEffect(() => {\n    subValue.current\n      .pipe(debounceTime(0), distinctUntilChanged(dequal))\n      .subscribe(setIsValue);\n  }, []);\n\n  const selected = useSelected();\n  const codeLineContent = useNodeText(element, { debounceTimeMs: 0 }) ?? '';\n\n  const editor = useTEditorRef();\n\n  useCodeLineClickReference(editor, selected, codeLineContent);\n\n  // transform variable references into smart refs on blur\n  useOnBlurNormalize(editor, element);\n\n  const computer = useComputer();\n  const { id: lineId } = element;\n  const [syntaxError, lineResult] = computer.getBlockIdResult$.useWithSelector(\n    (line) => [getSyntaxError(line), line] as const,\n    lineId\n  );\n\n  const onClickedResult = useCallback(\n    (result: Result.Result) => {\n      if (\n        result.type.kind !== 'number' &&\n        result.type.kind !== 'date' &&\n        result.type.kind !== 'string' &&\n        result.type.kind !== 'boolean'\n      ) {\n        return;\n      }\n\n      const path = findNodePath(editor, element);\n      if (!path) {\n        return;\n      }\n\n      const newDisplayElement: DisplayElement = {\n        id: nanoid(),\n        type: ELEMENT_DISPLAY,\n        blockId: element.id,\n        children: [{ text: '' }],\n      };\n\n      insertNodes(editor, newDisplayElement, {\n        at: [path[0] + 1],\n      });\n    },\n    [editor, element]\n  );\n\n  const isReadOnly = useIsEditorReadOnly();\n\n  const handleDragStartCell = useMemo(\n    () =>\n      isReadOnly ? undefined : onDragStartTableCellResult(editor, { computer }),\n    [computer, editor, isReadOnly]\n  );\n\n  const handleDragStartInlineResult = useMemo(\n    () =>\n      isReadOnly\n        ? undefined\n        : onDragStartInlineResult(editor, {\n            element,\n            computer,\n            result: lineResult as any,\n          }),\n    [computer, editor, element, isReadOnly, lineResult]\n  );\n\n  const {\n    closeEditor,\n    focusNumber,\n    focusCodeLine,\n    portal,\n    editing,\n    useWatchTeleported,\n  } = useEditorTeleportContext();\n\n  useWatchTeleported(lineId, element);\n\n  const teleport = editing?.codeLineId === element.id ? portal : undefined;\n\n  const turnIntoProps = useTurnIntoProps(element, computer, lineId);\n\n  const onTeleportDismiss = useCallback(() => {\n    closeEditor(element.id, focusNumber);\n  }, [focusNumber, closeEditor, element.id]);\n\n  const childrenArray = Children.toArray(children);\n  if (childrenArray.length !== 2) {\n    throw new Error('panic: expected only 2 children');\n  }\n\n  const path = findNodePath(editor, element);\n  const prevElement = getPreviousNode<MyElement>(editor, { at: path });\n\n  return (\n    <DraggableBlock\n      blockKind=\"structured\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n      dependencyId={lineId}\n      id={lineId}\n      isCentered={true}\n      hasPreviousSibling={isStructuredElement(prevElement?.[0])}\n    >\n      <CodeLineTeleport\n        codeLine={teleport}\n        onDismiss={onTeleportDismiss}\n        onBringBack={focusCodeLine}\n      >\n        <CodeLineStructured\n          highlight={selected}\n          result={lineResult?.result}\n          syntaxError={syntaxError}\n          onDragStartInlineResult={handleDragStartInlineResult}\n          onDragStartCell={handleDragStartCell}\n          onClickedResult={isReadOnly ? undefined : onClickedResult}\n          variableNameChild={\n            <IsValueContext.Provider value={isValue}>\n              <VarResultContext.Provider value={lineResult}>\n                {childrenArray[0]}\n              </VarResultContext.Provider>\n            </IsValueContext.Provider>\n          }\n          codeChild={childrenArray[1]}\n        />\n      </CodeLineTeleport>\n    </DraggableBlock>\n  );\n};\n\nexport const VarResultContext = createContext<\n  IdentifiedResult | IdentifiedError | undefined\n>(undefined);\n\nexport const IsValueContext = createContext<boolean>(true);\n\nexport const CodeLineV2Varname: PlateComponent = (props) => {\n  assertElementType(props.element, ELEMENT_STRUCTURED_VARNAME);\n\n  const varResult = useContext(VarResultContext);\n  const isValue = useContext(IsValueContext);\n\n  const errorMessage = useEnsureValidVariableName(props.element, varResult?.id);\n  const empty = getNodeString(props.element).trim() === '';\n\n  return (\n    <Tooltip\n      trigger={\n        <span\n          {...props.attributes}\n          data-testid=\"codeline-varname\"\n          spellCheck={false}\n        >\n          <BlockLengthSynchronizationReceiver\n            syncGroupName=\"variableNameColumn\"\n            topLevelBlockId={varResult?.id}\n          >\n            <CodeVariableDefinition\n              empty={empty}\n              type={\n                varResult?.type === 'identified-error'\n                  ? { kind: 'number', unit: null }\n                  : varResult?.result.type\n              }\n              isValue={isValue}\n            >\n              {props.children}\n            </CodeVariableDefinition>\n          </BlockLengthSynchronizationReceiver>\n        </span>\n      }\n      open={errorMessage != null}\n    >\n      {errorMessage}\n    </Tooltip>\n  );\n};\n\nexport const CodeLineV2Code: PlateComponent = ({\n  element,\n  attributes,\n  children,\n}) => {\n  assertElementType(element, ELEMENT_CODE_LINE_V2_CODE);\n\n  const editor = useTEditorRef();\n\n  // transform variable references into smart refs on blur\n  useOnBlurNormalize(editor, element);\n\n  return <span {...attributes}>{children}</span>;\n};\n","import type { FC, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport type { IdentifiedError, IdentifiedResult } from '@decipad/computer';\nimport { CodeResult } from '@decipad/ui';\nimport { ArrowOutlined, Caret } from '../../icons';\nimport { cssVar, p14Regular, p32Medium } from '../../primitives';\nimport {\n  AutoCompleteMenu,\n  Identifier,\n} from '../AutoCompleteMenu/AutoCompleteMenu';\n\nconst wrapperStyles = css({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 4,\n  position: 'relative',\n});\n\nconst triggerStyles = (readOnly: boolean, selected: boolean) =>\n  css({\n    width: '100%',\n    borderRadius: 8,\n    padding: '0px 6px 0px 8px',\n    fontSize: 24,\n    minHeight: 44,\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    transition: 'all 0.2s ease-in-out',\n    ...(selected && { backgroundColor: cssVar('highlightColor') }),\n    ...(!readOnly && {\n      border: `1px solid ${cssVar('borderColor')}`,\n      ':hover': {\n        backgroundColor: cssVar('highlightColor'),\n      },\n      cursor: 'pointer',\n    }),\n  });\n\nconst textWrapperStyles = css({\n  display: 'flex',\n  flexWrap: 'wrap',\n  gap: '2px',\n});\n\nconst iconStyles = css({\n  display: 'grid',\n  justifyContent: 'center',\n  alignItems: 'center',\n  '> svg': {\n    height: 24,\n    width: 24,\n  },\n});\n\ninterface DropdownWidgetOptions {\n  type: 'var' | 'calc';\n  id: string;\n  text: string;\n}\n\ninterface DisplayWidgetDropdownProps {\n  readonly dropdownContent: Array<DropdownWidgetOptions>;\n  readonly openMenu: boolean;\n  readonly onChangeOpen: (arg0: boolean) => void;\n  readonly selectedId: string;\n  readonly setSelectedId: (arg0: string) => void;\n  readonly lineResult?: IdentifiedResult | IdentifiedError;\n  readonly result: string | null;\n  readonly readOnly: boolean;\n  readonly children: ReactNode;\n}\n\nexport const DisplayWidget: FC<DisplayWidgetDropdownProps> = ({\n  dropdownContent,\n  openMenu,\n  onChangeOpen,\n  setSelectedId,\n  lineResult,\n  result,\n  readOnly,\n  children,\n}) => {\n  return (\n    <>\n      <div css={wrapperStyles}>\n        <div css={iconStyles}>\n          <ArrowOutlined />\n        </div>\n        <div css={textWrapperStyles}>\n          <span css={[p14Regular, { color: cssVar('weakTextColor') }]}>\n            {`Result: ${result ?? 'Name'}`}\n          </span>\n        </div>\n      </div>\n      {children}\n      <div\n        css={triggerStyles(readOnly, openMenu)}\n        onClick={() => !readOnly && onChangeOpen(!openMenu)}\n        data-testid=\"result-widget\"\n      >\n        <span\n          css={[\n            p32Medium,\n            !lineResult?.result && { color: cssVar('weakerTextColor') },\n          ]}\n        >\n          {lineResult?.result?.type.kind !== 'type-error' &&\n          lineResult?.result ? (\n            <CodeResult {...lineResult.result} />\n          ) : (\n            '0'\n          )}\n        </span>\n        {!readOnly && (\n          <div css={{ width: 20, height: 20 }}>\n            <Caret variant={openMenu ? 'up' : 'down'} color=\"normal\" />\n          </div>\n        )}\n      </div>\n      {openMenu && !readOnly && (\n        <AutoCompleteMenu\n          top={false}\n          result={result}\n          identifiers={dropdownContent.map<Identifier>((item) => ({\n            kind: 'variable',\n            identifier: item.text,\n            type: item.id,\n          }))}\n          onExecuteItem={(i) => {\n            setSelectedId(i.type);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import {\n  ComponentProps,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  ELEMENT_DISPLAY,\n  ELEMENT_SMART_REF,\n  ELEMENT_VARIABLE_DEF,\n  PlateComponent,\n  SmartRefElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { useFocused, useSelected } from 'slate-react';\nimport {\n  ELEMENT_CODE_LINE,\n  findNode,\n  findNodePath,\n  getNodeString,\n  moveNodes,\n  PlateEditor,\n  serializeHtml,\n} from '@udecode/plate';\nimport {\n  useComputer,\n  useIsEditorReadOnly,\n  useResult,\n} from '@decipad/react-contexts';\nimport { DisplayWidget, VariableEditor } from '@decipad/ui';\nimport { DraggableBlock } from '@decipad/editor-components';\nimport {\n  assertElementType,\n  hasLayoutAncestor,\n  safeDelete,\n  useElementMutatorCallback,\n  useNodePath,\n  wrapIntoColumns,\n} from '@decipad/editor-utils';\nimport { Editor, Path } from 'slate';\nimport copy from 'copy-to-clipboard';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { defaultMoveNode } from '../utils/useDnd';\n\ninterface DropdownWidgetOptions {\n  type: 'var' | 'calc';\n  id: string;\n  text: string;\n}\n\nexport const Display: PlateComponent = ({ attributes, element, children }) => {\n  if (element?.type !== ELEMENT_DISPLAY) {\n    throw new Error(`Expression is meant to render expression elements`);\n  }\n  const [openMenu, setOpenMenu] = useState(false);\n  const [deleted, setDeleted] = useState(false);\n\n  // Because we only calculate results when the dropdown is open,\n  // we must have the exception for this when the component hasn't yet rendered.\n  // Otherwise you get `Result: Name`, because the component doesn't actually know\n  // the name of the variable/result.\n  const [loaded, setLoaded] = useState(false);\n\n  const selected = useSelected();\n  const focused = useFocused();\n  const userEvents = useContext(ClientEventsContext);\n  const readOnly = useIsEditorReadOnly();\n\n  // Avoids flickers, if the user clicked away when menu is open,\n  // the state still thinks it is open, so if the user clicked again,\n  // the menu would open and instanly close.\n  useEffect(() => {\n    if (!(selected && focused)) {\n      setOpenMenu(false);\n    }\n  }, [selected, focused]);\n\n  const editor = useTEditorRef();\n  const changeBlockId = useElementMutatorCallback(editor, element, 'blockId');\n  const changeVarName = useElementMutatorCallback(editor, element, 'varName');\n\n  const res = useResult(element.blockId);\n  const computer = useComputer();\n\n  const onDelete = useCallback(() => {\n    const path = findNodePath(editor, element);\n    if (path) {\n      setDeleted(true);\n      safeDelete(editor, path);\n    }\n  }, [editor, element]);\n\n  const onCopy = useCallback(() => {\n    copy(serializeHtml(editor as PlateEditor, { nodes: [element] }), {\n      format: 'text/html',\n    });\n  }, [editor, element]);\n\n  // Results from computer are NOT calculated until the menu is actually open.\n  // Saving a lot of CPU when the editor is re-rendering when the user is busy\n  // doing other work.\n  const namesDefined = computer.getNamesDefined$\n    .useWithSelector((names) =>\n      Object.values(names).map((name): DropdownWidgetOptions | undefined => {\n        if (!openMenu && loaded) return undefined;\n        const { kind } = name.type;\n        if (\n          !(\n            kind === 'string' ||\n            kind === 'number' ||\n            kind === 'boolean' ||\n            kind === 'type-error'\n          ) ||\n          name.kind !== 'variable'\n        ) {\n          return undefined;\n        }\n        return {\n          type: 'var',\n          text: name.name,\n          id: name.blockId || '',\n        };\n      })\n    )\n    .filter((n): n is DropdownWidgetOptions => n !== undefined);\n\n  // Decilang codelines do not need to have a name defining them.\n  // But we still want to add them.\n  const resultsWithNoName = editor.children\n    .filter((n) => n.type === ELEMENT_CODE_LINE)\n    .filter((n) => !computer.getSymbolDefinedInBlock(n.id))\n    .filter((n) => {\n      assertElementType(n, ELEMENT_CODE_LINE);\n      const codelineResult = computer.getBlockIdResult$.get(n.id);\n      const kind = codelineResult?.result?.type.kind;\n      return (\n        (kind === 'string' || kind === 'number' || kind === 'boolean') &&\n        codelineResult?.type !== 'identified-error'\n      );\n    })\n    .map((codeline): DropdownWidgetOptions | undefined => {\n      assertElementType(codeline, ELEMENT_CODE_LINE);\n      let text = '';\n      for (const c of codeline.children) {\n        if ((c as SmartRefElement)?.type === 'smart-ref') {\n          assertElementType(c, ELEMENT_SMART_REF);\n          const varName = computer.getSymbolDefinedInBlock(c.blockId);\n          if (!varName) return undefined;\n          text += varName;\n        }\n        text += getNodeString(c);\n      }\n      return {\n        type: 'calc',\n        text,\n        id: codeline.id,\n      };\n    })\n    .filter((n): n is DropdownWidgetOptions => n !== undefined);\n\n  const allResults = useMemo(\n    () => [...namesDefined, ...resultsWithNoName],\n    [namesDefined, resultsWithNoName]\n  );\n\n  const path = useNodePath(element);\n  const isHorizontal = !deleted && path && hasLayoutAncestor(editor, path);\n\n  const getAxis = useCallback<\n    NonNullable<ComponentProps<typeof DraggableBlock>['getAxis']>\n  >(\n    (_, monitor) => ({\n      horizontal:\n        monitor.getItemType() === ELEMENT_VARIABLE_DEF ||\n        monitor.getItemType() === ELEMENT_DISPLAY,\n      vertical: !isHorizontal,\n    }),\n    [isHorizontal]\n  );\n\n  const onDrop = useCallback<\n    NonNullable<ComponentProps<typeof DraggableBlock>['onDrop']>\n  >(\n    (item, _, direction) => {\n      if (!path || (direction !== 'left' && direction !== 'right')) {\n        return defaultMoveNode(editor, item, element.id, direction);\n      }\n\n      Editor.withoutNormalizing(editor as Editor, () => {\n        const dragPath = findNode(editor, {\n          at: [],\n          match: { id: item.id },\n        })?.[1];\n        let dropPath: Path = [];\n\n        if (isHorizontal) {\n          if (direction === 'left') {\n            dropPath = path;\n          }\n          if (direction === 'right') {\n            dropPath = Path.next(path);\n          }\n        } else {\n          dropPath = [...path, direction === 'left' ? 0 : 1];\n          wrapIntoColumns(editor, path);\n        }\n\n        moveNodes(editor, { at: dragPath, to: dropPath });\n      });\n    },\n    [editor, element.id, isHorizontal, path]\n  );\n\n  // Performance improvement: Because results are only calculated when\n  // menu is open, we no longer have access to them all the time. So we\n  // need to store a bit more information about it.\n  const changeResult = useCallback(\n    (blockId: string) => {\n      const newRes = allResults.find((i) => i.id === blockId);\n      changeVarName(newRes?.text || '');\n      changeBlockId(blockId);\n      setOpenMenu(false);\n\n      // Analytics\n      userEvents({\n        type: 'action',\n        action: 'widget value updated',\n        props: {\n          variant: 'display',\n          isReadOnly: readOnly,\n        },\n      });\n    },\n    [changeBlockId, changeVarName, allResults, readOnly, userEvents]\n  );\n\n  // When the component is mounted, and the result has not yet been loaded,\n  // we set the result name and value, this only happens once.\n  useEffect(() => {\n    if (allResults.length > 0 && !loaded) {\n      changeResult(element.blockId);\n      setLoaded(true);\n    }\n  }, [changeResult, element.blockId, allResults.length, loaded]);\n\n  if (deleted) return <></>;\n\n  return (\n    <div {...attributes} contentEditable={false} id={element.id}>\n      <DraggableBlock\n        blockKind=\"interactive\"\n        element={element}\n        accept={\n          isHorizontal ? [ELEMENT_VARIABLE_DEF, ELEMENT_DISPLAY] : undefined\n        }\n        getAxis={getAxis}\n        onDrop={onDrop}\n      >\n        <VariableEditor\n          variant=\"display\"\n          onCopy={onCopy}\n          onDelete={onDelete}\n          readOnly={readOnly}\n          element={element}\n        >\n          <DisplayWidget\n            dropdownContent={allResults}\n            openMenu={openMenu && focused && selected}\n            onChangeOpen={setOpenMenu}\n            selectedId={element.blockId}\n            setSelectedId={changeResult}\n            lineResult={res}\n            result={element.varName || 'Name'}\n            readOnly={readOnly}\n          >\n            {children}\n          </DisplayWidget>\n        </VariableEditor>\n      </DraggableBlock>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { CodeError, Spinner } from '../../atoms';\n\nconst importWrapperStyles = css({\n  paddingTop: '20px',\n});\n\ninterface ImportProps {\n  url: string;\n  fetching: boolean;\n  error?: string;\n}\n\nexport const Import: FC<ImportProps> = ({ fetching, error }) => {\n  return (\n    <div contentEditable={false} css={importWrapperStyles}>\n      {fetching && <Spinner />}\n      {error && <CodeError message={error} url=\"/docs\" />}\n    </div>\n  );\n};\n","/* eslint-disable no-loop-func */\nimport { Path } from 'slate';\nimport { nanoid } from 'nanoid';\nimport { format } from 'date-fns';\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_TABLE_VARIABLE_NAME,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  MyEditor,\n  TableCellElement,\n  TableCellType,\n  TableElement,\n  TableRowElement,\n} from '@decipad/editor-types';\nimport { Computer, Result, SerializedType } from '@decipad/computer';\nimport { ImportResult } from '@decipad/import';\nimport { varNamify } from '@decipad/utils';\nimport { insertNodes } from '@decipad/editor-utils';\n\ninterface ImportTableProps {\n  editor: MyEditor;\n  insertPath: Path;\n  result: ImportResult;\n  computer: Computer;\n}\n\nconst valueToString = (result: Result.Result): string => {\n  const { type, value } = result;\n  if (value == null || typeof value === 'symbol') {\n    return '';\n  }\n  if (type.kind === 'string') {\n    return value.toString();\n  }\n  if (type.kind === 'date') {\n    let fmt: string;\n    switch (type.date) {\n      case 'year':\n        fmt = 'yyyy';\n        break;\n      case 'month':\n        fmt = 'yyyy/MM';\n        break;\n      case 'day':\n        fmt = 'yyyy/MM/dd';\n        break;\n      case 'hour':\n        fmt = 'yyyy/MM/dd HH';\n        break;\n      case 'minute':\n        fmt = 'yyyy/MM/dd HH:mm';\n        break;\n      case 'second':\n      case 'millisecond':\n        fmt = 'yyyy/MM/dd HH:mm:ss';\n    }\n    const tof = typeof value;\n    if (tof !== 'bigint') {\n      return '';\n    }\n    const date = new Date(Number(value));\n    return format(date, fmt);\n  }\n\n  return value.toString();\n};\n\nconst cellType = (type: SerializedType): TableCellType => {\n  switch (type.kind) {\n    case 'anything':\n    case 'type-error':\n      return { kind: 'string' };\n    case 'boolean':\n    case 'date':\n    case 'number':\n    case 'string':\n      return type;\n    default:\n      throw new Error(`Don't know how to convert cell of type ${type.kind}`);\n  }\n};\n\nconst dataRows = (table: Result.Result<'table'>): TableRowElement[] => {\n  let it = -1;\n  const rows: TableRowElement[] = [];\n  const { columnTypes } = table.type;\n  let hasMoreData = true;\n  while (hasMoreData) {\n    it += 1;\n    const cells: Array<TableCellElement> = table.value.map((col, colIndex) => {\n      if (col.length < it) {\n        hasMoreData = false;\n      }\n      const text = valueToString({\n        type: columnTypes[colIndex],\n        value: col[it],\n      });\n      return {\n        type: ELEMENT_TD,\n        id: nanoid(),\n        children: [\n          {\n            text,\n          },\n        ],\n      };\n    });\n    if (hasMoreData) {\n      rows.push({\n        type: ELEMENT_TR,\n        id: nanoid(),\n        children: cells,\n      });\n    }\n  }\n\n  return rows;\n};\n\nconst tableElement = (\n  computer: Computer,\n  table: Result.Result<'table'>,\n  meta?: ImportResult['meta']\n): TableElement => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_TABLE,\n    children: [\n      {\n        type: ELEMENT_TABLE_CAPTION,\n        id: nanoid(),\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TABLE_VARIABLE_NAME,\n            children: [\n              {\n                text: meta?.title\n                  ? varNamify(meta.title)\n                  : computer.getAvailableIdentifier('ImportedTable', 1),\n              },\n            ],\n          },\n        ],\n      },\n      {\n        type: ELEMENT_TR,\n        id: nanoid(),\n        children: table.type.columnNames.map((columnName, columnIndex) => ({\n          type: ELEMENT_TH,\n          id: nanoid(),\n          cellType: cellType(table.type.columnTypes[columnIndex]),\n          children: [\n            {\n              text: columnName,\n            },\n          ],\n        })),\n      },\n      ...dataRows(table),\n    ],\n  };\n};\n\nexport const importTable = ({\n  editor,\n  insertPath,\n  result,\n  computer,\n}: ImportTableProps): void => {\n  const tableResult = result.result;\n  if (tableResult.type.kind === 'table') {\n    const t = tableElement(\n      computer,\n      tableResult as Result.Result<'table'>,\n      result.meta\n    );\n    insertNodes(editor, t, {\n      at: insertPath,\n    });\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { removeNodes, withoutNormalizing } from '@udecode/plate';\nimport {\n  ELEMENT_IMPORT,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  requirePathBelowBlock,\n  useNodePath,\n} from '@decipad/editor-utils';\nimport { Import as UIImport } from '@decipad/ui';\nimport { ImportResult, tryImport } from '@decipad/import';\nimport { useComputer } from '@decipad/react-contexts';\nimport { formatError } from '@decipad/format';\nimport { DraggableBlock } from '../block-management';\nimport { importTable } from './importTable';\n\nconst MAX_IMPORT_CELL_COUNT = 300;\n\nexport const Import: PlateComponent = ({ attributes, element }) => {\n  assertElementType(element, ELEMENT_IMPORT);\n\n  const editor = useTEditorRef();\n  const computer = useComputer();\n\n  const [fetched, setFetched] = useState(false);\n  const [fetching, setFetching] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const [result, setResult] = useState<ImportResult | undefined>();\n  const path = useNodePath(element);\n\n  useEffect(() => {\n    (async () => {\n      if (!fetched && !fetching) {\n        setFetching(true);\n        try {\n          const imported = await tryImport(\n            computer,\n            new URL(element.url),\n            element.source,\n            {\n              maxCellCount: MAX_IMPORT_CELL_COUNT,\n            }\n          );\n          if (imported.length > 0) {\n            setError(undefined);\n            setResult(imported[0]);\n          } else {\n            setError(`Could not load from ${element.url}`);\n          }\n          const firstImported = imported[0];\n          setResult(firstImported);\n        } catch (err) {\n          console.error('Error caught while importing', err);\n          setError((err as Error).message);\n        } finally {\n          setFetched(true);\n          setFetching(false);\n        }\n      }\n    })();\n  }, [computer, element.source, element.url, fetched, fetching]);\n\n  useEffect(() => {\n    if (result) {\n      const computerResult = result.result;\n      if (computerResult?.type.kind === 'type-error') {\n        setError(formatError('en-US', computerResult.type.errorCause));\n      } else if (computerResult?.type.kind !== 'table') {\n        setError('Expected result to be a table');\n        return;\n      }\n      if (path && computerResult && computerResult.type.kind === 'table') {\n        try {\n          const insertPath = requirePathBelowBlock(editor, path);\n          withoutNormalizing(editor, () => {\n            importTable({\n              editor,\n              computer,\n              insertPath,\n              result,\n            });\n            removeNodes(editor, { at: path });\n          });\n        } catch (err) {\n          console.error(err);\n          setError((err as Error).message);\n        }\n      }\n    }\n  }, [computer, editor, element, path, result]);\n\n  return (\n    <DraggableBlock blockKind=\"paragraph\" element={element} {...attributes}>\n      <UIImport url={element.url} fetching={fetching} error={error} />\n    </DraggableBlock>\n  );\n};\n","import { css } from '@emotion/react';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { FC, ReactNode, useCallback, useRef } from 'react';\nimport { noop } from '@decipad/utils';\nimport {\n  cssVar,\n  p12Regular,\n  p14Medium,\n  p8Medium,\n  setCssVar,\n} from '../../primitives';\n\nconst styles = css({\n  display: 'grid',\n  gridTemplateColumns: 'auto 1fr',\n  alignItems: 'center',\n  columnGap: '12px',\n\n  clipPath: 'inset(-8px -8px -8px -8px round 8px)',\n  ':hover, &[data-focused=\"true\"]': {\n    backgroundColor: cssVar('highlightColor'),\n    boxShadow: `0px 0px 0px 8px ${cssVar('highlightColor')}`,\n  },\n});\n\nconst iconStyles = css({\n  width: '40px',\n  height: '40px',\n\n  display: 'grid',\n\n  backgroundColor: cssVar('iconBackgroundColor'),\n  borderRadius: '6px',\n});\n\nconst textStyles = css({\n  display: 'grid',\n  textAlign: 'start',\n  rowGap: '6px',\n});\n\nconst soonStyles = css(p8Medium, {\n  padding: '2px 4px',\n  borderRadius: '3px',\n  backgroundColor: cssVar('strongHighlightColor'),\n  height: '14px',\n});\n\nconst inlineStyles = css({\n  display: 'flex',\n  gap: '8px',\n});\n\nconst titleStyles = css(\n  p14Medium,\n  setCssVar('currentTextColor', 'strongTextColor')\n);\nconst descriptionStyles = css(p12Regular);\n\nconst disabledStyles = css(\n  setCssVar('currentTextColor', cssVar('weakerTextColor'))\n);\nconst enabledStyles = css(\n  setCssVar('currentTextColor', cssVar('weakTextColor'))\n);\nconst blackFontStyles = css(\n  setCssVar('currentTextColor', cssVar('strongTextColor'))\n);\n\ninterface InlineMenuItemProps {\n  readonly icon: ReactNode;\n  readonly title: string;\n  readonly description: string;\n  readonly enabled: boolean;\n  readonly hidden?: boolean;\n  /**\n   * Unfortunately, we canont use real browser focus for this menu since we need the editor to stay focused.\n   * Even a \"switching focus back and forth on key presses\" does not work well enough because Slate tends to lose selection state on blur.\n   */\n  readonly focused?: boolean;\n  readonly onExecute?: () => void;\n  readonly 'data-testid'?: string;\n}\nexport const InlineMenuItem = ({\n  icon,\n  title,\n  description,\n  enabled,\n  focused,\n  onExecute = noop,\n  'data-testid': testId,\n}: InlineMenuItemProps): ReturnType<FC> => {\n  const itemRef = useRef<HTMLButtonElement>(null);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (focused && event.key === 'Enter' && !event.shiftKey) {\n        enabled && onExecute();\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    },\n    [onExecute, focused, enabled]\n  );\n  useWindowListener('keydown', onKeyDown, true);\n\n  if (focused) {\n    itemRef.current?.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  return (\n    <button\n      role=\"menuitem\"\n      data-testid={testId}\n      css={styles}\n      onMouseDown={(event) => {\n        enabled && onExecute();\n        event.stopPropagation();\n        event.preventDefault();\n      }}\n      data-focused={focused}\n      ref={itemRef}\n    >\n      <span css={[iconStyles, !enabled && css({ opacity: '0.5' })]}>\n        {icon}\n      </span>\n      <div css={textStyles}>\n        <div css={inlineStyles}>\n          <strong\n            css={[titleStyles, enabled ? blackFontStyles : disabledStyles]}\n          >\n            {title}\n          </strong>\n          {!enabled && <span css={soonStyles}>SOON</span>}\n        </div>\n        <span\n          css={[descriptionStyles, enabled ? enabledStyles : disabledStyles]}\n        >\n          {description}\n        </span>\n      </div>\n    </button>\n  );\n};\n","import { Children, FC, ReactNode } from 'react';\nimport { isElement } from 'react-is';\nimport { css } from '@emotion/react';\nimport { InlineMenuItem } from '../../atoms';\nimport { cssVar, p13Medium, setCssVar } from '../../primitives';\n\nconst titleStyles = css(\n  p13Medium,\n  setCssVar('currentTextColor', cssVar('weakTextColor')),\n  { padding: '4px 2px' }\n);\n\nconst itemsStyles = css({\n  padding: '8px 4px',\n  display: 'grid',\n  rowGap: '16px',\n});\n\ninterface InlineMenuGroupProps {\n  readonly title?: string;\n  readonly children?: ReactNode;\n}\nexport const InlineMenuGroup = ({\n  title,\n  children,\n}: InlineMenuGroupProps): ReturnType<FC> => {\n  return (\n    <div role=\"group\">\n      {title && <div css={titleStyles}>{title}</div>}\n      <div css={itemsStyles}>\n        {Children.map(children, (child) => {\n          if (child == null) {\n            return null;\n          }\n          if (isElement(child) && child.type === InlineMenuItem) {\n            return child;\n          }\n          console.error(\n            'Received child that is not a slash commands menu item',\n            child\n          );\n          throw new Error(\n            'Expected all children to be slash commands menu items'\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { useWindowListener } from '@decipad/react-utils';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { ComponentProps, FC, useCallback, useEffect, useState } from 'react';\nimport { InlineMenuItem } from '../../atoms';\nimport { InlineMenuGroup } from '../../molecules';\nimport {\n  cssVar,\n  offBlack,\n  p14Regular,\n  setCssVar,\n  transparency,\n} from '../../primitives';\n\nconst styles = css({\n  maxWidth: '80vw',\n  maxHeight: '40vh',\n  overflowX: 'hidden',\n  overflowY: 'scroll',\n  display: 'grid',\n  gridTemplateColumns: 'fit-content(75vw)',\n  padding: '12px',\n\n  backgroundColor: cssVar('backgroundColor'),\n  border: `1px solid ${cssVar('borderColor')}`,\n  borderRadius: '8px',\n  boxShadow: `0px 2px 24px -4px ${transparency(offBlack, 0.08).rgba}`,\n\n  ':empty::before': {\n    ...p14Regular,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    content: '\"No matching items found\"',\n  },\n});\n\ntype InlineMenuCommand = string;\n\ntype MenuCommandGroup = Omit<\n  ComponentProps<typeof InlineMenuGroup>,\n  'children'\n> & {\n  readonly items: ReadonlyArray<MenuCommandItem>;\n};\ntype MenuCommandItem = Omit<\n  ComponentProps<typeof InlineMenuItem>,\n  'focused' | 'onExecute'\n> & {\n  readonly command: InlineMenuCommand;\n  readonly extraSearchTerms: ReadonlyArray<string>;\n};\n\ninterface InlineMenuProps {\n  readonly onExecute?: (command: InlineMenuCommand) => void;\n  readonly groups: Array<MenuCommandGroup>;\n  readonly search?: string;\n}\nexport const InlineMenu: FC<InlineMenuProps> = ({\n  groups,\n  onExecute = noop,\n  search = '',\n}) => {\n  const groupsWithItemsFiltered = groups.map(({ items, ...group }) => {\n    const groupMatchesSearch = group.title\n      ?.toLowerCase()\n      .includes(search.toLowerCase());\n    const matchingItems = groupMatchesSearch\n      ? items\n      : items.filter(({ command, title, description, extraSearchTerms }) =>\n          [command, title, description, ...extraSearchTerms].some((term) =>\n            term.toLowerCase().includes(search.toLowerCase())\n          )\n        );\n    return { ...group, matchingItems };\n  });\n  const matchingCommands = groupsWithItemsFiltered\n    .flatMap(({ matchingItems }) => matchingItems)\n    .map(({ command }) => command);\n\n  // SlashCommandsMenuItems do not use real browser focus, see their docs\n  const [focusedCommand, setFocusedCommand] = useState<InlineMenuCommand>();\n\n  const firstMatch = matchingCommands[0];\n  useEffect(() => {\n    setFocusedCommand(firstMatch);\n  }, [firstMatch]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (true) {\n        case event.key === 'ArrowDown' && !event.shiftKey:\n        case event.key === 'Tab' && !event.shiftKey:\n          setFocusedCommand(\n            matchingCommands[\n              (focusedCommand ? matchingCommands.indexOf(focusedCommand) : -1) +\n                1\n            ] ?? matchingCommands[0]\n          );\n          event.stopPropagation();\n          event.preventDefault();\n          break;\n        case event.key === 'ArrowUp' && !event.shiftKey:\n        case event.key === 'Tab' && event.shiftKey:\n          setFocusedCommand(\n            matchingCommands[\n              (focusedCommand\n                ? matchingCommands.indexOf(focusedCommand)\n                : matchingCommands.length) - 1\n            ] ?? matchingCommands.slice(-1)[0]\n          );\n          event.stopPropagation();\n          event.preventDefault();\n          break;\n        case event.key === 'Enter' && focusedCommand === undefined:\n          setFocusedCommand(matchingCommands[0]);\n          event.stopPropagation();\n          event.preventDefault();\n          break;\n      }\n    },\n    [focusedCommand, matchingCommands]\n  );\n  useWindowListener('keydown', onKeyDown, true);\n  return (\n    <div role=\"menu\" aria-orientation=\"vertical\" css={styles}>\n      {groupsWithItemsFiltered.map(({ matchingItems, ...group }, i) =>\n        matchingItems.length ? (\n          <InlineMenuGroup key={i} {...group}>\n            {matchingItems.map(({ command, extraSearchTerms, ...item }) => (\n              <InlineMenuItem\n                {...item}\n                data-testid={`menu-item-${command}`}\n                key={command}\n                focused={focusedCommand === command}\n                onExecute={() => onExecute(command)}\n              />\n            ))}\n          </InlineMenuGroup>\n        ) : null\n      )}\n    </div>\n  );\n};\n","import { isFlagEnabled } from '@decipad/feature-flags';\nimport { ComponentProps, FC, useMemo } from 'react';\nimport {\n  Blockquote,\n  Calculations,\n  Callout,\n  Chart,\n  CodeBlock,\n  DataView,\n  DatePicker,\n  Divider,\n  Dropdown,\n  FormulaSlash,\n  Heading1,\n  Heading2,\n  Input,\n  Result,\n  Sketch,\n  Slider,\n  TableSlash,\n  Toggle,\n} from '../../icons';\nimport { InlineMenu } from '../../organisms';\n\nconst dataItems = () => [\n  {\n    command: 'structured-code-line',\n    title: 'Formula',\n    description: 'Establish relationships between numbers using basic formulas',\n    icon: <FormulaSlash />,\n    enabled: isFlagEnabled('CODE_LINE_NAME_SEPARATED'),\n    extraSearchTerms: ['formula', 'calculation'],\n  },\n  {\n    command: 'calculation-block',\n    title: 'Advanced formula',\n    description: \"Derive insights using Decipad's full language capabilities\",\n    icon: <Calculations />,\n    enabled: true,\n    extraSearchTerms: ['decipad', 'calculation', 'language', 'formula'],\n  },\n  {\n    command: 'table',\n    title: 'Table',\n    description:\n      'Organize data in a table. Input data into models using table format',\n    icon: <TableSlash />,\n    enabled: true,\n    extraSearchTerms: [],\n  },\n  {\n    command: 'data-view',\n    title: 'Data view',\n    description: 'Pivot table for data analysis, filtering, and grouping',\n    icon: <DataView />,\n    enabled: true,\n    extraSearchTerms: [\n      'group',\n      'sort',\n      'analyze',\n      'pivot',\n      'data',\n      'view',\n      'filter',\n      'analytic',\n    ],\n  },\n  {\n    command: 'plot',\n    title: 'Chart',\n    description: 'Visualize data with charts, plot data using charts',\n    icon: <Chart />,\n    enabled: true,\n    extraSearchTerms: ['chart', 'visualisation', 'plot'],\n  },\n];\n\nconst groups = () => [\n  {\n    title: 'Numbers',\n    items: dataItems(),\n  },\n  {\n    title: 'Widgets',\n    items: [\n      {\n        command: 'input',\n        title: 'Input',\n        description: 'Enter a value that others can interact with',\n        icon: <Input />,\n        enabled: true,\n        extraSearchTerms: ['input', 'number', 'units', 'string'],\n      },\n      {\n        command: 'toggle',\n        title: 'Toggle',\n        description: 'Choose between yes/no options using a switch',\n        icon: <Toggle />,\n        enabled: true,\n        extraSearchTerms: ['switch', 'toggle', 'boolean', 'yes', 'no'],\n      },\n      {\n        command: 'datepicker',\n        title: 'Date',\n        description: 'Pick a date from a calendar',\n        icon: <DatePicker />,\n        enabled: true,\n        extraSearchTerms: ['input', 'date', 'calendar', 'pick'],\n      },\n      {\n        command: 'slider',\n        title: 'Slider',\n        description: 'Slide to adjust a number and share it with others',\n        icon: <Slider />,\n        enabled: true,\n        extraSearchTerms: ['input', 'number', 'slider', 'adjust'],\n      },\n      {\n        command: 'display',\n        title: 'Result',\n        description: 'Highlight important results in a story',\n        icon: <Result />,\n        enabled: true,\n        extraSearchTerms: ['display', 'result', 'show'],\n      },\n      {\n        command: 'dropdown',\n        title: 'Dropdown',\n        description: 'Choose from a list of specified options',\n        icon: <Dropdown />,\n        enabled: true,\n        extraSearchTerms: ['dropdown', 'list', 'select', 'options'],\n      },\n      {\n        command: 'eval',\n        title: 'Javascript',\n        icon: <CodeBlock />,\n        description: 'Allow users to run JavaScript code',\n        enabled: isFlagEnabled('UNSAFE_JS_EVAL'),\n        extraSearchTerms: ['eval', 'javascript', 'js', 'code', 'python'],\n      },\n    ],\n  },\n  {\n    title: 'Writing',\n    items: [\n      {\n        command: 'heading1',\n        title: 'Heading',\n        description: 'Main text heading',\n        icon: <Heading1 />,\n        enabled: true,\n        extraSearchTerms: ['h1'],\n      },\n      {\n        command: 'heading2',\n        title: 'Sub-heading',\n        description: 'Secondary text heading',\n        icon: <Heading2 />,\n        enabled: true,\n        extraSearchTerms: ['h2'],\n      },\n      {\n        command: 'callout',\n        title: 'Callout',\n        description: 'Grabs the readers attention',\n        icon: <Callout />,\n        enabled: true,\n        extraSearchTerms: ['highlight', 'pop', 'hero'],\n      },\n      {\n        command: 'blockquote',\n        title: 'Quote',\n        description: 'Quote something, or someone.',\n        icon: <Blockquote />,\n        enabled: true,\n        extraSearchTerms: ['>', 'quote', 'blockquote'],\n      },\n      {\n        command: 'divider',\n        title: 'Divider',\n        description: 'A separator between your text',\n        icon: <Divider />,\n        enabled: true,\n        extraSearchTerms: ['hr', 'divider', '-'],\n      },\n      {\n        command: 'sketch',\n        title: 'Sketch',\n        icon: <Sketch />,\n        description: 'Express yourself with a drawing',\n        enabled: isFlagEnabled('SKETCH'),\n        extraSearchTerms: ['draw', 'paint'],\n      },\n    ],\n  },\n];\n\ntype SlashCommandsMenuProps = Pick<\n  ComponentProps<typeof InlineMenu>,\n  'onExecute' | 'search'\n>;\n\nexport const SlashCommandsMenu: FC<SlashCommandsMenuProps> = (props) => {\n  // It's a function because feature flags can change for each test.\n  const menuGroups = useMemo(() => groups(), []);\n  return <InlineMenu {...props} groups={menuGroups} />;\n};\n","import { ImportElementSource } from '@decipad/editor-types';\nimport pluralize from 'pluralize';\nimport { ComponentProps, FC } from 'react';\nimport {\n  ConnectRanges,\n  ConnectTable,\n  ImportRangeCopies,\n  ImportTable,\n} from '../../icons';\nimport { InlineMenu } from '../../organisms';\n\nconst sourceToName: Record<ImportElementSource, string> = {\n  decipad: 'Decipad notebook',\n  csv: 'CSV',\n  gsheets: 'Google Sheets',\n  json: 'a JSON API',\n  arrow: 'an Arrow file',\n};\n\nconst groups = (\n  source?: ImportElementSource\n): ComponentProps<typeof InlineMenu>['groups'] => {\n  const sourceName = source ? sourceToName[source] : 'unknown source';\n  const ppSource = pluralize.singular(sourceName).toLocaleLowerCase();\n  return [\n    {\n      items: [\n        source === 'gsheets' && {\n          command: 'connect-islands',\n          title: 'Connect to table ranges',\n          description: `Tries to find tables in your google sheets and create a live connection`,\n          icon: <ConnectRanges />,\n          enabled: true,\n          extraSearchTerms: ['connect', 'live'],\n        },\n        {\n          command: 'connect-all',\n          title: `Connect to ${ppSource}`,\n          description: `Connect to live data from this ${ppSource}`,\n          icon: <ConnectTable />,\n          enabled: true,\n          extraSearchTerms: ['connect', 'live'],\n        },\n        source === 'gsheets' && {\n          command: 'import-islands',\n          title: 'Import table ranges',\n          description: `Tries to find tables in your google sheets and import them`,\n          icon: <ImportRangeCopies />,\n          enabled: true,\n          extraSearchTerms: ['import', 'google', 'sheets'],\n        },\n        {\n          command: 'import-all',\n          title: `Import from ${ppSource}`,\n          description: `Import all data in this ${ppSource}`,\n          icon: <ImportTable />,\n          enabled: true,\n          extraSearchTerms: ['import', 'google', 'sheets'],\n        },\n      ].filter(Boolean),\n    },\n  ] as ComponentProps<typeof InlineMenu>['groups'];\n};\n\ntype ImportFromLinkMenuProps = Pick<\n  ComponentProps<typeof InlineMenu>,\n  'onExecute' | 'search'\n> & {\n  source?: ImportElementSource;\n};\n\nexport const ImportFromLinkMenu: FC<ImportFromLinkMenuProps> = ({\n  source,\n  ...props\n}) => {\n  return <InlineMenu {...props} groups={groups(source)} />;\n};\n","import { ELEMENT_FREEDRAW, DrawElementDescendant } from '@decipad/editor-types';\nimport { nanoid } from 'nanoid';\n\nexport const drawDummyElement = (): DrawElementDescendant => ({\n  type: ELEMENT_FREEDRAW,\n  id: nanoid(),\n  points: [],\n  pressures: [],\n  __dummy: true,\n  children: [{ text: '' }],\n  x: 364.55470275878906,\n  y: 92.64584350585938,\n  width: 118.0859375,\n  height: 116.72393798828125,\n  angle: 0,\n  strokeColor: '#000000',\n  backgroundColor: 'transparent',\n  fillStyle: 'hachure',\n  strokeWidth: 1,\n  strokeStyle: 'solid',\n  roughness: 1,\n  opacity: 100,\n  groupIds: [],\n});\n","import { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport { MyEditor, DrawElement, ELEMENT_DRAW } from '@decipad/editor-types';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport { setSelection, withoutNormalizing } from '@udecode/plate';\nimport { drawDummyElement } from '../Media/drawDummyElement';\n\nconst getDrawElement = (): DrawElement => ({\n  id: nanoid(),\n  type: ELEMENT_DRAW,\n  children: [drawDummyElement()],\n});\n\nexport const insertDrawBelow = (editor: MyEditor, path: Path): void => {\n  withoutNormalizing(editor, () => {\n    // we need to focus on a path other than the current one because\n    // otherwise Slate will try to find the selection path inside a\n    // void element (the new DrawElement instance) and it will fail hard.\n    const newFocusPath = Path.next(path);\n    setSelection(editor, {\n      focus: { path: newFocusPath, offset: 0 },\n      anchor: {\n        path: newFocusPath,\n        offset: 0,\n      },\n    });\n    insertNodes<DrawElement>(editor, getDrawElement(), {\n      at: requirePathBelowBlock(editor, path),\n    });\n  });\n};\n","import { Computer } from '@decipad/computer';\nimport {\n  DisplayElement,\n  DropdownElement,\n  ElementVariants,\n  ELEMENT_CAPTION,\n  ELEMENT_DISPLAY,\n  ELEMENT_DROPDOWN,\n  ELEMENT_EXPRESSION,\n  ELEMENT_SLIDER,\n  ELEMENT_VARIABLE_DEF,\n  MyEditor,\n  VariableDefinitionElement,\n  VariableDropdownElement,\n  VariableSliderElement,\n} from '@decipad/editor-types';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport type { SerializedTypeKind } from '@decipad/computer';\nimport { getEndPoint, getStartPoint, setSelection } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\n\nconst DEFAULT_INPUT_VALUE = '100$';\nconst getInitialInputElement = ({\n  caption = '',\n  value = '',\n  variant = 'expression',\n  kind = 'number',\n}: {\n  caption: string;\n  value: string;\n  variant: ElementVariants;\n  kind: SerializedTypeKind;\n}) => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_VARIABLE_DEF,\n    variant,\n    ...(kind && {\n      coerceToType: {\n        kind,\n        date: 'day',\n      },\n    }),\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_CAPTION,\n        children: [{ text: caption }],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_EXPRESSION,\n        children: [{ text: value }],\n      },\n    ],\n  } as VariableDefinitionElement;\n};\n\nconst getVariantAndHolder = (\n  kind: SerializedTypeKind | undefined\n): [ElementVariants, string] => {\n  if (kind === 'boolean') return ['toggle', 'false'];\n  if (kind === 'date') return ['date', '2022-11-03'];\n  return ['expression', DEFAULT_INPUT_VALUE];\n};\n\nexport const insertInputBelow = (\n  editor: MyEditor,\n  path: Path,\n  kind: SerializedTypeKind,\n  getAvailableIdentifier: Computer['getAvailableIdentifier']\n): void => {\n  const [variant, placeholder] = getVariantAndHolder(kind);\n  const name = getAvailableIdentifier('Input', 1);\n\n  const input = getInitialInputElement({\n    kind,\n    caption: name,\n    value: placeholder,\n    variant,\n  });\n  const insertPath = requirePathBelowBlock(editor, path);\n\n  insertNodes<VariableDefinitionElement>(editor, input, {\n    at: insertPath,\n  });\n\n  const valuePath = [...insertPath, 1];\n  const valueEnd = getEndPoint(editor, valuePath);\n  const valueStart = getStartPoint(editor, valuePath);\n  setSelection(editor, { anchor: valueStart, focus: valueEnd });\n};\n\nconst getSliderInputElement = () => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_VARIABLE_DEF,\n    variant: 'slider',\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_CAPTION,\n        children: [{ text: '' }],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_EXPRESSION,\n        children: [{ text: '' }],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_SLIDER,\n        max: '10',\n        min: '0',\n        step: '1',\n        value: '0',\n        children: [{ text: '' }],\n      },\n    ],\n  };\n};\n\nexport const insertSliderInputBelow = (\n  editor: MyEditor,\n  path: Path,\n  getAvailableIdentifier: Computer['getAvailableIdentifier']\n): void => {\n  const input = getSliderInputElement();\n  input.children[0].children[0].text = getAvailableIdentifier('Slider', 1);\n  insertNodes<VariableSliderElement>(\n    editor,\n    input as unknown as VariableSliderElement,\n    {\n      at: requirePathBelowBlock(editor, path),\n    }\n  );\n};\n\nconst getDisplayElement = () => {\n  return {\n    id: nanoid(),\n    blockId: '',\n    type: ELEMENT_DISPLAY,\n    children: [{ text: '' }],\n  } as DisplayElement;\n};\n\nexport const insertDisplayBelow = (editor: MyEditor, path: Path): void => {\n  const display = getDisplayElement();\n  insertNodes(editor, display, {\n    at: requirePathBelowBlock(editor, path),\n  });\n};\n\nconst getDropdownElement = () =>\n  ({\n    id: nanoid(),\n    type: ELEMENT_VARIABLE_DEF,\n    variant: 'dropdown',\n    coerceToType: {\n      kind: 'string',\n    },\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_CAPTION,\n        children: [{ text: 'Dropdown' }],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_DROPDOWN,\n        options: [],\n        children: [{ text: 'Select' }],\n      } as DropdownElement,\n    ],\n  } as VariableDropdownElement);\n\nexport const insertDropdownBelow = (\n  editor: MyEditor,\n  path: Path,\n  getAvailableIdentifier: Computer['getAvailableIdentifier']\n): void => {\n  const dropdown = getDropdownElement();\n  dropdown.children[0].children[0].text = getAvailableIdentifier('Dropdown', 1);\n  insertNodes(editor, dropdown, {\n    at: requirePathBelowBlock(editor, path),\n  });\n};\n","import { ELEMENT_PLOT, MyEditor, PlotElement } from '@decipad/editor-types';\nimport { Path } from 'slate';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport { nanoid } from 'nanoid';\n\nconst getPlotElement = () =>\n  ({\n    id: nanoid(),\n    type: ELEMENT_PLOT,\n    title: 'Chart',\n    sourceVarName: '',\n    xColumnName: '',\n    yColumnName: '',\n    markType: 'bar',\n    thetaColumnName: '',\n    sizeColumnName: '',\n    colorColumnName: '',\n    children: [{ text: '' }],\n  } as PlotElement);\n\nexport const insertPlotBelow = (editor: MyEditor, path: Path): void => {\n  insertNodes(editor, getPlotElement(), {\n    at: requirePathBelowBlock(editor, path),\n  });\n};\n","import {\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_TABLE_VARIABLE_NAME,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  MyEditor,\n  TableElement,\n} from '@decipad/editor-types';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport type { GetAvailableIdentifier } from './slashCommands';\n\nconst initialTableElement = () => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_TABLE,\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_TABLE_CAPTION,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TABLE_VARIABLE_NAME,\n            children: [{ text: '' }],\n          },\n        ],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_TR,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TH,\n            cellType: { kind: 'anything' },\n            children: [{ text: 'Property1' }],\n          },\n          {\n            id: nanoid(),\n            type: ELEMENT_TH,\n            cellType: { kind: 'anything' },\n            children: [{ text: 'Property2' }],\n          },\n          {\n            id: nanoid(),\n            type: ELEMENT_TH,\n            cellType: { kind: 'anything' },\n            children: [{ text: 'Property3' }],\n          },\n        ],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_TR,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TD,\n            children: [{ text: '' }],\n          },\n        ],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_TR,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TD,\n            children: [{ text: '' }],\n          },\n        ],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_TR,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TD,\n            children: [{ text: '' }],\n          },\n        ],\n      },\n    ],\n  } as TableElement;\n};\n\nexport const insertTableBelow = (\n  editor: MyEditor,\n  path: Path,\n  getAvailableIdentifier: GetAvailableIdentifier\n): void => {\n  const table = initialTableElement();\n  table.children[0].children[0].children[0].text = getAvailableIdentifier(\n    'Table',\n    1\n  );\n  insertNodes(editor, table, {\n    at: requirePathBelowBlock(editor, path),\n  });\n};\n","import { ParagraphElement, useTEditorRef } from '@decipad/editor-types';\nimport { useNodePath, useSelection } from '@decipad/editor-utils';\nimport { useWindowListener } from '@decipad/react-utils';\nimport {\n  getEndPoint,\n  getNodeString,\n  isCollapsed,\n  setSelection,\n} from '@udecode/plate';\nimport { dequal } from 'dequal';\nimport { RefObject, useCallback, useEffect, useRef, useState } from 'react';\nimport { BaseRange, Range, Location, Path } from 'slate';\nimport { useFocused, useSelected } from 'slate-react';\n\ninterface UseSlashCommandMenuResult {\n  showSlashCommands: boolean;\n  menuRef: RefObject<HTMLDivElement>;\n  elementPath?: Path;\n  search?: string;\n  deleteFragment?: Location;\n}\n\nexport const useSlashMenu = (\n  element: ParagraphElement\n): UseSlashCommandMenuResult => {\n  const selection = useSelection();\n  const selected = useSelected();\n  const focused = useFocused();\n  const text = getNodeString(element);\n  const elementPath = useNodePath(element);\n\n  const [slashMenuSuppressed, setSlashMenuSuppressed] = useState(true);\n  // Show when changing text\n  useEffect(() => {\n    if (selected) {\n      setSlashMenuSuppressed(false);\n    }\n    // intentionally only run when text changes while selected,\n    // but not when only selection changes from false to true\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n  // Suppress when selection moves out\n  useEffect(() => {\n    if (!selected) {\n      setSlashMenuSuppressed(true);\n    }\n  }, [selected]);\n\n  const { search, isInline, deleteFragment } = findSlashCommand(\n    text,\n    selection\n  );\n  const showSlashCommands =\n    selected && focused && !slashMenuSuppressed && search != null;\n\n  const menuRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    menuRef.current?.scrollIntoView({ block: 'nearest' });\n  }, [showSlashCommands, search]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (showSlashCommands && !event.shiftKey) {\n        switch (event.key) {\n          case 'Escape':\n            setSlashMenuSuppressed(true);\n            event.stopPropagation();\n            event.preventDefault();\n            break;\n        }\n      }\n    },\n    [showSlashCommands]\n  );\n  useWindowListener('keydown', onKeyDown, true);\n\n  const editor = useTEditorRef();\n  const selectionFocus = selection?.focus;\n  const shouldJumpToEnd =\n    !isInline && showSlashCommands && elementPath && isCollapsed(selection);\n\n  useEffect(() => {\n    if (shouldJumpToEnd) {\n      const endPoint = getEndPoint(editor, elementPath);\n\n      if (!dequal(selectionFocus, endPoint)) {\n        setSelection(editor, {\n          focus: endPoint,\n          anchor: endPoint,\n        });\n      }\n    }\n  }, [editor, elementPath, selectionFocus, shouldJumpToEnd]);\n\n  return {\n    showSlashCommands,\n    menuRef,\n    elementPath,\n    deleteFragment,\n    search,\n  };\n};\n\nconst findSlashCommand = (text: string, selection: BaseRange | null) => {\n  const inline = findInlineSlashCommand(text, selection);\n  const standalone = findStandaloneSlashCommand(text);\n\n  return {\n    isInline: inline != null,\n    search: inline?.command ?? standalone,\n    deleteFragment: inline?.selection,\n  };\n};\n\nconst findStandaloneSlashCommand = (text: string): string | undefined =>\n  /^\\/([a-z ]*)$/i.exec(text)?.[1];\n\nconst findInlineSlashCommand = (\n  text: string,\n  selection: BaseRange | null\n): { command: string; selection: Range } | undefined => {\n  if (!selection) return;\n  if (!isCollapsed(selection)) return;\n  if (text.startsWith('/')) return;\n\n  const { offset } = selection.anchor;\n  const leftSegment = text.slice(0, offset);\n  const slashCommand = leftSegment.split('/').slice(1).at(-1);\n\n  if (slashCommand == null) return;\n  if (slashCommand.match(/\\s/)) return;\n\n  const cmdSelection: Range = {\n    anchor: {\n      offset: offset - slashCommand.length - 1,\n      path: selection.anchor.path,\n    },\n    focus: { offset, path: selection.anchor.path },\n  };\n\n  return { command: slashCommand, selection: cmdSelection };\n};\n","import { fetch } from '@decipad/fetch';\n\ninterface Notebook {\n  isPublic?: boolean;\n}\n\ninterface NotebookProps {\n  hasAccess: boolean;\n  exists: boolean;\n  isPublic?: boolean;\n}\n\nexport const getNotebook = async (\n  notebookId: string\n): Promise<NotebookProps> => {\n  const resp = await fetch(`/api/pads/${encodeURIComponent(notebookId)}`);\n  if (resp.status === 403) {\n    return {\n      hasAccess: false,\n      exists: true,\n      isPublic: false,\n    };\n  }\n  if (resp.status === 404) {\n    return {\n      hasAccess: false,\n      exists: false,\n      isPublic: false,\n    };\n  }\n  const notebook = (await resp.json()) as Notebook;\n  if (!notebook) {\n    return { exists: false, hasAccess: false, isPublic: false };\n  }\n  return { exists: true, hasAccess: true, isPublic: !!notebook.isPublic };\n};\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_LIVE_CONNECTION,\n  ELEMENT_LIVE_CONNECTION_VARIABLE_NAME,\n  ELEMENT_PARAGRAPH,\n  ImportElementSource,\n  LiveConnectionElement,\n  MyEditor,\n  ParagraphElement,\n} from '@decipad/editor-types';\nimport {\n  getNotebook,\n  getURLComponents,\n  insertNodes,\n  requirePathBelowBlock,\n} from '@decipad/editor-utils';\nimport { tryImport } from '@decipad/import';\nimport { getDefined, noop, timeout } from '@decipad/utils';\nimport { isCollapsed, withoutNormalizing } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\n\nconst nextBlock = (path: Path): Path => {\n  const [block, ...rest] = path;\n  return [block + 1, ...rest];\n};\n\nexport interface InsertLiveConnectionProps {\n  computer: Computer;\n  editor: MyEditor;\n  source?: ImportElementSource;\n  url?: string;\n  identifyIslands?: boolean;\n}\n\nconst justInsertLiveData = async ({\n  editor,\n  source,\n  url,\n}: InsertLiveConnectionProps) => {\n  if (source === 'decipad' && url) {\n    const { docId } = getURLComponents(url);\n    const { hasAccess, exists, isPublic } = await getNotebook(docId);\n    const error = !exists\n      ? 'Notebook does not exist'\n      : !hasAccess\n      ? \"You don't have access to this notebook\"\n      : !isPublic\n      ? 'You can only create live connections to public notebooks'\n      : undefined;\n    if (error) {\n      throw new Error(error);\n    }\n  }\n  const selection = getDefined(editor.selection);\n  const liveConnEl: LiveConnectionElement = {\n    id: nanoid(),\n    type: ELEMENT_LIVE_CONNECTION,\n    url: getDefined(url),\n    source,\n    isFirstRowHeaderRow: false,\n    columnTypeCoercions: [],\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_LIVE_CONNECTION_VARIABLE_NAME,\n        children: [{ text: '' }],\n      },\n    ],\n  };\n  insertNodes(editor, liveConnEl, {\n    at: requirePathBelowBlock(editor, selection.anchor.path),\n  });\n};\n\nconst insertLiveConnectionToGsheets = async ({\n  computer,\n  editor,\n  source,\n  url: _url,\n  identifyIslands,\n}: InsertLiveConnectionProps): Promise<void> => {\n  const selection = getDefined(editor.selection);\n\n  let blockPath = [selection.anchor.path[0]];\n\n  const nextPath = () => {\n    blockPath = nextBlock(blockPath);\n    return blockPath;\n  };\n\n  const url = getDefined(_url, 'undefined url');\n\n  const imports = await tryImport(computer, new URL(url), source, {\n    identifyIslands,\n  });\n\n  return Promise.all(\n    imports.map(async (imp) => {\n      const liveConnEl: LiveConnectionElement = {\n        id: nanoid(),\n        type: ELEMENT_LIVE_CONNECTION,\n        url: imp.meta?.sourceUrl?.toString() ?? getDefined(url),\n        source,\n        isFirstRowHeaderRow: false,\n        columnTypeCoercions: [],\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_LIVE_CONNECTION_VARIABLE_NAME,\n            children: [{ text: '' }],\n          },\n        ],\n      };\n      const paragraphEl: ParagraphElement = {\n        id: nanoid(),\n        type: ELEMENT_PARAGRAPH,\n        children: [{ text: 'Add your explanation here', italic: true }],\n      };\n      withoutNormalizing(editor, () => {\n        insertNodes(editor, paragraphEl, {\n          at: nextPath(),\n        });\n        insertNodes(editor, liveConnEl, {\n          at: nextPath(),\n        });\n      });\n\n      await timeout(2000);\n    })\n  ).then(noop);\n};\n\nexport const insertLiveConnection = async (\n  props: InsertLiveConnectionProps\n): Promise<void> => {\n  const { editor, source, url } = props;\n  const { selection } = editor;\n  if (isCollapsed(selection) && selection?.anchor && url) {\n    if (source !== 'gsheets') {\n      return justInsertLiveData(props);\n    }\n    return insertLiveConnectionToGsheets(props);\n  }\n};\n","import { getDefined } from '@decipad/utils';\n\ntype GetURLComponentsResult = {\n  docId: string;\n  blockId: string;\n};\n\nexport const getURLComponents = (source: string): GetURLComponentsResult => {\n  const url = new URL(source);\n  const docIdMatch = getDefined(\n    url.pathname.match(/^\\/n\\/(.*)/),\n    `Could not find notebook id from URL${url}`\n  );\n  const blockId = url.hash.slice(1);\n  let docId = decodeURIComponent(\n    getDefined(docIdMatch[1], `no doc id on URL ${url}`)\n  );\n  if (docId.indexOf(':') >= 0) {\n    docId = docId.slice(docId.indexOf(':') + 1);\n  }\n\n  return { docId, blockId };\n};\n","import {\n  ImportElementSource,\n  MyElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  isInteractionOfType,\n  useComputer,\n  useEditorUserInteractions,\n  useEditorUserInteractionsContext,\n  UserInteraction,\n} from '@decipad/react-contexts';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { useToast } from '@decipad/toast';\nimport {\n  findNode,\n  findNodePath,\n  getNodeString,\n  insertText,\n  isText,\n  removeNodes,\n} from '@udecode/plate';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useObservable } from 'rxjs-hooks';\nimport { useSelected } from 'slate-react';\nimport { insertImport } from './insertImport';\nimport { insertLiveConnection } from './insertLiveConnection';\n\ninterface UseInteractiveMenuResult {\n  showInteractionMenu: boolean;\n  source?: ImportElementSource;\n  onInteractionMenuExecute: (action: string) => void;\n}\n\nexport const useInteractiveMenu = (\n  element: MyElement\n): UseInteractiveMenuResult => {\n  const editor = useTEditorRef();\n  const [showInteractionMenu, setShowInteractionMenu] = useState(false);\n  const interactions = useEditorUserInteractions('pasted-link');\n  const interaction = useObservable(() => interactions);\n  const selected = useSelected();\n  const interactionsSource = useEditorUserInteractionsContext();\n  const [lastInterestingUserInteraction, setLastInterestingUserInteraction] =\n    useState<UserInteraction | undefined>();\n\n  useEffect(() => {\n    if (\n      isInteractionOfType(interaction, 'pasted-link') &&\n      selected &&\n      !showInteractionMenu\n    ) {\n      // set interaction as consumed\n      setLastInterestingUserInteraction(interaction);\n      setShowInteractionMenu(true);\n      interactionsSource.next({ type: 'consumed' });\n    }\n    if (showInteractionMenu && !selected) {\n      setShowInteractionMenu(false);\n    }\n  }, [interaction, interactionsSource, selected, showInteractionMenu]);\n\n  const cleanupAfterCommand = useCallback(\n    (inter: UserInteraction | undefined) => {\n      if (inter && inter.type === 'pasted-link') {\n        const path = findNodePath(editor, element);\n        if (path) {\n          const entry = findNode(editor, {\n            at: path,\n            match: (node) =>\n              isText(node) && getNodeString(node).includes(inter.url),\n          });\n          if (entry) {\n            const [node, nodePath] = entry;\n            const textAfterUrlRemoval = getNodeString(node).replace(\n              inter.url,\n              ''\n            );\n            if (textAfterUrlRemoval) {\n              insertText(editor, textAfterUrlRemoval, { at: nodePath });\n            } else {\n              removeNodes(editor, { at: nodePath });\n            }\n          }\n        }\n      }\n    },\n    [editor, element]\n  );\n\n  const computer = useComputer();\n\n  const toast = useToast();\n\n  const onInteractionMenuExecute = useCallback(\n    async (command: string) => {\n      setShowInteractionMenu(false);\n      switch (command) {\n        case 'import-all':\n        case 'import-islands': {\n          if (\n            isInteractionOfType(lastInterestingUserInteraction, 'pasted-link')\n          ) {\n            await insertImport({\n              computer,\n              editor,\n              source: lastInterestingUserInteraction.source,\n              url: lastInterestingUserInteraction.url,\n              identifyIslands: command === 'import-islands',\n            });\n            setLastInterestingUserInteraction(undefined);\n          }\n          break;\n        }\n        case 'connect-all':\n        case 'connect-islands': {\n          if (\n            isInteractionOfType(lastInterestingUserInteraction, 'pasted-link')\n          ) {\n            try {\n              await insertLiveConnection({\n                computer,\n                editor,\n                source: lastInterestingUserInteraction.source,\n                url: lastInterestingUserInteraction.url,\n                identifyIslands: command === 'connect-islands',\n              });\n            } catch (err) {\n              toast((err as Error).message, 'error');\n            }\n            setLastInterestingUserInteraction(undefined);\n          }\n        }\n      }\n      cleanupAfterCommand(lastInterestingUserInteraction);\n    },\n    [\n      cleanupAfterCommand,\n      computer,\n      editor,\n      lastInterestingUserInteraction,\n      toast,\n    ]\n  );\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (showInteractionMenu && !event.shiftKey) {\n        switch (event.key) {\n          case 'Escape':\n            setShowInteractionMenu(false);\n            event.stopPropagation();\n            event.preventDefault();\n            break;\n        }\n      }\n    },\n    [showInteractionMenu]\n  );\n  useWindowListener('keydown', onKeyDown, true);\n\n  return {\n    showInteractionMenu,\n    onInteractionMenuExecute,\n    source:\n      lastInterestingUserInteraction?.type === 'pasted-link'\n        ? lastInterestingUserInteraction.source\n        : undefined,\n  };\n};\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_IMPORT,\n  ImportElement,\n  ImportElementSource,\n  MyEditor,\n} from '@decipad/editor-types';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport { tryImport } from '@decipad/import';\nimport { isCollapsed, setSelection, withoutNormalizing } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\n\nexport interface InsertImportProps {\n  computer: Computer;\n  editor: MyEditor;\n  source?: ImportElementSource;\n  url?: string;\n  identifyIslands?: boolean;\n}\n\nexport const insertImport = async ({\n  computer,\n  editor,\n  source,\n  url,\n  identifyIslands,\n}: InsertImportProps) => {\n  const { selection } = editor;\n\n  if (isCollapsed(selection) && selection?.anchor && url) {\n    const imports = await tryImport(computer, new URL(url), source, {\n      identifyIslands,\n    });\n    const insertPath = requirePathBelowBlock(editor, selection.anchor.path);\n    const selBefore = selection;\n\n    withoutNormalizing(editor, () => {\n      for (const imp of imports) {\n        const fetchEl: ImportElement = {\n          id: nanoid(),\n          type: ELEMENT_IMPORT,\n          url: imp.meta?.sourceUrl?.toString() ?? url,\n          source,\n          children: [{ text: '' }],\n        };\n\n        insertNodes(editor, fetchEl, {\n          at: insertPath,\n        });\n      }\n      setSelection(editor, selBefore);\n    });\n  }\n};\n","import { useContext } from 'react';\n/* eslint-disable react-hooks/rules-of-hooks */\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { ImportFromLinkMenu, SlashCommandsMenu } from '@decipad/ui';\nimport {\n  ELEMENT_PARAGRAPH,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { Paragraph } from '@decipad/editor-components';\nimport { Computer } from '@decipad/computer';\n\nimport { assertElementType } from '@decipad/editor-utils';\nimport { execute } from '../utils/slashCommands';\nimport { useSlashMenu } from './useSlashMenu';\nimport { useInteractiveMenu } from './useInteractiveMenu';\n\nexport const InteractiveParagraph =\n  (computer: Computer): PlateComponent =>\n  ({ children, ...props }) => {\n    const paragraphElement = props.element;\n    assertElementType(paragraphElement, ELEMENT_PARAGRAPH);\n\n    const editor = useTEditorRef();\n    const clientEvent = useContext(ClientEventsContext);\n\n    // slash commands menu\n    const { showSlashCommands, menuRef, elementPath, deleteFragment, search } =\n      useSlashMenu(paragraphElement);\n\n    // interactions\n    const { showInteractionMenu, onInteractionMenuExecute, source } =\n      useInteractiveMenu(paragraphElement);\n\n    if (showSlashCommands) {\n      return (\n        <Paragraph {...props}>\n          {children}\n          <div\n            ref={menuRef}\n            contentEditable={false}\n            css={{\n              position: 'absolute',\n              zIndex: 2,\n              // To prevent blurring the editor when clicking around in the menu\n              userSelect: 'none',\n            }}\n          >\n            <SlashCommandsMenu\n              onExecute={(command) => {\n                elementPath &&\n                  execute({\n                    editor,\n                    path: elementPath,\n                    deleteFragment,\n                    command,\n                    getAvailableIdentifier:\n                      computer.getAvailableIdentifier.bind(computer),\n                  });\n                clientEvent({\n                  type: 'action',\n                  action: 'slash command',\n                  props: { command },\n                });\n              }}\n              search={search}\n            />\n          </div>\n        </Paragraph>\n      );\n    }\n\n    return (\n      <Paragraph {...props}>\n        <>\n          {children}\n          {showInteractionMenu && (\n            <div\n              ref={menuRef}\n              contentEditable={false}\n              css={{\n                position: 'absolute',\n                zIndex: 2,\n                // To prevent blurring the editor when clicking around in the menu\n                userSelect: 'none',\n              }}\n            >\n              <ImportFromLinkMenu\n                source={source}\n                onExecute={onInteractionMenuExecute}\n              />\n            </div>\n          )}\n        </>\n      </Paragraph>\n    );\n  };\n","import {\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_EVAL,\n  ELEMENT_FETCH,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  MyEditor,\n} from '@decipad/editor-types';\nimport {\n  focusAndSetSelection,\n  insertBlockOfTypeBelow,\n  insertStructuredCodeLineBelow,\n  insertCodeLineBelow,\n  insertDividerBelow,\n  requireBlockParentPath,\n} from '@decipad/editor-utils';\nimport { SlashCommandsMenu } from '@decipad/ui';\nimport { deleteText } from '@udecode/plate';\nimport { ComponentProps } from 'react';\nimport { Location, Path } from 'slate';\nimport { insertDataViewBelow } from './data-view';\nimport { insertDrawBelow } from './draw';\nimport {\n  insertDisplayBelow,\n  insertDropdownBelow,\n  insertInputBelow,\n  insertSliderInputBelow,\n} from './input';\nimport { insertPlotBelow } from './plot';\nimport { insertTableBelow } from './table';\n\ntype SlashCommandHandler = Exclude<\n  ComponentProps<typeof SlashCommandsMenu>['onExecute'],\n  undefined\n>;\nexport type SlashCommand = Parameters<SlashCommandHandler>[0];\n\nexport type GetAvailableIdentifier = (prefix: string, start: number) => string;\nexport interface ExecuteProps {\n  editor: MyEditor;\n  path: Path;\n  deleteFragment?: Location;\n  command: SlashCommand;\n  getAvailableIdentifier: GetAvailableIdentifier;\n}\n\nexport const execute = ({\n  command,\n  editor,\n  path,\n  getAvailableIdentifier,\n  deleteFragment,\n}: ExecuteProps): void => {\n  switch (command) {\n    case 'structured-code-line':\n      insertStructuredCodeLineBelow(\n        editor,\n        path,\n        false,\n        getAvailableIdentifier\n      );\n      break;\n    case 'calculation-block':\n      insertCodeLineBelow(editor, path, false);\n      break;\n    case 'input':\n      insertInputBelow(editor, path, 'number', getAvailableIdentifier);\n      break;\n    case 'toggle':\n      insertInputBelow(editor, path, 'boolean', getAvailableIdentifier);\n      break;\n    case 'datepicker':\n      insertInputBelow(editor, path, 'date', getAvailableIdentifier);\n      break;\n    case 'slider':\n      insertSliderInputBelow(editor, path, getAvailableIdentifier);\n      break;\n    case 'display':\n      insertDisplayBelow(editor, path);\n      break;\n    case 'dropdown':\n      insertDropdownBelow(editor, path, getAvailableIdentifier);\n      break;\n    case 'table':\n      insertTableBelow(editor, path, getAvailableIdentifier);\n      break;\n    case 'data-view':\n      insertDataViewBelow(editor, path);\n      break;\n    case 'plot':\n      insertPlotBelow(editor, path);\n      break;\n    case 'import':\n      insertBlockOfTypeBelow(editor, path, ELEMENT_FETCH);\n      break;\n    case 'heading1':\n      insertBlockOfTypeBelow(editor, path, ELEMENT_H2);\n      break;\n    case 'heading2':\n      insertBlockOfTypeBelow(editor, path, ELEMENT_H3);\n      break;\n    case 'divider':\n      insertDividerBelow(editor, path, ELEMENT_HR);\n      break;\n    case 'callout':\n      insertBlockOfTypeBelow(editor, path, ELEMENT_CALLOUT);\n      break;\n    case 'blockquote':\n      insertBlockOfTypeBelow(editor, path, ELEMENT_BLOCKQUOTE);\n      break;\n    case 'eval':\n      insertBlockOfTypeBelow(editor, path, ELEMENT_EVAL);\n      break;\n    case 'sketch':\n      insertDrawBelow(editor, path);\n      break;\n  }\n\n  if (deleteFragment) {\n    const nextBlock = [path[0] + 1, 0];\n    focusAndSetSelection(editor, nextBlock);\n    deleteText(editor, { at: deleteFragment });\n  } else {\n    deleteText(editor, { at: requireBlockParentPath(editor, path) });\n  }\n};\n","import {\n  DrawElement,\n  DrawElementDescendant,\n  DrawElements,\n  MyEditor,\n  MyElement,\n  PlateComponent,\n} from '@decipad/editor-types';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { THEME } from '@excalidraw/excalidraw';\nimport {\n  ExcalidrawDataState,\n  ExcalidrawElement,\n  ExcalidrawElementProps,\n} from '@udecode/plate-ui-excalidraw';\nimport { useThemeFromStore } from '@decipad/react-contexts';\nimport {\n  ComponentProps,\n  FC,\n  MouseEvent,\n  ReactNode,\n  useCallback,\n  useRef,\n} from 'react';\nimport { blue200, blue300, cssVar } from '../../primitives';\nimport { DraggableBlock } from '../DraggableBlock/DraggableBlock';\n\nconst drawStyles = css({\n  display: 'block',\n  width: '100%',\n  maxWidth: '100%',\n  cursor: 'pointer',\n  borderRadius: 8,\n  border: 0,\n});\n\ntype ExcalidrawProps = NonNullable<\n  ExcalidrawElementProps<DrawElementDescendant[]>['excalidrawProps']\n>;\ntype ExcalidrawRef = NonNullable<ExcalidrawProps['excalidrawRef']>;\ntype AppState = NonNullable<ExcalidrawDataState['appState']>;\ntype ExcalidrawDrawElement = Omit<DrawElementDescendant, 'children'>;\n\ninterface DrawComponentProps {\n  excalidrawRef: ExcalidrawRef;\n  draggableBlock: FC<\n    ComponentProps<typeof DraggableBlock> & {\n      readonly element: MyElement;\n      readonly children: ReactNode;\n    }\n  >;\n  readOnly?: boolean;\n  elements: DrawElements;\n  onChange?: (elements: Readonly<ExcalidrawDrawElement[]>) => void;\n  onInteractingChange: (interacting: boolean) => void;\n  editor: MyEditor;\n}\n\ntype DrawComponent = PlateComponent<DrawComponentProps>;\n\nconst excalidrawContainerStyles = css({\n  '& > div > div': {\n    height: '400px',\n  },\n  '.excalidraw': {\n    '--color-primary': blue300.rgb,\n    '--icon-fill-color': cssVar('normalTextColor'),\n    '--button-gray-1': cssVar('highlightColor'),\n    '--button-gray-2': blue200.rgb,\n    '--theme-filter': 'none',\n  },\n  '.excalidraw.theme--dark': {\n    '--theme-filter': 'invert(1) hue-rotate(180deg)',\n    canvas: {\n      mixBlendMode: 'screen',\n    },\n  },\n});\n\nconst excalidrawReadOnlyStyles = css({\n  '.excalidraw': {\n    pointerEvents: 'none',\n  },\n});\n\nconst inferInteracting = (appState: AppState): boolean => {\n  return (\n    !!appState.draggingElement ||\n    !!appState.editingElement ||\n    !!appState.editingLinearElement ||\n    !!appState.resizingElement\n  );\n};\n\nconst ExcalidrawElementWithRef: FC<\n  ComponentProps<typeof ExcalidrawElement> & {\n    excalidrawProps?: { ref?: ExcalidrawRef };\n  }\n> = ExcalidrawElement;\n\nexport const Draw: DrawComponent = ({\n  draggableBlock: Draggable,\n  excalidrawRef,\n  readOnly,\n  elements,\n  onChange = noop,\n  onInteractingChange = noop,\n  ...props\n}) => {\n  const { attributes, children, element } = props;\n  const appState = useRef<unknown>({});\n\n  const onExcalidrawChange = useCallback(\n    (newElements: Readonly<ExcalidrawDrawElement[]>, newAppState: AppState) => {\n      appState.current = newAppState;\n      onChange(newElements);\n      onInteractingChange(inferInteracting(newAppState));\n    },\n    [onChange, onInteractingChange]\n  );\n\n  const [darkTheme] = useThemeFromStore();\n\n  const stopClickPropagation = useCallback((event: MouseEvent) => {\n    event.stopPropagation();\n  }, []);\n\n  // ExcalidrawProps for all the configuration options\n  return (\n    <Draggable\n      blockKind=\"draw\"\n      element={element as DrawElement}\n      draggableCss={drawStyles}\n      {...attributes}\n    >\n      <div onClick={stopClickPropagation}>\n        <ExcalidrawElementWithRef\n          css={[\n            excalidrawContainerStyles,\n            readOnly && excalidrawReadOnlyStyles,\n          ]}\n          excalidrawProps={{\n            ref: excalidrawRef,\n            onChange: readOnly ? noop : onExcalidrawChange,\n            gridModeEnabled: !readOnly,\n            zenModeEnabled: true,\n            viewModeEnabled: readOnly,\n            initialData: { elements, appState: appState.current },\n            theme: darkTheme ? THEME.DARK : THEME.LIGHT,\n            UIOptions: {\n              canvasActions: {\n                export: false,\n                clearCanvas: false,\n                loadScene: false,\n                saveToActiveFile: false,\n                saveAsImage: false,\n                changeViewBackgroundColor: false,\n                theme: !darkTheme,\n              },\n            },\n          }}\n          {...(props as any)}\n        />\n      </div>\n      {children}\n    </Draggable>\n  );\n};\n","/* eslint-disable no-underscore-dangle */\nimport { DrawElementDescendant, DrawElements } from '@decipad/editor-types';\nimport { ExcalidrawDrawElement } from './types';\n\nconst notDeleted = (element: DrawElementDescendant): boolean =>\n  !element.isDeleted;\n\n// undoes Slate fixes (converts elements back to Excalidraw form)\nconst unfixElement = (\n  element: Partial<DrawElementDescendant>\n): ExcalidrawDrawElement => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (element.hasOwnProperty('__text')) {\n    const { __text: text, ...rest } = element;\n    return {\n      ...rest,\n      text,\n    };\n  }\n  return element;\n};\n\nexport const unfixElements = (\n  elements: Readonly<DrawElements>\n): ExcalidrawDrawElement[] => {\n  return elements.filter(notDeleted).map(unfixElement);\n};\n\n// fixes element for slate\nexport const fixElement = (\n  _elem: Readonly<Partial<ExcalidrawDrawElement>>\n): DrawElementDescendant => {\n  let elem = _elem;\n  // eslint-disable-next-line no-prototype-builtins\n  if (elem.hasOwnProperty('text')) {\n    const { text, children, ...rest } = elem;\n    elem = {\n      ...rest,\n      __text: text as string,\n    };\n  }\n  if (!Array.isArray(elem.children)) {\n    elem = {\n      ...elem,\n      children: [{ text: '' }],\n    };\n  }\n  return elem as DrawElementDescendant;\n};\n\n// fixes elements from Excalidraw form to Slate\nexport const fixElements = (\n  elements: Readonly<Partial<ExcalidrawDrawElement>[]>\n): Readonly<DrawElementDescendant[]> => elements.map(fixElement);\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-prototype-builtins */\nimport { DrawElementDescendant } from '@decipad/editor-types';\nimport { dequal } from 'dequal';\nimport invariant from 'tiny-invariant';\nimport { DrawElementsDiff } from './types';\n\nconst findRemoved = (\n  elementsBefore: Readonly<Array<DrawElementDescendant>>,\n  elementsAfter: Readonly<Array<DrawElementDescendant>>\n): DrawElementsDiff['removed'] => {\n  const deletedIds: string[] = [];\n  for (const elBefore of [...elementsBefore].reverse()) {\n    if (elBefore.__dummy) {\n      // dummy node that should not be removed\n      // to prevent slate from ruining this parent block\n      continue;\n    }\n    const foundElement = elementsAfter.find((el) => el.id === elBefore.id);\n    const deleted = !foundElement || foundElement.isDeleted;\n    if (deleted) {\n      deletedIds.push(elBefore.id);\n    }\n  }\n  return deletedIds;\n};\n\nconst findAdded = (\n  elementsBefore: Readonly<Array<DrawElementDescendant>>,\n  elementsAfter: Readonly<Array<DrawElementDescendant>>\n): DrawElementsDiff['added'] => {\n  const added: Array<DrawElementDescendant> = [];\n  for (const elAfter of elementsAfter) {\n    if (\n      !elAfter.isDeleted &&\n      !elementsBefore.find((el) => el.id === elAfter.id)\n    ) {\n      added.push(elAfter);\n    }\n  }\n  return added;\n};\n\nconst diffElements = (\n  elementBefore: DrawElementDescendant,\n  elementAfter: DrawElementDescendant\n): Partial<DrawElementDescendant> => {\n  if (\n    elementBefore.version != null &&\n    elementAfter.version != null &&\n    elementBefore.version > elementAfter.version\n  ) {\n    return {};\n  }\n  const diff: Partial<DrawElementDescendant> = {};\n  invariant(\n    elementAfter.id === elementBefore.id,\n    'expected both elements to have the same id'\n  );\n  // get modified props\n  for (const [key, value] of Object.entries(elementBefore)) {\n    const valueAfter = elementAfter[key as keyof typeof elementAfter];\n    if (!dequal(value, valueAfter)) {\n      diff[key] = valueAfter;\n    }\n  }\n\n  // get new props\n  for (const [key, value] of Object.entries(elementAfter)) {\n    if (!elementBefore.hasOwnProperty(key)) {\n      diff[key as keyof DrawElementDescendant] = value;\n    }\n  }\n\n  return diff;\n};\n\nconst findModified = (\n  elementsBefore: Readonly<Array<DrawElementDescendant>>,\n  elementsAfter: Readonly<Array<DrawElementDescendant>>\n): DrawElementsDiff['modified'] => {\n  const modified: Array<Partial<DrawElementDescendant> & { id: string }> = [];\n  for (const elBefore of elementsBefore) {\n    if (elBefore.__dummy) {\n      continue;\n    }\n    const elAfter = elementsAfter.find((el) => el.id === elBefore.id);\n    if (elAfter) {\n      const diff = diffElements(elBefore, elAfter);\n      if (Object.keys(diff).length === 0) {\n        continue;\n      }\n      modified.push({ ...diff, id: elBefore.id });\n    }\n  }\n  return modified;\n};\n\nexport const findElementsDiff = (\n  elementsBefore: Readonly<Array<DrawElementDescendant>>,\n  elementsAfter: Readonly<Array<DrawElementDescendant>>\n): DrawElementsDiff => {\n  return {\n    added: findAdded(elementsBefore, elementsAfter),\n    removed: findRemoved(elementsBefore, elementsAfter),\n    modified: findModified(elementsBefore, elementsAfter),\n  };\n};\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-prototype-builtins */\nimport {\n  DrawElement,\n  DrawElementDescendant,\n  MyEditor,\n} from '@decipad/editor-types';\nimport { insertNodes } from '@decipad/editor-utils';\nimport {\n  deleteText,\n  findNode,\n  setNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { NodeEntry } from 'slate';\nimport { drawDummyElement } from './drawDummyElement';\nimport { fixElement } from './fixElement';\nimport { DrawElementsDiff } from './types';\n\nconst removeRemoved = (\n  editor: MyEditor,\n  parent: NodeEntry<DrawElement>,\n  removed: Array<string>\n): void => {\n  let childrenCountAfter = parent[0].children.length;\n  for (const r of [...removed].reverse()) {\n    const entry = findNode(editor, {\n      at: parent[1],\n      match: { id: r },\n      voids: true,\n    });\n    if (entry) {\n      deleteText(editor, { at: entry[1], unit: 'block', voids: true });\n      childrenCountAfter -= 1;\n    }\n  }\n\n  // if we removed all children we need to add a child otherwise slate\n  // will mess up our block\n  if (childrenCountAfter === 0) {\n    insertNodes(editor, [drawDummyElement()], {\n      at: [...parent[1], 0],\n      voids: true,\n    });\n  }\n};\n\nconst addAdded = (\n  editor: MyEditor,\n  parent: NodeEntry<DrawElement>,\n  added: Array<DrawElementDescendant>\n): void => {\n  for (const a of added) {\n    const newElementPath = [...parent[1], parent[0].children.length];\n    insertNodes(editor, [fixElement(a)], { at: newElementPath });\n  }\n};\n\nconst modifyModified = (\n  editor: MyEditor,\n  modified: Array<Partial<DrawElementDescendant>>\n): void => {\n  for (const m of modified) {\n    if (Object.keys(m).length === 0 || m.__dummy) {\n      continue;\n    }\n    const entry = findNode(editor, { match: { id: m.id }, voids: true });\n    if (entry) {\n      setNodes(editor, fixElement(m), { at: entry[1], voids: true });\n    }\n  }\n};\n\nexport const applyElementsDiffToEditor = (\n  editor: MyEditor,\n  parent: NodeEntry<DrawElement>,\n  elementsDiff: DrawElementsDiff\n) => {\n  withoutNormalizing(editor, () => {\n    modifyModified(editor, elementsDiff.modified);\n    addAdded(editor, parent, elementsDiff.added);\n    removeRemoved(editor, parent, elementsDiff.removed);\n  });\n};\n","/* eslint-disable no-param-reassign */\nimport { findNodePath } from '@udecode/plate';\nimport { cloneDeep } from 'lodash';\nimport { MutableRefObject, useCallback, useRef } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { DrawElement, MyEditor, DrawElements } from '@decipad/editor-types';\nimport { applyElementsDiffToEditor } from './applyElementsDiffToEditor';\nimport { fixElements } from './fixElement';\nimport { ExcalidrawDrawElement } from './types';\nimport { findElementsDiff } from './findElementsDiff';\n\ntype UpdateScene = (elements: Readonly<DrawElements>) => void;\n\ninterface ApplyUserChangesProps {\n  editor: MyEditor;\n  element: DrawElement;\n  updating: MutableRefObject<boolean>;\n  updateScene: UpdateScene;\n  isInteracting: boolean;\n}\n\ninterface ApplyUserChangesReturn {\n  onUserChange: (newElements: Readonly<ExcalidrawDrawElement[]>) => void;\n}\n\nconst DEBOUNCE_SAVE_SKETCH_MS = 500;\n\nexport const useApplyUserChanges = ({\n  editor,\n  element,\n  updateScene,\n  updating,\n  isInteracting,\n}: ApplyUserChangesProps): ApplyUserChangesReturn => {\n  const elementRef = useRef(element);\n  elementRef.current = element;\n  const needsUpdate = useRef(false);\n\n  const onDebouncedUserChange = useDebouncedCallback(\n    useCallback(\n      (newElements: Readonly<ExcalidrawDrawElement[]>) => {\n        updating.current = false;\n        const path = findNodePath(editor, element);\n        if (path) {\n          const elements = fixElements(newElements);\n          const diff = findElementsDiff(elementRef.current.children, elements);\n          applyElementsDiffToEditor(editor, [element, path], diff);\n          const nextElements = cloneDeep(elements);\n          if (needsUpdate.current && !isInteracting) {\n            needsUpdate.current = false;\n            updateScene(nextElements);\n          }\n        }\n      },\n      [editor, element, isInteracting, needsUpdate, updateScene, updating]\n    ),\n    DEBOUNCE_SAVE_SKETCH_MS\n  );\n\n  const lastUserValue = useRef<Readonly<ExcalidrawDrawElement[]> | undefined>();\n\n  const onUserChange = useCallback(\n    (newElements: Readonly<ExcalidrawDrawElement[]>) => {\n      updating.current = true;\n      lastUserValue.current = cloneDeep(newElements);\n      onDebouncedUserChange(newElements);\n    },\n    [onDebouncedUserChange, updating]\n  );\n\n  return { onUserChange };\n};\n","import {\n  DrawElements,\n  ELEMENT_DRAW,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { Draw as UIDraw } from '@decipad/ui';\nimport { dequal } from 'dequal';\nimport { cloneDeep } from 'lodash';\nimport { MutableRefObject, useCallback, useRef, useState } from 'react';\nimport { DraggableBlock } from '../block-management';\nimport { unfixElements } from './fixElement';\nimport { ExcalidrawRef, ExcalidrawImperativeAPI } from './types';\nimport { useApplyEditorChanges } from './useApplyEditorChanges';\nimport { useApplyUserChanges } from './useApplyUserChanges';\n\nexport const Draw: PlateComponent = ({ element, attributes }) => {\n  assertElementType(element, ELEMENT_DRAW);\n\n  const editor = useTEditorRef();\n  const readOnly = useIsEditorReadOnly();\n  const [isInteracting, setIsInteracting] = useState(false);\n  const elementRef = useRef(element);\n  elementRef.current = element;\n  const updating = useRef(false);\n\n  const previousElements = useRef<DrawElements>(cloneDeep(element.children));\n\n  const updateScene = useCallback((nextElements: Readonly<DrawElements>) => {\n    const excalidrawApi = excalidrawRef.current;\n    if (excalidrawApi && !dequal(previousElements.current, nextElements)) {\n      const api = excalidrawApi as ExcalidrawImperativeAPI;\n      api.updateScene({\n        elements: unfixElements(cloneDeep(nextElements)),\n      });\n      previousElements.current = cloneDeep(\n        nextElements\n      ) as typeof previousElements.current;\n    }\n  }, []);\n\n  const excalidrawRef: ExcalidrawRef | MutableRefObject<undefined> = useRef();\n\n  const { onUserChange } = useApplyUserChanges({\n    editor,\n    element,\n    updating,\n    isInteracting,\n    updateScene,\n  });\n\n  useApplyEditorChanges(element, updateScene);\n\n  return (\n    <UIDraw\n      excalidrawRef={excalidrawRef}\n      draggableBlock={DraggableBlock}\n      readOnly={readOnly}\n      elements={cloneDeep(previousElements.current)}\n      onChange={onUserChange}\n      onInteractingChange={setIsInteracting}\n      element={element}\n      attributes={attributes}\n      editor={editor}\n    />\n  );\n};\n","import {\n  DrawElement,\n  DrawElementDescendant,\n  DrawElements,\n} from '@decipad/editor-types';\nimport { useEditorChange } from '@decipad/react-contexts';\nimport { findNodePath, getNode } from '@udecode/plate';\nimport { cloneDeep, extend } from 'lodash';\nimport { useCallback, useRef } from 'react';\nimport { DrawElementsDiff } from './types';\nimport { findElementsDiff } from './findElementsDiff';\n\ntype UpdateScene = (elements: Readonly<DrawElements>) => void;\n\nexport const useApplyEditorChanges = (\n  element: DrawElement,\n  updateScene: UpdateScene\n) => {\n  const previousEditorElements = useRef(\n    element.children as Readonly<DrawElementDescendant[]>\n  );\n\n  const applyElementsDiffToDrawing = useCallback(\n    (diff: DrawElementsDiff) => {\n      const newScene = cloneDeep(\n        previousEditorElements.current\n      ) as DrawElementDescendant[];\n      for (const a of diff.added) {\n        newScene.push(a);\n      }\n      for (const m of diff.modified) {\n        const el = newScene.find((e) => e.id === m.id);\n        if (el) {\n          extend(el, m);\n        }\n      }\n      updateScene(newScene.filter((el) => !diff.removed.includes(el.id)));\n    },\n    [updateScene]\n  );\n\n  useEditorChange(\n    useCallback(\n      (draw?: DrawElement) => {\n        if (draw) {\n          const diff = findElementsDiff(\n            previousEditorElements.current,\n            draw.children\n          );\n          applyElementsDiffToDrawing(diff);\n          previousEditorElements.current = draw.children;\n        }\n      },\n      [applyElementsDiffToDrawing]\n    ),\n    (editor): DrawElement | undefined => {\n      // refetch the element\n      const path = findNodePath(editor, element);\n      if (path) {\n        return getNode<DrawElement>(editor, path) ?? undefined;\n      }\n      return undefined;\n    }\n  );\n};\n","var _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgImageLoad(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.75 16L7.49619 12.5067C8.2749 11.5161 10.094 11.8672 10.915 12.823C11.9522 11.5037 13.3973 9.63456 13.4914 9.51295L13.5013 9.50018C14.2815 8.51599 15.7663 8.48582 16.5856 9.43948\",\n    stroke: \"currentColor\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.25 10.25V6.75C19.25 5.64543 18.3546 4.75 17.25 4.75H6.75C5.64543 4.75 4.75 5.64543 4.75 6.75V17.25C4.75 18.3546 5.64543 19.25 6.75 19.25H9.25\",\n    stroke: \"currentColor\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.25 16C19.25 17.7949 17.7949 19.25 16 19.25C14.2051 19.25 12.75 17.7949 12.75 16C12.75 14.2051 14.2051 12.75 16 12.75C17.7949 12.75 19.25 14.2051 19.25 16Z\",\n    stroke: \"currentColor\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 14L18 18\",\n    stroke: \"currentColor\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgImageLoad);\nexport default __webpack_public_path__ + \"static/media/image-load.a3d040c446117305c2b7d2241fd11fdb.svg\";\nexport { ForwardRef as ReactComponent };","// HACK: Plate uses https://github.com/bokuweb/re-resizable under the hood for resizing which sets\n// `max-width: 100%` and `width` to the selected value. Unfortunately this is not responsive and\n// it is baked into `re-resizable` so there's no way around it except to give it a wrapper in the\n// `as` prop that will then switch `width` with `max-width` to make things responsive. In this case\n\nimport { CSSProperties, forwardRef } from 'react';\n\n// we'll get `width: 100%` and `max-width` equal to the selected size.\nconst getResponsiveWidth = (style: CSSProperties) => ({\n  ...style,\n  width: '100%',\n  maxWidth: style.width,\n});\n\nexport const Div = forwardRef<HTMLDivElement, { style: CSSProperties }>(\n  ({ style, ...props }, ref) => (\n    <div style={getResponsiveWidth(style)} ref={ref} {...props} />\n  )\n);\n\nexport const FigCaption = forwardRef<HTMLDivElement, { style: CSSProperties }>(\n  ({ style, ...props }, ref) => (\n    <figcaption style={getResponsiveWidth(style)} ref={ref} {...props} />\n  )\n);\n","import { css } from '@emotion/react';\nimport { cssVar } from '../primitives/index';\n\nexport const plateButtonCss = css`\n  display: inline-flex;\n  position: relative;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 100%;\n\n  font-weight: 500;\n  border-width: 0;\n  cursor: pointer;\n\n  background-color: ${cssVar('backgroundColor')};\n\n  :hover {\n    background-color: ${cssVar('highlightColor')};\n  }\n\n  :hover {\n    background-color: ${cssVar('strongHighlightColor')};\n  }\n\n  padding: 4px 10px;\n\n  font-family: inherit;\n  font-size: 14px;\n  border-radius: 3px;\n\n  color: inherit;\n\n  :active {\n    color: inherit;\n  }\n\n  :visited {\n    color: inherit;\n  }\n`;\n\nexport const floatingRootCss = css`\n  background-color: ${cssVar('backgroundColor')};\n  width: auto;\n  z-index: 10;\n\n  border-radius: 4px;\n  box-shadow: rgb(15 15 15 / 5%) 0 0 0 1px, rgb(15 15 15 / 10%) 0 3px 6px,\n    rgb(15 15 15 / 20%) 0 9px 24px;\n`;\n\nexport const floatingRowCss = css`\n  display: flex;\n  padding: 4px 8px;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const floatingButtonCss = css([\n  plateButtonCss,\n  css`\n    padding: 0 4px;\n  `,\n]);\n\nexport const floatingInputCss = css`\n  padding: 0;\n  background-color: transparent;\n  flex-grow: 1;\n  height: 2rem;\n  border-style: none;\n\n  :focus {\n    outline: none;\n  }\n\n  line-height: 20px;\n`;\n","import styled from '@emotion/styled';\nimport { cssVar } from '../../primitives';\n\nexport const FloatingVerticalDivider = styled.div`\n  margin-left: 8px;\n  margin-right: 8px;\n  background-color: ${cssVar('strongHighlightColor')};\n  width: 1px;\n  height: 20px;\n`;\n","import {\n  Button,\n  DeleteIcon,\n  findNodePath,\n  focusEditor,\n  PlateButtonProps,\n  removeNodes,\n  TElement,\n  useEditorRef,\n} from '@udecode/plate';\nimport { css } from '@emotion/react';\nimport { plateButtonCss } from '../../styles/floating';\n\nexport const RemoveNodeButton = ({\n  element,\n  ...props\n}: PlateButtonProps & { element: TElement }) => {\n  const editor = useEditorRef();\n\n  return (\n    <Button\n      css={css([\n        plateButtonCss,\n        css`\n          padding: 4px 0;\n          width: 24px;\n          height: 24px;\n        `,\n      ])}\n      onClick={() => {\n        const path = findNodePath(editor, element);\n\n        removeNodes(editor, { at: path });\n\n        focusEditor(editor, editor.selection!);\n      }}\n      {...props}\n    >\n      <DeleteIcon />\n    </Button>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FloatingInputWrapper = styled.div`\n  display: flex;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 8px;\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\nimport { cssVar } from '../../primitives';\n\nexport const FloatingIconWrapper = styled.div`\n  display: flex;\n  padding: 0 4px;\n  color: ${cssVar('weakerTextColor')};\n  align-items: center;\n`;\n","import {\n  FloatingMedia as PlateFloatingMedia,\n  LinkIcon,\n  useElement,\n  useFloatingMediaSelectors,\n} from '@udecode/plate';\nimport { css } from '@emotion/react';\nimport {\n  floatingButtonCss,\n  floatingInputCss,\n  floatingRootCss,\n  floatingRowCss,\n  plateButtonCss,\n} from '../../styles/floating';\nimport {\n  FloatingIconWrapper,\n  FloatingInputWrapper,\n  FloatingVerticalDivider,\n  RemoveNodeButton,\n} from '../../atoms';\n\nexport const FloatingMedia = ({ pluginKey }: { pluginKey?: string }) => {\n  const isEditing = useFloatingMediaSelectors().isEditing();\n  const element = useElement();\n\n  return (\n    <div css={floatingRootCss}>\n      {!isEditing ? (\n        <div css={floatingRowCss}>\n          <PlateFloatingMedia.EditButton css={plateButtonCss}>\n            Edit link\n          </PlateFloatingMedia.EditButton>\n\n          <FloatingVerticalDivider />\n\n          <RemoveNodeButton element={element} css={floatingButtonCss} />\n        </div>\n      ) : (\n        <div\n          css={css`\n            display: flex;\n            flex-direction: column;\n            width: 330px;\n          `}\n        >\n          <FloatingInputWrapper>\n            <FloatingIconWrapper>\n              <LinkIcon width={18} />\n            </FloatingIconWrapper>\n\n            <PlateFloatingMedia.UrlInput\n              css={floatingInputCss}\n              placeholder=\"Paste the embed link...\"\n              pluginKey={pluginKey}\n            />\n          </FloatingInputWrapper>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { cssVar, p14Regular } from '../../primitives';\n\nexport const rootStyles = css({\n  padding: '10px 10px',\n});\n\nexport const resizableStyles = css({\n  height: 'auto !important',\n  padding: 8,\n  borderRadius: 8,\n});\n\nexport const resizableSelectedStyles = css({\n  background: cssVar('tableSelectionBackgroundColor'),\n});\n\nexport const figureStyles = css({\n  margin: 0,\n  position: 'relative',\n});\n\nexport const captionStyles = css({\n  cursor: 'text',\n});\n\nexport const captionTextareaStyles = css({\n  ...p14Regular,\n  padding: '0',\n  marginTop: 8,\n  width: '100%',\n  borderStyle: 'none',\n  resize: 'none',\n\n  color: 'inherit',\n  overflowY: 'hidden',\n  backgroundColor: 'inherit',\n  textAlign: 'center',\n  ':focus': { '::placeholder': { opacity: 0 } },\n});\n\nexport const handleStyles = css({\n  display: 'flex',\n  position: 'absolute',\n  top: '0',\n  zIndex: 10,\n  flexDirection: 'column',\n  justifyContent: 'center',\n  width: '1.5rem',\n  height: '100%',\n  userSelect: 'none',\n\n  '::after': {\n    display: 'flex',\n    opacity: 0,\n    content: \"' '\",\n    width: '3px',\n    height: '64px',\n    borderRadius: '6px',\n\n    // Handle color:\n    // backgroundColor: grey100.rgb,\n  },\n\n  // Handle color:\n  // ':hover,:focus,:active': { '::after': { background: brand500.rgb } },\n});\n\nexport const handleSelectedStyles = css({\n  '::after': {\n    opacity: 1,\n  },\n});\n\nexport const handleLeftStyles = css([\n  handleStyles,\n  {\n    left: -12,\n    paddingLeft: 12,\n    marginLeft: -12,\n  },\n]);\n\nexport const handleRightStyles = css([\n  handleStyles,\n  {\n    right: -12,\n    paddingRight: 12,\n    marginRight: -12,\n    alignItems: 'flex-end',\n  },\n]);\n\nexport const draggableStyles = css({\n  paddingTop: 8,\n});\n","import { ImageElement, MyElement, PlateComponent } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport {\n  Box,\n  Caption,\n  ElementPopover,\n  Image as PlateImage,\n  Media,\n  mediaFloatingOptions,\n  Resizable,\n} from '@udecode/plate';\nimport { ComponentProps, FC, ReactNode } from 'react';\nimport { useFocused, useSelected } from 'slate-react';\nimport { imageLoad } from '../../images';\nimport { cssVar } from '../../primitives';\nimport { Div, FigCaption } from '../../utils/resizing';\nimport { DraggableBlock } from '../DraggableBlock/DraggableBlock';\nimport { FloatingMedia } from '../FloatingMedia/FloatingMedia';\nimport {\n  captionStyles,\n  captionTextareaStyles,\n  draggableStyles,\n  figureStyles,\n  handleLeftStyles,\n  handleRightStyles,\n  handleSelectedStyles,\n  resizableStyles,\n} from '../MediaEmbed/styles';\n\nexport const imgStyles = css({\n  display: 'block',\n  paddingLeft: '0',\n  paddingRight: '0',\n  width: '100%',\n  maxWidth: '100%',\n  cursor: 'pointer',\n  objectFit: 'cover',\n  borderRadius: 8,\n  border: 0,\n});\n\nconst imagePlaceholderStyles = css({\n  background: `\n  url(${imageLoad}) no-repeat center,\n  radial-gradient(\n    ellipse at center,\n    ${cssVar('tintedBackgroundColor')} 0%,\n    transparent 100%\n  ),\n  linear-gradient(\n    180deg, ${cssVar('highlightColor')} 30.41%, ${cssVar(\n    'tintedBackgroundColor'\n  )} 100%\n  )\n`,\n});\n\nconst resizableImagePlaceholderStyles = css({\n  background: `\n  url(${imageLoad}) no-repeat center ${cssVar(\n    'tableSelectionBackgroundColor'\n  )}`,\n});\n\ntype ImageComponent = PlateComponent<{\n  draggableBlock: FC<\n    ComponentProps<typeof DraggableBlock> & {\n      readonly element: MyElement;\n      readonly children: ReactNode;\n    }\n  >;\n  pluginKey?: string;\n  readOnly?: boolean;\n}>;\n\nexport const Image: ImageComponent = ({\n  draggableBlock: Draggable,\n  readOnly,\n  pluginKey,\n  ...props\n}) => {\n  const { children, element } = props;\n\n  const focused = useFocused();\n  const selected = useSelected();\n  const isSelected = !readOnly && focused && selected;\n\n  return (\n    <ElementPopover\n      content={!readOnly && <FloatingMedia pluginKey={pluginKey} />}\n      floatingOptions={mediaFloatingOptions}\n    >\n      <Media.Root {...(props as any)}>\n        <Draggable\n          blockKind=\"media\"\n          element={element as ImageElement}\n          draggableCss={draggableStyles}\n        >\n          <figure css={figureStyles} contentEditable={false}>\n            <Resizable\n              css={[\n                resizableStyles,\n                imagePlaceholderStyles,\n                isSelected && resizableImagePlaceholderStyles,\n              ]}\n              handleComponent={{\n                left: (\n                  <Box\n                    css={[handleLeftStyles, isSelected && handleSelectedStyles]}\n                  />\n                ),\n                right: (\n                  <Box\n                    css={[\n                      handleRightStyles,\n                      isSelected && handleSelectedStyles,\n                    ]}\n                  />\n                ),\n              }}\n              readOnly={readOnly}\n              minWidth={200}\n              minHeight={200}\n              as={Div}\n            >\n              <PlateImage\n                css={imgStyles}\n                onError={(event: {\n                  target: { style: { display: string } };\n                }) => {\n                  // eslint-disable-next-line no-param-reassign\n                  event.target.style.display = 'none';\n                }}\n              />\n            </Resizable>\n\n            <Caption.Root\n              css={captionStyles}\n              readOnly={readOnly}\n              as={FigCaption}\n            >\n              <Caption.Textarea\n                readOnly={readOnly}\n                css={[captionTextareaStyles]}\n                placeholder=\"Description of your image...\"\n              />\n            </Caption.Root>\n          </figure>\n\n          {children}\n        </Draggable>\n      </Media.Root>\n    </ElementPopover>\n  );\n};\n","import { Image as UIImage } from '@decipad/ui';\nimport { ELEMENT_IMAGE, PlateComponent } from '@decipad/editor-types';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { DraggableBlock } from '../block-management/index';\n\nexport const Image: PlateComponent = (props) => {\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <UIImage\n      draggableBlock={DraggableBlock}\n      readOnly={readOnly}\n      pluginKey={ELEMENT_IMAGE}\n      {...props}\n    />\n  );\n};\n","import {\n  Box,\n  Caption,\n  ElementPopover,\n  Media,\n  MediaEmbed as PlateMediaEmbed,\n  mediaFloatingOptions,\n  Resizable,\n  useMediaStore,\n} from '@udecode/plate';\nimport { ComponentProps, FC, ReactNode } from 'react';\nimport type {\n  MediaEmbedElement,\n  MyElement,\n  PlateComponent,\n} from '@decipad/editor-types';\nimport { useFocused, useSelected } from 'slate-react';\nimport { css } from '@emotion/react';\nimport { DraggableBlock } from '../DraggableBlock/DraggableBlock';\nimport { FloatingMedia } from '../FloatingMedia/FloatingMedia';\nimport {\n  captionStyles,\n  captionTextareaStyles,\n  draggableStyles,\n  figureStyles,\n  handleLeftStyles,\n  handleRightStyles,\n  handleSelectedStyles,\n  resizableSelectedStyles,\n  resizableStyles,\n  rootStyles,\n} from './styles';\nimport { Div, FigCaption } from '../../utils/resizing';\n\ntype Component = PlateComponent<{\n  draggableBlock: FC<\n    ComponentProps<typeof DraggableBlock> & {\n      readonly element: MyElement;\n      readonly children: ReactNode;\n    }\n  >;\n  readOnly?: boolean;\n  pluginKey?: string;\n}>;\n\nexport const MediaEmbed: Component = ({\n  draggableBlock: Draggable,\n  readOnly,\n  pluginKey,\n  ...props\n}) => {\n  const { children, element } = props;\n\n  const focused = useFocused();\n  const selected = useSelected();\n\n  const { provider } = useMediaStore().get.urlData();\n\n  const providersPadding: Record<string, string> = {\n    youtube: '56.2061%',\n    vimeo: '75%',\n    youku: '56.25%',\n    dailymotion: '56.0417%',\n    coub: '51.25%',\n  };\n  const providerPadding =\n    provider !== 'twitter'\n      ? (provider && providersPadding[provider]) || '56.0417%'\n      : undefined;\n\n  const isSelected = !readOnly && focused && selected;\n\n  return (\n    <ElementPopover\n      content={!readOnly && <FloatingMedia pluginKey={pluginKey} />}\n      floatingOptions={mediaFloatingOptions}\n    >\n      <Media.Root css={rootStyles} {...(props as any)}>\n        <Draggable\n          blockKind=\"media\"\n          element={element as MediaEmbedElement}\n          draggableCss={draggableStyles}\n        >\n          <figure\n            css={[\n              figureStyles,\n              provider === 'twitter' &&\n                css`\n                  .twitter-tweet {\n                    margin: 0 auto !important;\n                    padding: 2px;\n                  }\n                `,\n            ]}\n            contentEditable={false}\n          >\n            <Resizable\n              css={[resizableStyles, isSelected && resizableSelectedStyles]}\n              maxWidth={provider === 'twitter' ? 550 : '100%'}\n              minWidth={provider === 'twitter' ? 330 : 150}\n              handleComponent={{\n                left: (\n                  <Box\n                    css={[handleLeftStyles, isSelected && handleSelectedStyles]}\n                  />\n                ),\n                right: (\n                  <Box\n                    css={[\n                      handleRightStyles,\n                      isSelected && handleSelectedStyles,\n                    ]}\n                  />\n                ),\n              }}\n              readOnly={readOnly}\n              as={Div}\n            >\n              <div\n                css={css`\n                  padding-bottom: ${providerPadding};\n                `}\n              >\n                <PlateMediaEmbed\n                  css={css`\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    border-radius: 3px;\n                  `}\n                />\n              </div>\n            </Resizable>\n\n            <Caption.Root\n              css={captionStyles}\n              readOnly={readOnly}\n              as={FigCaption}\n            >\n              <Caption.Textarea\n                readOnly={readOnly}\n                css={captionTextareaStyles}\n                placeholder=\"Your description...\"\n              />\n            </Caption.Root>\n          </figure>\n\n          {children}\n        </Draggable>\n      </Media.Root>\n    </ElementPopover>\n  );\n};\n","import { MediaEmbed as UIMediaEmbed } from '@decipad/ui';\nimport { ELEMENT_MEDIA_EMBED, PlateComponent } from '@decipad/editor-types';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { DraggableBlock } from '../block-management/index';\nimport { BlockErrorBoundary } from '../BlockErrorBoundary';\n\nexport const MediaEmbed: PlateComponent = (props) => {\n  assertElementType(props.element, ELEMENT_MEDIA_EMBED);\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <BlockErrorBoundary element={props.element}>\n      <UIMediaEmbed\n        draggableBlock={DraggableBlock}\n        readOnly={readOnly}\n        pluginKey={ELEMENT_MEDIA_EMBED}\n        {...props}\n      />\n    </BlockErrorBoundary>\n  );\n};\n","import { useThemeFromStore } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport {\n  black,\n  normalOpacity,\n  OpaqueColor,\n  strongOpacity,\n  transparency,\n  weakOpacity,\n  white,\n} from '../../primitives';\n\nconst counterWrapperStyles = (\n  color: string | OpaqueColor | undefined,\n  variant: boolean,\n  darkTheme: boolean\n) =>\n  css({\n    padding: '4px 6px',\n    aspectRatio: '1 / 1',\n    background: color\n      ? typeof color === 'string'\n        ? color\n        : transparency(color, variant ? normalOpacity : weakOpacity).rgba\n      : transparency(darkTheme ? black : white, normalOpacity).rgba,\n    color: transparency(\n      darkTheme ? white : black,\n      variant ? normalOpacity : strongOpacity\n    ).rgba,\n    borderRadius: '6px',\n  });\n\ninterface CounterProps {\n  readonly n: number;\n  readonly color?: OpaqueColor | string;\n  readonly variant?: boolean;\n}\n\nexport const Counter: React.FC<CounterProps> = ({\n  n,\n  color,\n  variant = false,\n}) => {\n  const [darkTheme] = useThemeFromStore();\n  return <span css={counterWrapperStyles(color, variant, darkTheme)}>{n}</span>;\n};\n","import { useThemeFromStore } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ArrowDiagonalTopRight, Heading1, Heading2 } from '../../icons';\nimport {\n  black,\n  p14Medium,\n  transparency,\n  weakOpacity,\n  white,\n} from '../../primitives';\n\ninterface NumberCatalogHeadingProps {\n  headingLevel: 2 | 3;\n  blockId: string;\n  name: string;\n}\n\nexport const NumberCatalogHeading = ({\n  headingLevel,\n  blockId,\n  name,\n}: NumberCatalogHeadingProps) => {\n  const [darkTheme] = useThemeFromStore();\n  return (\n    <a href={`#${blockId}`}>\n      <span css={numberCatalogListStyles(darkTheme)}>\n        <span\n          css={css({\n            display: 'inline-flex',\n            gap: '6px',\n            alignItems: 'center',\n            svg: {\n              width: '16px',\n              height: '16px',\n            },\n          })}\n        >\n          <span>{headingLevel === 2 ? <Heading1 /> : <Heading2 />}</span>\n\n          <span\n            css={css({\n              position: 'relative',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n              minWidth: 0,\n            })}\n          >\n            {name}\n          </span>\n        </span>\n        <span>\n          <span\n            css={css({\n              opacity: 0,\n              borderRadius: '4px',\n              padding: '4px',\n              height: '20px',\n              width: '20px',\n              display: 'inline-flex',\n              backgroundColor: transparency(\n                darkTheme ? white : black,\n                weakOpacity\n              ).rgba,\n              color: 'black',\n              svg: {\n                width: '12px',\n                height: '12px',\n              },\n            })}\n          >\n            <ArrowDiagonalTopRight />\n          </span>\n        </span>\n      </span>\n    </a>\n  );\n};\n\nexport const numberCatalogListStyles = (darkTheme: boolean) =>\n  css(p14Medium, {\n    padding: '11px 0px 9px 15px',\n    display: 'grid',\n    gridTemplateColumns: 'minmax(0, 1fr) 24px',\n    alignItems: 'center',\n    gap: '8px',\n    cursor: 'grab',\n    minWidth: 0,\n    minHeight: 0,\n    '*:hover > &': {\n      backgroundColor: transparency(darkTheme ? black : white, 0.5).rgba,\n      'span:last-child span:last-child': {\n        opacity: 1,\n        cursor: 'pointer',\n      },\n    },\n  });\n","import { SmartRefDragCallback } from '@decipad/editor-utils';\nimport { formatResultPreview } from '@decipad/format';\nimport { useComputer, useThemeFromStore } from '@decipad/react-contexts';\nimport { useDelayedValue } from '@decipad/react-utils';\nimport { css } from '@emotion/react';\nimport { DragHandle, NestIndicator } from '../../icons';\nimport {\n  black,\n  boldOpacity,\n  cssVar,\n  p12Medium,\n  p14Medium,\n  transparency,\n  weakOpacity,\n  white,\n} from '../../primitives';\nimport { AvailableSwatchColor, swatchesThemed } from '../../utils';\nimport { CodeResult } from '../CodeResult/CodeResult';\n\ninterface NumberProps {\n  name: string;\n  blockId: string;\n  color: string;\n  onDragStart: SmartRefDragCallback;\n  onDragEnd?: (e: React.DragEvent) => void;\n}\n\nexport const NumberCatalogItem = ({\n  name,\n  blockId,\n  color,\n  onDragStart,\n  onDragEnd,\n}: NumberProps) => {\n  const computer = useComputer();\n  const undebouncedResult = computer.getBlockIdResult$.use(blockId);\n\n  const result = useDelayedValue(\n    undebouncedResult,\n    undebouncedResult?.result == null\n  );\n  const [darkTheme] = useThemeFromStore();\n  const baseSwatches = swatchesThemed(darkTheme);\n\n  if (!result?.result) {\n    return null;\n  }\n\n  const asText = formatResultPreview(result.result);\n\n  return (\n    <div>\n      <div\n        draggable\n        onDragStart={onDragStart({\n          blockId,\n          asText,\n          computer,\n          result: result.result,\n        })}\n        onDragEnd={onDragEnd}\n        css={numberCatalogListItemStyles(darkTheme)}\n      >\n        <span\n          css={css({\n            display: 'inline-flex',\n            gap: '6px',\n            alignItems: 'center',\n            svg: {\n              width: '16px',\n              height: '16px',\n            },\n          })}\n        >\n          <span\n            css={css({\n              svg: {\n                transform: 'translateY(-4px)',\n              },\n              'svg > path': {\n                stroke: baseSwatches[color as AvailableSwatchColor].rgb,\n              },\n            })}\n          >\n            <NestIndicator />\n          </span>\n\n          <span\n            css={css(p14Medium, {\n              position: 'relative',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n              minWidth: 0,\n              display: 'inherit',\n            })}\n          >\n            {name}\n            <span\n              css={css(p12Medium, {\n                marginLeft: '8px',\n                alignSelf: 'center',\n                color: cssVar('weakTextColor'),\n              })}\n            >\n              {result.result.type.kind === 'table' ? (\n                'Table'\n              ) : (\n                <CodeResult {...result.result} />\n              )}\n            </span>\n          </span>\n        </span>\n        <span data-drag-handle css={dragHandleStyles}>\n          <DragHandle />\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst dragHandleStyles = css({\n  opacity: 0,\n  borderRadius: '4px',\n  padding: '5px',\n  height: '20px',\n  width: '20px',\n  display: 'inline-flex',\n  backgroundColor: transparency(black, weakOpacity).rgba,\n  color: 'black',\n  svg: {\n    width: '10px',\n    height: '10px',\n  },\n  'svg > path': {\n    fill: cssVar('weakTextColor'),\n  },\n});\n\nexport const numberCatalogListItemStyles = (darkTheme: boolean) =>\n  css(p14Medium, {\n    padding: '11px 0px 9px 15px',\n    display: 'grid',\n    gridTemplateColumns: 'minmax(0, 1fr) 24px',\n    alignItems: 'center',\n    gap: '8px',\n    cursor: 'grab',\n    minWidth: 0,\n    minHeight: 0,\n    '*:hover > &': {\n      backgroundColor: transparency(darkTheme ? black : white, 0.5).rgba,\n      'span:last-child': {\n        opacity: 1,\n      },\n      span: {\n        color: transparency(darkTheme ? white : black, boldOpacity).rgba,\n      },\n      'span:last-child span': {\n        mixBlendMode: 'initial',\n        color: cssVar('magicNumberTextColor'),\n      },\n    },\n  });\n","import { SmartRefDragCallback } from '@decipad/editor-utils';\nimport {\n  useEditorStylesContext,\n  useThemeFromStore,\n} from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ReactNode, useState } from 'react';\nimport { Counter } from '../../atoms';\nimport { Chevron } from '../../icons';\nimport {\n  black,\n  normalOpacity,\n  p14Bold,\n  smallestDesktop,\n  strongOpacity,\n  transparency,\n  white,\n} from '../../primitives';\nimport { hideOnPrint } from '../../styles/editor-layout';\nimport { AvailableSwatchColor, Swatch, swatchesThemed } from '../../utils';\nimport { NumberCatalogHeading } from './NumberCatalogHeading';\nimport { NumberCatalogItem } from './NumberCatalogItem';\n\ntype NumberCatalogItemType = {\n  name: string;\n  blockId: string;\n  type: 'h2' | 'h3' | 'var';\n};\n\ninterface NumberCatalogProps {\n  onDragStart: SmartRefDragCallback;\n  onDragEnd: (e: React.DragEvent) => void;\n  items: NumberCatalogItemType[];\n  alignment?: 'right' | 'left';\n  startCollapsed?: boolean;\n}\n\nexport const NumberCatalog = ({\n  onDragStart,\n  onDragEnd,\n  items = [],\n  alignment = 'left',\n  startCollapsed = true,\n}: NumberCatalogProps) => {\n  const [collapsed, setCollapsed] = useState(startCollapsed);\n  const { color } = useEditorStylesContext();\n  const [darkTheme] = useThemeFromStore();\n  const baseSwatches = swatchesThemed(darkTheme);\n\n  function getNumberCatalogItemComponent(\n    item: NumberCatalogItemType\n  ): ReactNode {\n    switch (item.type) {\n      case 'h2':\n        return (\n          <NumberCatalogHeading key={item.blockId} {...item} headingLevel={2} />\n        );\n\n      case 'h3':\n        return (\n          <NumberCatalogHeading key={item.blockId} {...item} headingLevel={3} />\n        );\n      case 'var':\n        return (\n          <NumberCatalogItem\n            key={item.blockId}\n            name={item.name}\n            color={color}\n            blockId={item.blockId}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          />\n        );\n    }\n  }\n\n  if (!items.length) {\n    return null;\n  }\n\n  const handleCollapsedClick = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <div\n      css={[\n        floatyStyles,\n        hideOnPrint,\n        alignment === 'left' ? css({ left: '32px' }) : css({ right: '-12px' }),\n      ]}\n    >\n      <div\n        css={numberCatalogMenuStyles(\n          color as AvailableSwatchColor,\n          baseSwatches\n        )}\n      >\n        <div\n          css={[\n            gridHeaderNumberCatStyles,\n            collapsed\n              ? css({\n                  borderBottomLeftRadius: borderRadius,\n                  borderBottomRightRadius: borderRadius,\n                })\n              : null,\n          ]}\n          onClick={handleCollapsedClick}\n        >\n          <div css={menuHeaderStyles}>\n            <span css={numberFontStyles(darkTheme)}>Numbers</span>\n\n            <span\n              css={css({\n                marginLeft: '6px',\n              })}\n            >\n              <Counter\n                variant\n                n={items.filter((item) => item.type === 'var').length}\n              ></Counter>\n            </span>\n          </div>\n          <div\n            css={[\n              menuHeaderChevronStyles,\n              {\n                'svg > path': {\n                  stroke: baseSwatches[color as AvailableSwatchColor].rgb,\n                  fill: baseSwatches[color as AvailableSwatchColor].rgb,\n                },\n              },\n            ]}\n          >\n            <Chevron type={collapsed ? 'expand' : 'collapse'} />\n          </div>\n        </div>\n        <div\n          css={[\n            menuBodyStyles(darkTheme),\n            collapsed ? css({ display: 'none' }) : null,\n          ]}\n        >\n          {items.map((item) => getNumberCatalogItemComponent(item))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst floatyStyles = css({\n  position: 'fixed',\n  width: '300px',\n  top: '80px',\n  display: 'block',\n  alignItems: 'center',\n  [`@media (max-width: ${smallestDesktop.landscape.width}px)`]: {\n    display: 'none',\n  },\n  zIndex: 2,\n});\n\nconst borderRadius = '16px';\n\nconst gridHeaderNumberCatStyles = css({\n  display: 'grid',\n  gridTemplateColumns: 'auto 32px',\n  gridColumnGap: '16px',\n});\n\nconst numberCatalogMenuStyles = (\n  color: AvailableSwatchColor,\n  baseSwatches: Swatch\n) =>\n  css({\n    borderRadius,\n    backgroundColor: transparency(baseSwatches[color], 0.4).rgba,\n\n    padding: '8px',\n    width: '300px',\n    userSelect: 'none',\n  });\n\nconst menuHeaderStyles = css({\n  ...p14Bold,\n  padding: '11px 15px 9px',\n  borderRadius,\n  borderBottomLeftRadius: 0,\n  borderBottomRightRadius: 0,\n});\n\nconst menuHeaderChevronStyles = css({\n  padding: '14.5px 12px',\n});\n\nconst numberFontStyles = (darkTheme: boolean) =>\n  css({\n    color: transparency(darkTheme ? white : black, normalOpacity).rgba,\n  });\n\nconst menuBodyStyles = (darkTheme: boolean) =>\n  css({\n    backgroundColor: transparency(\n      darkTheme ? black : white,\n      darkTheme ? normalOpacity : strongOpacity\n    ).rgba,\n    borderRadius: '10px',\n    maxHeight: '54vh',\n    minHeight: '40px',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n  });\n","import { AutocompleteName } from '@decipad/computer';\n\nexport const acceptableNumberCatalogKinds = new Set([\n  'boolean',\n  'date',\n  'number',\n  'string',\n  'range',\n  'table',\n]);\n\nexport const selectCatalogNames = (\n  items: AutocompleteName[]\n): Array<AutocompleteName> =>\n  items.filter(\n    ({ kind, type, name, blockId }) =>\n      kind === 'variable' &&\n      name &&\n      blockId &&\n      acceptableNumberCatalogKinds.has(type.kind)\n  );\n","import { H2Element, H3Element, MyEditor, MyValue } from '@decipad/editor-types';\nimport {\n  ELEMENT_H2,\n  ELEMENT_H3,\n  findNode,\n  getParentNode,\n} from '@udecode/plate';\nimport { NodeEntry } from 'slate';\n\nconst searchNodeTypes = new Set([ELEMENT_H2, ELEMENT_H3]);\n\nexport const findParent = (\n  editor: MyEditor,\n  entry: NodeEntry<MyValue[number]>\n): NodeEntry<H2Element | H3Element> | undefined => {\n  const [node, path] = entry;\n  if (path.length > 1) {\n    const parent = getParentNode(editor, path);\n    if (parent) {\n      return findParent(editor, parent as NodeEntry<MyValue[number]>);\n    }\n  }\n  // root element\n  if (searchNodeTypes.has(node.type)) {\n    return entry as NodeEntry<H2Element | H3Element>;\n  }\n  const before = path[path.length - 1] - 1;\n  if (before >= 0) {\n    const searchAbove = [...path.slice(0, -1), before];\n    const above = findNode(editor, { at: searchAbove, block: true });\n    if (above) {\n      return findParent(editor, above as NodeEntry<MyValue[number]>);\n    }\n  }\n  return undefined;\n};\n","import { MyEditor, MyValue } from '@decipad/editor-types';\nimport { findNode, getNodeString } from '@udecode/plate';\nimport { NodeEntry, Path } from 'slate';\nimport { CatalogHeadingItem, CatalogItems, CatalogItemVar } from './types';\nimport { findParent } from './findParent';\n\nconst insertInOrder = (\n  items: CatalogItems,\n  heading: CatalogHeadingItem,\n  name: CatalogItemVar\n): CatalogItems => {\n  let insertAt = -1;\n  let found = false;\n  while (insertAt < items.length && !found) {\n    insertAt += 1;\n    const current = items[insertAt];\n    if (\n      !current ||\n      (current.type !== 'var' && Path.isAfter(current.path, heading.path))\n    ) {\n      found = true;\n    }\n  }\n  while (items[insertAt]?.type === 'var') {\n    insertAt += 1;\n  }\n  return [...items.slice(0, insertAt), heading, name, ...items.slice(insertAt)];\n};\n\nconst catalogItem =\n  (editor: MyEditor) =>\n  (curr: CatalogItems, name: CatalogItemVar): CatalogItems => {\n    const entry = findNode(editor, {\n      at: [],\n      match: { id: name.blockId },\n    });\n    if (!entry) {\n      return [...curr, name];\n    }\n    const parent = findParent(editor, entry as NodeEntry<MyValue[number]>);\n    if (!parent) {\n      return [...curr, name];\n    }\n\n    const [parentNode, parentPath] = parent;\n    const parentIndex = curr.findIndex((el) => el.blockId === parentNode.id);\n    if (parentIndex < 0) {\n      return insertInOrder(\n        curr,\n        {\n          type: parentNode.type,\n          blockId: parentNode.id,\n          name: getNodeString(parentNode),\n          path: parentPath,\n        },\n        name\n      );\n    }\n    let insertAtIndex = parentIndex + 1;\n    while (curr[insertAtIndex]?.type === 'var') {\n      insertAtIndex += 1;\n    }\n    return [\n      ...curr.slice(0, insertAtIndex),\n      name,\n      ...curr.slice(insertAtIndex),\n    ];\n  };\n\nexport const catalogItems =\n  (editor: MyEditor) =>\n  (names: CatalogItemVar[]): CatalogItems =>\n    names.reduce<CatalogItems>(catalogItem(editor), []);\n","import { AutocompleteName } from '@decipad/computer';\nimport { getDefined } from '@decipad/utils';\nimport { CatalogItemVar } from './types';\n\nexport const toVar = (name: AutocompleteName): CatalogItemVar => ({\n  type: 'var',\n  name: name.name,\n  blockId: getDefined(name.blockId),\n});\n","import { useTEditorRef } from '@decipad/editor-types';\nimport { onDragStartSmartRef } from '@decipad/editor-utils';\nimport { EditorChangeContext, useComputer } from '@decipad/react-contexts';\nimport { NumberCatalog as UINumberCatalog } from '@decipad/ui';\nimport {\n  ComponentProps,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { dequal } from 'dequal';\nimport {\n  combineLatestWith,\n  concat,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  of,\n} from 'rxjs';\nimport { selectCatalogNames } from './selectCatalogNames';\nimport { catalogItems } from './catalogItems';\nimport { toVar } from './toVar';\nimport { useOnDragEnd } from '../utils/useDnd';\n\nconst debounceEditorChangesMs = 1_000;\n\nexport function NumberCatalog() {\n  const editor = useTEditorRef();\n  const onDragStart = useMemo(() => onDragStartSmartRef(editor), [editor]);\n  const onDragEnd = useOnDragEnd();\n\n  const computer = useComputer();\n\n  const [items, setItems] = useState<\n    ComponentProps<typeof UINumberCatalog>['items']\n  >([]);\n\n  const editorChanges = useContext(EditorChangeContext);\n\n  useEffect(() => {\n    const catalog = catalogItems(editor);\n    const editorChanges$ = concat(of(undefined), editorChanges);\n    const sub = editorChanges$\n      .pipe(\n        combineLatestWith(\n          concat(\n            of(undefined),\n            computer.getNamesDefined$.observeWithSelector(selectCatalogNames)\n          )\n        ),\n        debounceTime(debounceEditorChangesMs),\n        map(([, e]) => Array.isArray(e) && e.map(toVar)),\n        filter(Boolean),\n        map(catalog),\n        distinctUntilChanged((cur, next) => dequal(cur, next))\n      )\n      .subscribe(setItems);\n\n    return () => sub.unsubscribe();\n  }, [computer, editor, editorChanges]);\n\n  return (\n    <UINumberCatalog\n      items={items}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    />\n  );\n}\n","import { useIsBlockActive } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { cssVar, setCssVar } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\nconst verticalPadding = '6px';\n\nconst styles = css(\n  blockAlignment.blockquote.typography,\n  setCssVar('currentTextColor', cssVar('weakTextColor')),\n  {\n    padding: `${verticalPadding} 30px ${verticalPadding} 12px`,\n    borderLeft: `4px solid ${cssVar('highlightColor')}`,\n    wordBreak: 'break-word',\n  }\n);\n\nconst activeStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  boxShadow: `0px 0px 0px 100vmin ${cssVar('highlightColor')}`,\n  clipPath: `inset(0 -8px 0 -8px round 8px)`,\n});\n\ninterface BlockquoteProps {\n  readonly children: ReactNode;\n}\n\nexport const Blockquote = ({\n  children,\n}: BlockquoteProps): ReturnType<React.FC> => {\n  const isBlockActive = useIsBlockActive();\n  return (\n    <blockquote css={[styles, isBlockActive && activeStyles]}>\n      {children}\n    </blockquote>\n  );\n};\n","import {\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_CODE_LINE,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_PARAGRAPH,\n  MyEditor,\n} from '@decipad/editor-types';\nimport { focusEditor, setNodes } from '@udecode/plate';\nimport { Path } from 'slate';\n\nexport const defaultTextConversions: { title: string; value: string }[] = [\n  { title: 'Calculation', value: ELEMENT_CODE_LINE },\n  { title: 'Callout', value: ELEMENT_CALLOUT },\n  { title: 'Heading', value: ELEMENT_H2 },\n  { title: 'Sub-heading', value: ELEMENT_H3 },\n  { title: 'Paragraph', value: ELEMENT_PARAGRAPH },\n  { title: 'Quote', value: ELEMENT_BLOCKQUOTE },\n];\n\nexport const defaultConvertInto =\n  (editor: MyEditor, at?: Path) => (value: string) => {\n    setNodes(editor, { type: value }, { at });\n    focusEditor(editor);\n  };\n","import { MyElement, useTEditorRef } from '@decipad/editor-types';\nimport {\n  defaultConvertInto,\n  defaultTextConversions,\n} from '@decipad/editor-utils';\nimport { findNodePath } from '@udecode/plate';\nimport { useMemo } from 'react';\n\nexport const useTurnIntoProps = (element: MyElement) => {\n  const editor = useTEditorRef();\n\n  const onTurnInto = useMemo(\n    () => defaultConvertInto(editor, findNodePath(editor, element)),\n    [editor, element]\n  );\n  const turnInto = useMemo(\n    () => defaultTextConversions.filter(({ value }) => value !== element.type),\n    [element]\n  );\n\n  return {\n    onTurnInto,\n    turnInto,\n  };\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { Blockquote as UIBlockquote } from '@decipad/ui';\nimport { DraggableBlock } from '../block-management';\nimport { useTurnIntoProps } from '../utils';\n\nexport const Blockquote: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  assertElementType(element, 'blockquote');\n  const turnIntoProps = useTurnIntoProps(element);\n\n  return (\n    <DraggableBlock\n      blockKind=\"blockquote\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n    >\n      <UIBlockquote>{children}</UIBlockquote>\n    </DraggableBlock>\n  );\n};\n","import {\n  useIsEditorReadOnly,\n  useThemeFromStore,\n} from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport * as icons from '../../icons';\nimport { IconPopover } from '../../molecules/IconPopover/IconPopover';\nimport { cssVar, setCssVar, transparency } from '../../primitives';\nimport { blockAlignment } from '../../styles';\nimport { AvailableSwatchColor, swatchesThemed, UserIconKey } from '../../utils';\n\nconst { callout } = blockAlignment;\n\nconst verticalPadding = '12px';\n\nconst styles = css(\n  callout.typography,\n  setCssVar('currentTextColor', cssVar('weakTextColor')),\n  {\n    borderRadius: '12px',\n\n    display: 'grid',\n    gridTemplateColumns: '16px 1fr',\n    gridGap: '16px',\n\n    margin: `0`,\n    padding: `${verticalPadding} 16px`,\n  }\n);\n\nconst iconWrapperStyles = css({\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n  alignItems: 'center',\n  display: 'grid',\n  height: `calc(${callout.typography?.fontSize} * ${callout.typography?.lineHeight})`,\n  width: '16px',\n  mixBlendMode: 'luminosity',\n});\n\ninterface CalloutProps {\n  readonly children: ReactNode;\n  readonly icon?: UserIconKey;\n  readonly color?: AvailableSwatchColor;\n  readonly saveIcon?: (newIcon: UserIconKey) => void;\n  readonly saveColor?: (newColor: AvailableSwatchColor) => void;\n}\n\nexport const Callout = ({\n  children,\n  icon = 'Announcement',\n  color = 'Malibu',\n  saveIcon = noop,\n  saveColor = noop,\n}: CalloutProps): ReturnType<FC> => {\n  const Icon = icons[icon];\n  const [darkTheme] = useThemeFromStore();\n  return (\n    <p\n      css={[\n        styles,\n        {\n          backgroundColor: transparency(swatchesThemed(darkTheme)[color], 0.4)\n            .rgba,\n          color: cssVar('weakTextColor'),\n        },\n      ]}\n    >\n      {useIsEditorReadOnly() ? (\n        <span css={iconWrapperStyles}>\n          <Icon />\n        </span>\n      ) : (\n        <IconPopover\n          color={color}\n          trigger={\n            <button css={iconWrapperStyles}>\n              <Icon />\n            </button>\n          }\n          onChangeColor={saveColor}\n          onChangeIcon={saveIcon}\n        />\n      )}\n      <em>{children}</em>\n    </p>\n  );\n};\n","import {\n  ELEMENT_CALLOUT,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n} from '@decipad/editor-utils';\nimport { useEditorStylesContext } from '@decipad/react-contexts';\nimport { Callout as UICallout } from '@decipad/ui';\nimport { AvailableSwatchColor, UserIconKey } from 'libs/ui/src/utils';\nimport { DraggableBlock } from '../block-management';\nimport { useTurnIntoProps } from '../utils';\n\nexport const Callout: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_CALLOUT);\n\n  const editor = useTEditorRef();\n\n  const saveIcon = useElementMutatorCallback(editor, element, 'icon');\n  const saveColor = useElementMutatorCallback(editor, element, 'color');\n  const { color: defaultColor } = useEditorStylesContext();\n\n  const turnIntoProps = useTurnIntoProps(element);\n\n  return (\n    <DraggableBlock\n      blockKind=\"callout\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n    >\n      <UICallout\n        icon={element.icon as UserIconKey}\n        color={(element.color ?? defaultColor) as AvailableSwatchColor}\n        saveIcon={saveIcon}\n        saveColor={saveColor}\n      >\n        {children}\n      </UICallout>\n    </DraggableBlock>\n  );\n};\n","import { Divider as UIDivider } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\nimport { DraggableBlock } from '../block-management';\n\nexport const Divider: PlateComponent = ({ attributes, element, children }) => {\n  if (!element) {\n    throw new Error('Divider is not a leaf');\n  }\n\n  return (\n    <DraggableBlock\n      blockKind=\"divider\"\n      element={element}\n      contentEditable={false}\n      {...attributes}\n    >\n      {children}\n      <UIDivider />\n    </DraggableBlock>\n  );\n};\n","import { useIsBlockActive } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { cssVar } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\nconst styles = css(blockAlignment.heading1.typography, {\n  wordBreak: 'break-word',\n});\n\nconst activeStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  boxShadow: `0px 0px 0px 100vmin ${cssVar('highlightColor')}`,\n  clipPath: `inset(0 -8px 0 -8px round 8px)`,\n});\n\ninterface Heading1Props {\n  readonly children: ReactNode;\n  readonly Heading: 'h2';\n  readonly id: string;\n}\n\nexport const Heading1 = ({\n  children,\n  Heading,\n  id,\n}: Heading1Props): ReturnType<React.FC> => {\n  const isBlockActive = useIsBlockActive();\n  return (\n    <Heading id={id} css={[styles, isBlockActive && activeStyles]}>\n      {children}\n    </Heading>\n  );\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { Heading1 as UIHeading1 } from '@decipad/ui';\nimport { DraggableBlock } from '../block-management';\nimport { useTurnIntoProps } from '../utils';\n\nexport const Heading1: PlateComponent = ({ attributes, children, element }) => {\n  if (!element) {\n    throw new Error('Heading1 is not a leaf');\n  }\n\n  const turnIntoProps = useTurnIntoProps(element);\n\n  return (\n    <DraggableBlock\n      blockKind=\"heading1\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n    >\n      <UIHeading1 id={element.id} Heading=\"h2\">\n        {children}\n      </UIHeading1>\n    </DraggableBlock>\n  );\n};\n","import { useIsBlockActive } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { cssVar } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\nconst styles = css(blockAlignment.heading2.typography, {\n  wordBreak: 'break-word',\n});\n\nconst activeStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  boxShadow: `0px 0px 0px 100vmin ${cssVar('highlightColor')}`,\n  clipPath: `inset(0 -8px 0 -8px round 8px)`,\n});\n\ninterface Heading2Props {\n  readonly children: ReactNode;\n  readonly Heading: 'h3';\n  readonly id: string;\n}\n\nexport const Heading2 = ({\n  children,\n  Heading,\n  id,\n}: Heading2Props): ReturnType<React.FC> => {\n  const isBlockActive = useIsBlockActive();\n  return (\n    <Heading id={id} css={[styles, isBlockActive && activeStyles]}>\n      {children}\n    </Heading>\n  );\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { Heading2 as UIHeading2 } from '@decipad/ui';\nimport { DraggableBlock } from '../block-management';\nimport { useTurnIntoProps } from '../utils';\n\nexport const Heading2: PlateComponent = ({ attributes, children, element }) => {\n  if (!element) {\n    throw new Error('Heading2 is not a leaf');\n  }\n\n  const turnIntoProps = useTurnIntoProps(element);\n\n  return (\n    <DraggableBlock\n      blockKind=\"heading2\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n    >\n      <UIHeading2 id={element.id} Heading=\"h3\">\n        {children}\n      </UIHeading2>\n    </DraggableBlock>\n  );\n};\n","import { ELEMENT_LINK, PlateComponent } from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { Link as UILink } from '@decipad/ui';\nimport { useLink } from '@udecode/plate';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\n\nexport const Link: PlateComponent = (props) => {\n  const { children, element } = props;\n  assertElementType(element, ELEMENT_LINK);\n  const readOnly = useIsEditorReadOnly();\n\n  const htmlProps = useLink({\n    ...(props as any),\n    onClick: (e) => !readOnly && e.preventDefault(),\n  });\n\n  return <UILink {...htmlProps}>{children}</UILink>;\n};\n","import { css } from '@emotion/react';\nimport {\n  ElementAttributes,\n  InlineNumberElement,\n  PlateComponent,\n} from '@decipad/editor-types';\nimport { getDefined } from '@decipad/utils';\nimport { brand700, CodeResult, cssVar } from '@decipad/ui';\nimport { useComputer, useShadowCodeLine } from '@decipad/react-contexts';\nimport { useMergedRef } from '@decipad/ui/src/hooks/useMergedRef';\nimport { useSelected } from 'slate-react';\nimport { useCallback } from 'react';\n\nexport const InlineNumber: PlateComponent = ({\n  attributes,\n  children,\n  ...rest\n}) => {\n  const element = getDefined(rest?.element as InlineNumberElement);\n  const blockId = element.id;\n\n  const elementRef = (attributes as ElementAttributes).ref;\n\n  const calcId = element.blockId || '';\n  const result = useComputer().getBlockIdResult$.use(calcId);\n\n  const isSelected = useSelected();\n  const shadow = useShadowCodeLine(element.id);\n\n  const { editSource } = shadow;\n\n  const openEditor = useCallback(() => {\n    editSource(calcId, element);\n  }, [editSource, element, calcId]);\n\n  return (\n    <>\n      <span\n        {...attributes}\n        id={blockId}\n        data-highlight-changes\n        onClick={openEditor}\n        css={css(containerStyle, [\n          isSelected && selectedStyle,\n          shadow.isEditing && { cursor: 'pointer' },\n        ])}\n        data-testid=\"inline-number-element\"\n        ref={useMergedRef(shadow.numberRef, elementRef)}\n      >\n        {result?.result ? (\n          <span contentEditable={false}>\n            <CodeResult {...result.result} element={element} />\n          </span>\n        ) : (\n          '...'\n        )}\n        {children}\n      </span>\n      {shadow.portal}\n    </>\n  );\n};\n\nconst containerStyle = css({\n  borderRadius: '9px',\n  color: brand700.rgb,\n  paddingLeft: '6px',\n  paddingRight: '6px',\n});\n\nconst selectedStyle = css({\n  backgroundColor: `${cssVar('highlightColor')}`,\n});\n","import { PlateComponent } from '@decipad/editor-types';\n\nexport const ListItem: PlateComponent = ({ attributes, children }) => {\n  return <div {...attributes}>{children}</div>;\n};\n","import { useIsBlockActive } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { cssVar } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\nconst styles = css(blockAlignment.list.typography);\n\nconst activeStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  boxShadow: `0px 0px 0px 100vmin ${cssVar('highlightColor')}`,\n  clipPath: 'inset(-2px -8px -2px -8px round 8px)',\n});\n\ntype ListItemContentProps = {\n  readonly children?: ReactNode;\n};\nexport const ListItemContent = ({\n  children,\n}: ListItemContentProps): ReturnType<FC> => {\n  const isBlockActive = useIsBlockActive();\n  return <div css={[styles, isBlockActive && activeStyles]}>{children}</div>;\n};\n","import { ListItemContent as UIListItemContent } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\n\nexport const ListItemContent: PlateComponent = ({ attributes, children }) => {\n  return (\n    <div {...attributes}>\n      <UIListItemContent>{children}</UIListItemContent>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { p16Bold } from '../../primitives';\n\nconst styles = css(p16Bold, { fontStyle: 'inherit' });\n\ninterface BoldProps {\n  readonly children: ReactNode;\n}\nexport const Bold = ({ children }: BoldProps): ReturnType<React.FC> => {\n  return <span css={styles}>{children}</span>;\n};\n","import { Bold as UIBold } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\n\nexport const Bold: PlateComponent = ({ attributes, children }) => {\n  return (\n    <span {...attributes}>\n      <UIBold>{children}</UIBold>\n    </span>\n  );\n};\n","import { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { codeBlock } from '../../styles';\n\nconst styles = css(codeBlock.variableStyles, {\n  padding: `4px`,\n\n  borderRadius: '4px',\n});\n\ninterface InlineCodeProps {\n  readonly children: ReactNode;\n}\nexport const InlineCode = ({\n  children,\n}: InlineCodeProps): ReturnType<React.FC> => {\n  return <code css={styles}>{children}</code>;\n};\n","import { InlineCode } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\n\nexport const Code: PlateComponent = ({ attributes, children }) => {\n  return (\n    <span {...attributes}>\n      <InlineCode>{children}</InlineCode>\n    </span>\n  );\n};\n","import { CSSObject } from '@emotion/react';\nimport { cssVar, setCssVar } from '../primitives';\n\nexport const highlightStyles: CSSObject = {\n  ...setCssVar('currentTextColor', cssVar('strongTextColor')),\n};\n","import { useThemeFromStore } from '@decipad/react-contexts';\nimport { AvailableSwatchColor, Swatch, swatchesThemed } from '@decipad/ui';\nimport { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport {\n  normalOpacity,\n  strongOpacity,\n  transparency,\n  weakOpacity,\n} from '../../primitives';\nimport { highlight } from '../../styles';\n\nconst styles = (color: AvailableSwatchColor, baseSwatches: Swatch) => {\n  return css(highlight.highlightStyles, {\n    borderRadius: '0.9em 0.3em',\n    margin: '0 -0.45em',\n    padding: '0.15em 0.45em',\n    background: 'transparent',\n    boxDecorationBreak: 'clone',\n    webkitBoxDecorationBreak: 'clone',\n    backgroundImage: `linear-gradient(\n    to right,\n    ${transparency(baseSwatches[color], weakOpacity).rgba},\n    ${transparency(baseSwatches[color], strongOpacity).rgba} 5%,\n    ${transparency(baseSwatches[color], normalOpacity).rgba}\n  )`,\n  });\n};\n\ninterface HighlightProps {\n  readonly children: ReactNode;\n  readonly color?: AvailableSwatchColor;\n}\nexport const Highlight = ({\n  children,\n  color = 'Sun',\n}: HighlightProps): ReturnType<React.FC> => {\n  const [darkTheme] = useThemeFromStore();\n  const baseSwatches = swatchesThemed(darkTheme);\n  return <span css={styles(color, baseSwatches)}>{children}</span>;\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { useEditorStylesContext } from '@decipad/react-contexts';\nimport { AvailableSwatchColor, Highlight as UIHighlight } from '@decipad/ui';\n\nexport const Highlight: PlateComponent = ({ attributes, children }) => {\n  const { color: defaultColor } = useEditorStylesContext();\n\n  return (\n    <span {...attributes}>\n      <UIHighlight color={defaultColor as AvailableSwatchColor}>\n        {children}\n      </UIHighlight>\n    </span>\n  );\n};\n","import { css } from '@emotion/react';\nimport { ReactNode } from 'react';\n\nconst styles = css({ fontStyle: 'italic' });\n\ninterface ItalicProps {\n  readonly children: ReactNode;\n}\nexport const Italic = ({ children }: ItalicProps): ReturnType<React.FC> => {\n  return <span css={styles}>{children}</span>;\n};\n","import { Italic as UIItalic } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\n\nexport const Italic: PlateComponent = ({ attributes, children }) => {\n  return (\n    <span {...attributes}>\n      <UIItalic>{children}</UIItalic>\n    </span>\n  );\n};\n","import { Result } from '@decipad/computer';\nimport { AnyElement } from '@decipad/editor-types';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { Loading } from '../../icons';\nimport { CodeResult } from '../../organisms';\nimport { cssVar } from '../../primitives';\nimport { resultBubbleStyles } from '../../styles/results';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\ntype MagicNumberProps = {\n  readonly tempId?: string;\n  readonly result?: Result.Result | undefined;\n  readonly loadingState?: boolean;\n  readOnly?: boolean;\n  readonly onClick?: () => void;\n  readonly setPointyStyles?: boolean;\n  readonly expression?: string;\n  readonly element?: AnyElement;\n};\n\nconst wrapperStyles = css({\n  display: 'inline-flex',\n  cursor: 'pointer',\n});\n\nconst highlightStyles = css(resultBubbleStyles, {\n  display: 'inline-block',\n  color: cssVar('magicNumberTextColor'),\n  padding: '1px 6px 0px 6px',\n  lineHeight: '1.3',\n  '@media print': {\n    color: 'unset',\n  },\n});\n\nconst formulaHeaderStyles = css({\n  textAlign: 'center',\n});\n\nconst expressionStyles = css({\n  textAlign: 'center',\n});\n\ninterface ResultResultProps {\n  children?: ReactNode;\n  readOnly: boolean;\n  expression?: string;\n}\n\nconst IntrospectMagicNumber: FC<ResultResultProps> = ({\n  expression,\n  readOnly,\n  children,\n}) => {\n  return (\n    <Tooltip trigger={<span>{children}</span>}>\n      {expression?.startsWith('exprRef_') && !readOnly ? (\n        <p>Click to edit</p>\n      ) : readOnly ? (\n        `Live Result`\n      ) : (\n        // legacy magic numbers catch\n        <span>\n          <h2 css={formulaHeaderStyles}>Formula:</h2>\n          <code css={expressionStyles}>{expression}</code>\n        </span>\n      )}\n    </Tooltip>\n  );\n};\n\nexport const MagicNumber = ({\n  tempId,\n  result,\n  loadingState = false,\n  readOnly = false,\n  onClick = noop,\n  expression,\n  element,\n}: MagicNumberProps): ReturnType<React.FC> => {\n  const hasResult = !!result && !loadingState;\n  const noEffectOnClick = useEventNoEffect(onClick);\n\n  return (\n    <span\n      onClick={readOnly ? noop : noEffectOnClick}\n      css={[wrapperStyles]}\n      data-number-id={tempId}\n      id={tempId}\n      data-testid=\"magic-number\"\n    >\n      <span\n        title={result ? result.value?.toString() : 'Loading'}\n        contentEditable={false}\n      >\n        <IntrospectMagicNumber expression={expression} readOnly={readOnly}>\n          {hasResult ? (\n            <span css={highlightStyles}>\n              <CodeResult\n                tooltip={false}\n                variant=\"inline\"\n                {...result}\n                element={element}\n              />\n            </span>\n          ) : (\n            <span\n              css={css({\n                paddingTop: '3px',\n                minHeight: '19px',\n                display: 'inline-block',\n                margin: 'auto',\n                '> svg': { height: '16px', display: 'block', margin: '0 auto' },\n              })}\n            >\n              <Loading />\n            </span>\n          )}\n        </IntrospectMagicNumber>\n      </span>\n    </span>\n  );\n};\n","import { MyElement, PlateComponent, RichText } from '@decipad/editor-types';\nimport {\n  useComputer,\n  useEditorSelector,\n  useIsEditorReadOnly,\n  useResult,\n  useShadowCodeLine,\n} from '@decipad/react-contexts';\nimport { MagicNumber as UIMagicNumber } from '@decipad/ui';\nimport { css } from '@emotion/react';\nimport { Element } from 'slate';\nimport { findNodePath, getNodeString } from '@udecode/plate';\nimport { useCallback } from 'react';\nimport { getAboveNodeSafe, magicNumberId } from '@decipad/editor-utils';\nimport { getDefined } from '@decipad/utils';\nimport { isFlagEnabled } from '@decipad/feature-flags';\n\nexport const MagicNumber: PlateComponent = ({\n  attributes,\n  element,\n  text: _text,\n  children,\n}) => {\n  const computer = useComputer();\n  const readOnly = useIsEditorReadOnly();\n  const text = getDefined(_text);\n  const exp = getNodeString(text);\n\n  const blockId = useMagicNumberId(text);\n  const result = useResult(blockId)?.result;\n  const shadow = useShadowCodeLine(blockId);\n\n  const loadingState =\n    result?.type?.kind === 'type-error' ||\n    (result?.type?.kind === 'number' && result?.type?.unit?.[0].unit === exp);\n\n  const { editSource } = shadow;\n\n  const onClick = useCallback(() => {\n    const defBlockId = computer.getVarBlockId$.get(exp);\n\n    if (typeof defBlockId !== 'string') return;\n\n    if (isFlagEnabled('SHADOW_CODE_LINES')) {\n      editSource(defBlockId, text);\n    } else {\n      const el = document.getElementById(defBlockId);\n      el?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      el?.focus();\n    }\n  }, [computer, exp, text, editSource]);\n\n  return (\n    <span {...attributes}>\n      <span ref={shadow.numberRef}>\n        <UIMagicNumber\n          tempId={blockId}\n          loadingState={loadingState}\n          result={result}\n          expression={exp}\n          onClick={onClick}\n          readOnly={readOnly}\n          element={element}\n        />\n        {shadow.portal}\n      </span>\n      <span contentEditable={false} css={css({ display: 'none' })}>\n        {children}\n      </span>\n    </span>\n  );\n};\n\n/** Get the ID of the magic number, comprised of paragraph and index */\nfunction useMagicNumberId(text: RichText) {\n  return useEditorSelector((editor) => {\n    const path = findNodePath(editor, text);\n    if (!path) return '';\n\n    const entry = getAboveNodeSafe(editor, {\n      at: path,\n      match: (node) => Element.isElement(node),\n    });\n\n    if (!entry) return '';\n\n    return magicNumberId(entry[0] as MyElement, path[path.length - 1]);\n  });\n}\n","import { css } from '@emotion/react';\nimport { ReactNode, useState } from 'react';\nimport { cssVar } from '../../primitives';\n\nconst spoilerStyles = css({\n  backgroundColor: cssVar('spoilerColor'),\n  color: 'transparent',\n  // why you ask? because kelly put an emoji and i wanted to hide an emoji\n  textShadow: `0 0 0 ${cssVar('spoilerColor')}`,\n  borderRadius: '2px',\n  cursor: 'pointer',\n});\n\nconst milkIsSpoiledStyles = css({\n  backgroundColor: cssVar('strongHighlightColor'),\n  color: cssVar('normalTextColor'),\n  cursor: 'text',\n});\n\ninterface SpoilerProps {\n  readonly children: ReactNode;\n}\nexport const Spoiler = ({ children }: SpoilerProps): ReturnType<React.FC> => {\n  const [spoiled, isSpoiled] = useState(false);\n  return (\n    <span\n      css={[spoilerStyles, spoiled && milkIsSpoiledStyles]}\n      onClick={() => {\n        // on click spoil\n        if (!spoiled) {\n          isSpoiled(true);\n        }\n      }}\n    >\n      {children}\n    </span>\n  );\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { Spoiler as UISpoiler } from '@decipad/ui';\n\nexport const Spoiler: PlateComponent = ({ attributes, children }) => {\n  return (\n    <span {...attributes}>\n      <UISpoiler>{children}</UISpoiler>\n    </span>\n  );\n};\n","import { css } from '@emotion/react';\nimport { ReactNode } from 'react';\n\nconst styles = css({ textDecoration: 'line-through' });\n\ninterface StrikethroughProps {\n  readonly children: ReactNode;\n}\nexport const Strikethrough = ({\n  children,\n}: StrikethroughProps): ReturnType<React.FC> => {\n  return <span css={styles}>{children}</span>;\n};\n","import { Strikethrough as UIStrikethrough } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\n\nexport const Strikethrough: PlateComponent = ({ attributes, children }) => {\n  return (\n    <span {...attributes}>\n      <UIStrikethrough>{children}</UIStrikethrough>\n    </span>\n  );\n};\n","import { css } from '@emotion/react';\nimport { ReactNode } from 'react';\n\nconst styles = css({ textDecoration: 'underline' });\n\ninterface UnderlineProps {\n  readonly children: ReactNode;\n}\nexport const Underline = ({\n  children,\n}: UnderlineProps): ReturnType<React.FC> => {\n  return <span css={styles}>{children}</span>;\n};\n","import { Underline as UIUnderline } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\n\nexport const Underline: PlateComponent = ({ attributes, children }) => {\n  return (\n    <span {...attributes}>\n      <UIUnderline>{children}</UIUnderline>\n    </span>\n  );\n};\n","import { FC, ReactNode, Children } from 'react';\nimport { css } from '@emotion/react';\nimport { listItemCounter } from '../../utils';\nimport { cssVar, p16Regular, setCssVar } from '../../primitives';\n\n// Note on counters: This could just be counter-reset on the ol, counter-increment on the li::before, but Safari can't handle pseudo elements\n\nconst styles = css({\n  display: 'grid',\n  gridTemplateColumns: 'minmax(24px, auto) 1fr 0px',\n  gridAutoFlow: 'row',\n\n  rowGap: '6px',\n  columnGap: '8px',\n\n  counterReset: listItemCounter,\n  counterIncrement: listItemCounter,\n  wordBreak: 'break-word',\n});\n\nconst itemStyles = css({\n  display: 'contents',\n\n  '::before': {\n    ...p16Regular,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    textAlign: 'center',\n\n    content: `counter(${listItemCounter}) \".\"`,\n  },\n  '::after': {\n    counterIncrement: listItemCounter,\n    content: '\" \"',\n  },\n});\n\ntype OrderedListProps = {\n  readonly children?: ReactNode;\n};\nexport const OrderedList = ({ children }: OrderedListProps): ReturnType<FC> => {\n  return (\n    <ol css={styles}>\n      {Children.map(children, (child) => (\n        <li css={itemStyles}>{child}</li>\n      ))}\n    </ol>\n  );\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { OrderedList as UIOrderedList } from '@decipad/ui';\nimport { DraggableBlock } from '../block-management';\n\nexport const OrderedList: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  if (!element) {\n    throw new Error('UnorderedList is not a leaf');\n  }\n\n  return (\n    <DraggableBlock blockKind=\"list\" element={element} {...attributes}>\n      <UIOrderedList>{children}</UIOrderedList>\n    </DraggableBlock>\n  );\n};\n","import { css } from '@emotion/react';\nimport { cssVar } from '../../primitives';\n\nconst hotKeyStyle = css({\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n\n  boxSizing: 'border-box',\n  height: '24px',\n  width: '24px',\n  borderRadius: '6px',\n  border: `1px ${cssVar('strongerHighlightColor')} solid`,\n});\n\nconst slashKey = <span css={hotKeyStyle}>/</span>;\nconst equalsKey = <span css={hotKeyStyle}>=</span>;\n\nexport const ParagraphPlaceholder: React.FC = () => (\n  <>\n    Type {slashKey} for new blocks {equalsKey} to start calculation\n  </>\n);\n","import { useIsBlockActive } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { cssVar, p16Regular, setCssVar } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\nconst placeholderStyles = css({\n  cursor: 'text',\n\n  // overlap content (blinking caret) and placeholder\n  display: 'grid',\n  '> span, label': {\n    gridArea: '1 / 1',\n  },\n\n  label: {\n    ...p16Regular,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n});\n\nconst styles = css(blockAlignment.paragraph.typography, placeholderStyles, {\n  wordBreak: 'break-word',\n});\n\nconst activeStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  boxShadow: `0px 0px 0px 100vmin ${cssVar('highlightColor')}`,\n  clipPath: `inset(0 -8px 0 -8px round 8px)`,\n});\n\ninterface ParagraphProps {\n  readonly children: ReactNode;\n  /**\n   * Note: Since this is not a plain-text element like an `<input>`,\n   * it is up to the consumer to ensure the placeholder is removed\n   * when there is content in the children that it could overlap with.\n   */\n  readonly placeholder?: JSX.Element | string;\n}\n\nexport const Paragraph = ({\n  children,\n  placeholder,\n}: ParagraphProps): ReturnType<React.FC> => {\n  const isBlockActive = useIsBlockActive();\n\n  return (\n    <div\n      css={[styles, isBlockActive && activeStyles]}\n      data-testid=\"paragraph-wrapper\"\n    >\n      <label data-testid=\"paragraph-placeholder\" contentEditable={false}>\n        {placeholder}\n      </label>\n      <span data-testid=\"paragraph-content\">{children}</span>\n    </div>\n  );\n};\n","import { MyEditor, MyElement, PlateComponent } from '@decipad/editor-types';\nimport { getRangeSafe } from '@decipad/editor-utils';\nimport {\n  useEditorChangeState,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport { Paragraph as UIParagraph, ParagraphPlaceholder } from '@decipad/ui';\nimport { isElementEmpty, isSelectionExpanded } from '@udecode/plate';\nimport { Range } from 'slate';\nimport { ReactEditor } from 'slate-react';\nimport { DraggableBlock } from '../block-management';\nimport { useTurnIntoProps } from '../utils';\n\nconst isSelected = (editor: MyEditor, element: MyElement) => {\n  if (!editor.selection) {\n    return false;\n  }\n  const path = ReactEditor.findPath(editor as ReactEditor, element);\n  if (!path) {\n    return false;\n  }\n  const range = getRangeSafe(editor, path);\n  return !!(range && Range.intersection(range, editor.selection));\n};\n\nexport const Paragraph: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  if (!element) {\n    throw new Error('Paragraph is not a leaf');\n  }\n  const readOnly = useIsEditorReadOnly();\n\n  // Performance improvement as opposed to use something like `useTEditorState()`.\n  // We couldn't use `useTEditorRef()` because we need the paragraph to re-render\n  // when the amount of editor children change.\n  const showPlaceHolder = useEditorChangeState(\n    (editor) =>\n      (editor.children.length === 2 && isElementEmpty(editor, element)) ||\n      (isElementEmpty(editor, element) &&\n        isSelected(editor, element) &&\n        !isSelectionExpanded(editor)),\n    false,\n    {\n      debounceTimeMs: 0,\n    }\n  );\n\n  const placeholder =\n    readOnly || !showPlaceHolder ? undefined : <ParagraphPlaceholder />;\n\n  const turnIntoProps = useTurnIntoProps(element);\n\n  return (\n    <DraggableBlock\n      blockKind=\"paragraph\"\n      element={element}\n      {...turnIntoProps}\n      {...attributes}\n    >\n      <UIParagraph placeholder={placeholder}>{children}</UIParagraph>\n    </DraggableBlock>\n  );\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { getRange } from '@udecode/plate';\nimport { BaseRange, Location } from 'slate';\n\nexport const getRangeSafe = (\n  editor: MyEditor,\n  at: Location\n): BaseRange | undefined => {\n  try {\n    return getRange(editor, at);\n  } catch (err) {\n    // ignore\n  }\n  return undefined;\n};\n","import { css } from '@emotion/react';\nimport { ReactNode } from 'react';\nimport { cssVar, display, setCssVar } from '../../primitives';\n\nconst placeholderStyles = css({\n  cursor: 'text',\n\n  // overlap content (blinking caret) and placeholder\n  display: 'grid',\n  '> span, ::before': {\n    gridArea: '1 / 1',\n  },\n\n  '::before': {\n    ...display,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n\n    pointerEvents: 'none',\n\n    content: 'attr(aria-placeholder)',\n  },\n});\n\nconst styles = css(display, placeholderStyles, {\n  wordBreak: 'break-word',\n});\n\ninterface DisplayProps {\n  readonly children: ReactNode;\n  readonly Heading: 'h1';\n  /**\n   * Note: Since this is not a plain-text element like an `<input>`,\n   * it is up to the consumer to ensure the placeholder is removed\n   * when there is content in the children that it could overlap with.\n   */\n  readonly placeholder?: string;\n}\n\nexport const Display = ({\n  children,\n  Heading,\n  placeholder,\n}: DisplayProps): ReturnType<React.FC> => {\n  return (\n    <Heading aria-placeholder={placeholder} css={styles}>\n      <span>{children}</span>\n    </Heading>\n  );\n};\n","import { ComponentProps } from 'react';\nimport { Display, Divider } from '../../atoms';\n\nexport const EditorTitle = (\n  props: ComponentProps<typeof Display>\n): ReturnType<React.FC> => {\n  return (\n    <div\n      css={{\n        display: 'grid',\n        rowGap: '24px',\n      }}\n    >\n      <div>\n        <Display {...props} />\n      </div>\n      <div contentEditable={false}>\n        <Divider />\n      </div>\n    </div>\n  );\n};\n","import {\n  ELEMENT_H1,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { EditorBlock, EditorTitle } from '@decipad/ui';\nimport { isElementEmpty } from '@udecode/plate';\n\n// TODO Title should probably not be a part of the editor in the first place\n\nexport const Title: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_H1);\n\n  const editor = useTEditorRef();\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <EditorBlock\n      blockKind=\"title\"\n      {...attributes}\n      contentEditable={readOnly ? false : undefined}\n    >\n      <EditorTitle\n        Heading=\"h1\"\n        placeholder={\n          isElementEmpty(editor, element) && !readOnly\n            ? 'My notebook title'\n            : undefined\n        }\n      >\n        {children}\n      </EditorTitle>\n    </EditorBlock>\n  );\n};\n","import { FC, ReactNode, Children, createContext, useContext } from 'react';\nimport { css } from '@emotion/react';\nimport { cssVar, p16Regular, setCssVar } from '../../primitives';\nimport { Bullet } from '../../icons';\n\nconst Depth = createContext(0);\n\nconst styles = css({\n  display: 'grid',\n  gridTemplateColumns: '24px 1fr',\n  gridAutoFlow: 'row',\n\n  rowGap: '6px',\n  columnGap: '8px',\n\n  wordBreak: 'break-word',\n});\n\nconst itemStyles = css({\n  display: 'contents',\n});\n\nconst bulletStyles = css({\n  justifySelf: 'center',\n  // align vertically with the first line, even if the item is multiline\n  alignSelf: 'start',\n\n  width: '6px',\n  height: `calc(${p16Regular.lineHeight} * ${p16Regular.fontSize})`,\n\n  display: 'grid',\n  alignContent: 'center',\n  ...setCssVar('currentTextColor', cssVar('strongTextColor')),\n});\n\ntype UnorderedListProps = {\n  readonly children?: ReactNode;\n};\nexport const UnorderedList = ({\n  children,\n}: UnorderedListProps): ReturnType<FC> => {\n  const depth = useContext(Depth) + 1;\n\n  return (\n    <ul css={styles}>\n      <Depth.Provider value={depth}>\n        {Children.map(children, (child) => (\n          <li css={itemStyles}>\n            <span\n              role=\"presentation\"\n              contentEditable={false}\n              css={bulletStyles}\n            >\n              <Bullet depth={depth} />\n            </span>\n            {child}\n          </li>\n        ))}\n      </Depth.Provider>\n    </ul>\n  );\n};\n","import { PlateComponent } from '@decipad/editor-types';\nimport { UnorderedList as UIUnorderedList } from '@decipad/ui';\nimport { DraggableBlock } from '../block-management';\n\nexport const UnorderedList: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  if (!element) {\n    throw new Error('UnorderedList is not a leaf');\n  }\n\n  return (\n    <DraggableBlock blockKind=\"list\" element={element} {...attributes}>\n      <UIUnorderedList>{children}</UIUnorderedList>\n    </DraggableBlock>\n  );\n};\n","import {\n  ELEMENT_DATA_VIEW,\n  ELEMENT_DATA_VIEW_TR,\n  DataViewElement,\n  MyEditor,\n  ELEMENT_DATA_VIEW_CAPTION,\n  ELEMENT_DATA_VIEW_NAME,\n} from '@decipad/editor-types';\nimport { insertNodes, requirePathBelowBlock } from '@decipad/editor-utils';\nimport { findNode, focusEditor, TEditor } from '@udecode/plate';\nimport { clone } from 'lodash';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\n\nconst getInitialDataViewElement = (\n  blockId?: string,\n  varName?: string\n): DataViewElement => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_DATA_VIEW,\n    expandedGroups: [],\n    varName: blockId,\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_DATA_VIEW_CAPTION,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_DATA_VIEW_NAME,\n            children: [\n              { text: `Data view${varName ? ` for ${varName}` : ''}` },\n            ],\n          },\n        ],\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_DATA_VIEW_TR,\n        children: [],\n      },\n    ],\n  };\n};\n\nexport const insertDataViewBelow = (\n  editor: TEditor,\n  path: Path,\n  blockId?: string,\n  varName?: string\n): void => {\n  const dataView = clone(\n    getInitialDataViewElement(blockId, varName)\n  ) as unknown as DataViewElement;\n  const newPath = requirePathBelowBlock(editor, path);\n  insertNodes(editor, dataView, {\n    at: newPath,\n  });\n  setTimeout(() => {\n    const findPath = [...newPath, 0];\n    const node = findNode(editor, {\n      at: findPath,\n      block: true,\n      match: (_e, p) => Path.equals(findPath, p),\n    });\n    if (node) {\n      focusEditor(editor as MyEditor, { path: findPath, offset: 0 });\n    }\n  }, 0);\n};\n","import {\n  ElementKind,\n  elementKinds,\n  MyEditor,\n  MyElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  createPathRef,\n  createStore,\n  findNode,\n  focusEditor,\n  getNode,\n  getNodeEntries,\n  isElement,\n  moveNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { DropTargetMonitor, useDrop, XYCoord } from 'react-dnd';\nimport { Path, PathRef } from 'slate';\nimport {\n  blockSelectionActions,\n  blockSelectionSelectors,\n} from '@udecode/plate-selection';\nimport { ReactEditor } from 'slate-react';\nimport { getAnalytics } from '@decipad/client-events';\nimport {\n  dndStore as plateDndStore,\n  useDragNode,\n  UseDropNodeOptions,\n} from '@udecode/plate-ui-dnd';\n\nexport declare type DropDirection =\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | undefined;\n\ntype ChangeDropDirection = (direction: DropDirection) => void;\n\ninterface DragItemNode {\n  id: string;\n  selectedIds: Set<string>;\n  type: ElementKind;\n  [key: string]: unknown;\n}\n\ninterface Axis {\n  horizontal?: boolean;\n  vertical?: boolean;\n}\n\nexport interface UseDndNodeOptions extends Pick<UseDropNodeOptions, 'nodeRef'> {\n  accept?: UseDropNodeOptions['accept'];\n  element: MyElement;\n  previewRef?: any;\n  getAxis?: (\n    item: DragItemNode,\n    monitor: DropTargetMonitor<DragItemNode>\n  ) => Axis;\n  onDrop?: (\n    item: DragItemNode,\n    monitor: DropTargetMonitor<DragItemNode>,\n    direction: DropDirection\n  ) => void;\n}\n\nconst DEFAULT_AXIS: Axis = { horizontal: false, vertical: true };\n\nexport const dndStore = createStore('dnd')({\n  draggingIds: new Set<string>(),\n});\n\nexport const useDnd = ({\n  accept = elementKinds,\n  nodeRef,\n  element,\n  previewRef = nodeRef,\n  getAxis = () => DEFAULT_AXIS,\n  onDrop,\n}: UseDndNodeOptions) => {\n  const { id, type } = element;\n\n  const editor = useTEditorRef();\n  const elementRef = useRef<MyElement>(element);\n  elementRef.current = element;\n\n  const [dropLine, setDropLine] = useState<DropDirection>();\n\n  const [{ isDragging }, dragRef, preview] = useDragNode(editor, {\n    id,\n    type,\n    item: () => {\n      const selectedIds = blockSelectionSelectors.selectedIds();\n\n      if (blockSelectionSelectors.isSelecting() && !selectedIds.has(id)) {\n        blockSelectionActions.unselect();\n      }\n\n      return {\n        id,\n        type,\n        selectedIds,\n        // The `item` object is set only once when the component renders so we need `getPath` to be\n        // a function to account for path changes.\n        getPath: () =>\n          ReactEditor.findPath(editor as ReactEditor, elementRef.current),\n      };\n    },\n  });\n\n  useEffect(() => {\n    if (isDragging) {\n      dndStore.set.draggingIds(\n        blockSelectionSelectors.selectedIds() as Set<string>\n      );\n    } else {\n      dndStore.set.draggingIds(new Set<string>());\n    }\n  }, [isDragging]);\n\n  const [{ canDrop, isOver }, drop] = useDrop<\n    DragItemNode,\n    unknown,\n    { canDrop: boolean; isOver: boolean }\n  >(\n    {\n      accept,\n      drop: (item, monitor) => {\n        onDropNode(editor, {\n          id,\n          dragItem: item,\n          monitor,\n          onDrop,\n          direction: getDirection({\n            dragItem: item,\n            monitor,\n            nodeRef,\n            id,\n            axis: getAxis(item, monitor),\n          }),\n        });\n      },\n      collect: (monitor) => ({\n        canDrop: monitor.canDrop(),\n        isOver: monitor.isOver(),\n      }),\n      hover: (item: DragItemNode, monitor: DropTargetMonitor) => {\n        onHoverNode({\n          nodeRef,\n          id,\n          dropLine,\n          onChangeDropLine: setDropLine,\n          dragItem: item,\n          monitor,\n          axis: getAxis(item, monitor),\n        });\n      },\n      canDrop: (item, monitor) => {\n        return !!getDirection({\n          dragItem: item,\n          monitor,\n          nodeRef,\n          id,\n          axis: getAxis(item, monitor),\n        });\n      },\n    },\n    [getAxis, id, onDrop, type]\n  );\n\n  if (previewRef) {\n    drop(nodeRef);\n    preview(previewRef);\n  } else {\n    preview(drop(nodeRef));\n  }\n\n  if (!isOver && dropLine) {\n    // Cleanup if dragged item is not over this drop target anymore\n    setDropLine(undefined);\n  }\n\n  return {\n    canDrop,\n    isDragging,\n    isOver,\n    dropLine,\n    dragRef,\n  };\n};\n\nexport const onDropNode = (\n  editor: MyEditor,\n  {\n    id,\n    dragItem,\n    monitor,\n    onDrop,\n    direction,\n  }: {\n    id: MyElement['id'];\n    dragItem: DragItemNode;\n    monitor: DropTargetMonitor;\n    direction: DropDirection;\n  } & Pick<UseDndNodeOptions, 'onDrop'>\n) => {\n  if (!direction || monitor.didDrop()) {\n    // No direction or a nested target has already handled the drop.\n    return;\n  }\n\n  focusEditor(editor);\n\n  onDrop?.(dragItem, monitor, direction) ??\n    defaultMoveNode(editor, dragItem, id, direction);\n};\n\nexport const defaultMoveNode = (\n  editor: MyEditor,\n  dragItem: DragItemNode,\n  id: MyElement['id'],\n  direction: DropDirection\n) => {\n  const { selectedIds, id: dragId } = dragItem;\n  let dropId = id;\n\n  const pathRefs: PathRef[] = [];\n\n  if (selectedIds.has(dragId)) {\n    const entries = [\n      ...getNodeEntries(editor, {\n        match: (n) => isElement(n) && selectedIds.has(n.id),\n        at: [],\n      }),\n    ];\n\n    entries.forEach(([, path]) => {\n      pathRefs.push(createPathRef(editor, path));\n    });\n  } else {\n    const entry = findNode(editor, { at: [], match: { id: dragId } });\n    if (!entry) return;\n    const [, path] = entry;\n\n    pathRefs.push(createPathRef(editor, path));\n  }\n\n  withoutNormalizing(editor, () => {\n    let dropPath: Path | undefined;\n\n    pathRefs.forEach((pathRef) => {\n      const path = pathRef.unref();\n      if (!path) return;\n\n      const dragNode = getNode<MyElement>(editor, path);\n      if (!dragNode) return;\n\n      if (direction === 'bottom') {\n        dropPath = findNode(editor, { at: [], match: { id: dropId } })?.[1];\n        if (!dropPath) return;\n\n        // if dropping at the same path as the drag node, skip it\n        if (Path.equals(path, Path.next(dropPath))) {\n          const nextNode = getNode<MyElement>(editor, path);\n          if (!nextNode) return;\n\n          // the next node should be moved after it\n          dropId = nextNode.id;\n          return;\n        }\n\n        // the next node should be moved after it\n        dropId = dragNode.id;\n      }\n\n      if (direction === 'top') {\n        const nodePath = findNode(editor, {\n          at: [],\n          match: { id: dropId },\n        })?.[1];\n        if (!nodePath) return;\n\n        dropPath = [\n          ...nodePath.slice(0, -1),\n          nodePath[nodePath.length - 1] - 1,\n        ];\n\n        if (Path.equals(path, dropPath)) return;\n      }\n\n      if (!dropPath) return;\n\n      const before =\n        Path.isBefore(path, dropPath) && Path.isSibling(path, dropPath);\n      const to = before ? dropPath : Path.next(dropPath);\n\n      moveNodes(editor, {\n        at: path,\n        to,\n      });\n\n      const analytics = getAnalytics();\n      if (analytics) {\n        analytics.track('move block');\n      }\n    });\n  });\n};\n\nconst onHoverNode = ({\n  axis,\n  dragItem,\n  dropLine,\n  monitor,\n  onChangeDropLine,\n  id,\n  nodeRef,\n}: {\n  axis: Axis;\n  dragItem: DragItemNode;\n  dropLine: DropDirection;\n  monitor: DropTargetMonitor;\n  onChangeDropLine: ChangeDropDirection;\n} & Pick<UseDndNodeOptions, 'nodeRef'> &\n  Pick<MyElement, 'id'>) => {\n  const isOverCurrent = monitor.isOver({ shallow: true });\n\n  // The `onHoverNode` method is called even if `canDrop()` is false, so we need to double check if\n  // it can be dropped before doing any side effects.\n  if (!monitor.canDrop()) {\n    onChangeDropLine(undefined);\n    if (isOverCurrent) {\n      // eslint-disable-next-line no-param-reassign\n      dragItem.direction = undefined;\n    }\n    return;\n  }\n\n  const direction = getDirection({\n    dragItem,\n    monitor,\n    nodeRef,\n    id,\n    axis,\n  });\n\n  if (direction !== dropLine) {\n    onChangeDropLine(direction);\n  }\n\n  if (!isOverCurrent && dragItem.direction) {\n    onChangeDropLine(undefined);\n  }\n\n  if (isOverCurrent) {\n    // HACK: In case of nested drop targets with available directions, it avoids showing them all.\n    // By keeping track of the inner-most hovered drop target's direction, we can guarantee only\n    // this direction will be displayed to the user. Only when this target has no drop direction\n    // available will the outer target directions be displayed.\n    // eslint-disable-next-line no-param-reassign\n    dragItem.direction = direction;\n  }\n};\n\nexport const getDirection = ({\n  dragItem,\n  id,\n  monitor,\n  nodeRef,\n  axis,\n}: {\n  dragItem: DragItemNode;\n  id: string;\n  monitor: DropTargetMonitor;\n  nodeRef: any;\n  axis: Axis;\n}): DropDirection => {\n  if (!nodeRef.current) return;\n\n  const dragId = dragItem.id;\n\n  // Don't replace items with themselves\n  if (dragId === id) return;\n\n  // Determine rectangle on screen\n  const hoverBoundingRect = nodeRef.current?.getBoundingClientRect();\n\n  // Get vertical middle\n  const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n  // Determine mouse position\n  const clientOffset = monitor.getClientOffset();\n  if (!clientOffset) return;\n\n  // Get pixels to the top\n  const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n  const hoverClientLeft = (clientOffset as XYCoord).x - hoverBoundingRect.left;\n  const hoverClientRigt = hoverBoundingRect.right - (clientOffset as XYCoord).x;\n\n  // Horizontal direction is only returned up 20 pixels close to the edge.\n  if (axis.horizontal && hoverClientLeft < 20) {\n    return 'left';\n  }\n\n  if (axis.horizontal && hoverClientRigt < 20) {\n    return 'right';\n  }\n\n  // Vertical direction is returned when the mouse has crossed half of the item's height.\n  if (axis.vertical && hoverClientY < hoverMiddleY) {\n    return 'top';\n  }\n\n  if (axis.vertical && hoverClientY >= hoverMiddleY) {\n    return 'bottom';\n  }\n\n  return undefined;\n};\n\nexport const useOnDragEnd = () => {\n  return useCallback(() => plateDndStore.set.isDragging(false), []);\n};\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, MouseEvent, ReactNode, useCallback } from 'react';\nimport { cssVar } from '../../primitives';\n\ninterface DataViewTableHeaderProps {\n  children?: ReactNode;\n  hover: boolean;\n  rowSpan?: number;\n  colSpan?: number;\n  onHover?: (hover: boolean) => void;\n  alignRight?: boolean;\n  global?: boolean;\n}\n\nconst dataViewTableHeaderStyles = css({\n  textAlign: 'left',\n});\n\nconst alignRightStyles = css({\n  textAlign: 'right',\n});\n\nconst globalStyles = css({\n  color: cssVar('weakTextColor'),\n  backgroundColor: cssVar('highlightColor'),\n});\n\nexport const DataViewTableHeader: FC<DataViewTableHeaderProps> = ({\n  rowSpan,\n  colSpan,\n  children,\n  onHover = noop,\n  alignRight = false,\n  global = false,\n}) => {\n  const onMouseOver = useCallback(\n    (ev: MouseEvent) => {\n      ev.stopPropagation();\n      ev.preventDefault();\n      onHover(true);\n    },\n    [onHover]\n  );\n  const onMouseOut = useCallback(\n    (ev: MouseEvent) => {\n      ev.stopPropagation();\n      ev.preventDefault();\n      onHover(false);\n    },\n    [onHover]\n  );\n  return (\n    <th\n      rowSpan={rowSpan}\n      colSpan={colSpan}\n      onMouseOver={onMouseOver}\n      onMouseOut={onMouseOut}\n      css={[\n        dataViewTableHeaderStyles,\n        alignRight && alignRightStyles,\n        global && globalStyles,\n      ]}\n    >\n      {children}\n    </th>\n  );\n};\n","import { FC, useCallback } from 'react';\nimport {\n  CodeResult,\n  DataViewTableHeader as DataViewTableHeaderUI,\n  useEventNoEffect,\n} from '@decipad/ui';\nimport { Result, SerializedType } from '@decipad/computer';\nimport { Folder, FolderOpen } from 'libs/ui/src/icons';\nimport { css } from '@emotion/react';\nimport { AnyElement, useTEditorRef } from '@decipad/editor-types';\nimport { deselect } from '@udecode/plate';\nimport { ValueCell } from '../../types';\n\nconst iconStyles = css({\n  height: '24px',\n  width: '24px',\n});\n\ninterface DataViewTableHeaderProps {\n  type?: SerializedType;\n  value?: ValueCell;\n  rowSpan?: number;\n  colSpan?: number;\n  collapsible?: boolean;\n  onHover: (hover: boolean) => void;\n  hover: boolean;\n  alignRight?: boolean;\n  expandedGroups: string[] | undefined;\n  onChangeExpandedGroups: (collapsedGroups: string[]) => void;\n  groupId: string;\n  global?: boolean;\n  element?: AnyElement;\n}\n\nexport const DataViewHeader: FC<DataViewTableHeaderProps> = ({\n  type,\n  value,\n  rowSpan = 1,\n  colSpan = 1,\n  onHover,\n  hover,\n  alignRight,\n  expandedGroups = [],\n  onChangeExpandedGroups,\n  groupId,\n  collapsible,\n  global,\n  element,\n}) => {\n  const editor = useTEditorRef();\n  const handleCollapseGroupButtonPress = useEventNoEffect(\n    useCallback((): void => {\n      const { selection } = editor;\n      if (selection) {\n        deselect(editor);\n      }\n      const matchingGroupIndex = expandedGroups.indexOf(groupId);\n\n      if (matchingGroupIndex !== -1) {\n        return onChangeExpandedGroups(\n          expandedGroups.filter((id) => id !== groupId)\n        );\n      }\n\n      return onChangeExpandedGroups([...expandedGroups, groupId]);\n    }, [expandedGroups, editor, groupId, onChangeExpandedGroups])\n  );\n\n  if (type == null || value == null) {\n    return null;\n  }\n\n  const groupIsExpanded = !collapsible || expandedGroups.includes(groupId);\n\n  const resultWrapperStyles = css({\n    display: 'inline-flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    fontWeight: '700',\n    justifyContent: 'inherit',\n    cursor: 'pointer',\n    '&:hover': {\n      opacity: 0.5,\n    },\n  });\n\n  return (\n    <DataViewTableHeaderUI\n      hover={hover}\n      rowSpan={rowSpan}\n      colSpan={groupIsExpanded ? colSpan : 1}\n      onHover={onHover}\n      alignRight={alignRight}\n      global={global}\n    >\n      {collapsible ? (\n        <div onClick={handleCollapseGroupButtonPress} css={resultWrapperStyles}>\n          <>\n            {value != null && (\n              <CodeResult\n                value={value as Result.Result['value']}\n                variant=\"inline\"\n                type={type}\n                element={element}\n              />\n            )}\n            <span css={iconStyles}>\n              {groupIsExpanded ? <FolderOpen /> : <Folder />}\n            </span>\n          </>\n        </div>\n      ) : (\n        <CodeResult\n          value={value as Result.Result['value']}\n          variant=\"inline\"\n          type={type}\n          element={element}\n        />\n      )}\n    </DataViewTableHeaderUI>\n  );\n};\n","import { AutocompleteName } from '@decipad/computer';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode, useState } from 'react';\nimport { Label } from '../../atoms';\nimport { cssVar, p12Medium } from '../../primitives';\nimport { hideOnPrint } from '../../styles/editor-layout';\n\nconst selectFontStyles = css(p12Medium);\n\nconst hoveredStyles = css({\n  backgroundColor: cssVar('strongHighlightColor'),\n});\n\nconst selectStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  fontWeight: 'bold',\n  ':hover': { ...hoveredStyles },\n});\n\nconst unselectedValueStyles = css({\n  color: cssVar('evenStrongerHighlightColor'),\n});\n\ninterface SelectInputProps {\n  readonly labelText: string;\n  readonly children: ReactNode;\n  readonly value?: string;\n  readonly setValue: (value: string) => void;\n}\n\nconst SelectInput = ({\n  labelText,\n  children,\n  value,\n  setValue,\n}: SelectInputProps): ReturnType<FC> => {\n  const [hovered, setHovered] = useState(false);\n  return (\n    <Label\n      onHover={setHovered}\n      renderContent={(id) => (\n        <select\n          css={[\n            selectFontStyles,\n            selectStyles,\n            !value && unselectedValueStyles,\n            hovered && hoveredStyles,\n          ]}\n          id={id}\n          onChange={(ev) => {\n            setValue(ev.target.value);\n          }}\n          value={value}\n        >\n          {children}\n        </select>\n      )}\n    >\n      <span css={selectFontStyles}>{labelText}:</span>\n    </Label>\n  );\n};\n\ninterface VariableNameProps {\n  label?: string;\n  variableNames: AutocompleteName[];\n  selectedVariableName?: string;\n  onChangeVariableName: (varName: string) => void;\n}\n\nexport const VariableNameSelector: FC<VariableNameProps> = ({\n  label = 'Variable name',\n  variableNames,\n  selectedVariableName,\n  onChangeVariableName,\n}) => {\n  return (\n    <div css={hideOnPrint} contentEditable={false}>\n      <SelectInput\n        labelText={label}\n        value={selectedVariableName}\n        setValue={onChangeVariableName}\n      >\n        <option key=\"empty\" value={''}>\n          Choose...\n        </option>\n        {variableNames.map((varName) => (\n          <option key={varName.blockId} value={varName.blockId}>\n            {varName.name}\n          </option>\n        ))}\n      </SelectInput>\n    </div>\n  );\n};\n","import { AutocompleteName } from '@decipad/computer';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { Children, FC, ReactNode } from 'react';\nimport { VariableNameSelector } from '../../molecules';\nimport { cssVar, p14Regular, smallScreenQuery } from '../../primitives';\nimport { editorLayout } from '../../styles';\nimport {\n  AvailableSwatchColor,\n  TableStyleContext,\n  UserIconKey,\n} from '../../utils';\n\nconst dataViewWrapperStyles = css({\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst dataViewControlsStyles = css({\n  display: 'flex',\n  flexFlow: 'row wrap',\n});\n\nconst halfSlimBlockWidth = `${Math.round(editorLayout.slimBlockWidth / 2)}px`;\nconst totalWidth = '100vw';\nconst halfTotalWidth = '50vw';\nconst wideToSlimBlockWidthDifference = `${\n  editorLayout.wideBlockWidth - editorLayout.slimBlockWidth\n}px`;\nconst gutterWidth = '60px';\nconst leftMargin = `calc(${halfTotalWidth} - ${halfSlimBlockWidth} - ${wideToSlimBlockWidthDifference})`;\nconst restWidthBlock = `calc(${totalWidth} - ${leftMargin} - ${gutterWidth} - ${gutterWidth})`;\n\nconst tableCaptionWrapperStyles = css({\n  maxWidth: restWidthBlock,\n  display: 'inline-block',\n  [smallScreenQuery]: {\n    maxWidth: `calc(100vw - ${gutterWidth})`,\n    minWidth: '0',\n  },\n});\n\nconst dataViewTableStyles = css(p14Regular, {\n  tableLayout: 'auto',\n  'th, td': {\n    padding: '8px',\n  },\n});\n\nconst dataViewTableWrapperStyles = css({\n  transform: `translateX(calc((((100vw - 580px) / 2)) * -1 ))`,\n  width: '100vw',\n  minWidth: editorLayout.slimBlockWidth,\n  overflowX: 'auto',\n  scrollbarWidth: 'none',\n  msOverflowStyle: 'none',\n  paddingBottom: '12px',\n  position: 'relative',\n  whiteSpace: 'nowrap',\n  display: 'flex',\n  '&:hover': {\n    scrollbarWidth: 'inherit',\n    msOverflowStyle: 'inherit',\n    '&::-webkit-scrollbar-thumb': {\n      backgroundColor: cssVar('highlightColor'),\n    },\n  },\n  '&::-webkit-scrollbar': {\n    width: '100px',\n    height: '8px',\n  },\n\n  '&::-webkit-scrollbar-thumb': {\n    width: '3px',\n    height: '3px',\n    backgroundColor: 'transparent',\n    borderRadius: '8px',\n  },\n\n  '&::-webkit-scrollbar-track': {\n    backgroundColor: 'transparent',\n    height: '3px',\n  },\n\n  '&::-webkit-scrollbar-button': {\n    width: `calc((100vw - 580px)/4)`,\n  },\n\n  '&::-ms-scrollbar-thumb': {\n    width: '3px',\n    height: '3px',\n    backgroundColor: cssVar('highlightColor'),\n    borderRadius: '8px',\n  },\n\n  '&::-ms-scrollbar-track': {\n    backgroundColor: 'transparent',\n    height: '3px',\n  },\n\n  '&::-ms-scrollbar-button': {\n    width: `calc((100vw - 580px)/4)`,\n  },\n  [smallScreenQuery]: {\n    maxWidth: `calc(100vw - ${gutterWidth})`,\n    minWidth: '0',\n    transform: `translateX(0)`,\n  },\n});\n\nconst scrollRightOffset = `(((100vw - 1055px) / 2) + 200px)`;\n\nexport const tableScroll = css({\n  display: 'flex',\n  flexDirection: 'row',\n  marginLeft: '60px',\n  paddingRight: `calc(${scrollRightOffset})`,\n  [smallScreenQuery]: {\n    paddingRight: '0px',\n    marginLeft: '0px',\n  },\n});\n\nconst dataViewTableOverflowStyles = css({\n  display: 'inline-block',\n  height: '20px',\n  minWidth: `calc((100vw - 700px) / 2)`,\n});\n\ninterface DataViewProps {\n  readonly availableVariableNames: AutocompleteName[];\n  readonly variableName: string;\n  readonly icon: UserIconKey;\n  readonly color?: AvailableSwatchColor;\n  readonly onChangeVariableName?: (varName: string) => void;\n  readonly onChangeIcon?: (newIcon: UserIconKey) => void;\n  readonly onChangeColor?: (newColor: AvailableSwatchColor) => void;\n  children: ReactNode;\n  data: ReactNode;\n}\n\nexport const DataView: FC<DataViewProps> = ({\n  availableVariableNames,\n  variableName,\n  icon,\n  color,\n  onChangeVariableName = noop,\n  onChangeIcon = noop,\n  onChangeColor = noop,\n  data,\n  children,\n}): ReturnType<FC> => {\n  const [caption, thead, addNewColumnComponent] = Children.toArray(children);\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <TableStyleContext.Provider\n      value={{\n        icon,\n        color: color as AvailableSwatchColor,\n        setIcon: onChangeIcon,\n        setColor: onChangeColor,\n        hideAddDataViewButton: true,\n      }}\n    >\n      <div css={dataViewWrapperStyles} aria-roledescription=\"data view\">\n        <div css={dataViewControlsStyles}>\n          <div css={tableCaptionWrapperStyles}>{caption}</div>\n          {!readOnly && (\n            <VariableNameSelector\n              label=\"Source\"\n              variableNames={availableVariableNames}\n              selectedVariableName={variableName}\n              onChangeVariableName={onChangeVariableName}\n            />\n          )}\n        </div>\n        <div css={dataViewTableWrapperStyles} contentEditable={false}>\n          <div css={dataViewTableOverflowStyles} contentEditable={false} />\n          <div css={tableScroll}>\n            <table css={dataViewTableStyles} contentEditable={false}>\n              <thead>{thead}</thead>\n              <tbody aria-roledescription=\"data view data\">{data}</tbody>\n            </table>\n            {variableName && addNewColumnComponent}\n          </div>\n        </div>\n      </div>\n    </TableStyleContext.Provider>\n  );\n};\n","import { useEventNoEffect } from '@decipad/ui';\nimport { noop } from '@decipad/utils';\nimport { FC, PropsWithChildren } from 'react';\n\nexport const VoidBlock: FC<PropsWithChildren> = ({ children }) => {\n  const discardEvents = useEventNoEffect(noop);\n  return (\n    <div\n      contentEditable={false}\n      onClick={discardEvents}\n      onPointerDown={discardEvents}\n      onMouseDown={discardEvents}\n      onDrop={discardEvents}\n      onKeyDown={discardEvents}\n    >\n      {children}\n    </div>\n  );\n};\n","import { SerializedType } from '@decipad/language';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { ReactElement, useState } from 'react';\nimport { MenuItem } from '../../atoms';\nimport { Add } from '../../icons';\nimport { cssVar } from '../../primitives';\nimport { hideOnPrint } from '../../styles/editor-layout';\nimport { MenuList } from '../MenuList/MenuList';\nimport { getTypeIcon } from '../../utils/table';\n\n// Data\n\nexport type Column = {\n  name: string;\n  blockId?: string;\n  type: SerializedType;\n};\n\nexport interface DataViewMenuProps {\n  availableColumns: Column[] | undefined;\n  onInsertColumn: (name: string, serializedType: SerializedType) => void;\n}\n\nconst dataViewMenuWrapperStyles = css({\n  margin: '8px',\n});\n\nconst menuButtonStyles = css({\n  backgroundColor: `${cssVar('highlightColor')}`,\n  width: '36px',\n  height: '36px',\n  borderRadius: '8px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  '& svg': {\n    width: '1rem',\n    height: '1rem',\n  },\n});\n\nconst iconTypeStyles = css({\n  display: 'inline-block',\n  marginRight: '10px',\n  verticalAlign: 'middle',\n  svg: {\n    width: '16px',\n    height: '16px',\n  },\n});\n\nexport const DataViewMenu = ({\n  availableColumns,\n  onInsertColumn,\n}: DataViewMenuProps): ReactElement<DataViewMenuProps> => {\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n  const handleMenuClick = () => {\n    setMenuIsOpen(!menuIsOpen);\n  };\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <div>\n      {!readOnly &&\n        (menuIsOpen ? null : (\n          <button\n            data-testid=\"add-data-view-column-button\"\n            aria-roledescription=\"Add column\"\n            onClick={() => handleMenuClick()}\n            css={[menuButtonStyles, hideOnPrint]}\n          >\n            <Add />\n          </button>\n        ))}\n      <div css={dataViewMenuWrapperStyles}>\n        <MenuList\n          root\n          trigger={<div />}\n          open={menuIsOpen}\n          onChangeOpen={setMenuIsOpen}\n          dropdown\n        >\n          {availableColumns &&\n            availableColumns.map((availableColumn, index) => {\n              const Icon = getTypeIcon(availableColumn.type);\n\n              return (\n                <MenuItem\n                  testid={`data-view-menu-item-${availableColumn.name}`}\n                  key={index}\n                  onSelect={() =>\n                    onInsertColumn(\n                      availableColumn.blockId ?? availableColumn.name,\n                      availableColumn.type\n                    )\n                  }\n                >\n                  {availableColumn.type.kind !== 'anything' && (\n                    <div css={iconTypeStyles}>\n                      {' '}\n                      <Icon />\n                    </div>\n                  )}\n                  {availableColumn.name}\n                </MenuItem>\n              );\n            })}\n        </MenuList>\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { DataViewDataLayout } from '..';\nimport { AggregationKind, Column } from '../../types';\n\ninterface DataViewDataProps {\n  tableName: string;\n  columns: Column[];\n  aggregationTypes: Array<AggregationKind | undefined>;\n  expandedGroups: string[] | undefined;\n  onChangeExpandedGroups: (expandedGroups: string[]) => void;\n}\n\nexport const DataViewData: FC<DataViewDataProps> = (props) => {\n  return <DataViewDataLayout {...props} />;\n};\n","/* eslint-disable no-underscore-dangle */\nimport {\n  ELEMENT_DATA_VIEW_TH,\n  MyEditor,\n  DataViewElement,\n  DataViewHeader,\n  DataViewHeaderRowElement,\n} from '@decipad/editor-types';\nimport {\n  useElementMutatorCallback,\n  withPath,\n  insertNodes,\n} from '@decipad/editor-utils';\nimport { useCallback, useMemo } from 'react';\nimport {\n  deleteText,\n  findNodePath,\n  getNode,\n  isText,\n  setNodes,\n  withoutNormalizing,\n  hasNode,\n  moveNodes,\n  removeNodes,\n} from '@udecode/plate';\nimport { SerializedType } from '@decipad/computer';\nimport { nanoid } from 'nanoid';\nimport { Observable, Subject } from 'rxjs';\nimport { Path } from 'slate';\nimport { getDefined } from '@decipad/utils';\nimport { Column } from '../types';\n\nexport interface TableActions {\n  onDelete: () => void;\n  onVariableNameChange: (newName: string) => void;\n  setDataColumns: (columns: Column[]) => void;\n  onMoveColumn: (colIndex: number, newColIndex: number) => void;\n  onInsertColumn: (columnName: string, serializedType: SerializedType) => void;\n  onDeleteColumn: (dataViewHeaderPath: Path) => void;\n  columnChanges$: Observable<undefined>;\n}\n\nexport const useDataViewActions = (\n  editor: MyEditor,\n  element: DataViewElement | undefined\n): TableActions => {\n  const onDelete = useCallback(() => {\n    withPath(editor, element, (path) => {\n      deleteText(editor, { at: path });\n    });\n  }, [editor, element]);\n\n  const columnChanges$ = useMemo(\n    () => new Subject<undefined>(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [editor, element]\n  );\n\n  const setDataColumns = useCallback(\n    (columns: Column[]) => {\n      const headerRow: DataViewHeaderRowElement | undefined =\n        element?.children[1];\n      const headerRowPath = headerRow && findNodePath(editor, headerRow);\n      if (!headerRowPath) {\n        return;\n      }\n      const existingColumns: DataViewHeader[] | undefined =\n        headerRow.children.filter((node) => !isText(node));\n\n      withoutNormalizing(editor, () => {\n        const setColumnTypes = () => {\n          if (!existingColumns) {\n            return;\n          }\n          for (const existingColumn of existingColumns) {\n            const matchingDataColumn = columns.find((column) =>\n              column.blockId != null\n                ? column.blockId === existingColumn.name\n                : column.name === existingColumn.name\n            );\n            const columnPath = findNodePath(editor, existingColumn);\n            if (\n              matchingDataColumn &&\n              columnPath &&\n              hasNode(editor, columnPath)\n            ) {\n              if (\n                matchingDataColumn.type.kind !== 'anything' &&\n                matchingDataColumn.type.kind !== 'type-error' &&\n                existingColumn.cellType.kind !== matchingDataColumn.type.kind\n              ) {\n                setNodes<DataViewHeader>(\n                  editor,\n                  {\n                    cellType: matchingDataColumn.type,\n                    aggregation: undefined,\n                  },\n                  { at: columnPath }\n                );\n              }\n            }\n          }\n        };\n        if (editor.withoutCapturingUndo) {\n          editor.withoutCapturingUndo(setColumnTypes);\n        } else {\n          setColumnTypes();\n        }\n      });\n    },\n    [editor, element?.children]\n  );\n\n  const setVarName = useElementMutatorCallback(editor, element, 'varName');\n\n  const clearColumns = useCallback(() => {\n    getDefined(editor.withoutCapturingUndo)(() => {\n      withoutNormalizing(editor, () => {\n        const headerRow = element?.children[1];\n        const headerRowPath = headerRow && findNodePath(editor, headerRow);\n        if (!headerRowPath) {\n          return;\n        }\n        const existingColumns: DataViewHeader[] | undefined =\n          headerRow.children.filter((node) => !isText(node));\n        if (!existingColumns) {\n          return;\n        }\n        for (const existingColumn of existingColumns) {\n          const columnPath = findNodePath(editor, existingColumn);\n          if (columnPath && hasNode(editor, columnPath)) {\n            removeNodes(editor, { at: columnPath });\n          }\n        }\n      });\n    });\n  }, [editor, element?.children]);\n\n  const onVariableNameChange = useCallback(\n    (varName: string) => {\n      withoutNormalizing(editor, () => {\n        clearColumns();\n        setVarName(varName);\n      });\n    },\n    [clearColumns, editor, setVarName]\n  );\n\n  const onMoveColumn = useCallback(\n    (fromColIndex: number, toColIndex: number) => {\n      if (fromColIndex === toColIndex) {\n        return;\n      }\n      const headerRow = element?.children[1];\n      const headerRowPath = headerRow && findNodePath(editor, headerRow);\n      if (headerRowPath) {\n        const fromPath = [...headerRowPath, fromColIndex];\n        const toPath = [...headerRowPath, toColIndex];\n        if (hasNode(editor, fromPath) && hasNode(editor, toPath)) {\n          withoutNormalizing(editor, () => {\n            moveNodes(editor, { at: fromPath, to: toPath });\n          });\n          columnChanges$.next(undefined);\n        }\n      }\n    },\n    [columnChanges$, editor, element?.children]\n  );\n\n  const onInsertColumn = useCallback(\n    (columnName: string, serializedType: SerializedType) => {\n      const headerRow = element?.children[1];\n      const headerRowPath = headerRow && findNodePath(editor, headerRow);\n\n      if (headerRowPath) {\n        const maybeRemoveFirstText = () => {\n          const firstHeaderRowPath = [...headerRowPath, 0];\n          const firstHeaderRowChild = getNode(editor, firstHeaderRowPath);\n          if (firstHeaderRowChild && isText(firstHeaderRowChild)) {\n            removeNodes(editor, { at: firstHeaderRowPath });\n            return true;\n          }\n          return false;\n        };\n\n        withoutNormalizing(editor, () => {\n          let childLength = headerRow.children.length;\n          if (maybeRemoveFirstText()) {\n            childLength -= 1;\n          }\n          const path = [...headerRowPath, childLength];\n          insertNodes(\n            editor,\n            {\n              id: nanoid(),\n              type: ELEMENT_DATA_VIEW_TH,\n              cellType: serializedType,\n              name: columnName,\n              children: [{ text: '' }],\n            },\n            { at: path }\n          );\n        });\n      }\n    },\n    [editor, element?.children]\n  );\n\n  const onDeleteColumn = useCallback(\n    (dataViewHeaderPath: Path) => {\n      removeNodes(editor, { at: dataViewHeaderPath });\n    },\n    [editor]\n  );\n\n  return {\n    onDelete,\n    onVariableNameChange,\n    setDataColumns,\n    onMoveColumn,\n    onInsertColumn,\n    onDeleteColumn,\n    columnChanges$: useMemo(\n      () => columnChanges$.asObservable(),\n      [columnChanges$]\n    ),\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useComputer } from '@decipad/react-contexts';\nimport { SerializedType } from '@decipad/computer';\nimport { dequal } from 'dequal';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { Column } from '../types';\n\nconst DEBOUNCE_RESULT_MS = 500;\n\nconst getColumnType = (type: SerializedType): SerializedType => {\n  if (type.kind === 'column') {\n    return type.cellType;\n  }\n  return type;\n};\n\nexport const useAvailableColumns = (blockId: string): Column[] | undefined => {\n  const computer = useComputer();\n\n  const [availableColumns, setAvailableColumns] = useState<\n    Column[] | undefined\n  >();\n\n  useEffect(() => {\n    const sub = computer.getAllColumns$\n      .observe(blockId)\n      .pipe(\n        map((columns) => {\n          return columns.map((column) => ({\n            name: column.columnName,\n            blockId: column.blockId,\n            type: getColumnType(column.result.type),\n            value: column.result.value,\n          }));\n        }),\n        debounceTime(DEBOUNCE_RESULT_MS),\n        distinctUntilChanged((cur, next) => dequal(cur, next))\n      )\n      .subscribe(setAvailableColumns);\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [blockId, computer.getAllColumns$]);\n\n  return availableColumns;\n};\n","import { useState, useEffect } from 'react';\nimport { AutocompleteName } from '@decipad/computer';\nimport { useComputer } from '@decipad/react-contexts';\n\nconst namesThatLookLikeTablesOnly = (name: AutocompleteName) =>\n  name.name.indexOf('.') < 0;\n\nconst isTable = (name: AutocompleteName): boolean => name.type.kind === 'table';\n\nexport const useSourceTableNames = (): AutocompleteName[] => {\n  const computer = useComputer();\n  const [tableNames, setTableNames] = useState<AutocompleteName[]>([]);\n\n  useEffect(() => {\n    const sub = computer.getNamesDefined$\n      .observeWithSelector((names) =>\n        names.filter(isTable).filter(namesThatLookLikeTablesOnly)\n      )\n      .subscribe(setTableNames);\n\n    return () => sub.unsubscribe();\n  }, [computer.getNamesDefined$]);\n\n  return tableNames;\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport {\n  ELEMENT_DATA_VIEW_TR,\n  MyEditor,\n  DataViewElement,\n} from '@decipad/editor-types';\nimport { assertElementType, matchNodeType } from '@decipad/editor-utils';\nimport {\n  useComputer,\n  useEditorChange,\n  useEditorSelector,\n} from '@decipad/react-contexts';\nimport { SerializedType, AutocompleteName } from '@decipad/computer';\nimport { findNode, findNodePath } from '@udecode/plate';\nimport { Path } from 'slate';\nimport { useDataViewActions, useSortColumns } from '.';\nimport { AggregationKind, Column } from '../types';\nimport { useAvailableColumns } from './useAvailableColumns';\nimport { useSourceTableNames } from './useSourceTableNames';\n\ninterface UseDataViewProps {\n  editor: MyEditor;\n  element: DataViewElement;\n}\n\ninterface UseDataViewReturnType {\n  variableNames: AutocompleteName[];\n  tableName?: string;\n  onDelete: () => void;\n  onInsertColumn: (name: string, serializedType: SerializedType) => void;\n  onDeleteColumn: (dataViewHeaderPath: Path) => void;\n  onVariableNameChange: (newName: string) => void;\n  availableColumns: Column[] | undefined;\n  sortedColumns: Column[] | undefined;\n  selectedAggregationTypes: Array<AggregationKind | undefined>;\n}\n\nconst greaterOrEqualToZero = (n: number): boolean => n >= 0;\n\nexport const useDataView = ({\n  editor,\n  element,\n}: UseDataViewProps): UseDataViewReturnType => {\n  const {\n    onDelete,\n    onInsertColumn,\n    onDeleteColumn,\n    onVariableNameChange,\n    setDataColumns,\n    columnChanges$,\n  } = useDataViewActions(editor, element);\n\n  const computer = useComputer();\n  const blockId = element.varName || '';\n  const tableName = computer.getSymbolDefinedInBlock$.use(blockId);\n\n  const availableColumns = useAvailableColumns(element.varName ?? '');\n\n  const [sortedColumns, setSortedColumns] = useState<Column[] | undefined>();\n\n  const sortColumns = useSortColumns({\n    sortedColumns,\n    setSortedColumns,\n    availableColumns,\n  });\n\n  const selectColumnOrder = useCallback((): number[] | undefined => {\n    if (!availableColumns) {\n      return;\n    }\n    const dataViewPath = findNodePath(editor, element);\n\n    if (dataViewPath) {\n      const columnRowEntry = findNode(editor, {\n        at: dataViewPath,\n        match: matchNodeType(ELEMENT_DATA_VIEW_TR),\n      });\n      if (columnRowEntry) {\n        const [columnRow] = columnRowEntry;\n        assertElementType(columnRow, ELEMENT_DATA_VIEW_TR);\n        const columnHeaders = columnRow.children;\n        return columnHeaders\n          .map((column) =>\n            availableColumns.findIndex((c) =>\n              c.blockId != null\n                ? c.blockId === column.name\n                : c.name === column.name\n            )\n          )\n          .filter(greaterOrEqualToZero);\n      }\n    }\n    return undefined;\n  }, [availableColumns, editor, element]);\n\n  useEffect(() => {\n    sortColumns(selectColumnOrder());\n  }, [selectColumnOrder, sortColumns]);\n\n  useEditorChange(sortColumns, selectColumnOrder, {\n    injectObservable: columnChanges$,\n  });\n\n  const selectedAggregationTypes = useEditorSelector(\n    useCallback(\n      () => element.children[1]?.children?.map((th) => th.aggregation),\n      [element.children]\n    )\n  );\n\n  useEffect(() => {\n    if (availableColumns) {\n      setDataColumns(availableColumns);\n    }\n  }, [availableColumns, setDataColumns]);\n\n  return {\n    variableNames: useSourceTableNames(),\n    tableName,\n    onDelete,\n    onInsertColumn,\n    onDeleteColumn,\n    onVariableNameChange,\n    sortedColumns,\n    availableColumns,\n    selectedAggregationTypes,\n  };\n};\n","import type { MyElement } from '@decipad/editor-types';\nimport { isElement, TNode } from '@udecode/plate';\n\nexport const matchNodeType = (type: MyElement['type']) => (node: TNode) =>\n  isElement(node) && node.type === type;\n","import { BehaviorSubject } from 'rxjs';\nimport {\n  AggregationKind,\n  DataGroup,\n  PreviousColumns,\n  VirtualColumn,\n} from '../../types';\n\nexport interface GenerateSmartRowProps {\n  columns: VirtualColumn[];\n  columnIndex: number;\n  aggregationTypes: (AggregationKind | undefined)[];\n  previousColumns: PreviousColumns;\n  parentHighlight$?: BehaviorSubject<boolean>;\n  global?: boolean;\n}\n\nexport const generateSmartRow = ({\n  columns,\n  columnIndex,\n  aggregationTypes,\n  previousColumns,\n  parentHighlight$,\n  global = false,\n}: GenerateSmartRowProps): DataGroup => {\n  const [firstColumn, ...rest] = columns;\n\n  return {\n    elementType: 'smartrow',\n    children:\n      rest.length > 0\n        ? [\n            generateSmartRow({\n              columns: rest,\n              columnIndex: columnIndex + 1,\n              aggregationTypes,\n              previousColumns,\n              parentHighlight$,\n              global,\n            }),\n          ]\n        : [],\n    column: firstColumn,\n    columnIndex,\n    previousColumns,\n    parentHighlight$,\n    global,\n  };\n};\n","import { BehaviorSubject } from 'rxjs';\nimport { generateHash } from '@decipad/editor-utils';\nimport { Result } from '@decipad/computer';\nimport {\n  AggregationKind,\n  DataGroup,\n  PreviousColumns,\n  VirtualColumn,\n} from '../../types';\nimport { generateSmartRow, GenerateSmartRowProps } from './generateSmartRow';\nimport { sliceToGroup } from './sliceToGroup';\n\nconst { ResultTransforms } = Result;\n\nexport interface GenerateGroupsProps {\n  columns: VirtualColumn[];\n  columnIndex: number;\n  previousColumns: PreviousColumns;\n  parentGroupId?: string;\n  parentHighlight$?: BehaviorSubject<boolean>;\n}\n\nexport type GenerateSubSmartRowProps = Omit<\n  GenerateSmartRowProps,\n  'aggregationTypes'\n>;\n\nexport type GenerateSubSmartRow = (\n  props: GenerateSubSmartRowProps\n) => DataGroup;\n\nexport type GenerateGroups = (\n  props: GenerateGroupsProps\n) => Promise<DataGroup[]>;\n\nexport const generateGroups = async ({\n  columns,\n  aggregationTypes,\n  expandedGroups = [],\n  columnIndex,\n  previousColumns,\n  parentHighlight$,\n  parentGroupId,\n}: GenerateGroupsProps & {\n  aggregationTypes: (AggregationKind | undefined)[];\n  expandedGroups?: string[];\n}): Promise<DataGroup[]> => {\n  if (columns.length < 1) {\n    return [];\n  }\n  const [firstColumn, ...restOfColumns] = columns;\n\n  const sortMap = ResultTransforms.sortMap(firstColumn.value);\n  const sortedFirstColumn = ResultTransforms.applyMap(\n    firstColumn.value,\n    sortMap\n  );\n  const sortedRestOfColumns: VirtualColumn[] = restOfColumns.map((column) => ({\n    ...column,\n    value: ResultTransforms.applyMap(column.value, sortMap),\n  }));\n  const slices = ResultTransforms.contiguousSlices(sortedFirstColumn);\n\n  const subGenerateGroups: GenerateGroups = (props) =>\n    generateGroups({ ...props, aggregationTypes, expandedGroups });\n\n  const subGenerateSmartRow: GenerateSubSmartRow = (props) =>\n    generateSmartRow({ ...props, aggregationTypes });\n\n  const groups = slices.map(async ([start, end]) => {\n    const value = sortedFirstColumn.atIndex(start);\n    const generatedHash = await generateHash(value);\n    const groupId = parentGroupId\n      ? `${parentGroupId}/${generatedHash}`\n      : generatedHash;\n\n    const isExpanded = expandedGroups.includes(groupId);\n\n    const groupColumns: VirtualColumn[] = sortedRestOfColumns.map((column) => ({\n      ...column,\n      value: ResultTransforms.slice(column.value, start, end + 1),\n    }));\n\n    const hideSmartRow =\n      !aggregationTypes || aggregationTypes.filter(Boolean).length === 0;\n\n    const slicePreviousColumns = [\n      ...previousColumns,\n      { ...firstColumn, value },\n    ];\n\n    return sliceToGroup({\n      isExpanded,\n      value,\n      type: firstColumn.type,\n      columns: groupColumns,\n      groupId,\n      columnIndex,\n      hideSmartRow,\n      parentHighlight$,\n      previousColumns: slicePreviousColumns,\n      generateGroups: subGenerateGroups,\n      generateSmartRow: subGenerateSmartRow,\n    });\n  });\n\n  return Promise.all(groups);\n};\n","export async function generateHash(objectToBeHashed: any) {\n  const msgUint8 = new TextEncoder().encode(objectToBeHashed);\n  if ('crypto' in global) {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('');\n    return hashHex;\n  }\n  return msgUint8.toString();\n}\n","import { Result, SerializedType } from '@decipad/computer';\nimport { BehaviorSubject } from 'rxjs';\nimport { DataGroup, PreviousColumns, VirtualColumn } from '../../types';\nimport type { GenerateGroups, GenerateSubSmartRow } from './generateGroups';\n\ninterface SliceToGroupProps {\n  isExpanded: boolean;\n  value: Result.Comparable;\n  type: SerializedType;\n  hideSmartRow: boolean;\n  columns: VirtualColumn[];\n  groupId: string;\n  columnIndex: number;\n  parentHighlight$?: BehaviorSubject<boolean>;\n  previousColumns: PreviousColumns;\n  generateGroups: GenerateGroups;\n  generateSmartRow: GenerateSubSmartRow;\n}\n\nexport const sliceToGroup = async ({\n  isExpanded,\n  value,\n  type,\n  columns,\n  hideSmartRow,\n  groupId,\n  columnIndex,\n  parentHighlight$,\n  previousColumns,\n  generateGroups,\n  generateSmartRow,\n}: SliceToGroupProps): Promise<DataGroup> => {\n  const selfHighlight$ = new BehaviorSubject<boolean>(false);\n\n  const newGroups = await generateGroups({\n    columns,\n    columnIndex: columnIndex + 1,\n    previousColumns,\n    parentHighlight$: selfHighlight$,\n    parentGroupId: groupId,\n  });\n\n  const expandable = newGroups.length > 1;\n\n  const smartRow =\n    (!hideSmartRow &&\n      expandable &&\n      generateSmartRow({\n        columns,\n        columnIndex: columnIndex + 1,\n        previousColumns,\n        parentHighlight$,\n      })) ||\n    null;\n\n  const children = [\n    smartRow,\n    ...(isExpanded || !expandable ? newGroups : []),\n  ].filter(Boolean) as DataGroup[];\n\n  return {\n    elementType: 'group',\n    id: groupId,\n    value,\n    type,\n    children,\n    collapsible: expandable,\n    selfHighlight$,\n    parentHighlight$,\n    columnIndex,\n  };\n};\n","import { Result } from '@decipad/computer';\nimport { useEffect, useMemo, useState } from 'react';\nimport { AggregationKind, Column, DataGroup, VirtualColumn } from '../../types';\nimport { generateGroups } from './generateGroups';\nimport { generateTotalGroup } from './generateTotalGroup';\n\nexport const layoutPowerData = async (\n  columns: VirtualColumn[],\n  aggregationTypes: (AggregationKind | undefined)[],\n  expandedGroups: string[] | undefined\n): Promise<DataGroup[]> => {\n  const rootGroups = await generateGroups({\n    columns,\n    aggregationTypes,\n    expandedGroups,\n    columnIndex: 0,\n    previousColumns: [],\n  });\n\n  const totalGroup = generateTotalGroup({\n    columns,\n    aggregationTypes,\n  });\n\n  return Promise.all([\n    ...rootGroups,\n    ...(totalGroup != null ? [totalGroup] : []),\n  ]);\n};\n\nexport const useDataViewLayoutData = (\n  columns: Column[],\n  aggregationTypes: (AggregationKind | undefined)[],\n  expandedGroups: string[] | undefined\n): DataGroup[] => {\n  const dataGroups = useMemo(\n    () =>\n      layoutPowerData(\n        columns.map((column) => ({\n          ...column,\n          value: Result.Column.fromValues(column.value as Result.Comparable[]),\n        })),\n        aggregationTypes,\n        expandedGroups\n      ),\n    [aggregationTypes, columns, expandedGroups]\n  );\n\n  const [resolvedDataGroups, setResolvedDataGroups] = useState<DataGroup[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      setResolvedDataGroups(await dataGroups);\n    })();\n  }, [dataGroups]);\n\n  return resolvedDataGroups;\n};\n","import { Result } from '@decipad/computer';\nimport { AggregationKind, DataGroupElement, VirtualColumn } from '../../types';\nimport { generateSmartRow } from './generateSmartRow';\n\ninterface GenerateTotalGroupProps {\n  columns: VirtualColumn[];\n  aggregationTypes: (AggregationKind | undefined)[];\n}\n\nexport const generateTotalGroup = ({\n  columns,\n  aggregationTypes,\n}: GenerateTotalGroupProps): DataGroupElement | undefined => {\n  if (!aggregationTypes.slice(1).some(Boolean)) {\n    return undefined;\n  }\n  return {\n    elementType: 'group',\n    id: 'total',\n    type: { kind: 'string' },\n    value: 'Total' as Result.Comparable,\n    children: [\n      generateSmartRow({\n        columns: columns.slice(1),\n        columnIndex: 1,\n        aggregationTypes: aggregationTypes.slice(1),\n        previousColumns: [],\n        global: true,\n      }),\n    ],\n    collapsible: false,\n    columnIndex: -1,\n    global: true,\n  };\n};\n","import { Result } from '@decipad/computer';\nimport { dequal } from 'dequal';\nimport { useCallback } from 'react';\nimport { Column } from '../types';\n\ninterface UseSortColumnsProps {\n  sortedColumns?: Column[];\n  availableColumns?: Column[];\n  setSortedColumns: (columns: Column[] | undefined) => void;\n}\n\ntype UseSortColumnsReturn = (columnMap: number[] | undefined) => void;\n\nexport const useSortColumns = ({\n  sortedColumns,\n  setSortedColumns,\n  availableColumns,\n}: UseSortColumnsProps): UseSortColumnsReturn => {\n  return useCallback(\n    (columnMap) => {\n      if (!columnMap || !availableColumns) {\n        setSortedColumns(undefined);\n        return;\n      }\n\n      const newSortedColumns = Result.ResultTransforms.applyMap(\n        Result.Column.fromValues(\n          availableColumns as unknown as Result.Comparable[]\n        ),\n        columnMap\n      )\n        .getData()\n        .filter(Boolean) as unknown as typeof availableColumns;\n\n      if (!dequal(sortedColumns, newSortedColumns)) {\n        setSortedColumns(newSortedColumns);\n      }\n    },\n    [availableColumns, setSortedColumns, sortedColumns]\n  );\n};\n","import type { SerializedType } from '@decipad/computer';\nimport { PlateComponentAttributes } from '@decipad/editor-types';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { capitalize } from 'lodash';\nimport { FC, forwardRef, ReactNode, useCallback, useState } from 'react';\nimport {\n  ConnectDragPreview,\n  ConnectDragSource,\n  ConnectDropTarget,\n} from 'react-dnd';\nimport { MenuItem, TriggerMenuItem } from '../../atoms';\nimport { useMergedRef } from '../../hooks';\nimport { Caret, Code, DragHandle as DragHandleIcon, Trash } from '../../icons';\nimport { MenuList } from '../../molecules';\nimport { cssVar } from '../../primitives';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\n\nconst dragHandleStyles = css({\n  width: '8px',\n  height: 9,\n  transform: 'translateY(50%)',\n  display: 'block',\n  margin: 'auto 0',\n  cursor: 'grab',\n  pointerEvents: 'all',\n  marginTop: 0,\n  mixBlendMode: 'luminosity',\n  'svg > rect': {\n    fill: 'transparent',\n  },\n});\n\nconst DragHandle = () => {\n  return (\n    <button css={dragHandleStyles} contentEditable={false}>\n      <DragHandleIcon />\n    </button>\n  );\n};\n\nexport interface DataViewColumnHeaderProps {\n  name: string;\n  type: SerializedType;\n  attributes?: PlateComponentAttributes;\n  children?: ReactNode;\n  selectedAggregation?: string;\n  availableAggregations: Array<string>;\n  onAggregationChange: (aggregation: string | undefined) => void;\n  onDeleteColumn: () => void;\n  connectDragSource?: ConnectDragSource;\n  connectDragPreview?: ConnectDragPreview;\n  connectDropTarget?: ConnectDropTarget;\n  hoverDirection?: 'left' | 'right';\n  isOverCurrent?: boolean;\n  alignRight?: boolean;\n  global?: boolean;\n}\n\nexport type Ref = HTMLTableCellElement;\n\nconst dataViewColumnHeaderStyles = css({\n  '&::before, &::after': {\n    display: 'block',\n    content: ' attr(aria-placeholder)',\n    width: '1px',\n    background: 'transparent',\n    height: 'calc(100% - 12px)',\n    position: 'absolute',\n    top: 0,\n  },\n  borderBottom: '1px solid',\n  borderBottomColor: cssVar('evenStrongerHighlightColor'),\n});\n\nconst triggerStyles = css({\n  display: 'grid',\n  alignItems: 'center',\n  width: '16px',\n});\nconst borderLeftStyles = css({\n  '&::before': {\n    background: 'blue',\n    translate: '-8px',\n  },\n});\n\nconst dataViewColumnHeaderSelectWrapperStyles = css({\n  display: 'flex',\n  alignItems: 'center',\n  gap: '8px',\n});\n\nconst alignRightStyles = css({\n  justifyContent: 'flex-end',\n});\n\nconst globalStyles = {\n  color: cssVar('weakTextColor'),\n  backgroundColor: cssVar('highlightColor'),\n};\n\nexport const DataViewColumnHeader = forwardRef<\n  HTMLTableCellElement,\n  DataViewColumnHeaderProps\n>(function DataViewColumnHeaderWithoutRef(\n  {\n    name,\n    attributes,\n    children,\n    availableAggregations,\n    selectedAggregation,\n    onAggregationChange,\n    onDeleteColumn,\n    connectDragSource,\n    connectDropTarget,\n    hoverDirection,\n    isOverCurrent,\n    alignRight = false,\n    global = false,\n  }: DataViewColumnHeaderProps,\n  ref\n): ReturnType<FC> {\n  const [menuListOpened, setMenuListOpened] = useState(false);\n\n  const onTriggerClick = useEventNoEffect(\n    useCallback(() => {\n      setMenuListOpened(!menuListOpened);\n    }, [menuListOpened])\n  );\n  const refs = useMergedRef(ref, connectDragSource, connectDropTarget);\n\n  const getBorderRightTranslation = () => {\n    if (typeof ref !== 'function' && ref && ref.current) {\n      return ref.current.offsetWidth - 8;\n    }\n    return 0;\n  };\n\n  const borderRightStyles = css({\n    '&::after': {\n      background: 'blue',\n      translate: getBorderRightTranslation(),\n    },\n  });\n\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <th\n      {...attributes}\n      css={[\n        dataViewColumnHeaderStyles,\n        isOverCurrent && hoverDirection === 'left' && borderLeftStyles,\n        isOverCurrent && hoverDirection === 'right' && borderRightStyles,\n        global && globalStyles,\n      ]}\n      contentEditable={false}\n      ref={refs}\n    >\n      <div\n        // eslint-disable-next-line no-sparse-arrays\n        css={[\n          dataViewColumnHeaderSelectWrapperStyles,\n          alignRight ? alignRightStyles : null,\n        ]}\n        contentEditable={false}\n      >\n        {!readOnly && <DragHandle />}\n        <span>{name}</span>\n\n        {!readOnly && (\n          <MenuList\n            root\n            dropdown\n            open={menuListOpened}\n            onChangeOpen={setMenuListOpened}\n            trigger={\n              <button css={triggerStyles} onClick={onTriggerClick}>\n                <Caret color=\"normal\" variant=\"down\" />\n              </button>\n            }\n          >\n            <MenuItem onSelect={() => onDeleteColumn()} icon={<Trash />}>\n              Remove column\n            </MenuItem>\n            {availableAggregations.length > 0 ? (\n              <MenuList\n                itemTrigger={\n                  <TriggerMenuItem icon={<Code />}>Aggregate</TriggerMenuItem>\n                }\n              >\n                <MenuItem\n                  onSelect={() => onAggregationChange(undefined)}\n                  selected={selectedAggregation === undefined}\n                >\n                  None\n                </MenuItem>\n                {availableAggregations.map((availableAggregation, index) => {\n                  return (\n                    <MenuItem\n                      onSelect={() => onAggregationChange(availableAggregation)}\n                      selected={availableAggregation === selectedAggregation}\n                      key={index}\n                    >\n                      {capitalize(availableAggregation)}\n                    </MenuItem>\n                  );\n                })}\n              </MenuList>\n            ) : null}\n          </MenuList>\n        )}\n\n        <div contentEditable={false}>{children}</div>\n      </div>\n    </th>\n  );\n});\n","import {\n  ELEMENT_DATA_VIEW_TH,\n  PlateComponent,\n  DataViewElement,\n  useTEditorRef,\n  TableCellType,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n  useNodePath,\n} from '@decipad/editor-utils';\nimport { DataViewColumnHeader as UIDataViewColumnHeader } from '@decipad/ui';\nimport { Path } from 'slate';\nimport { getNodeEntry, isFirstChild } from '@udecode/plate';\nimport { useCallback, useMemo, useRef } from 'react';\nimport {\n  columnAggregationTypes,\n  isCellAlignRight,\n} from '@decipad/editor-table';\nimport { useComputer } from '@decipad/react-contexts';\nimport { useDataViewActions, useDragColumn, useDropColumn } from '../../hooks';\n\nexport const DataViewColumnHeader: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  assertElementType(element, ELEMENT_DATA_VIEW_TH);\n  const editor = useTEditorRef();\n  const [, connectDragSource, connectDragPreview] = useDragColumn(\n    editor,\n    element.id,\n    'DataViewColumn'\n  );\n  const path = useNodePath(element);\n  const dataView: DataViewElement | undefined = useMemo(() => {\n    const dataViewPath = path && Path.parent(Path.parent(path));\n    return (\n      dataViewPath && getNodeEntry<DataViewElement>(editor, dataViewPath)?.[0]\n    );\n  }, [editor, path]);\n  const columnHeaderRef = useRef<HTMLTableCellElement>(null);\n\n  const [{ isOverCurrent }, connectDropTarget, hoverDirection] = useDropColumn(\n    editor,\n    dataView,\n    element,\n    columnHeaderRef,\n    'DataViewColumn'\n  );\n\n  const availableAggregations = useMemo(() => {\n    if (!path || isFirstChild(path)) {\n      // first column: do not present aggregation choices\n      return [];\n    }\n    return columnAggregationTypes(element.cellType as TableCellType).map(\n      (agg) => agg.name\n    );\n  }, [element.cellType, path]);\n\n  const onAggregationChange = useElementMutatorCallback(\n    editor,\n    element,\n    'aggregation'\n  );\n\n  const { onDeleteColumn } = useDataViewActions(editor, dataView);\n\n  const handleColumnDelete = useCallback(() => {\n    if (path) {\n      onDeleteColumn(path);\n    }\n  }, [onDeleteColumn, path]);\n\n  const computer = useComputer();\n  const columnName =\n    computer.getColumnNameDefinedInBlock$.use(element.name) || element.name;\n\n  if (!columnName) {\n    return null;\n  }\n\n  return (\n    <UIDataViewColumnHeader\n      name={columnName}\n      type={element.cellType}\n      attributes={attributes}\n      selectedAggregation={element.aggregation}\n      availableAggregations={availableAggregations}\n      onAggregationChange={onAggregationChange as (agg?: string) => void}\n      onDeleteColumn={handleColumnDelete}\n      connectDragSource={connectDragSource}\n      connectDragPreview={connectDragPreview}\n      connectDropTarget={connectDropTarget}\n      hoverDirection={hoverDirection}\n      isOverCurrent={isOverCurrent}\n      alignRight={isCellAlignRight(element.cellType)}\n      ref={columnHeaderRef}\n    >\n      {children}\n    </UIDataViewColumnHeader>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { PlateComponentAttributes } from '@decipad/editor-types';\n\nexport interface DataViewColumnHeaderRowProps {\n  attributes?: PlateComponentAttributes;\n  children?: ReactNode;\n  isCollapsed?: boolean;\n}\n\nexport const DataViewColumnHeaderRow = ({\n  attributes,\n  children,\n}: DataViewColumnHeaderRowProps): ReturnType<FC> => {\n  return (\n    <tr {...attributes} contentEditable={false}>\n      {children}\n    </tr>\n  );\n};\n","import { PlateComponentAttributes } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { cssVar } from '../../primitives';\n\ninterface TableRowProps {\n  readonly attributes?: PlateComponentAttributes;\n  readonly children?: ReactNode;\n  readonly isFullWidth: boolean;\n  readonly isBeforeFullWidthRow: boolean;\n  readonly global: boolean;\n}\n\nconst dataViewRowStyles = css({\n  borderBottom: `1px solid ${cssVar('borderColor')}`,\n\n  '&:last-of-type': {\n    borderBottomColor: cssVar('normalTextColor'),\n  },\n});\n\nconst dataViewRowGlobalStyles = css({\n  color: cssVar('weakTextColor'),\n  backgroundColor: cssVar('highlightColor'),\n});\n\nexport const DataViewRow = ({\n  attributes,\n  children,\n  global = false,\n}: TableRowProps): ReturnType<FC> => {\n  return (\n    <tr\n      {...attributes}\n      css={[dataViewRowStyles, global && dataViewRowGlobalStyles]}\n    >\n      {children}\n    </tr>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport { assertDefined } from '@decipad/utils';\n\n/* eslint-disable no-param-reassign */\ntype BaseNode = {\n  rowspan?: number;\n  colspan?: number;\n  depth?: number;\n};\n\nexport type Element<TElement> = BaseNode &\n  TElement & {\n    children: Array<Element<TElement>>;\n    tempChildren?: Array<Element<TElement>>;\n  };\n\nfunction hasChildren<TElement>(n: Element<TElement>): boolean {\n  return n.children.length > 0;\n}\n\nfunction hasTempChildren<TElement>(n: Element<TElement>): boolean {\n  return (n.tempChildren && n.tempChildren.length > 0) || false;\n}\n\nfunction traversalRowSpan<TElement>(\n  tree: Element<TElement>\n): Element<TElement> {\n  if (!hasChildren(tree)) {\n    return {\n      ...tree,\n      rowspan: 1,\n      depth: 1,\n      tempChildren: [],\n    };\n  }\n  const res: Element<TElement> = {\n    ...tree,\n    rowspan: 0,\n    depth: 0,\n    tempChildren: [],\n  };\n  for (const node of tree.children) {\n    const nSpan = traversalRowSpan(node);\n    assertDefined(res.tempChildren);\n    res.tempChildren.push(nSpan);\n    res.rowspan = (res.rowspan || 0) + (nSpan.rowspan || 0);\n    res.depth = Math.max(res.depth || 0, (nSpan.depth || 0) + 1);\n  }\n  return res;\n}\n\nfunction traversalColSpan<TElement>(\n  tree: Element<TElement>,\n  pDepth = 0\n): Element<TElement> {\n  if (!pDepth) {\n    tree.colspan = 1;\n  } else {\n    tree.colspan = pDepth - (tree.depth || 0);\n  }\n  if (hasTempChildren(tree)) {\n    tree.tempChildren?.forEach((child, index) => {\n      assertDefined(tree.tempChildren);\n      tree.tempChildren[index] = traversalColSpan(child, tree.depth || 0);\n    });\n  }\n  return tree;\n}\n\nfunction traversalToTable<TElement>(\n  root: Element<TElement>\n): Array<Element<TElement>>[] {\n  const res: Array<Element<TElement>[]> = [];\n  const toArray = (tree: Element<TElement>, i: number, p = false) => {\n    if (p) {\n      for (let j = 0; j < (tree.rowspan || 0); j += 1) {\n        const index = i + j;\n        if (!res[index]) {\n          res[index] = [];\n        }\n      }\n      res[i].push(tree);\n    }\n    if (hasTempChildren(tree)) {\n      assertDefined(tree.tempChildren);\n      tree.tempChildren.forEach((child, q) => {\n        toArray(child, i, true);\n        assertDefined(tree.tempChildren);\n        i += tree.tempChildren[q].rowspan || 0;\n      });\n    }\n  };\n  toArray(root, 0);\n  return res;\n}\n\nexport function treeToTable<TElement>(\n  root: Element<TElement>\n): Array<Element<TElement>>[] {\n  return traversalToTable(traversalColSpan(traversalRowSpan(root)));\n}\n","import { isCellAlignRight } from 'libs/editor-table/src/components';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { Subscription } from 'rxjs';\nimport { AggregationKind, DataGroup } from '../../types';\nimport { Element as GroupElement } from '../../utils/treeToTable';\nimport { HeaderProps, SmartProps } from '../DataViewDataLayout';\n\ninterface DataViewDataGroupElementProps {\n  tableName: string;\n  element: GroupElement<DataGroup>;\n  Header: FC<HeaderProps>;\n  SmartCell: FC<SmartProps>;\n  aggregationType: AggregationKind | undefined;\n  isFullWidthRow: boolean;\n  expandedGroups: string[] | undefined;\n  onChangeExpandedGroups: (expandedGroups: string[]) => void;\n  groupLength: number;\n  index: number;\n}\n\nexport const DataViewDataGroupElement: FC<DataViewDataGroupElementProps> = ({\n  tableName,\n  element,\n  Header,\n  SmartCell,\n  aggregationType,\n  isFullWidthRow,\n  expandedGroups,\n  onChangeExpandedGroups,\n  groupLength,\n  index,\n}) => {\n  const [parentHover, setParentHover] = useState(false);\n  const [selfHover, setSelfHover] = useState(false);\n\n  useEffect(() => {\n    let sub: Subscription;\n    if (element.parentHighlight$) {\n      sub = element.parentHighlight$.subscribe(setParentHover);\n    }\n    return () => {\n      if (sub) {\n        sub.unsubscribe();\n      }\n    };\n  }, [element.parentHighlight$]);\n\n  useEffect(() => {\n    element.selfHighlight$?.next(parentHover || selfHover);\n  }, [element.selfHighlight$, parentHover, selfHover]);\n\n  const onHover = useCallback(\n    (hover: boolean) => {\n      setSelfHover(hover);\n      if (element.selfHighlight$) {\n        element.selfHighlight$.next(selfHover);\n      }\n    },\n    [element.selfHighlight$, selfHover]\n  );\n\n  return element.elementType === 'group' ? (\n    <Header\n      type={element.type}\n      value={element.value}\n      rowSpan={element.rowspan}\n      colSpan={element.colspan}\n      collapsible={element.collapsible}\n      onHover={onHover}\n      hover={parentHover || selfHover}\n      alignRight={isCellAlignRight(element.type)}\n      isFullWidthRow={isFullWidthRow}\n      expandedGroups={expandedGroups}\n      onChangeExpandedGroups={onChangeExpandedGroups}\n      groupId={element.id || ''}\n      groupLength={groupLength}\n      index={index}\n      global={element.global}\n    />\n  ) : (\n    <SmartCell\n      tableName={tableName}\n      rowSpan={element.rowspan}\n      colSpan={element.colspan}\n      column={element.column}\n      aggregationType={aggregationType}\n      onHover={onHover}\n      hover={parentHover || selfHover}\n      alignRight={isCellAlignRight(element.column?.type)}\n      previousColumns={element.previousColumns}\n      global={element.global}\n    />\n  );\n};\n","import type { Result } from '@decipad/computer';\nimport { AnyElement } from '@decipad/editor-types';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { DragEvent, FC, useCallback } from 'react';\nimport { CodeResult } from '../../organisms';\nimport { cssVar, p12Medium, p14Medium } from '../../primitives';\n\nconst smartCellStyles = css(p14Medium, {\n  position: 'relative',\n  whiteSpace: 'nowrap',\n  textAlign: 'left',\n  fontWeight: '700',\n});\n\nconst hoverCellStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n});\n\nconst labelStyles = css(p12Medium, {\n  color: cssVar('weakerTextColor'),\n});\n\nconst alignRightStyles = css({\n  textAlign: 'right',\n});\n\nconst globalStyles = css({\n  color: cssVar('weakTextColor'),\n  backgroundColor: cssVar('highlightColor'),\n  fontWeight: 'bold',\n});\n\nconst draggableStyles = css({\n  cursor: 'grab',\n\n  ':active': {\n    cursor: 'grabbing',\n  },\n});\n\nexport interface ColumnAggregation {\n  type?: Result.Result['type'];\n  value?: Result.Result['value'];\n}\n\nexport interface SmartRowProps {\n  aggregationType?: string;\n  result?: Result.Result;\n  rowSpan?: number;\n  colSpan?: number;\n  onHover?: (hover: boolean) => void;\n  onDragStart?: (e: DragEvent) => void;\n  onDragEnd?: (e: DragEvent) => void;\n  hover?: boolean;\n  alignRight?: boolean;\n  global?: boolean;\n  element?: AnyElement;\n}\n\nexport function SmartCell({\n  result,\n  aggregationType,\n  onDragStart,\n  onDragEnd,\n  rowSpan = 1,\n  colSpan = 1,\n  onHover = noop,\n  hover = false,\n  alignRight = false,\n  global = false,\n  element,\n}: SmartRowProps): ReturnType<FC> {\n  const onMouseOver = useCallback(() => onHover(true), [onHover]);\n  const onMouseOut = useCallback(() => onHover(false), [onHover]);\n  const readOnly = useIsEditorReadOnly();\n\n  return (\n    <td\n      css={[\n        smartCellStyles,\n        !readOnly && onDragStart && draggableStyles,\n        hover && hoverCellStyles,\n        alignRight && alignRightStyles,\n        global && globalStyles,\n      ]}\n      rowSpan={rowSpan}\n      colSpan={colSpan}\n      draggable\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      onMouseOver={onMouseOver}\n      onMouseOut={onMouseOut}\n    >\n      <span css={labelStyles}>\n        {(aggregationType && `${aggregationType}: `) || null}\n      </span>\n      {result ? (\n        <CodeResult variant=\"inline\" {...result} element={element} />\n      ) : null}\n    </td>\n  );\n}\n","import {\n  DragEvent,\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { SmartCell as UISmartCell } from '@decipad/ui';\nimport { useComputer } from '@decipad/react-contexts';\nimport { Result, SerializedType } from '@decipad/computer';\nimport { debounceTime, EMPTY } from 'rxjs';\nimport { css } from '@emotion/react';\nimport { textify } from '@decipad/parse';\nimport { useTEditorRef } from '@decipad/editor-types';\nimport { maybeAggregate } from '../../utils/maybeAggregate';\nimport { onDragStartSmartCell } from './onDragStartSmartCell';\nimport { AggregationKind, PreviousColumns } from '../../types';\nimport { useOnDragEnd } from '../../../../editor-components/src/utils/useDnd';\n\nconst DEBOUNCE_RESULT_MS = 500;\n\nconst emptyCellStyles = css({\n  borderBottom: 0,\n});\n\ninterface SmartProps {\n  tableName: string;\n  column: {\n    type: SerializedType;\n    value: Result.ColumnLike<Result.Comparable>;\n    name: string;\n  };\n  columnIndex?: number;\n  aggregationType: AggregationKind | undefined;\n  rowSpan?: number;\n  colSpan?: number;\n  onHover: (hover: boolean) => void;\n  hover: boolean;\n  previousColumns: PreviousColumns;\n  alignRight?: boolean;\n  global?: boolean;\n}\n\nexport const SmartCell: FC<SmartProps> = ({\n  column,\n  tableName,\n  aggregationType,\n  rowSpan,\n  colSpan,\n  onHover,\n  hover,\n  alignRight,\n  previousColumns,\n  global = false,\n}: SmartProps) => {\n  const computer = useComputer();\n  const editor = useTEditorRef();\n  const [result, setResult] = useState<Result.Result | null>(null);\n\n  const expressionFilter = useMemo(() => {\n    return (\n      (column &&\n        previousColumns.reduce((previous, current) => {\n          const escapedValue = textify({\n            type: current.type,\n            value: current.value as Result.Result['value'],\n          });\n          return previous === ``\n            ? `filter(${tableName}, ${tableName}.${current.name} == ${escapedValue})`\n            : `filter(${previous}, ${previous}.${current.name} == ${escapedValue})`;\n        }, '')) ||\n      tableName\n    );\n  }, [column, previousColumns, tableName]);\n\n  const expression = useMemo(() => {\n    return (\n      column &&\n      expressionFilter &&\n      maybeAggregate(\n        `${expressionFilter}.${column.name}`,\n        column.type,\n        aggregationType,\n        {\n          sum: `sum(${tableName}.${column.name})`,\n        }\n      )\n    );\n  }, [aggregationType, column, expressionFilter, tableName]);\n\n  useEffect(() => {\n    const sub = (\n      (typeof expression === 'string' &&\n        expression &&\n        computer\n          .expressionResultFromText$(expression)\n          .pipe(debounceTime(DEBOUNCE_RESULT_MS))) ||\n      EMPTY\n    ).subscribe(setResult);\n    return () => sub.unsubscribe();\n  }, [computer, expression]);\n\n  const onDragStart = useCallback(\n    (ev: DragEvent) => {\n      expression &&\n        result &&\n        typeof expression === 'string' &&\n        onDragStartSmartCell(editor)({ computer, expression, result })(ev);\n    },\n    [computer, editor, expression, result]\n  );\n\n  const onDragEnd = useOnDragEnd();\n\n  return result == null || aggregationType == null ? (\n    <td css={emptyCellStyles} />\n  ) : (\n    <UISmartCell\n      aggregationType={aggregationType}\n      result={result}\n      rowSpan={rowSpan}\n      colSpan={colSpan}\n      onHover={onHover}\n      hover={hover}\n      alignRight={alignRight}\n      global={global}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    />\n  );\n};\n","import {\n  columnAggregationTypes,\n  TotalAggregationExpressions,\n} from '@decipad/editor-table';\nimport { SerializedType } from '@decipad/computer';\nimport { TableCellType } from '@decipad/editor-types';\nimport { AggregationKind } from '../types';\n\nexport const maybeAggregate = (\n  expressionFilter: string,\n  columnType: SerializedType,\n  aggregation: AggregationKind | undefined,\n  totalAggregationExpressions: TotalAggregationExpressions\n): string | Error | undefined => {\n  try {\n    if (!aggregation) {\n      return undefined;\n    }\n    const aggregations = columnAggregationTypes(columnType as TableCellType);\n    const aggregator = aggregations.find((agg) => agg.name === aggregation);\n    if (!aggregator) {\n      throw new Error(\n        `No aggregator named ${aggregation} for column type ${columnType.kind} found`\n      );\n    }\n\n    return aggregator.expression(expressionFilter, totalAggregationExpressions);\n  } catch (err) {\n    return err as Error;\n  }\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { setSlateFragment } from '@decipad/editor-utils';\nimport { DragEvent } from 'react';\nimport { DRAG_SMART_CELL } from '@decipad/editor-plugins';\nimport { DeciNumber } from '@decipad/number';\nimport { Computer, Result } from '@decipad/computer';\nimport { dndPreviewActions } from '@decipad/react-contexts';\n\nexport const onDragStartSmartCell =\n  (editor: MyEditor) =>\n  ({\n    computer,\n    expression,\n    result,\n  }: {\n    expression: string;\n    computer: Computer;\n    result: Result.Result;\n  }) =>\n  (e: DragEvent) => {\n    // eslint-disable-next-line no-param-reassign\n    editor.dragging = DRAG_SMART_CELL;\n\n    setSlateFragment(e.dataTransfer, [expression]);\n\n    if (editor.previewRef?.current) {\n      const formatted = computer.formatNumber(\n        result.type as any,\n        result.value as DeciNumber\n      );\n\n      dndPreviewActions.previewText(formatted.asString);\n\n      e.dataTransfer.setDragImage(editor.previewRef.current, 0, 0);\n    }\n\n    editor.setFragmentData(e.dataTransfer, 'drag');\n\n    e.dataTransfer.dropEffect = 'copy';\n  };\n","import { FC, useMemo } from 'react';\nimport { Result, SerializedType } from '@decipad/computer';\nimport { DataViewRow } from '@decipad/ui';\nimport {\n  AggregationKind,\n  Column,\n  PreviousColumns,\n  ValueCell,\n} from '../../types';\nimport { treeToTable } from '../../utils/treeToTable';\nimport { useDataViewLayoutData } from '../../hooks';\nimport { DataViewDataGroupElement } from '../DataViewDataGroup';\nimport { DataViewHeader } from '..';\nimport { SmartCell } from '../SmartCell';\n\nexport interface HeaderProps {\n  type?: SerializedType;\n  value?: ValueCell;\n  rowSpan?: number;\n  colSpan?: number;\n  collapsible?: boolean;\n  onHover: (hover: boolean) => void;\n  hover: boolean;\n  alignRight?: boolean;\n  isFullWidthRow: boolean;\n  groupId: string;\n  expandedGroups: string[] | undefined;\n  onChangeExpandedGroups: (expandedGroups: string[]) => void;\n  groupLength: number;\n  index: number;\n  global?: boolean;\n}\n\nexport interface SmartProps {\n  tableName: string;\n  column: {\n    type: SerializedType;\n    value: Result.ColumnLike<Result.Comparable>;\n    name: string;\n  };\n  columnIndex?: number;\n  aggregationType: AggregationKind | undefined;\n  rowSpan?: number;\n  colSpan?: number;\n  onHover: (hover: boolean) => void;\n  hover: boolean;\n  previousColumns: PreviousColumns;\n  alignRight?: boolean;\n  global?: boolean;\n}\n\nexport interface DataViewLayoutProps {\n  tableName: string;\n  columns: Column[];\n  aggregationTypes: Array<AggregationKind | undefined>;\n  expandedGroups: string[] | undefined;\n  onChangeExpandedGroups: (expandedGroups: string[]) => void;\n}\n\nexport const DataViewDataLayout: FC<DataViewLayoutProps> = ({\n  tableName,\n  columns,\n  aggregationTypes,\n  expandedGroups = [],\n  onChangeExpandedGroups,\n}: DataViewLayoutProps) => {\n  const groups = useDataViewLayoutData(\n    columns,\n    aggregationTypes,\n    expandedGroups\n  );\n\n  const table = useMemo(\n    () =>\n      treeToTable({\n        elementType: 'group',\n        children: groups,\n        columnIndex: -1,\n      }),\n    [groups]\n  );\n\n  const cols = useMemo(\n    () =>\n      table.map((row) => {\n        return row.reduce((previous, current) => {\n          const colspan = current && current.colspan ? current.colspan : 0;\n          return previous + colspan;\n        }, 0);\n      }),\n    [table]\n  );\n\n  const maxCols = Math.max(...cols);\n\n  return (\n    <>\n      {table.map((row, index) => {\n        return (\n          <DataViewRow\n            key={`${table.indexOf(row)}-${index}}`}\n            isFullWidth={row.length === maxCols}\n            isBeforeFullWidthRow={\n              table[index + 1] && table[index + 1].length === maxCols\n            }\n            global={row.some((r) => r.global)}\n          >\n            {row.map((element, elementIndex) => (\n              <DataViewDataGroupElement\n                key={`${table.indexOf(row)}-${index}-${elementIndex}}`}\n                index={index}\n                tableName={tableName}\n                element={element}\n                aggregationType={aggregationTypes[element.columnIndex]}\n                Header={DataViewHeader}\n                SmartCell={SmartCell}\n                isFullWidthRow={row.length === maxCols}\n                expandedGroups={expandedGroups}\n                onChangeExpandedGroups={onChangeExpandedGroups}\n                groupLength={row.length}\n              />\n            ))}\n          </DataViewRow>\n        );\n      })}\n    </>\n  );\n};\n","import { createNormalizerPlugin } from '@decipad/editor-plugins';\nimport {\n  ELEMENT_DATA_VIEW,\n  MyEditor,\n  MyNodeEntry,\n  TableColumnFormulaElement,\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_DATA_VIEW_TR,\n  ELEMENT_DATA_VIEW_CAPTION,\n  ELEMENT_DATA_VIEW_NAME,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  DataViewCaptionElement,\n  DataViewElement,\n  DataViewHeaderRowElement,\n  DataViewNameElement,\n} from '@decipad/editor-types';\nimport { assertElementType, insertNodes } from '@decipad/editor-utils';\nimport {\n  findNode,\n  getChildren,\n  isText,\n  removeNodes,\n  setNodes,\n  wrapNodes,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { NodeEntry } from 'slate';\n\nconst normalizeDataViewElement = (\n  editor: MyEditor,\n  entry: NodeEntry<DataViewElement>\n): boolean => {\n  const [node, path] = entry;\n\n  if (!node.children) {\n    setNodes(editor, { children: [{ text: '' }] }, { at: path });\n    return true;\n  }\n\n  if (node.children.length < 1) {\n    insertNodes<DataViewCaptionElement>(\n      editor,\n      [\n        {\n          id: nanoid(),\n          type: ELEMENT_DATA_VIEW_CAPTION,\n          children: [\n            {\n              id: nanoid(),\n              type: ELEMENT_DATA_VIEW_NAME,\n              children: [{ text: '' }],\n            },\n          ],\n        },\n      ],\n      { at: [...path, 0] }\n    );\n    return true;\n  }\n  if (node.children.length < 2) {\n    insertNodes<DataViewHeaderRowElement>(\n      editor,\n      [\n        {\n          id: nanoid(),\n          type: ELEMENT_DATA_VIEW_TR,\n          children: [],\n        },\n      ],\n      { at: [...path, 1] }\n    );\n    return true;\n  }\n\n  if (node.children[0].type !== ELEMENT_DATA_VIEW_CAPTION) {\n    setNodes(editor, { type: ELEMENT_DATA_VIEW_CAPTION }, { at: [...path, 0] });\n    return true;\n  }\n\n  if (node.children[0].children.length < 1) {\n    insertNodes<DataViewNameElement>(\n      editor,\n      {\n        id: nanoid(),\n        type: ELEMENT_DATA_VIEW_NAME,\n        children: [{ text: '' }],\n      },\n      { at: [...path, 0, 0] }\n    );\n    return true;\n  }\n  if (node.children[0].children[0]?.type !== ELEMENT_DATA_VIEW_NAME) {\n    if (isText(node.children[0].children[0])) {\n      wrapNodes(\n        editor,\n        { id: nanoid(), type: ELEMENT_DATA_VIEW_NAME, children: [] },\n        { at: [...path, 0, 0] }\n      );\n    } else {\n      setNodes(\n        editor,\n        { type: ELEMENT_DATA_VIEW_NAME },\n        { at: [...path, 0, 0] }\n      );\n    }\n    return true;\n  }\n\n  if (node.children[1].type !== ELEMENT_DATA_VIEW_TR) {\n    removeNodes(editor, { at: [...path, 1] });\n    return true;\n  }\n\n  return false;\n};\n\nconst normalizeDataViewHeaders = (\n  editor: MyEditor,\n  entry: NodeEntry<DataViewElement>\n): boolean => {\n  const [node, path] = entry;\n  if (!node.children[1].children) {\n    setNodes<DataViewHeaderRowElement>(editor, { children: [] }, { at: path });\n    return true;\n  }\n\n  // Migrate old IDs, which referred to the formula ID, to the column ID\n  for (const [child, childPath] of getChildren([\n    node.children[1],\n    [...path, 1],\n  ])) {\n    const byId =\n      findNode<TableColumnFormulaElement>(editor, {\n        match: { id: child.name },\n      }) ?? [];\n    if (byId[0]?.type === ELEMENT_TABLE_COLUMN_FORMULA) {\n      setNodes(editor, { name: byId[0].columnId }, { at: childPath });\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst normalizeDataViewPlugin =\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [node] = entry;\n    assertElementType(node, ELEMENT_DATA_VIEW);\n    return (\n      normalizeDataViewElement(editor, entry as NodeEntry<DataViewElement>) ||\n      normalizeDataViewHeaders(editor, entry as NodeEntry<DataViewElement>)\n    );\n  };\n\nexport const createNormalizeDataViewPlugin = () =>\n  createNormalizerPlugin({\n    name: 'PLUGIN_NORMALIZE_DATA_VIEW',\n    elementType: ELEMENT_DATA_VIEW,\n    acceptableElementProperties: ['expandedGroups', 'varName', 'color', 'icon'],\n    acceptableSubElements: [ELEMENT_TABLE_CAPTION, ELEMENT_DATA_VIEW_TR],\n    plugin: normalizeDataViewPlugin,\n  });\n","import {\n  ELEMENT_DATA_VIEW,\n  ELEMENT_DATA_VIEW_CAPTION,\n  ELEMENT_DATA_VIEW_TH,\n  ELEMENT_DATA_VIEW_TR,\n} from '@decipad/editor-types';\nimport { createPluginFactory } from '@udecode/plate';\nimport { createEventInterceptorPluginFactory } from '@decipad/editor-plugins';\nimport {\n  DataView,\n  DataViewCaption,\n  DataViewColumnHeader,\n  DataViewColumnHeaderRow,\n} from '../components';\nimport { createNormalizeDataViewPlugin } from './createNormalizeDataViewPlugin';\n\nexport const createDataViewPlugin = createPluginFactory({\n  key: ELEMENT_DATA_VIEW,\n  isElement: true,\n  component: DataView,\n  plugins: [\n    {\n      key: ELEMENT_DATA_VIEW_CAPTION,\n      isElement: true,\n      component: DataViewCaption,\n    },\n    {\n      key: ELEMENT_DATA_VIEW_TR,\n      isElement: true,\n      isVoid: false,\n      component: DataViewColumnHeaderRow,\n    },\n    {\n      key: ELEMENT_DATA_VIEW_TH,\n      isElement: true,\n      component: DataViewColumnHeader,\n    },\n    createNormalizeDataViewPlugin(),\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_DATA_VIEW',\n      elementTypes: [ELEMENT_DATA_VIEW],\n      interceptor: () => true,\n    })(),\n  ],\n});\n","import { useCallback, useState } from 'react';\nimport { DraggableBlock } from '@decipad/editor-components';\nimport {\n  ELEMENT_DATA_VIEW,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n} from '@decipad/editor-utils';\nimport {\n  AvailableSwatchColor,\n  UserIconKey,\n  DataView as UIDataView,\n  DataViewMenu,\n  VoidBlock,\n} from '@decipad/ui';\nimport { useEditorStylesContext } from '@decipad/react-contexts';\nimport { DataViewData } from '../DataViewData';\nimport { useDataView } from '../../hooks';\nimport { WIDE_MIN_COL_COUNT } from '../../constants';\n\nexport const DataView: PlateComponent<{ variableName: string }> = ({\n  attributes,\n  children,\n  element,\n}) => {\n  assertElementType(element, ELEMENT_DATA_VIEW);\n  const [deleted, setDeleted] = useState(false);\n  const editor = useTEditorRef();\n\n  const saveIcon = useElementMutatorCallback(editor, element, 'icon');\n  const saveColor = useElementMutatorCallback(editor, element, 'color');\n  const saveExpandedGroups = useElementMutatorCallback(\n    editor,\n    element,\n    'expandedGroups'\n  );\n\n  const {\n    variableNames,\n    tableName,\n    onDelete,\n    onVariableNameChange,\n    sortedColumns,\n    selectedAggregationTypes,\n    onInsertColumn,\n    availableColumns,\n  } = useDataView({\n    editor,\n    element,\n  });\n\n  const wideTable = (sortedColumns?.length || 0) >= WIDE_MIN_COL_COUNT;\n\n  const { color: defaultColor } = useEditorStylesContext();\n\n  const onBlockDelete = useCallback(() => {\n    setDeleted(true);\n    onDelete();\n  }, [onDelete]);\n\n  return !deleted ? (\n    <DraggableBlock\n      element={element}\n      blockKind={wideTable ? 'editorWideTable' : 'editorTable'}\n      onDelete={onBlockDelete}\n      {...attributes}\n    >\n      <UIDataView\n        availableVariableNames={variableNames}\n        variableName={element.varName || ''}\n        onChangeVariableName={onVariableNameChange}\n        onChangeIcon={saveIcon}\n        onChangeColor={saveColor}\n        icon={(element.icon ?? 'Table') as UserIconKey}\n        color={(element.color ?? defaultColor) as AvailableSwatchColor}\n        data={\n          (sortedColumns && tableName && (\n            <DataViewData\n              tableName={tableName}\n              columns={sortedColumns}\n              aggregationTypes={selectedAggregationTypes}\n              expandedGroups={element.expandedGroups}\n              onChangeExpandedGroups={saveExpandedGroups}\n            />\n          )) ||\n          null\n        }\n      >\n        {children}\n        <VoidBlock>\n          <DataViewMenu\n            availableColumns={availableColumns}\n            onInsertColumn={onInsertColumn}\n          />\n        </VoidBlock>\n      </UIDataView>\n    </DraggableBlock>\n  ) : null;\n};\n","export const DECORATION_CELL_UNIT = 'dec-cell-unit';\nexport const WIDE_MIN_COL_COUNT = 5;\n","import {\n  ELEMENT_DATA_VIEW_CAPTION,\n  ELEMENT_TABLE,\n  PlateComponent,\n  TableElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { EditableTableCaption } from '@decipad/ui';\nimport {\n  findNodePath,\n  getAboveNode,\n  getNodeChild,\n  getNodeString,\n  isElement,\n} from '@udecode/plate';\nimport { insertDataViewBelow } from 'libs/editor-components/src/utils/data-view';\nimport { useCallback } from 'react';\n\nexport const DataViewCaption: PlateComponent = ({\n  element,\n  attributes,\n  children,\n}) => {\n  const readOnly = useIsEditorReadOnly();\n\n  assertElementType(element, ELEMENT_DATA_VIEW_CAPTION);\n  const editor = useTEditorRef();\n  const path = findNodePath(editor, element);\n  const parent = getAboveNode<TableElement>(editor, {\n    at: path,\n    match: (node) => {\n      return isElement(node) && node.type === ELEMENT_TABLE;\n    },\n  });\n\n  const onAddDataViewButtonPress = useCallback(() => {\n    if (!parent) {\n      return;\n    }\n\n    const [tableElement, parentPath] = parent;\n\n    return (\n      path &&\n      insertDataViewBelow(\n        editor,\n        parentPath,\n        tableElement.id,\n        getNodeString(getNodeChild(element, 0))\n      )\n    );\n  }, [editor, element, parent, path]);\n\n  return (\n    <div {...attributes}>\n      <EditableTableCaption\n        readOnly={readOnly}\n        empty={getNodeString(element.children[0]).length === 0}\n        onAddDataViewButtonPress={onAddDataViewButtonPress}\n        showToggleCollapsedButton={!!parent}\n      >\n        {children}\n      </EditableTableCaption>\n    </div>\n  );\n};\n","import { ELEMENT_DATA_VIEW_TR, PlateComponent } from '@decipad/editor-types';\nimport { assertElementType } from '@decipad/editor-utils';\nimport { DataViewColumnHeaderRow as UIDataViewColumnHeaderRow } from '@decipad/ui';\n\nexport const DataViewColumnHeaderRow: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  assertElementType(element, ELEMENT_DATA_VIEW_TR);\n\n  return (\n    <UIDataViewColumnHeaderRow attributes={attributes}>\n      {children}\n    </UIDataViewColumnHeaderRow>\n  );\n};\n","import { useDrag } from 'react-dnd';\nimport { TEditor } from '@udecode/plate';\nimport { DragColumnItem } from '@decipad/editor-table';\n\ninterface CollectedProps {\n  isDragging: boolean;\n}\n\nexport type ColumnType = 'TableColumn' | 'DataViewColumn';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useDragColumn = (\n  _editor: TEditor,\n  id: string,\n  columnType: ColumnType = 'TableColumn'\n) => {\n  return useDrag<DragColumnItem, void, CollectedProps>(\n    () => ({\n      type: columnType,\n      item() {\n        return { id };\n      },\n      collect: (monitor): CollectedProps => ({\n        isDragging: monitor.isDragging(),\n      }),\n      end: () => {\n        // do nothing for now\n      },\n    }),\n    []\n  );\n};\n","import { MyEditor, MyElement, DataViewElement } from '@decipad/editor-types';\nimport { ConnectDropTarget, useDrop } from 'react-dnd';\nimport {\n  ColumnDndDirection,\n  DragColumnItem,\n  findSwappableColumns,\n  getHoverDirection,\n} from '@decipad/editor-table';\nimport { MutableRefObject, useState } from 'react';\nimport { useDataViewActions } from './useDataViewActions';\nimport { ColumnType } from './useDragColumn';\n\ninterface CollectedProps {\n  isOver: boolean;\n  overDirection: ColumnDndDirection;\n  isOverCurrent: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useDropColumn = (\n  editor: MyEditor,\n  table: DataViewElement | undefined,\n  column: MyElement,\n  columnHeaderRef: MutableRefObject<HTMLTableCellElement | null>,\n  columnType: ColumnType = 'TableColumn'\n): [CollectedProps, ConnectDropTarget, 'left' | 'right' | undefined] => {\n  const { onMoveColumn } = useDataViewActions(editor, table);\n  const [hoverDirection, setHoverDirection] = useState<\n    'left' | 'right' | undefined\n  >(undefined);\n\n  const swapCtx = table && {\n    editor,\n    table,\n    column,\n  };\n\n  const useDropResult = useDrop<DragColumnItem, void, CollectedProps>(\n    {\n      accept: columnType,\n      collect: (monitor) => ({\n        isOver: monitor.isOver(),\n        isOverCurrent: monitor.isOver({ shallow: true }),\n        overDirection:\n          getHoverDirection(editor, {\n            monitor,\n            element: column,\n            ref: columnHeaderRef,\n          }) || undefined,\n      }),\n      hover: (_, monitor) => {\n        setHoverDirection(\n          getHoverDirection(editor, {\n            monitor,\n            element: column,\n            ref: columnHeaderRef,\n          })\n        );\n      },\n      drop: (columnItem, monitor) => {\n        const columns =\n          swapCtx &&\n          findSwappableColumns(swapCtx, columnItem, monitor, hoverDirection);\n        if (columns) {\n          onMoveColumn(...columns);\n        }\n      },\n    } // every 0.5 seconds this reavaluates\n  );\n\n  return [...useDropResult, hoverDirection];\n};\n","export const noopPromise = () => Promise.resolve();\n","export const DECORATION_EXPRESSION_SYNTAX = 'dec_exp';\n","import { MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport {\n  deleteText,\n  getChildren,\n  getNode,\n  getNodeString,\n  insertText,\n  isText,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport diff from 'fast-diff';\nimport { Path, Point } from 'slate';\n\nconst getPoint = (entry: MyNodeEntry, offset: number): Point | undefined => {\n  let currentOffset = 0;\n  for (const child of getChildren(entry)) {\n    const [node, path] = child;\n    if (!isText(node)) {\n      throw new Error('direct children should be text only nodes');\n    }\n    if (currentOffset + node.text.length >= offset) {\n      const textNodeOffset = offset - currentOffset;\n      return { path, offset: textNodeOffset };\n    }\n    currentOffset += node.text.length;\n  }\n  return undefined;\n};\n\nexport const mutateText = (editor: MyEditor, path: Path) => {\n  const converge = (newText: string): void => {\n    const element = getNode(editor, path);\n    if (!element) {\n      return;\n    }\n    withoutNormalizing(editor, () => {\n      const text = getNodeString(element);\n      const d = diff(text, newText);\n      let offset = 0;\n      for (const difference of d) {\n        switch (difference[0]) {\n          case diff.EQUAL: {\n            offset += difference[1].length;\n            break;\n          }\n          case diff.DELETE: {\n            deleteText(editor, {\n              at: getPoint([element, path], offset),\n              distance: difference[1].length,\n            });\n            return converge(newText);\n          }\n          case diff.INSERT: {\n            insertText(editor, difference[1], {\n              at: getPoint([element, path], offset),\n            });\n            return converge(newText);\n          }\n        }\n      }\n    });\n  };\n\n  return converge;\n};\n","import {\n  MyEditor,\n  MyElement,\n  useTEditorRef,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport { Result } from '@decipad/computer';\nimport { useComputer } from '@decipad/react-contexts';\nimport {\n  setNodes,\n  findNodePath,\n  getNodeEntry,\n  getNodeString,\n  removeNodes,\n  focusEditor,\n} from '@udecode/plate';\nimport { textify } from '@decipad/parse';\nimport { Path } from 'slate';\nimport { useMemo } from 'react';\nimport { createStructuredCodeLine, insertNodes } from '@decipad/editor-utils';\n\nexport const defaultWidgetConversions: { title: string; value: string }[] = [\n  { title: 'Input', value: 'expression' },\n  { title: 'Toggle', value: 'toggle' },\n  { title: 'Date', value: 'date' },\n  { title: 'Slider', value: 'slider' },\n  { title: 'Dropdown', value: 'dropdown' },\n];\n\nexport const defaultConvertInto =\n  (editor: MyEditor, at?: Path, result?: Result.Result) => (value: string) => {\n    if (!at) {\n      return;\n    }\n\n    if (value === 'calculation' && result) {\n      let code: string;\n      try {\n        code = textify(result);\n      } catch {\n        return;\n      }\n\n      const [node] = getNodeEntry<VariableDefinitionElement>(editor, at);\n      const {\n        id,\n        children: [caption],\n      } = node;\n      const varName = getNodeString(caption);\n\n      removeNodes(editor, { at });\n      insertNodes(editor, createStructuredCodeLine({ id, varName, code }), {\n        at,\n      });\n    }\n\n    const coercedKind =\n      value === 'toggle'\n        ? 'boolean'\n        : value === 'date'\n        ? 'date'\n        : value === 'dropdown'\n        ? 'string'\n        : 'number';\n\n    setNodes(\n      editor,\n      { variant: value, coerceToType: { kind: coercedKind, date: 'day' } },\n      { at }\n    );\n    focusEditor(editor);\n  };\n\nexport const useTurnIntoProps = (element: MyElement) => {\n  const editor = useTEditorRef();\n  const computer = useComputer();\n\n  const result = computer.getBlockIdResult$.useWithSelector(\n    (r) => r?.result,\n    element.id\n  );\n\n  const onTurnInto = useMemo(\n    () => defaultConvertInto(editor, findNodePath(editor, element), result),\n    [editor, element, result]\n  );\n  const turnInto = useMemo(\n    () => [\n      ...(result ? [{ title: 'Calculation', value: 'calculation' }] : []),\n      ...defaultWidgetConversions.filter(\n        ({ value }) => value !== element.variant\n      ),\n    ],\n    [element, result]\n  );\n\n  return {\n    onTurnInto,\n    turnInto,\n  };\n};\n","import { AvailableSwatchColor } from '@decipad/ui';\nimport { createContext, useContext } from 'react';\n\ninterface VariableEditorContextValue {\n  color?: AvailableSwatchColor;\n}\n\nexport const VariableEditorContext = createContext<VariableEditorContextValue>(\n  {}\n);\nexport const useVariableEditorContext = (): VariableEditorContextValue =>\n  useContext(VariableEditorContext);\n\nexport const VariableEditorContextProvider = VariableEditorContext.Provider;\n","import { ClientEventsContext } from '@decipad/client-events';\nimport {\n  DraggableBlock,\n  useTextTypeInference,\n} from '@decipad/editor-components';\nimport {\n  ELEMENT_DISPLAY,\n  ELEMENT_VARIABLE_DEF,\n  PlateComponent,\n  useTEditorRef,\n  VariableDropdownElement,\n  VariableSliderElement,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  hasLayoutAncestor,\n  mutateText,\n  safeDelete,\n  useElementMutatorCallback,\n  useNodePath,\n  wrapIntoColumns,\n} from '@decipad/editor-utils';\nimport { SerializedType } from '@decipad/computer';\nimport {\n  useEditorStylesContext,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport { VariableEditor } from '@decipad/ui';\nimport {\n  findNode,\n  findNodePath,\n  getNodeString,\n  moveNodes,\n  PlateEditor,\n  serializeHtml,\n} from '@udecode/plate';\nimport copy from 'copy-to-clipboard';\nimport { defaultMoveNode } from 'libs/editor-components/src/utils/useDnd';\nimport { AvailableSwatchColor } from 'libs/ui/src/utils';\nimport { ComponentProps, useCallback, useContext, useState } from 'react';\nimport { Editor, Path } from 'slate';\nimport { useTurnIntoProps } from '../utils/useTurnIntoProps';\nimport { VariableEditorContextProvider } from './VariableEditorContext';\n\nexport const VariableDef: PlateComponent = ({\n  attributes,\n  element,\n  children,\n}) => {\n  assertElementType(element, ELEMENT_VARIABLE_DEF);\n  const [deleted, setDeleted] = useState(false);\n\n  const editor = useTEditorRef();\n  const readOnly = useIsEditorReadOnly();\n  const userEvents = useContext(ClientEventsContext);\n\n  const onDelete = useCallback(() => {\n    const path = findNodePath(editor, element);\n    if (path) {\n      setDeleted(true);\n      safeDelete(editor, path);\n    }\n  }, [editor, element]);\n\n  const onCopy = useCallback(() => {\n    copy(serializeHtml(editor as PlateEditor, { nodes: [element] }), {\n      format: 'text/html',\n    });\n  }, [editor, element]);\n\n  // Slider\n  const onChangeMax = useElementMutatorCallback(\n    editor,\n    (element as VariableSliderElement).children[2],\n    'max'\n  );\n  const onChangeMin = useElementMutatorCallback(\n    editor,\n    (element as VariableSliderElement).children[2],\n    'min'\n  );\n  const onChangeStep = useElementMutatorCallback(\n    editor,\n    (element as VariableSliderElement).children[2],\n    'step'\n  );\n\n  const onChangeSmartSelection = useElementMutatorCallback(\n    editor,\n    (element as VariableDropdownElement).children[1],\n    'smartSelection'\n  );\n\n  const inferredType = useTextTypeInference(element);\n\n  const onChangeTypeMutator = useElementMutatorCallback(\n    editor,\n    element,\n    'coerceToType'\n  );\n  const onChangeType = useCallback(\n    (type: SerializedType | 'smart-selection' | undefined): void => {\n      // Analytics\n      userEvents({\n        type: 'action',\n        action: 'widget type changed',\n        props: {\n          variant: element.variant,\n          ...(element.variant === 'date' &&\n            type !== 'smart-selection' &&\n            type?.kind === 'date' && {\n              subVar: type.date,\n            }),\n          isReadOnly: readOnly,\n          newType:\n            type === 'smart-selection' ? 'smart-selection' : type?.kind || '',\n        },\n      });\n\n      // Used for dropdown widget\n      if (type === 'smart-selection') {\n        onChangeSmartSelection(\n          !(element as VariableDropdownElement).children[1].smartSelection\n        );\n        onChangeTypeMutator({\n          kind: 'number',\n          unit: null,\n        });\n      } else {\n        // When dropdown widget changes to text ot input, it is no longer a smart selection\n        if (element.variant === 'dropdown') {\n          onChangeSmartSelection(false);\n        }\n        onChangeTypeMutator(type);\n      }\n    },\n    [onChangeTypeMutator, onChangeSmartSelection, element, userEvents, readOnly]\n  );\n\n  const onChangeValue = useCallback(\n    (value: string | undefined) => {\n      const path = findNodePath(editor, element.children[1]);\n      if (path) {\n        mutateText(editor, path)(value?.toString() ?? '');\n      }\n    },\n    [editor, element]\n  );\n\n  const path = useNodePath(element);\n  const isHorizontal = !deleted && path && hasLayoutAncestor(editor, path);\n\n  const getAxis = useCallback<\n    NonNullable<ComponentProps<typeof DraggableBlock>['getAxis']>\n  >(\n    (_, monitor) => ({\n      horizontal:\n        monitor.getItemType() === ELEMENT_VARIABLE_DEF ||\n        monitor.getItemType() === ELEMENT_DISPLAY,\n      vertical: !isHorizontal,\n    }),\n    [isHorizontal]\n  );\n\n  const onDrop = useCallback<\n    NonNullable<ComponentProps<typeof DraggableBlock>['onDrop']>\n  >(\n    (item, _, direction) => {\n      if (!path || (direction !== 'left' && direction !== 'right')) {\n        return defaultMoveNode(editor, item, element.id, direction);\n      }\n\n      Editor.withoutNormalizing(editor as Editor, () => {\n        const dragPath = findNode(editor, {\n          at: [],\n          match: { id: item.id },\n        })?.[1];\n        let dropPath: Path = [];\n\n        if (isHorizontal) {\n          if (direction === 'left') {\n            dropPath = path;\n          }\n          if (direction === 'right') {\n            dropPath = Path.next(path);\n          }\n        } else {\n          dropPath = [...path, direction === 'left' ? 0 : 1];\n          wrapIntoColumns(editor, path);\n        }\n\n        moveNodes(editor, { at: dragPath, to: dropPath });\n      });\n    },\n    [editor, element.id, isHorizontal, path]\n  );\n\n  const { color: defaultColor } = useEditorStylesContext();\n\n  const turnIntoProps = useTurnIntoProps(element);\n\n  if (deleted) {\n    return <></>;\n  }\n  const { color = defaultColor } = element.children[0];\n\n  return (\n    <DraggableBlock\n      blockKind=\"interactive\"\n      element={element}\n      accept={\n        isHorizontal ? [ELEMENT_VARIABLE_DEF, ELEMENT_DISPLAY] : undefined\n      }\n      getAxis={getAxis}\n      onDrop={onDrop}\n      contentEditable={true}\n      suppressContentEditableWarning\n      id={element.id}\n      dependencyId={element.id}\n      {...turnIntoProps}\n      {...attributes}\n    >\n      <VariableEditorContextProvider\n        value={{\n          color: color as AvailableSwatchColor,\n        }}\n      >\n        <VariableEditor\n          variant={element.variant}\n          onDelete={onDelete}\n          onCopy={onCopy}\n          onChangeMax={onChangeMax}\n          onChangeMin={onChangeMin}\n          onChangeStep={onChangeStep}\n          max={\n            element.variant === 'slider' ? element.children[2]?.max : undefined\n          }\n          min={\n            element.variant === 'slider' ? element.children[2]?.min : undefined\n          }\n          step={\n            element.variant === 'slider' ? element.children[2]?.step : undefined\n          }\n          color={color as AvailableSwatchColor}\n          readOnly={readOnly}\n          type={element.coerceToType ?? inferredType}\n          onChangeType={onChangeType}\n          value={getNodeString(element.children[1])}\n          onChangeValue={onChangeValue}\n          smartSelection={\n            element.variant === 'dropdown'\n              ? element.children[1].smartSelection\n              : false\n          }\n          element={element}\n        >\n          {children}\n        </VariableEditor>\n      </VariableEditorContextProvider>\n    </DraggableBlock>\n  );\n};\n","import { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { ComponentProps, FC, ReactNode } from 'react';\nimport * as icons from '../../icons';\n\nimport {\n  cssVar,\n  display,\n  p13Regular,\n  p16Regular,\n  placeholderOpacity,\n  setCssVar,\n  smallScreenQuery,\n} from '../../primitives';\nimport { AvailableSwatchColor, UserIconKey } from '../../utils';\nimport { IconPopover } from '../IconPopover/IconPopover';\n\ninterface CaptionProps\n  extends Pick<\n    ComponentProps<typeof IconPopover>,\n    'onChangeColor' | 'onChangeIcon'\n  > {\n  color?: AvailableSwatchColor;\n  icon?: UserIconKey;\n  empty?: boolean;\n  children: ReactNode;\n}\n\nconst nameWrapperStyles = css({\n  alignItems: 'center',\n  display: 'flex',\n  gap: '4px',\n});\n\nconst iconWrapperStyles = css(\n  setCssVar('currentTextColor', cssVar('weakTextColor')),\n  {\n    display: 'grid',\n    height: '20px',\n    width: '20px',\n    flexShrink: 0,\n\n    [smallScreenQuery]: {\n      height: '16px',\n      width: '16px',\n    },\n  }\n);\n\nconst placeholderStyles = css(p16Regular, {\n  display: 'grid',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  width: '100%',\n\n  '> span, ::before': {\n    gridArea: '1 / 1',\n  },\n\n  '::before': {\n    ...display,\n    ...p16Regular,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    pointerEvents: 'none',\n    content: 'attr(aria-placeholder)',\n    opacity: placeholderOpacity,\n\n    [smallScreenQuery]: p13Regular,\n  },\n\n  [smallScreenQuery]: p13Regular,\n});\n\nexport const Caption = ({\n  empty = false,\n  children,\n  color = 'Sulu',\n  icon = 'Frame',\n  onChangeColor = noop,\n  onChangeIcon = noop,\n}: CaptionProps): ReturnType<FC> => {\n  const Icon = icons[icon];\n  return (\n    <div css={nameWrapperStyles}>\n      {useIsEditorReadOnly() ? (\n        <span contentEditable={false} css={iconWrapperStyles}>\n          <Icon />\n        </span>\n      ) : (\n        <IconPopover\n          onChangeColor={onChangeColor}\n          onChangeIcon={onChangeIcon}\n          color={color}\n          trigger={\n            <button contentEditable={false} css={iconWrapperStyles}>\n              <Icon />\n            </button>\n          }\n        />\n      )}\n      <div\n        css={placeholderStyles}\n        aria-placeholder={empty ? 'Name your input' : ''}\n        spellCheck={false}\n        data-testid=\"input-widget-name\"\n      >\n        <span>\n          <span>{children}</span>\n        </span>\n      </div>\n    </div>\n  );\n};\n","import { Caption as UICaption, Tooltip, UserIconKey } from '@decipad/ui';\nimport {\n  ELEMENT_CAPTION,\n  ELEMENT_VARIABLE_DEF,\n  PlateComponent,\n  useTEditorRef,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport {\n  getNodeString,\n  findNodePath,\n  getAboveNode,\n  isElement,\n} from '@udecode/plate';\nimport {\n  useElementMutatorCallback,\n  useEnsureValidVariableName,\n} from '@decipad/editor-utils';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { useContext, useRef } from 'react';\nimport { useFocused } from 'slate-react';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { useVariableEditorContext } from './VariableEditorContext';\n\nexport const Caption: PlateComponent = ({ attributes, element, children }) => {\n  if (element?.type !== ELEMENT_CAPTION) {\n    throw new Error(`Caption is meant to render caption elements`);\n  }\n\n  const editor = useTEditorRef();\n  const focused = useFocused();\n  const userEvents = useContext(ClientEventsContext);\n\n  const setIcon = useElementMutatorCallback(editor, element, 'icon');\n  const setColor = useElementMutatorCallback(editor, element, 'color');\n\n  // Captions are not editable in read mode.\n  const isEditable = !useIsEditorReadOnly();\n  const { color } = useVariableEditorContext();\n\n  // ensure variable name is unique\n  const path = findNodePath(editor, element);\n  const parent = getAboveNode<VariableDefinitionElement>(editor, {\n    at: path,\n    match: (node) => {\n      return isElement(node) && node.type === ELEMENT_VARIABLE_DEF;\n    },\n  });\n  const tooltip = useEnsureValidVariableName(element, parent?.[0].id);\n\n  // Analytics\n  const nodeText = getNodeString(element);\n  const oldStr = useRef(nodeText);\n\n  // Not focused because we don't want to update everytime the user types,\n  // just when they are done typing, which we assume is when they click away.\n  if (nodeText !== oldStr.current && !focused) {\n    oldStr.current = getNodeString(element);\n    userEvents({\n      type: 'action',\n      action: 'widget renamed',\n      props: {\n        variant: parent?.[0].variant || 'expression',\n      },\n    });\n  }\n\n  const caption = (\n    <div\n      {...attributes}\n      contentEditable={isEditable}\n      suppressContentEditableWarning\n    >\n      <UICaption\n        color={color}\n        onChangeIcon={setIcon}\n        onChangeColor={setColor}\n        icon={element.icon as UserIconKey}\n        empty={getNodeString(element).length === 0}\n      >\n        {children}\n      </UICaption>\n    </div>\n  );\n\n  return tooltip ? (\n    <Tooltip side=\"left\" hoverOnly open trigger={caption}>\n      {tooltip}\n    </Tooltip>\n  ) : (\n    caption\n  );\n};\n","import { SerializedType } from '@decipad/language';\nimport { css } from '@emotion/react';\nimport { ComponentProps, FC, ReactNode, useEffect, useRef } from 'react';\nimport { CodeError } from '../../atoms';\nimport {\n  cssVar,\n  display,\n  Opacity,\n  p24Medium,\n  p32Medium,\n  setCssVar,\n  smallScreenQuery,\n} from '../../primitives';\n\nconst baseWrapperStyles = css({\n  width: '100%',\n  display: 'grid',\n  overflow: 'hidden',\n});\n\nconst expressionInputStyles = css({\n  color: cssVar('strongTextColor'),\n  borderRadius: '8px',\n  minWidth: 0,\n  padding: '0 8px',\n  ':hover': {\n    backgroundColor: cssVar('highlightColor'),\n  },\n});\n\nconst focusedExpressionInputStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n});\n\nconst placeholderOpacity: Opacity = 0.4;\n\nconst placeholderStyles = css({\n  cursor: 'text',\n\n  // overlap content (blinking caret) and placeholder\n  display: 'grid',\n  '> span, ::before': {\n    gridArea: '1 / 1',\n  },\n  '::before': {\n    ...display,\n    ...p32Medium,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    pointerEvents: 'none',\n    content: 'attr(aria-placeholder)',\n    opacity: placeholderOpacity,\n\n    [smallScreenQuery]: p24Medium,\n  },\n\n  [smallScreenQuery]: p24Medium,\n});\n\nconst lineStyles = css({\n  whiteSpace: 'pre',\n  overflow: 'hidden',\n  scrollSnapAlign: 'start',\n  fontVariantNumeric: 'tabular-nums',\n});\n\nconst errorContainerStyles = css({\n  alignSelf: 'center',\n  justifySelf: 'center',\n});\n\ninterface VariableEditorProps {\n  type?: SerializedType;\n  error?: ComponentProps<typeof CodeError>;\n  focused?: boolean;\n  placeholder?: string;\n  children?: ReactNode;\n}\n\nexport const Expression = ({\n  type,\n  error,\n  focused = false,\n  placeholder = '',\n  children,\n}: VariableEditorProps): ReturnType<FC> => {\n  const inputRef = useRef<HTMLSpanElement | null>(null);\n  useEffect(() => {\n    if (inputRef.current && !focused) {\n      inputRef.current.scrollLeft = 0;\n    }\n  }, [focused]);\n\n  return (\n    <div\n      css={[\n        baseWrapperStyles,\n        { gridTemplateColumns: error ? '1fr 24px' : '1fr' },\n      ]}\n    >\n      <div\n        css={[\n          type?.kind !== 'date' ? p32Medium : p24Medium,\n          expressionInputStyles,\n          placeholderStyles,\n          focused && focusedExpressionInputStyles,\n        ]}\n        aria-placeholder={placeholder}\n      >\n        <span css={lineStyles} ref={inputRef}>\n          {children}\n        </span>\n      </div>\n      {error && (\n        <div contentEditable={false} css={errorContainerStyles}>\n          <CodeError {...error} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Expression as UIExpression } from '@decipad/ui';\nimport {\n  ELEMENT_EXPRESSION,\n  PlateComponent,\n  useTEditorRef,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport type { SerializedType } from '@decipad/computer';\nimport { useSelected } from 'slate-react';\nimport { getNodeString, getParentNode } from '@udecode/plate';\nimport { useNodePath } from '@decipad/editor-utils';\nimport { useContext, useRef, useEffect, useMemo } from 'react';\nimport { useComputer, useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { formatError } from '@decipad/format';\nimport { docs } from '@decipad/routing';\nimport { useDelayedTrue } from '@decipad/react-utils';\nimport { ClientEventsContext } from '@decipad/client-events';\n\nconst getPlaceHolder = (type: SerializedType | undefined) => {\n  if (!type) return '1 km';\n  switch (type.kind) {\n    case 'string':\n      return 'Type here...';\n    case 'date':\n      switch (type.date) {\n        case 'hour':\n          return '2001-11-27 17:01';\n        case 'day':\n          return '2001-11-27';\n        case 'month':\n          return '2001-11';\n        case 'year':\n          return '2001';\n        default:\n          return 'date';\n      }\n  }\n  return '1 km';\n};\n\nexport const Expression: PlateComponent = ({\n  attributes,\n  element,\n  children,\n}) => {\n  if (element?.type !== ELEMENT_EXPRESSION) {\n    throw new Error(`Expression is meant to render expression elements`);\n  }\n\n  const path = useNodePath(element);\n  const editor = useTEditorRef();\n  const parent = useMemo(\n    () => path && getParentNode<VariableDefinitionElement>(editor, path)?.[0],\n    [editor, path]\n  );\n  const userEvents = useContext(ClientEventsContext);\n  const isReadOnly = useIsEditorReadOnly();\n\n  const computer = useComputer();\n  const [result, parseError] = computer.getBlockIdResult$.useWithSelector(\n    (r) => [r?.result, r?.error?.message],\n    parent?.id || ''\n  );\n  const showParseError = useDelayedTrue(Boolean(parseError));\n\n  const error =\n    parseError && showParseError\n      ? {\n          message: parseError,\n          url: docs({}).page({ name: 'errors' }).$,\n        }\n      : result?.type.kind === 'type-error'\n      ? {\n          message: formatError('en-US', result.type.errorCause),\n          url: docs({}).page({ name: 'errors' }).$,\n        }\n      : undefined;\n\n  const focused = useSelected();\n\n  const nodeText = getNodeString(element);\n  const oldStr = useRef(nodeText);\n\n  // Not focused because we don't want to update every time the user types,\n  // just when they are done typing, which we assume is when they click away.\n  // Sliders can be spammy, so they are handled separately.\n  useEffect(() => {\n    if (nodeText !== oldStr.current && !focused) {\n      oldStr.current = nodeText;\n      if (parent && parent.variant !== 'slider') {\n        userEvents({\n          type: 'action',\n          action: 'widget value updated',\n          props: {\n            variant: parent.variant,\n            isReadOnly,\n          },\n        });\n      }\n    }\n  }, [focused, isReadOnly, nodeText, parent, userEvents]);\n\n  return (\n    <div {...attributes}>\n      <UIExpression\n        type={result?.type}\n        error={error}\n        focused={focused}\n        placeholder={\n          getNodeString(element)\n            ? ''\n            : result\n            ? getPlaceHolder(result?.type)\n            : ''\n        }\n      >\n        {children}\n      </UIExpression>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport {\n  cssVar,\n  p24Medium,\n  p32Medium,\n  setCssVar,\n  smallScreenQuery,\n} from '../../primitives';\n\nconst leafStylesByTokenType = {\n  number: css(p32Medium, {\n    ...setCssVar('currentTextColor', cssVar('strongTextColor')),\n    [smallScreenQuery]: p24Medium,\n  }),\n  identifier: css(p32Medium, {\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    [smallScreenQuery]: p24Medium,\n  }),\n  ws: undefined,\n};\n\nexport type TokenType = keyof typeof leafStylesByTokenType;\n\ninterface CodeSyntaxProps {\n  variant: TokenType;\n  children?: ReactNode;\n}\n\nexport const CodeSyntax = ({\n  variant,\n  children,\n}: CodeSyntaxProps): ReturnType<FC> => {\n  const leafStyle = leafStylesByTokenType[variant];\n  return <span css={leafStyle}>{children}</span>;\n};\n","import { CodeSyntax as UICodeSyntax } from '@decipad/ui';\nimport { PlateComponent } from '@decipad/editor-types';\nimport { CodeSyntaxRange } from '../utils/decorateExpression';\n\nexport const CodeSyntax: PlateComponent = ({ attributes, children, leaf }) => {\n  return (\n    <span {...attributes}>\n      <UICodeSyntax\n        variant={\n          (leaf as unknown as CodeSyntaxRange).tokenType as\n            | 'number'\n            | 'identifier'\n        }\n      >\n        {children}\n      </UICodeSyntax>\n    </span>\n  );\n};\n","import { useThemeFromStore } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport * as SliderUI from '@radix-ui/react-slider';\nimport { FC, InputHTMLAttributes } from 'react';\nimport {\n  brand400,\n  cssVar,\n  grey700,\n  offBlack,\n  transparency,\n} from '../../primitives';\nimport { AvailableSwatchColor, swatchesThemed } from '../../utils';\n\nconst thumbBorderWidth = 1;\nconst thumbSize = 20;\nconst trackHeight = 4;\n\nconst sliderWrapperStyles = css({\n  padding: `calc(${thumbSize}px / 2 - ${trackHeight}px / 2) 7px`,\n  width: '100%', // Specific width is required for Firefox.\n});\n\nconst sliderStyles = css({\n  position: 'relative',\n  display: 'flex',\n  alignItems: 'center',\n  userSelect: 'none',\n  touchAction: 'none',\n  width: '280',\n});\n\nconst trackStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  position: 'relative',\n  flexGrow: 1,\n  borderRadius: '9999px',\n  height: trackHeight,\n});\n\nconst rangeStyles = css({\n  position: 'absolute',\n  backgroundColor: brand400.rgb,\n  borderRadius: '9999px',\n  height: '100%',\n});\n\nconst thumbStyles = css({\n  all: 'unset',\n  boxShadow: `0px 2px 20px ${transparency(grey700, 0.04)},\n  0px 2px 8px ${transparency(offBlack, 0.02)}`,\n\n  border: `${thumbBorderWidth}px solid ${cssVar('borderColor')}`,\n  borderRadius: '8px',\n\n  height: `${thumbSize}px`,\n  width: `${thumbSize}px`,\n\n  backgroundColor: cssVar('iconColorLight'),\n\n  cursor: 'pointer',\n  display: 'block',\n});\n\ninterface SliderProps {\n  readonly onChange?: (value: number) => void;\n  readonly onFocus?: InputHTMLAttributes<HTMLInputElement>['onFocus'];\n  readonly max?: number;\n  readonly min?: number;\n  readonly step?: number;\n  readonly value?: number;\n  readonly color?: AvailableSwatchColor;\n  /** Callback for when the user is no longer dragging */\n  readonly onCommit?: () => void;\n}\n\nexport const Slider = ({\n  onChange = noop,\n  onFocus = noop,\n  onCommit = noop,\n  max = 10,\n  min = 0,\n  step = 1,\n  value = 0,\n  color: colorName,\n}: SliderProps): ReturnType<FC> => {\n  const [darkTheme] = useThemeFromStore();\n  const baseSwatches = swatchesThemed(darkTheme);\n  const color = baseSwatches[colorName || 'Sulu'];\n  return (\n    <div css={sliderWrapperStyles}>\n      <SliderUI.Root\n        css={sliderStyles}\n        value={[Number(value)]}\n        onValueChange={(values) => values.map(onChange)}\n        onFocus={onFocus}\n        min={min}\n        max={Math.max(Number(max), Number(value))}\n        step={step}\n        onValueCommit={onCommit}\n      >\n        <SliderUI.Track css={trackStyles}>\n          <SliderUI.Range\n            css={[rangeStyles, color && { backgroundColor: color.rgb }]}\n          />\n        </SliderUI.Track>\n        <SliderUI.Thumb css={thumbStyles} />\n      </SliderUI.Root>\n    </div>\n  );\n};\n","import { useCallback, useContext } from 'react';\nimport { Slider as UISlider } from '@decipad/ui';\nimport {\n  ELEMENT_SLIDER,\n  PlateComponent,\n  useTPlateEditorRef,\n} from '@decipad/editor-types';\nimport { useElementMutatorCallback } from '@decipad/editor-utils';\nimport { ReactEditor } from 'slate-react';\nimport { setSelection } from '@udecode/plate';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { useVariableEditorContext } from './VariableEditorContext';\n\nexport const Slider: PlateComponent = ({ attributes, element, children }) => {\n  if (element?.type !== ELEMENT_SLIDER) {\n    throw new Error(`Slider is meant to render slider elements`);\n  }\n\n  const editor = useTPlateEditorRef();\n\n  const selectElement = useCallback(() => {\n    const point = {\n      path: ReactEditor.findPath(editor as ReactEditor, element),\n      offset: 0,\n    };\n    setSelection(editor, {\n      anchor: point,\n      focus: point,\n    });\n  }, [editor, element]);\n\n  const onValueChange = useElementMutatorCallback(\n    editor,\n    element,\n    'value',\n    selectElement\n  );\n\n  const onChange = useCallback(\n    (newValue: number) => {\n      onValueChange(newValue.toString());\n    },\n    [onValueChange]\n  );\n\n  // Analytics\n  const userEvents = useContext(ClientEventsContext);\n  const isReadOnly = useIsEditorReadOnly();\n  const onCommit = useCallback(() => {\n    userEvents({\n      type: 'action',\n      action: 'widget value updated',\n      props: {\n        variant: 'slider',\n        isReadOnly,\n      },\n    });\n  }, [isReadOnly, userEvents]);\n\n  const { color } = useVariableEditorContext();\n\n  return (\n    <div {...attributes} contentEditable={false}>\n      {children}\n      <UISlider\n        {...element}\n        min={Number(element.min)}\n        max={Number(element.max)}\n        step={Number(element.step)}\n        onChange={onChange}\n        value={Number(element.value)}\n        onFocus={selectElement}\n        color={color}\n        onCommit={onCommit}\n      />\n    </div>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport {\n  CaptionElement,\n  DropdownElement,\n  ELEMENT_CAPTION,\n  ELEMENT_DROPDOWN,\n  ELEMENT_EXPRESSION,\n  ELEMENT_SLIDER,\n  ELEMENT_VARIABLE_DEF,\n  ExpressionElement,\n  MyEditor,\n  MyNode,\n  MyNodeEntry,\n  SliderElement,\n} from '@decipad/editor-types';\nimport { createNormalizerPluginFactory } from '@decipad/editor-plugins';\nimport { removeNodes, setNodes } from '@udecode/plate';\nimport { insertNodes, isElementOfType } from '@decipad/editor-utils';\n\nconst allowableVariant = new Set([\n  'expression',\n  'slider',\n  'toggle',\n  'date',\n  'dropdown',\n]);\n\nconst normalize =\n  (editor: MyEditor) =>\n  ([node, path]: MyNodeEntry): boolean => {\n    if (!isElementOfType(node, ELEMENT_VARIABLE_DEF)) {\n      return false;\n    }\n    if (!('variant' in node) || !allowableVariant.has(node.variant)) {\n      setNodes(editor, { variant: 'expression' } as Partial<MyNode>, {\n        at: path,\n      });\n      return true;\n    }\n\n    if (node.children.length < 1) {\n      insertNodes(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_CAPTION,\n          children: [{ text: '' }],\n        } as CaptionElement,\n        { at: [...path, 0] }\n      );\n      return true;\n    }\n\n    if (node.children[0].type !== ELEMENT_CAPTION) {\n      removeNodes(editor, {\n        at: [...path, 0],\n      });\n      return true;\n    }\n\n    if (node.children.length < 2) {\n      if (node.variant === 'dropdown') {\n        insertNodes<DropdownElement>(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_DROPDOWN,\n            children: [{ text: '' }],\n            options: [],\n          },\n          { at: [...path, 1] }\n        );\n      } else {\n        insertNodes<ExpressionElement>(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_EXPRESSION,\n            children: [{ text: '' }],\n          },\n          { at: [...path, 1] }\n        );\n      }\n\n      return true;\n    }\n\n    if (\n      (node.children[1].type !== ELEMENT_EXPRESSION &&\n        node.variant !== 'dropdown') ||\n      (node.children[1].type !== ELEMENT_DROPDOWN &&\n        node.variant === 'dropdown')\n    ) {\n      removeNodes(editor, {\n        at: [...path, 1],\n      });\n      return true;\n    }\n\n    // Dropdown options used to just be an array of strings.\n    // So we have to normalize them to be the objects they are now.\n    if (node.children[1].type === ELEMENT_DROPDOWN) {\n      const newOptions: Array<{ id: string; value: string }> = [];\n      let changed = false;\n\n      if (!('options' in node.children[1]) || !node.children[1].options) {\n        setNodes(editor, { options: [] }, { at: [...path, 1] });\n        return true;\n      }\n\n      for (const op of node.children[1].options) {\n        if (typeof op === 'string') {\n          newOptions.push({\n            id: nanoid(),\n            value: op as string, // Safe casting, they used to be strings.\n          });\n          changed = true;\n          continue;\n        }\n        newOptions.push(op);\n      }\n      if (changed) {\n        setNodes(editor, { options: newOptions } as Partial<MyNode>, {\n          at: [...path, 1],\n        });\n        return true;\n      }\n    }\n\n    if (node.variant === 'slider') {\n      if (node.children.length < 3) {\n        insertNodes<SliderElement>(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_SLIDER,\n            max: '10',\n            min: '0',\n            step: '0.1',\n            value: '0',\n            children: [{ text: '' }],\n          },\n          { at: [...path, 2] }\n        );\n        return true;\n      }\n\n      if (node.children[2].type !== ELEMENT_SLIDER) {\n        removeNodes(editor, {\n          at: [...path, 2],\n        });\n        return true;\n      }\n    }\n\n    const num = node.variant === 'slider' ? 3 : 2;\n    if (node.children.length > num) {\n      // HACK: This particular removal seems to always happen concurrently during a re-render that\n      // will then fail to get the node and break the app. Using a timeout fixes it. Unfortunately\n      // it cannot fix my pride.\n      setTimeout(() => {\n        removeNodes(editor, {\n          at: [...path, node.children.length - 1],\n        });\n      });\n    }\n\n    return false;\n  };\n\nexport const createNormalizeVariableDefPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_VARIABLE_DEF_PLUGIN',\n  elementType: ELEMENT_VARIABLE_DEF,\n  acceptableSubElements: [\n    ELEMENT_CAPTION,\n    ELEMENT_EXPRESSION,\n    ELEMENT_SLIDER,\n    ELEMENT_DROPDOWN,\n  ],\n  acceptableElementProperties: [\n    'variant',\n    'max',\n    'min',\n    'step',\n    'value',\n    'coerceToType',\n  ],\n  plugin: normalize,\n});\n","import { createNormalizerPluginFactory } from '@decipad/editor-plugins';\nimport {\n  DEPRECATED_ELEMENT_INPUT,\n  DeprecatedInputElement,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { insertNodes } from '@decipad/editor-utils';\nimport { deleteText } from '@udecode/plate';\nimport { inputElementToVariableDef } from '../utils/inputElementToVariableDef';\n\nconst normalize =\n  (editor: MyEditor) =>\n  ([node, path]: MyNodeEntry): boolean => {\n    const replacement = inputElementToVariableDef(\n      node as DeprecatedInputElement\n    );\n    deleteText(editor, { at: path });\n    insertNodes(editor, replacement, { at: path });\n    return true;\n  };\n\nexport const createMigrateElementInputToVariableDefPlugin =\n  createNormalizerPluginFactory({\n    name: 'MIGRATE_ELEMENT_INPUT_TO_VARIABLE_DEF_PLUGIN',\n    elementType: DEPRECATED_ELEMENT_INPUT,\n    acceptableElementProperties: ['variableName', 'value'],\n    plugin: normalize,\n  });\n","import {\n  ELEMENT_CAPTION,\n  ELEMENT_EXPRESSION,\n  ELEMENT_VARIABLE_DEF,\n  DeprecatedInputElement,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport { nanoid } from 'nanoid';\n\nexport const inputElementToVariableDef = (\n  inputElement: DeprecatedInputElement\n): VariableDefinitionElement => {\n  return {\n    id: inputElement.id,\n    type: ELEMENT_VARIABLE_DEF,\n    variant: 'expression',\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_CAPTION,\n        children: [{ text: inputElement.variableName || '' }],\n        icon: inputElement.icon,\n        color: inputElement.color,\n      },\n      {\n        id: nanoid(),\n        type: ELEMENT_EXPRESSION,\n        children: [{ text: inputElement.value || '' }],\n      },\n    ],\n  };\n};\n","import { AST, Parser, parseStatement, isExpression } from '@decipad/computer';\n\ninterface ExpressionFromEditorNodesResult {\n  expression?: AST.Statement;\n  error?: Parser.ParserError;\n  source: string;\n}\nexport const expressionFromEditorSource = (\n  source: string\n): ExpressionFromEditorNodesResult => {\n  const { solution, error } = parseStatement(source);\n  const expression = solution && isExpression(solution) ? solution : undefined;\n  return { expression, error, source };\n};\n","import {\n  ELEMENT_EXPRESSION,\n  MyDecorate,\n  MyDecorateEntry,\n  MyEditor,\n  VariableDefinitionElement,\n} from '@decipad/editor-types';\nimport {\n  filterDecorate,\n  getSyntaxErrorRanges,\n  memoizeDecorate,\n} from '@decipad/editor-utils';\nimport { Token, tokenize } from '@decipad/computer';\nimport { getNodeString, getParentNode, isElement } from '@udecode/plate';\nimport { NodeEntry, Path, Range } from 'slate';\nimport { DECORATION_EXPRESSION_SYNTAX } from '../constants';\nimport { expressionFromEditorSource } from './expressionFromEditorSource';\n\nexport interface CodeSyntaxRange extends Range {\n  tokenType: string;\n  [DECORATION_EXPRESSION_SYNTAX]: true;\n}\n\nconst withTokenToRange =\n  (path: Path) =>\n  (token: Token): CodeSyntaxRange | undefined => {\n    if (token.type) {\n      const start = token.offset;\n      const end = start + token.text.length;\n      return {\n        anchor: { path, offset: start },\n        focus: { path, offset: end },\n        tokenType: token.type,\n        [DECORATION_EXPRESSION_SYNTAX]: true,\n      };\n    }\n    return undefined;\n  };\n\nconst syntaxDecorations: MyDecorateEntry = ([node, path]) => {\n  if (isElement(node) && node.type === ELEMENT_EXPRESSION) {\n    const ranges: CodeSyntaxRange[] = [];\n    const tokenToRange = withTokenToRange([...path, 0]);\n    for (const token of tokenize(getNodeString(node))) {\n      const range = tokenToRange(token);\n      if (range) {\n        ranges.push(range);\n      }\n    }\n    return ranges;\n  }\n  return undefined;\n};\n\nconst withErrorDecorations: MyDecorateEntry = ([node, path]) => {\n  if (isElement(node) && node.type === ELEMENT_EXPRESSION) {\n    const source = getNodeString(node);\n    const { error } = expressionFromEditorSource(source);\n\n    return error ? getSyntaxErrorRanges(path, error) : [];\n  }\n  return undefined;\n};\n\nexport const decorateExpression = (editor: MyEditor): MyDecorate => {\n  return filterDecorate(\n    memoizeDecorate(() => (entry) => {\n      const syntax = syntaxDecorations(entry);\n      const error = withErrorDecorations(entry);\n      if (!syntax && !error) {\n        return undefined;\n      }\n      return (syntax || []).concat(error || []);\n    }),\n    ([node, path]) => {\n      if (node.type === ELEMENT_EXPRESSION) {\n        const varDef = getParentNode(\n          editor,\n          path\n        ) as NodeEntry<VariableDefinitionElement>;\n        const kind = varDef?.[0].coerceToType?.kind;\n        return kind !== 'date' && kind !== 'string';\n      }\n      return false;\n    }\n  );\n};\n","import { ELEMENT_SLIDER, MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport { createNormalizerPluginFactory } from '@decipad/editor-plugins';\nimport { isElement, setNodes, unwrapNodes } from '@udecode/plate';\n\nconst normalize =\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [node, path] = entry;\n    if (isElement(node) && node.type !== ELEMENT_SLIDER) {\n      return false;\n    }\n    if (!isElement(node)) {\n      unwrapNodes(editor, { at: path });\n      return true;\n    }\n\n    if (typeof node.max !== 'string' || isNaN(Number(node.max))) {\n      setNodes(editor, { max: '10' }, { at: path });\n      return true;\n    }\n\n    if (typeof node.min !== 'string' || isNaN(Number(node.min))) {\n      setNodes(editor, { min: '0' }, { at: path });\n      return true;\n    }\n\n    if (typeof node.step !== 'string' || isNaN(Number(node.step))) {\n      setNodes(editor, { step: '1' }, { at: path });\n      return true;\n    }\n\n    if (typeof node.value !== 'string' || isNaN(Number(node.value))) {\n      setNodes(editor, { value: '5' }, { at: path });\n      return true;\n    }\n\n    return false;\n  };\n\nexport const createNormalizeSliderPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_SLIDER_PLUGIN',\n  elementType: ELEMENT_SLIDER,\n  acceptableElementProperties: ['max', 'min', 'step', 'value'],\n  plugin: normalize,\n});\n","import { createOverrideApplyPluginFactory } from '@decipad/editor-plugins';\nimport {\n  ELEMENT_EXPRESSION,\n  ELEMENT_SLIDER,\n  MyElement,\n  SliderElement,\n  ExpressionElement,\n} from '@decipad/editor-types';\nimport {\n  getNextNode,\n  getNode,\n  getNodeEntry,\n  getNodeString,\n  getParentNode,\n  getPreviousNode,\n  isElement,\n  isText,\n  setNodes,\n  TNode,\n} from '@udecode/plate';\nimport { parseNumberWithUnit } from '@decipad/computer';\nimport { Path } from 'slate';\nimport { mutateText } from '@decipad/editor-utils';\n\nconst isExpression = (n: TNode) =>\n  isElement(n) && n.type === ELEMENT_EXPRESSION;\nconst isSlider = (n: TNode) => isElement(n) && n.type === ELEMENT_SLIDER;\n\nexport const createSliderExpressionSyncPlugin =\n  createOverrideApplyPluginFactory({\n    name: 'SLIDER_EXPRESSION_SYNC_PLUGIN',\n    plugin: (editor, apply) => {\n      return (op) => {\n        apply(op);\n        if (\n          op.type !== 'set_node' &&\n          op.type !== 'insert_text' &&\n          op.type !== 'remove_text'\n        ) {\n          return;\n        }\n\n        const entry = isText(getNode<MyElement>(editor, op.path))\n          ? getParentNode<MyElement>(editor, op.path)\n          : getNodeEntry<MyElement>(editor, op.path);\n        if (!entry) {\n          return;\n        }\n\n        const [node, path] = entry;\n        if (\n          op.type === 'set_node' &&\n          node.type === ELEMENT_SLIDER &&\n          'value' in op.newProperties\n        ) {\n          const [sliderNode, sliderPath] = entry;\n          const expressionEntry = getPreviousNode<ExpressionElement>(editor, {\n            at: sliderPath,\n            match: (n, p) => isExpression(n) && Path.isSibling(path, p),\n          });\n          if (!expressionEntry) {\n            return;\n          }\n\n          const [expressionNode, expressionPath] = expressionEntry;\n          const expression = getNodeString(expressionNode);\n          const [value, rest] = parseNumberWithUnit(expression) ?? [];\n\n          if (Number(sliderNode.value) === value) {\n            return;\n          }\n\n          mutateText(\n            editor,\n            expressionPath\n          )(`${sliderNode.value}${rest ?? expression ?? ''}`);\n        }\n\n        if (\n          (op.type === 'insert_text' || op.type === 'remove_text') &&\n          node.type === ELEMENT_EXPRESSION\n        ) {\n          const [expressionNode, expressionPath] = entry;\n          const sliderEntry = getNextNode<SliderElement>(editor, {\n            at: expressionPath,\n            match: (n, p) => isSlider(n) && Path.isSibling(path, p),\n          });\n          if (!sliderEntry) {\n            return;\n          }\n\n          const [sliderNode, sliderPath] = sliderEntry;\n          const [value] =\n            parseNumberWithUnit(getNodeString(expressionNode)) ?? [];\n\n          if (value == null || Number(sliderNode.value) === value) {\n            return;\n          }\n\n          setNodes(\n            editor,\n            { value: value.toString() },\n            { at: sliderPath, match: isSlider }\n          );\n        }\n      };\n    },\n  });\n","import { Result } from '@decipad/computer';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { Caret } from '../../icons';\nimport { CodeResult } from '../../organisms';\nimport { cssVar } from '../../primitives';\n\nconst mainStyles = (readOnly: boolean, selected: boolean) =>\n  css({\n    width: '100%',\n    maxWidth: '244px',\n    borderRadius: 8,\n    padding: '0px 6px 0px 8px',\n    fontSize: 24,\n    minHeight: 44,\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    transition: 'all 0.2s ease-in-out',\n    ...(selected && { backgroundColor: cssVar('highlightColor') }),\n    ...(!readOnly && {\n      border: `1px solid ${cssVar('borderColor')}`,\n      ':hover': {\n        backgroundColor: cssVar('highlightColor'),\n      },\n      cursor: 'pointer',\n    }),\n  });\n\nconst lineStyles = css({\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  scrollSnapAlign: 'start',\n  fontVariantNumeric: 'tabular-nums',\n});\n\nexport interface WidgetDisplayProps {\n  readonly openMenu: boolean;\n  readonly setOpenMenu: (a: boolean) => void;\n  readonly readOnly: boolean;\n  readonly allowOpen: boolean;\n  readonly children: ReactNode;\n  readonly result?: Result.Result;\n}\n\nexport const WidgetDisplay: FC<WidgetDisplayProps> = ({\n  openMenu,\n  setOpenMenu,\n  readOnly,\n  allowOpen,\n  children,\n  result,\n}) => {\n  const showMenu = !readOnly || allowOpen;\n  return (\n    <div\n      css={mainStyles(!allowOpen && readOnly, openMenu)}\n      onClick={() => showMenu && setOpenMenu(!openMenu)}\n    >\n      {result ? (\n        <span css={lineStyles}>\n          <CodeResult value={result.value} type={result.type} />\n        </span>\n      ) : (\n        <span css={lineStyles}>{children}</span>\n      )}\n      {showMenu && (\n        <div css={{ width: '20px' }}>\n          <div css={{ width: 20, height: 20 }}>\n            <Caret variant={openMenu ? 'up' : 'down'} color=\"normal\" />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { ClientEventsContext } from '@decipad/client-events';\nimport { ColumnDesc } from '@decipad/computer';\nimport {\n  ELEMENT_DROPDOWN,\n  PlateComponent,\n  useTPlateEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n  useNodePath,\n} from '@decipad/editor-utils';\nimport { formatResultPreview } from '@decipad/format';\nimport {\n  EditorChangeContext,\n  useComputer,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport {\n  DropdownMenu,\n  SelectItems,\n  SelectItemTypes,\n  WidgetDisplay,\n} from '@decipad/ui';\nimport { getNodeString, insertText, nanoid } from '@udecode/plate';\nimport { dequal } from 'dequal';\nimport { Table } from 'libs/ui/src/icons';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { combineLatestWith, concat, distinctUntilChanged, map, of } from 'rxjs';\n\nexport const Dropdown: PlateComponent = ({ attributes, element, children }) => {\n  assertElementType(element, ELEMENT_DROPDOWN);\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const [columns, setColumns] = useState<ColumnDesc[]>([]);\n\n  const selected = getNodeString(element);\n  const computer = useComputer();\n\n  const editorChanges = useContext(EditorChangeContext);\n\n  useEffect(() => {\n    if (!dropdownOpen || !element.smartSelection) {\n      setColumns([]);\n      return;\n    }\n\n    const editorChanges$ = concat(of(undefined), editorChanges);\n    const allColumn$ = concat(of([]), computer.getAllColumns$.observe());\n\n    const sub = editorChanges$\n      .pipe(\n        combineLatestWith(allColumn$),\n        map(([, c]) => c),\n        distinctUntilChanged((cur, next) => dequal(cur, next))\n      )\n      .subscribe(setColumns);\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [\n    computer.getAllColumns$,\n    editorChanges,\n    dropdownOpen,\n    element.smartSelection,\n  ]);\n\n  const dropdownIds: SelectItems[] = useMemo(\n    () =>\n      element.options.map((n) => ({\n        item: n.value,\n        focused: n.value === selected,\n      })),\n    [element, selected]\n  );\n\n  const editor = useTPlateEditorRef();\n  const path = useNodePath(element);\n  const readOnly = useIsEditorReadOnly();\n  const userEvents = useContext(ClientEventsContext);\n\n  // For the dropdown options to be permenant in the editor state,\n  // I save to a field in the dropdown child, this array can be\n  // modifiedwith this functions\n  const elementChangeOptions = useElementMutatorCallback(\n    editor,\n    element,\n    'options'\n  );\n\n  const elementChangeColumn = useElementMutatorCallback(\n    editor,\n    element,\n    'selectedColumn'\n  );\n\n  const addOption = useCallback(\n    (newOption: string) => {\n      elementChangeOptions([\n        ...element.options,\n        {\n          id: nanoid(),\n          value: newOption,\n        },\n      ]);\n    },\n    [element.options, elementChangeOptions]\n  );\n\n  const changeOptions = useCallback(\n    (newOption: string) => {\n      insertText(editor, newOption, {\n        at: path,\n      });\n    },\n    [editor, path]\n  );\n\n  const removeOption = useCallback(\n    (removeOptionn: string) => {\n      elementChangeOptions(\n        element.options.filter((n) => n.value !== removeOptionn)\n      );\n      if (removeOptionn === selected) {\n        insertText(editor, 'Select', {\n          at: path,\n        });\n      }\n    },\n    [element.options, elementChangeOptions, editor, path, selected]\n  );\n\n  // Return true when the option was changes, false when it wasn't\n  const onEditOption = useCallback(\n    (old: string, newV: string): boolean => {\n      if (old === newV) return true;\n      const exists = element.options.some((v) => v.value === newV);\n\n      // If there already exists an option, we don't want duplicates.\n      if (exists) return false;\n\n      const newOps = element.options.map((e) => {\n        if (e.value === old) {\n          return { id: e.id, value: newV };\n        }\n        return e;\n      });\n\n      if (old === selected) {\n        changeOptions(newV);\n      }\n      elementChangeOptions(newOps);\n      return true;\n    },\n    [element.options, elementChangeOptions, changeOptions, selected]\n  );\n\n  const onExecute = useCallback(\n    (item: string, type?: SelectItemTypes) => {\n      if (type === 'column') {\n        elementChangeColumn(element.selectedColumn === item ? undefined : item);\n      } else {\n        if (selected === item) {\n          changeOptions('Select');\n        } else {\n          changeOptions(item);\n        }\n        userEvents({\n          type: 'action',\n          action: 'widget value updated',\n          props: {\n            variant: 'dropdown',\n            isReadOnly: readOnly,\n          },\n        });\n        setDropdownOpen(false);\n      }\n    },\n    [\n      changeOptions,\n      selected,\n      elementChangeColumn,\n      element.selectedColumn,\n      userEvents,\n      readOnly,\n    ]\n  );\n\n  const otherItems = useMemo(() => {\n    const colValues = columns.find((c) =>\n      c.blockId\n        ? c.blockId === element.selectedColumn\n        : `${c.tableName}.${c.columnName}` === element.selectedColumn\n    );\n    return [\n      {\n        title: 'Table category',\n        items: columns.map((c) => ({\n          item: `${c.tableName}.${c.columnName}`,\n          blockId: c.blockId,\n          type: 'column',\n          focused: element.selectedColumn === c.columnName,\n          icon: <Table />,\n        })),\n      },\n      ...(colValues\n        ? [\n            {\n              title: 'Values',\n              items: colValues.result.value.map((v) => ({\n                item: formatResultPreview({\n                  value: v,\n                  type: colValues.result.type.cellType,\n                }),\n              })),\n            },\n          ]\n        : []),\n    ];\n  }, [columns, element.selectedColumn]);\n\n  return (\n    <div\n      {...attributes}\n      contentEditable={false}\n      id={element.id}\n      aria-roledescription=\"dropdown-open\"\n    >\n      <DropdownMenu\n        open={dropdownOpen}\n        setOpen={setDropdownOpen}\n        isReadOnly={readOnly}\n        items={!element.smartSelection ? dropdownIds : []}\n        otherItems={element.smartSelection ? otherItems : []}\n        addOption={addOption}\n        onRemoveOption={removeOption}\n        onEditOption={onEditOption}\n        onExecute={onExecute}\n      >\n        <WidgetDisplay\n          allowOpen={true}\n          openMenu={dropdownOpen}\n          setOpenMenu={setDropdownOpen}\n          readOnly={readOnly}\n        >\n          {children}\n        </WidgetDisplay>\n      </DropdownMenu>\n    </div>\n  );\n};\n","import { ELEMENT_CAPTION, MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport { createNormalizerPluginFactory } from '@decipad/editor-plugins';\nimport { normalizeIdentifierElement } from '@decipad/editor-utils';\nimport {\n  deleteText,\n  getChildren,\n  insertText,\n  isElement,\n  isText,\n  unwrapNodes,\n} from '@udecode/plate';\n\nconst normalize =\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [node, path] = entry;\n    if (isElement(node) && node.type !== ELEMENT_CAPTION) {\n      return false;\n    }\n\n    if (!isElement(node)) {\n      unwrapNodes(editor, { at: path });\n      return true;\n    }\n\n    if (node.children.length > 1) {\n      deleteText(editor, { at: [...path, 1] });\n      return true;\n    }\n\n    if (!isText(node.children[0])) {\n      deleteText(editor, { at: [...path, 0] });\n      return true;\n    }\n\n    if (node.children.length < 1) {\n      insertText(editor, '', { at: path });\n      return true;\n    }\n\n    const [text] = getChildren(entry);\n    return normalizeIdentifierElement(editor, text);\n  };\n\nexport const createNormalizeCaptionPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_CAPTION_PLUGIN',\n  elementType: ELEMENT_CAPTION,\n  acceptableElementProperties: ['icon', 'color'],\n  plugin: normalize,\n});\n","import {\n  ELEMENT_EXPRESSION,\n  MyEditor,\n  MyElement,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { createNormalizerPluginFactory } from '@decipad/editor-plugins';\nimport {\n  deleteText,\n  insertText,\n  isElement,\n  isText,\n  unwrapNodes,\n} from '@udecode/plate';\n\nconst normalize =\n  (editor: MyEditor) =>\n  ([node, path]: MyNodeEntry): boolean => {\n    if ((node as MyElement)?.type !== ELEMENT_EXPRESSION) {\n      return false;\n    }\n\n    if (!isElement(node)) {\n      unwrapNodes(editor, { at: path });\n      return true;\n    }\n\n    if (node.children.length > 1) {\n      deleteText(editor, { at: [...path, 1] });\n      return true;\n    }\n\n    if (!isText(node.children[0])) {\n      deleteText(editor, { at: [...path, 0] });\n      return true;\n    }\n\n    if (node.children.length < 1) {\n      insertText(editor, '', { at: path });\n      return true;\n    }\n\n    return false;\n  };\n\nexport const createNormalizeExpressionPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_EXPRESSION_PLUGIN',\n  elementType: ELEMENT_EXPRESSION,\n  acceptableElementProperties: [],\n  plugin: normalize,\n});\n","import { isElement } from '@udecode/plate';\nimport {\n  ELEMENT_CAPTION,\n  ELEMENT_DROPDOWN,\n  ELEMENT_EXPRESSION,\n  ELEMENT_SLIDER,\n  ELEMENT_VARIABLE_DEF,\n  MyPlatePlugin,\n} from '@decipad/editor-types';\nimport { createEventInterceptorPluginFactory } from '@decipad/editor-plugins';\nimport { setSelectionNext } from '@decipad/editor-utils';\nimport { DECORATION_EXPRESSION_SYNTAX } from '../constants';\nimport {\n  Caption,\n  CodeSyntax,\n  Expression,\n  Slider,\n  VariableDef,\n} from '../components';\nimport { createNormalizeVariableDefPlugin } from './createNormalizeVariableDefPlugin';\nimport { createMigrateElementInputToVariableDefPlugin } from './createMigrateElementInputToVariableDefPlugin';\nimport { decorateExpression } from '../utils/decorateExpression';\nimport { createNormalizeSliderPlugin } from './createNormalizeSliderPlugin';\nimport { createSliderExpressionSyncPlugin } from './createSliderExpressionSyncPlugin';\nimport { Dropdown } from '../components/Dropdown';\nimport { createNormalizeCaptionPlugin } from './createNormalizeCaptionPlugin';\nimport { createNormalizeExpressionPlugin } from './createNormalizeExpressionPlugin';\n\nexport const createVariableDefPlugin = (): MyPlatePlugin => ({\n  key: ELEMENT_VARIABLE_DEF,\n  isElement: true,\n  component: VariableDef,\n  deserializeHtml: {\n    rules: [\n      {\n        validNodeName: 'div',\n        validAttribute: { 'data-type': `var-${ELEMENT_VARIABLE_DEF}` },\n      },\n    ],\n    getNode: (el) => {\n      return {\n        type: ELEMENT_VARIABLE_DEF,\n        variant: el.getAttribute('data-variant'),\n        children: el.children, // what to do?\n      };\n    },\n  },\n  serializeHtml: ({ element, children }) => {\n    if (!isElement(element)) {\n      throw new Error('expected element');\n    }\n    if (element.type !== ELEMENT_VARIABLE_DEF) {\n      throw new Error('expected variable definition element');\n    }\n    return (\n      <div\n        data-type={`var-${ELEMENT_VARIABLE_DEF}`}\n        data-variant={element.variant}\n      >\n        {children}\n      </div>\n    );\n  },\n  plugins: [\n    createMigrateElementInputToVariableDefPlugin(),\n    createNormalizeVariableDefPlugin(),\n    createNormalizeCaptionPlugin(),\n    createNormalizeExpressionPlugin(),\n    // createEnterOnExpressionPlugin(),\n    {\n      key: ELEMENT_CAPTION,\n      isElement: true,\n      component: Caption,\n      deserializeHtml: {\n        rules: [{ validAttribute: { 'data-type': 'caption' } }],\n      },\n      serializeHtml: (props) => <div data-type=\"caption\">{props.children}</div>,\n    },\n    {\n      key: ELEMENT_EXPRESSION,\n      isElement: true,\n      component: Expression,\n      deserializeHtml: {\n        rules: [\n          {\n            validNodeName: 'caption',\n            validAttribute: { 'data-type': 'expression' },\n          },\n        ],\n      },\n      serializeHtml: (props) => (\n        <div data-type=\"expression\">{props.children}</div>\n      ),\n    },\n    {\n      key: ELEMENT_DROPDOWN,\n      isElement: true,\n      component: Dropdown,\n      deserializeHtml: {\n        rules: [\n          {\n            validNodeName: 'caption',\n            validAttribute: { 'data-type': 'expression' },\n          },\n        ],\n      },\n      serializeHtml: (props) => (\n        <div data-type=\"expression\">{props.children}</div>\n      ),\n    },\n    {\n      key: DECORATION_EXPRESSION_SYNTAX,\n      type: DECORATION_EXPRESSION_SYNTAX,\n      isLeaf: true,\n      decorate: (editor, plugin) => decorateExpression(editor)(editor, plugin),\n      component: CodeSyntax,\n    },\n    {\n      key: ELEMENT_SLIDER,\n      isVoid: true,\n      isElement: true,\n      component: Slider,\n      deserializeHtml: {\n        rules: [\n          {\n            validNodeName: 'div',\n            validAttribute: { 'data-type': ELEMENT_SLIDER },\n          },\n        ],\n      },\n      serializeHtml: (props) => (\n        <div data-type={ELEMENT_SLIDER}>{props.children}</div>\n      ),\n    },\n    createNormalizeSliderPlugin(),\n    createSliderExpressionSyncPlugin(),\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_VAR_DEF',\n      elementTypes: [\n        ELEMENT_VARIABLE_DEF,\n        ELEMENT_CAPTION,\n        ELEMENT_EXPRESSION,\n        ELEMENT_DROPDOWN,\n      ],\n      interceptor: (editor, entry, event) => {\n        if (event.type === 'on-enter' && entry[0].type === ELEMENT_DROPDOWN) {\n          return false;\n        }\n        if (\n          event.type !== 'on-enter' ||\n          entry[0].type === ELEMENT_VARIABLE_DEF\n        ) {\n          return true;\n        }\n        setSelectionNext(editor, entry);\n        return true;\n      },\n    })(),\n  ],\n});\n","import {\n  allowsTextStyling,\n  getPathContainingSelection,\n} from '@decipad/editor-utils';\nimport { MyEditor } from '@decipad/editor-types';\n\nexport const doesSelectionAllowTextStyling = (editor: MyEditor): boolean =>\n  allowsTextStyling(editor, getPathContainingSelection(editor));\n","import {\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_CODE_LINE,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  MyAutoformatRule,\n} from '@decipad/editor-types';\nimport { deleteText } from '@udecode/plate';\nimport {\n  insertStructuredCodeLineBelowOrReplace,\n  insertDividerBelow,\n  requireCollapsedSelection,\n} from '@decipad/editor-utils';\nimport { Path } from 'slate';\nimport { Computer } from '@decipad/computer';\nimport { doesSelectionAllowTextStyling } from './doesSelectionAllowTextStyling';\n\nexport const autoformatBlocks = (computer: Computer): MyAutoformatRule[] => [\n  {\n    mode: 'block',\n    type: ELEMENT_H2,\n    match: '# ',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'block',\n    type: ELEMENT_H3,\n    match: '## ',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'block',\n    type: ELEMENT_BLOCKQUOTE,\n    match: '> ',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'block',\n    type: ELEMENT_HR,\n    match: ['---', '—-', '~~~'],\n    query: doesSelectionAllowTextStyling,\n    format: (editor): void => {\n      const { path } = requireCollapsedSelection(editor);\n      insertDividerBelow(editor, path, ELEMENT_HR);\n      deleteText(editor, { at: Path.parent(path), unit: 'block' });\n    },\n  },\n  {\n    mode: 'block',\n    type: ELEMENT_CALLOUT,\n    match: '>! ',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'block',\n    type: ELEMENT_CODE_LINE,\n    match: '```',\n    query: doesSelectionAllowTextStyling,\n    triggerAtBlockStart: false,\n    format: (editor): void =>\n      insertStructuredCodeLineBelowOrReplace(\n        editor,\n        requireCollapsedSelection(editor).path,\n        true,\n        computer.getAvailableIdentifier.bind(computer)\n      ),\n  },\n];\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { Image, Root } from 'mdast';\nimport remarkParse from 'remark-parse';\nimport unified from 'unified';\nimport visit from 'unist-util-visit';\n\ninterface TrailingImage {\n  readonly startOffset: number;\n  readonly url: string;\n  readonly alt?: string;\n}\n\nexport const getTrailingImage = (\n  textPotentiallyEndingWithImage: string\n): TrailingImage | null => {\n  let result: TrailingImage | null = null;\n\n  const root = unified()\n    .use(remarkParse)\n    .parse(textPotentiallyEndingWithImage) as Root;\n  visit<Image>(root, 'image', (image) => {\n    const startOffset = image.position!.start.offset!;\n    const endOffset = image.position!.end.offset!;\n\n    if (endOffset !== textPotentiallyEndingWithImage.length) {\n      return visit.CONTINUE;\n    }\n\n    result = {\n      startOffset,\n      url: image.url,\n      alt: image.alt || undefined,\n    };\n    return visit.EXIT;\n  });\n\n  return result;\n};\n","import {\n  ELEMENT_IMAGE,\n  ImageElement,\n  MyAutoformatRule,\n  MyEditor,\n} from '@decipad/editor-types';\nimport {\n  insertImageBelow,\n  requireCollapsedSelection,\n} from '@decipad/editor-utils';\nimport { deleteText, getEditorString, isText, wrapNodes } from '@udecode/plate';\nimport { allPass } from 'ramda';\nimport { BasePoint } from 'slate';\nimport { getTrailingImage } from '../../utils/image';\nimport { doesSelectionAllowTextStyling } from './doesSelectionAllowTextStyling';\n\nconst TRIGGER = ')';\n\nconst getTextBeforeCursorWithTrigger = (\n  editor: MyEditor,\n  cursor: BasePoint\n) => {\n  return (\n    getEditorString(editor, {\n      anchor: { path: cursor.path, offset: 0 },\n      focus: { path: cursor.path, offset: cursor.offset },\n    }) + TRIGGER\n  );\n};\n\nconst doesTriggerCompleteImage = (editor: MyEditor) => {\n  return (\n    getTrailingImage(\n      getTextBeforeCursorWithTrigger(editor, requireCollapsedSelection(editor))\n    ) !== null\n  );\n};\n\nconst convertPrecedingTextWithTriggerToImage = (editor: MyEditor): void => {\n  const cursor = requireCollapsedSelection(editor);\n  const image = getTrailingImage(\n    getTextBeforeCursorWithTrigger(editor, cursor)\n  );\n\n  if (image === null) {\n    throw new Error(\n      'Trigger does not complete a image given the preceding text. Check doesTriggerCompleteImage first.'\n    );\n  }\n\n  const { path } = cursor;\n  wrapNodes(\n    editor,\n    {\n      type: ELEMENT_IMAGE,\n      url: image.url,\n      children: [image.alt],\n    } as unknown as ImageElement,\n    {\n      at: {\n        anchor: { path, offset: image.startOffset },\n        focus: { path, offset: cursor.offset },\n      },\n      split: true,\n      match: isText,\n    }\n  );\n\n  deleteText(editor, { unit: 'character', distance: image.startOffset });\n  insertImageBelow(editor, path, image.url, image.alt);\n};\n\nexport const autoformatImages: MyAutoformatRule[] = [\n  {\n    mode: 'block',\n    type: ELEMENT_IMAGE,\n    triggerAtBlockStart: false,\n    match: TRIGGER,\n    query: allPass([doesSelectionAllowTextStyling, doesTriggerCompleteImage]),\n    format: convertPrecedingTextWithTriggerToImage,\n  },\n];\n","import unified from 'unified';\nimport type { Link, Root } from 'mdast';\nimport visit from 'unist-util-visit';\nimport remarkParse from 'remark-parse';\n\ninterface TrailingLink {\n  readonly startOffset: number;\n  readonly url: string;\n  readonly text: string;\n}\n/**\n * Try to find a markdown link at the very end of given text.\n * @returns `null`, **if** given text does not end with a markdown link.\n * @returns The `startOffset` of the link in the text and its parsed URL portion and text portion (without parsing any nested markdown), **otherwise**.\n */\nexport const getTrailingLink = (\n  textPotentiallyEndingWithLink: string\n): TrailingLink | null => {\n  let result: TrailingLink | null = null;\n\n  const root = unified()\n    .use(remarkParse)\n    .parse(textPotentiallyEndingWithLink) as Root;\n  visit<Link>(root, 'link', (link) => {\n    // All nodes come from the parser (not programmatically added) and thus have a position\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    const startOffset = link.position!.start.offset!;\n    const endOffset = link.position!.end.offset!;\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n    if (endOffset !== textPotentiallyEndingWithLink.length) {\n      // Not a link that ends\n      return visit.CONTINUE;\n    }\n\n    const textStartOffset = link.children[0]?.position?.start.offset ?? 1;\n    const textEndOffset = link.children.slice(-1)[0]?.position?.end.offset ?? 1;\n\n    result = {\n      startOffset,\n      url: link.url,\n      text: textPotentiallyEndingWithLink.substring(\n        textStartOffset,\n        textEndOffset\n      ),\n    };\n    return visit.EXIT;\n  });\n\n  return result;\n};\n","import {\n  ELEMENT_LINK,\n  LinkElement,\n  MyAutoformatRule,\n  MyEditor,\n  MyNode,\n} from '@decipad/editor-types';\nimport { requireCollapsedSelection } from '@decipad/editor-utils';\nimport {\n  getEditorString,\n  getNode,\n  insertText,\n  isElement,\n  isText,\n  wrapNodes,\n} from '@udecode/plate';\nimport { allPass } from 'ramda';\nimport { BasePoint, Path } from 'slate';\nimport { getTrailingLink } from '../../utils/link';\nimport { doesSelectionAllowTextStyling } from './doesSelectionAllowTextStyling';\n\nconst TRIGGER = ')';\n\nconst getTextBeforeCursorWithTrigger = (\n  editor: MyEditor,\n  cursor: BasePoint\n) => {\n  return (\n    getEditorString(editor, {\n      anchor: { path: cursor.path, offset: 0 },\n      focus: { path: cursor.path, offset: cursor.offset },\n    }) + TRIGGER\n  );\n};\n\nconst doesTriggerCompleteLink = (editor: MyEditor) => {\n  return (\n    getTrailingLink(\n      getTextBeforeCursorWithTrigger(editor, requireCollapsedSelection(editor))\n    ) !== null\n  );\n};\n\nconst convertPrecedingTextWithTriggerToLink = (editor: MyEditor): void => {\n  const cursor = requireCollapsedSelection(editor);\n  const link = getTrailingLink(getTextBeforeCursorWithTrigger(editor, cursor));\n  if (link === null) {\n    throw new Error(\n      'Trigger does not complete a link given the preceding text. Check doesTriggerCompleteLink first.'\n    );\n  }\n\n  let { path } = cursor;\n  wrapNodes(\n    editor,\n    {\n      type: ELEMENT_LINK,\n      url: link.url,\n      children: [],\n    } as unknown as LinkElement,\n    {\n      at: {\n        anchor: { path, offset: link.startOffset },\n        focus: { path, offset: cursor.offset },\n      },\n      split: true,\n      match: isText,\n    }\n  );\n\n  let node = getNode<MyNode>(editor, path);\n  if (!(isElement(node) && node.type === ELEMENT_LINK)) {\n    // There was a split at the start (because there was text before the link)\n    path = Path.next(path);\n  }\n  node = getNode<MyNode>(editor, path);\n  if (!(isElement(node) && node.type === ELEMENT_LINK)) {\n    console.error(\n      'Cannot find created link after split. Editor children:',\n      editor.children,\n      '. Searched path',\n      path,\n      'and the previous path'\n    );\n    throw new Error('Cannot find created link after split');\n  }\n\n  insertText(editor, link.text, { at: [...path, 0] });\n};\n\nexport const autoformatLinks: MyAutoformatRule[] = [\n  {\n    mode: 'block',\n    type: ELEMENT_LINK,\n    triggerAtBlockStart: false,\n    match: TRIGGER,\n    query: allPass([doesSelectionAllowTextStyling, doesTriggerCompleteLink]),\n    format: convertPrecedingTextWithTriggerToLink,\n  },\n];\n","import {\n  ELEMENT_LI,\n  ELEMENT_OL,\n  ELEMENT_UL,\n  MyAutoformatRule,\n} from '@decipad/editor-types';\nimport { toggleList } from '@udecode/plate';\nimport { doesSelectionAllowTextStyling } from './doesSelectionAllowTextStyling';\n\nexport const autoformatLists: MyAutoformatRule[] = [\n  {\n    mode: 'block',\n    type: ELEMENT_LI,\n    match: ['* ', '- '],\n    query: doesSelectionAllowTextStyling,\n    format: (editor) => toggleList(editor, { type: ELEMENT_UL }),\n  },\n  {\n    mode: 'block',\n    type: ELEMENT_LI,\n    match: ['0. ', '0) ', '1. ', '1) '],\n    query: doesSelectionAllowTextStyling,\n    format: (editor) => toggleList(editor, { type: ELEMENT_OL }),\n  },\n];\n","import {\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_HIGHLIGHT,\n  MARK_ITALIC,\n  MARK_MAGICNUMBER,\n  MARK_SPOILER,\n  MARK_STRIKETHROUGH,\n  MARK_UNDERLINE,\n  MyAutoformatRule,\n} from '@decipad/editor-types';\nimport { doesSelectionAllowTextStyling } from './doesSelectionAllowTextStyling';\n\nexport const autoformatMarks: MyAutoformatRule[] = [\n  {\n    mode: 'mark',\n    type: [MARK_BOLD, MARK_ITALIC],\n    match: '***',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: [MARK_UNDERLINE, MARK_ITALIC],\n    match: '__*',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: [MARK_UNDERLINE, MARK_BOLD],\n    match: '__**',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: [MARK_UNDERLINE, MARK_BOLD, MARK_ITALIC],\n    match: '___***',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_BOLD,\n    match: '**',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_UNDERLINE,\n    match: '__',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_ITALIC,\n    match: '*',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_ITALIC,\n    match: '_',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_STRIKETHROUGH,\n    match: '~~',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_CODE,\n    match: '`',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_HIGHLIGHT,\n    match: '==',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_MAGICNUMBER,\n    match: '%',\n    query: doesSelectionAllowTextStyling,\n  },\n  {\n    mode: 'mark',\n    type: MARK_SPOILER,\n    match: '||',\n    query: doesSelectionAllowTextStyling,\n  },\n];\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2_CODE,\n  MyAutoformatRule,\n} from '@decipad/editor-types';\nimport {\n  autoformatArrow,\n  autoformatPunctuation,\n  someNode,\n  TEditor,\n} from '@udecode/plate';\nimport { autoformatBlocks } from './autoformatBlocks';\nimport { autoformatImages } from './autoformatImages';\nimport { autoformatLinks } from './autoformatLinks';\nimport { autoformatLists } from './autoformatLists';\nimport { autoformatMarks } from './autoformatMarks';\n\n/** Prevent arrow rules to be applied in codelines,\n * like <= becoming ⇐ */\nfunction disableCodelineFormatting(editor: TEditor) {\n  return (\n    !someNode(editor, {\n      match: { type: ELEMENT_CODE_LINE },\n    }) &&\n    !someNode(editor, {\n      match: { type: ELEMENT_CODE_LINE_V2_CODE },\n    })\n  );\n}\n\nconst rulesForbiddenInCodeLines = [\n  ...autoformatPunctuation,\n  ...autoformatArrow,\n].map((rule) => ({\n  ...rule,\n  query: disableCodelineFormatting,\n}));\n\nexport const autoformatRules = (computer: Computer) =>\n  [\n    ...autoformatBlocks(computer),\n    ...autoformatLists,\n    ...autoformatMarks,\n    ...autoformatLinks,\n    ...autoformatImages,\n    ...rulesForbiddenInCodeLines,\n  ] as MyAutoformatRule[];\n","import { Computer } from '@decipad/computer';\nimport {\n  Blockquote,\n  Bold,\n  Callout,\n  Code,\n  Display,\n  Divider,\n  Heading1,\n  Heading2,\n  Highlight,\n  Image,\n  InteractiveParagraph,\n  Italic,\n  Link,\n  ListItem,\n  ListItemContent,\n  MediaEmbed,\n  OrderedList,\n  Strikethrough,\n  Title,\n  Underline,\n  UnorderedList,\n} from '@decipad/editor-components';\nimport {\n  ElementKind,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_DISPLAY,\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  ELEMENT_IMAGE,\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_LINK,\n  ELEMENT_MEDIA_EMBED,\n  ELEMENT_OL,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_UL,\n  MarkKind,\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_HIGHLIGHT,\n  MARK_ITALIC,\n  MARK_STRIKETHROUGH,\n  MARK_UNDERLINE,\n  PlateComponent,\n} from '@decipad/editor-types';\n\nexport type PlateComponents = Partial<\n  Record<ElementKind | MarkKind, PlateComponent>\n>;\n\nexport const components = (computer: Computer): PlateComponents => ({\n  // Headings\n  [ELEMENT_H1]: Title,\n  [ELEMENT_H2]: Heading1,\n  [ELEMENT_H3]: Heading2,\n\n  // Text blocks\n  [ELEMENT_PARAGRAPH]: InteractiveParagraph(computer),\n  [ELEMENT_BLOCKQUOTE]: Blockquote,\n  [ELEMENT_CALLOUT]: Callout,\n  [ELEMENT_HR]: Divider,\n\n  // Media\n  [ELEMENT_IMAGE]: Image,\n  [ELEMENT_MEDIA_EMBED]: MediaEmbed,\n\n  // Lists\n  [ELEMENT_UL]: UnorderedList,\n  [ELEMENT_OL]: OrderedList,\n  [ELEMENT_LI]: ListItem,\n  [ELEMENT_LIC]: ListItemContent,\n\n  // Inlines\n  [ELEMENT_LINK]: Link,\n\n  [ELEMENT_DISPLAY]: Display,\n\n  // Marks\n  [MARK_BOLD]: Bold,\n  [MARK_UNDERLINE]: Underline,\n  [MARK_STRIKETHROUGH]: Strikethrough,\n  [MARK_ITALIC]: Italic,\n  [MARK_CODE]: Code,\n  [MARK_HIGHLIGHT]: Highlight,\n});\n","import {\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_CODE_LINE,\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n} from '@decipad/editor-types';\n\nexport const exitBreakOptions = {\n  rules: [\n    {\n      hotkey: 'mod+enter',\n    },\n    {\n      hotkey: 'mod+shift+enter',\n      before: true,\n    },\n    {\n      hotkey: 'enter',\n      query: {\n        start: true,\n        end: true,\n        allow: [\n          ELEMENT_H1,\n          ELEMENT_H2,\n          ELEMENT_H3,\n          ELEMENT_PARAGRAPH,\n          ELEMENT_CODE_LINE,\n          ELEMENT_CALLOUT,\n          ELEMENT_BLOCKQUOTE,\n        ],\n      },\n    },\n    {\n      hotkey: 'enter',\n      query: {\n        allow: [ELEMENT_TABLE_COLUMN_FORMULA],\n      },\n    },\n  ],\n};\n","import {\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_PARAGRAPH,\n} from '@decipad/editor-types';\nimport { isBlockAboveEmpty, isSelectionAtBlockStart } from '@udecode/plate';\n\nconst resetBlockTypesCommonRule = {\n  types: [ELEMENT_BLOCKQUOTE, ELEMENT_CALLOUT],\n  defaultType: ELEMENT_PARAGRAPH,\n};\n\nexport const resetBlockTypeOptions = {\n  rules: [\n    {\n      ...resetBlockTypesCommonRule,\n      hotkey: 'Enter',\n      predicate: isBlockAboveEmpty,\n    },\n    {\n      ...resetBlockTypesCommonRule,\n      hotkey: 'Backspace',\n      predicate: isSelectionAtBlockStart,\n    },\n  ],\n};\n","import { ClientEventContextType } from '@decipad/client-events';\nimport type { Computer } from '@decipad/computer';\nimport { createDataViewPlugin } from '@decipad/editor-data-view';\nimport { noopPromise } from '@decipad/editor-utils';\nimport {\n  createAutoCompleteMenuPlugin,\n  createAutoFormatCodeLinePlugin,\n  createAutoPairsPlugin,\n  createBlockSelectionPlugin,\n  createCalloutPlugin,\n  createCodeLinePlugin,\n  createCodeLineV2Plugin,\n  createCodeVariableHighlightPlugin,\n  createDisplayPlugin,\n  createDividerPlugin,\n  createDndSmartRefPlugin,\n  createDragOverCursorPlugin,\n  createDrawPlugin,\n  createEditorApplyErrorReporterPlugin,\n  createEvalPlugin,\n  createEventInterceptionSuperHandlerPlugin,\n  createExitBreakPlugin,\n  createImagePlugin,\n  createImportPlugin,\n  createLayoutColumnsPlugin,\n  createLinkPlugin,\n  createLiveConnectionPlugin,\n  createMarksPlugins,\n  createMediaEmbedPlugin,\n  createNavigationPlugin,\n  createNormalizeCodeBlockPlugin,\n  createNormalizeCodeLinePlugin,\n  createNormalizeColumnsPlugin,\n  createNormalizeEditorPlugin,\n  createNormalizeElementIdPlugin,\n  createNormalizeImagePlugin,\n  createNormalizeLinkPlugin,\n  createNormalizeListPlugin,\n  createNormalizePlainTextBlockPlugin,\n  createNormalizeRichTextBlockPlugin,\n  createNormalizeTextPlugin,\n  createNormalizeVoidPlugin,\n  createNotebookTitlePlugin,\n  createOperationsBlackboxPlugin,\n  createPersistSelectionPlugin,\n  createPlotPlugin,\n  createPotentialFormulaHighlightPlugin,\n  createRemoteCursorsPlugin,\n  createRenderPerformanceStatsPlugin,\n  createSelectionShortcutPlugin,\n  createSmartRefPlugin,\n  createSoftBreakPlugin,\n  createSyntaxErrorHighlightPlugin,\n  createTrailingParagraphPlugin,\n  createUpdateComputerPlugin,\n  createUserEventPlugin,\n  createWithDocSyncHistoryPlugin,\n  createDeduplicateElementIdsPlugin,\n  createMigrateStructuredInputs,\n} from '@decipad/editor-plugins';\nimport { createTablePlugin } from '@decipad/editor-table';\nimport {\n  createTAutoformatPlugin,\n  ELEMENT_DRAW,\n  ELEMENT_IMAGE,\n  ELEMENT_MEDIA_EMBED,\n  MyEditor,\n  MyValue,\n} from '@decipad/editor-types';\nimport { createVariableDefPlugin } from '@decipad/editor-variable-def';\nimport type { UserInteraction } from '@decipad/react-contexts';\nimport {\n  createBlockquotePlugin,\n  createDeserializeDocxPlugin,\n  createHeadingPlugin,\n  createListPlugin,\n  createParagraphPlugin,\n  createPlugins,\n  createResetNodePlugin,\n  createSelectOnBackspacePlugin,\n} from '@udecode/plate';\nimport { createJuicePlugin } from '@udecode/plate-juice';\nimport { Subject } from 'rxjs';\nimport { createDndPlugin } from '@udecode/plate-ui-dnd';\nimport { autoformatRules } from './autoformat';\nimport { components } from './components';\nimport { exitBreakOptions } from './exitBreakOptions';\nimport { resetBlockTypeOptions } from './resetBlockTypeOptions';\n\ninterface PluginOptions {\n  computer: Computer;\n  events?: ClientEventContextType;\n  readOnly: boolean;\n  notebookTitle?: string;\n  onNotebookTitleChange?: (newTitle: string) => void;\n  interactions?: Subject<UserInteraction>;\n}\n\nexport const plugins = ({\n  computer,\n  events = noopPromise,\n  readOnly,\n  notebookTitle,\n  onNotebookTitleChange,\n  interactions,\n}: PluginOptions) =>\n  createPlugins<MyValue, MyEditor>(\n    [\n      // basic blocks\n      createParagraphPlugin(),\n      createBlockquotePlugin(),\n      createHeadingPlugin({ options: { levels: 3 } }),\n      createListPlugin(),\n\n      createCalloutPlugin(),\n      createDividerPlugin(),\n\n      createDisplayPlugin(),\n\n      createNotebookTitlePlugin({\n        readOnly,\n        notebookTitle,\n        onNotebookTitleChange,\n      }),\n\n      // Layout blocks\n      createLayoutColumnsPlugin(),\n\n      // structure enforcement\n      createNormalizeEditorPlugin(),\n      createNormalizeVoidPlugin(),\n      createNormalizeRichTextBlockPlugin(),\n      createNormalizePlainTextBlockPlugin(),\n      createNormalizeCodeBlockPlugin(),\n      createNormalizeCodeLinePlugin(computer),\n      createNormalizeListPlugin(),\n      createNormalizeLinkPlugin(),\n      createNormalizeImagePlugin(),\n      createNormalizeElementIdPlugin(),\n      createDeduplicateElementIdsPlugin(),\n      createNormalizeTextPlugin(),\n      createTrailingParagraphPlugin(),\n      createNormalizeColumnsPlugin(),\n\n      // Drag and drop entities\n      createDndSmartRefPlugin(computer),\n\n      // block manipulation\n      createExitBreakPlugin({ options: exitBreakOptions }),\n      createSoftBreakPlugin(),\n      createResetNodePlugin({ options: resetBlockTypeOptions }),\n      createDndPlugin({\n        options: {\n          enableScroller: true,\n          scrollerProps: { strengthMultiplier: 30 },\n        },\n      }),\n      createDragOverCursorPlugin(),\n      createBlockSelectionPlugin(),\n\n      // media elements\n      createSelectOnBackspacePlugin({\n        options: {\n          query: {\n            allow: [ELEMENT_IMAGE, ELEMENT_MEDIA_EMBED, ELEMENT_DRAW],\n          },\n        },\n      }),\n\n      // creating elements\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...(createMarksPlugins() as any[]),\n      createLinkPlugin(),\n      createImagePlugin(),\n      createMediaEmbedPlugin(),\n      createTAutoformatPlugin({\n        options: { rules: autoformatRules(computer) },\n      }),\n      createAutoFormatCodeLinePlugin(computer)(),\n      createImportPlugin(interactions),\n      createLiveConnectionPlugin(),\n\n      // code editing\n      createCodeVariableHighlightPlugin(),\n      createAutoCompleteMenuPlugin(),\n      createSyntaxErrorHighlightPlugin(),\n      createAutoPairsPlugin(computer),\n      createNavigationPlugin(),\n      createSmartRefPlugin(),\n\n      // language\n      ...createEvalPlugin(computer),\n      createCodeLinePlugin(computer),\n      createCodeLineV2Plugin(computer),\n      createUpdateComputerPlugin(computer),\n      createVariableDefPlugin(),\n      createPotentialFormulaHighlightPlugin(readOnly),\n\n      // tables\n      createTablePlugin(computer),\n      createDataViewPlugin(),\n\n      // plots\n      createPlotPlugin(),\n\n      // error handling\n      createEditorApplyErrorReporterPlugin(),\n      createOperationsBlackboxPlugin(),\n\n      // deserializers\n      createDeserializeDocxPlugin(),\n      createJuicePlugin({}),\n\n      // history\n      createWithDocSyncHistoryPlugin(),\n\n      createUserEventPlugin(events),\n      createTrailingParagraphPlugin(),\n\n      // shortcuts\n      createSelectionShortcutPlugin(),\n      createRenderPerformanceStatsPlugin(),\n\n      // selection\n      createPersistSelectionPlugin(),\n\n      // drawings\n      createDrawPlugin(),\n\n      // remote cursors,\n      createRemoteCursorsPlugin(),\n\n      // event interception\n      createEventInterceptionSuperHandlerPlugin(),\n\n      // Migrations\n      createMigrateStructuredInputs(),\n    ],\n    {\n      components: components(computer),\n    }\n  );\n","import { useContext, useEffect, useMemo, useRef } from 'react';\nimport { Computer } from '@decipad/computer';\nimport { MyPlatePlugin } from '@decipad/editor-types';\nimport type { UserInteraction } from '@decipad/react-contexts';\nimport { Subject } from 'rxjs';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport * as configuration from './configuration';\n\nexport interface CreateEditorProps {\n  notebookId: string;\n  readOnly: boolean;\n  computer?: Computer;\n  notebookTitle: string;\n  onNotebookTitleChange: (newValue: string) => void;\n  interactions: Subject<UserInteraction>;\n}\n\nexport const useEditorPlugins = ({\n  readOnly = false,\n  computer,\n  notebookTitle,\n  onNotebookTitleChange,\n  interactions,\n}: CreateEditorProps): MyPlatePlugin[] | undefined => {\n  const events = useContext(ClientEventsContext);\n\n  const title = useRef(notebookTitle);\n\n  useEffect(() => {\n    if (title.current !== notebookTitle) {\n      title.current = notebookTitle;\n    }\n  }, [notebookTitle]);\n\n  return useMemo(\n    () =>\n      !computer\n        ? undefined\n        : configuration.plugins({\n            readOnly,\n            computer,\n            events,\n            interactions,\n            notebookTitle: title.current,\n            onNotebookTitleChange,\n          }),\n    [computer, events, interactions, onNotebookTitleChange, readOnly]\n  );\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { insertText, getEditorString } from '@udecode/plate';\nimport { BaseEditor, Range, Transforms, BasePoint, Editor } from 'slate';\nimport type { MenuItem } from './AutoCompleteMenu';\n\nexport const commitAutocompleteItem = (\n  editor: MyEditor,\n  at: Range,\n  item: MenuItem\n) => {\n  const characterBefore = getCharacterBeforeCursor(editor, Range.start(at));\n\n  Transforms.select(editor as BaseEditor, at);\n  Transforms.delete(editor as BaseEditor);\n\n  if (needsSpaceAfter(characterBefore)) {\n    insertText(editor, ' ');\n  }\n\n  insertText(editor, item.identifier);\n\n  if (item.kind !== 'function') {\n    insertText(editor, ' ');\n  }\n};\n\nconst needsSpaceAfter = (character: string) =>\n  !['', ' ', '(', ')', '[', ']', '{', '}'].includes(character);\n\nconst getCharacterBeforeCursor = (editor: MyEditor, cursor: BasePoint) =>\n  getEditorString(editor, {\n    anchor: Editor.start(editor as BaseEditor, cursor.path),\n    focus: { path: cursor.path, offset: cursor.offset },\n  }).slice(-1);\n","import {\n  AutocompleteName,\n  getBuiltinsForAutocomplete,\n} from '@decipad/computer';\nimport { PlateComponent, useTEditorRef } from '@decipad/editor-types';\nimport type { AutocompleteDecorationProps } from '@decipad/editor-utils';\nimport { useComputer } from '@decipad/react-contexts';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { AutoCompleteMenu as UIAutoCompleteMenu } from '@decipad/ui';\nimport { ComponentProps, useCallback, useState } from 'react';\nimport { useFocused, useSelected } from 'slate-react';\nimport { commitAutocompleteItem } from './commitAutocompleteItem';\n\nconst compareNames = (a: AutocompleteName, b: AutocompleteName) => {\n  const aScore = a.isLocal ? 1 : 0;\n  const bScore = b.isLocal ? 1 : 0;\n\n  return aScore - bScore;\n};\n\nconst localNamesFirst = (names: AutocompleteName[]): AutocompleteName[] =>\n  names.sort(compareNames);\n\nconst selectNames = (\n  names: AutocompleteName[]\n): ComponentProps<typeof UIAutoCompleteMenu>['identifiers'] => {\n  return [...localNamesFirst(names), ...getBuiltinsForAutocomplete()].map(\n    (n) => ({\n      kind:\n        n.kind === 'variable' ? ('variable' as const) : ('function' as const),\n      identifier: n.kind === 'function' ? `${n.name}(` : n.name,\n      type: n.type.kind,\n      blockId: n.blockId,\n    })\n  );\n};\n\nexport type MenuItem = Parameters<\n  NonNullable<ComponentProps<typeof UIAutoCompleteMenu>['onExecuteItem']>\n>[0];\n\nexport const AutoCompleteMenu: PlateComponent<{\n  leaf: AutocompleteDecorationProps;\n}> = ({ attributes, children, leaf: { variableInfo } }) => {\n  const word = variableInfo.variableName;\n\n  const selected = useSelected();\n  const focused = useFocused();\n  const editor = useTEditorRef();\n\n  const [menuSuppressed, setMenuSuppressed] = useState(false);\n  const showAutoComplete = selected && focused && word && !menuSuppressed;\n\n  const onGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (showAutoComplete && !event.shiftKey) {\n        switch (event.key) {\n          case 'Escape':\n            setMenuSuppressed(true);\n            event.stopPropagation();\n            event.preventDefault();\n            break;\n        }\n      }\n    },\n    [showAutoComplete]\n  );\n  useWindowListener('keydown', onGlobalKeyDown, true);\n\n  const onExecuteItem = useCallback(\n    (item: MenuItem) => {\n      if (!showAutoComplete || !variableInfo) return;\n\n      commitAutocompleteItem(editor, variableInfo, item);\n    },\n    [editor, showAutoComplete, variableInfo]\n  );\n\n  if (showAutoComplete) {\n    return (\n      <span {...attributes}>\n        <AutoCompleteWrapper\n          search={word}\n          blockId={variableInfo?.blockId ?? ''}\n          onExecuteItem={onExecuteItem}\n        />\n        {children}\n      </span>\n    );\n  }\n\n  return <span {...attributes}>{children}</span>;\n};\n\n/** Subscribes to getNamesDefined$ only when necessary */\nconst AutoCompleteWrapper = ({\n  blockId,\n  search,\n  onExecuteItem,\n}: { blockId: string } & Omit<\n  ComponentProps<typeof UIAutoCompleteMenu>,\n  'identifiers'\n>) => {\n  const identifiers = useComputer().getNamesDefined$.useWithSelector(\n    selectNames,\n    blockId\n  );\n\n  if (!identifiers.length) {\n    return null;\n  }\n\n  return (\n    <UIAutoCompleteMenu\n      search={search}\n      identifiers={identifiers}\n      onExecuteItem={onExecuteItem}\n    />\n  );\n};\n","import { createPluginFactory } from '@udecode/plate';\nimport { DECORATE_AUTO_COMPLETE_MENU } from '../../constants';\nimport { AutoCompleteMenu } from './AutoCompleteMenu';\n\nexport const createAutoCompleteMenuPlugin = createPluginFactory({\n  key: DECORATE_AUTO_COMPLETE_MENU,\n  isLeaf: true,\n  component: AutoCompleteMenu,\n});\n","export const DECORATE_CODE_VARIABLE = 'decorate_code_variable';\nexport const DECORATE_SYNTAX_ERROR = 'decorate_syntax_error';\nexport const DECORATE_AUTO_COMPLETE_MENU = 'decorate_auto_complete_menu';\n","import { MyEditor } from '@decipad/editor-types';\nimport { getEditorString } from '@udecode/plate';\nimport { BasePoint } from 'slate';\n\nexport const getTextBeforeCursor = (editor: MyEditor, cursor: BasePoint) =>\n  getEditorString(editor, {\n    anchor: { path: cursor.path, offset: 0 },\n    focus: { path: cursor.path, offset: cursor.offset },\n  });\n","import {\n  createTPluginFactory,\n  EventInterceptor,\n  MyElement,\n} from '@decipad/editor-types';\n\ninterface EventInterceptorPluginProps {\n  name: string;\n  elementTypes: MyElement['type'][];\n  interceptor: EventInterceptor;\n}\n\n/**\n * Create a plugin capable of intercepting some events, such as paste or pressing backspace.\n *\n * The `interceptor` function can stop propagation, or the default behavior, or both.\n */\nexport const createEventInterceptorPluginFactory = ({\n  name,\n  elementTypes,\n  interceptor,\n}: EventInterceptorPluginProps) => {\n  return createTPluginFactory({\n    key: name,\n    withOverrides: (editor) => {\n      const prevInterceptor = editor.interceptEvent ?? (() => false);\n\n      // eslint-disable-next-line no-param-reassign\n      editor.interceptEvent = (editorParam, entry, event) => {\n        if (elementTypes.includes(entry?.[0].type)) {\n          const wasHandled = interceptor(editorParam, entry, event);\n\n          if (wasHandled) {\n            return true;\n          }\n        }\n\n        return prevInterceptor(editorParam, entry, event);\n      };\n\n      return editor;\n    },\n  });\n};\n","import { deleteText, isElement, unsetNodes } from '@udecode/plate';\nimport {\n  createTPluginFactory,\n  getMyEditor,\n  MyDescendant,\n  MyEditor,\n  MyElement,\n  MyNodeEntry,\n  MyPlatePlugin,\n  MyWithOverride,\n} from '@decipad/editor-types';\n\ntype NormalizerPlugin = (editor: MyEditor) => (entry: MyNodeEntry) => boolean;\n\ninterface NormalizerPluginProps {\n  name: string;\n  elementType?: MyElement['type'] | Array<MyElement['type']>;\n  acceptableElementProperties?: string[];\n  acceptableSubElements?: string[];\n  plugin?: NormalizerPlugin;\n}\n\ntype NormalizerOverrideProps = Omit<NormalizerPluginProps, 'name'>;\n\nconst EXPECTED_ELEMENT_PROPERTIES = [\n  'type',\n  'id',\n  'children',\n  'text',\n  'isHidden',\n];\n\nconst withRemoveUnacceptableElementProperties = (\n  editor: MyEditor,\n  acceptableElementProperties?: NormalizerPluginProps['acceptableElementProperties'],\n  acceptableSubElements?: NormalizerPluginProps['acceptableSubElements']\n) => {\n  const acceptable =\n    acceptableElementProperties &&\n    new Set(\n      [...acceptableElementProperties].concat(EXPECTED_ELEMENT_PROPERTIES)\n    );\n  const acceptableSubElementNames =\n    acceptableSubElements && new Set(acceptableSubElements);\n  const isNotAcceptableSubElement = (node: MyDescendant): boolean => {\n    return (\n      !isElement(node) ||\n      (acceptableSubElementNames &&\n        !acceptableSubElementNames.has(node.type)) ||\n      false\n    );\n  };\n  return (entry: MyNodeEntry): boolean => {\n    const [node, path] = entry;\n    const propertiesToRemove: string[] = [];\n    if (acceptable) {\n      for (const key of Object.keys(node)) {\n        if (!acceptable.has(key)) {\n          propertiesToRemove.push(key);\n        }\n      }\n    }\n    if (propertiesToRemove.length > 0) {\n      unsetNodes<MyElement>(editor, propertiesToRemove, { at: path });\n      return true;\n    }\n    if (isElement(node)) {\n      const removeIndex =\n        node?.children?.findIndex(isNotAcceptableSubElement) || -1;\n      if (removeIndex >= 0) {\n        const removePath = [...path, removeIndex];\n        deleteText(editor, { at: removePath });\n        return true;\n      }\n    }\n\n    return false;\n  };\n};\n\nconst withNormalizerOverride = ({\n  plugin,\n  elementType,\n  acceptableElementProperties,\n  acceptableSubElements,\n}: NormalizerOverrideProps): MyWithOverride => {\n  return (editor) => {\n    const myEditor = getMyEditor(editor);\n\n    const { normalizeNode } = myEditor;\n    const newNormalize = plugin && plugin(editor);\n\n    const removeUnacceptableElementProperties =\n      withRemoveUnacceptableElementProperties(\n        editor,\n        acceptableElementProperties,\n        acceptableSubElements\n      );\n\n    const acceptedTypes: Array<MyElement['type']> | undefined =\n      elementType == null || Array.isArray(elementType)\n        ? elementType\n        : [elementType];\n\n    // eslint-disable-next-line no-param-reassign\n    myEditor.normalizeNode = (entry) => {\n      const [node] = entry;\n\n      if (!acceptedTypes || isElement(node)) {\n        if (acceptedTypes) {\n          if (acceptedTypes.indexOf((node as MyElement).type) < 0) {\n            // no match, break early\n            return normalizeNode(entry);\n          }\n          if (removeUnacceptableElementProperties(entry)) {\n            return;\n          }\n        }\n        if (newNormalize && newNormalize(entry)) {\n          return;\n        }\n      }\n      return normalizeNode(entry);\n    };\n    return editor;\n  };\n};\n\nexport const createNormalizerPlugin = ({\n  name,\n  ...props\n}: NormalizerPluginProps): MyPlatePlugin => ({\n  key: name,\n  withOverrides: withNormalizerOverride(props),\n});\n\nexport const createNormalizerPluginFactory = ({\n  name,\n  ...props\n}: NormalizerPluginProps) => {\n  return createTPluginFactory({\n    key: name,\n    withOverrides: withNormalizerOverride(props),\n  });\n};\n","import { createTPluginFactory, MyKeyboardHandler } from '@decipad/editor-types';\n\ntype OnKeyDownFactoryArgs = {\n  name: string;\n  plugin: MyKeyboardHandler;\n};\n\nexport const createOnKeyDownPluginFactory = ({\n  name,\n  plugin,\n}: OnKeyDownFactoryArgs) =>\n  createTPluginFactory({\n    key: name,\n    handlers: {\n      onKeyDown: plugin,\n    },\n  });\n","import { createTPluginFactory, MyEditor } from '@decipad/editor-types';\n\ninterface CreateOverrideApplyPluginFactoryProps {\n  name: string;\n  plugin: (editor: MyEditor, oldApply: MyEditor['apply']) => MyEditor['apply'];\n}\n\nexport const createOverrideApplyPluginFactory = ({\n  name,\n  plugin,\n}: CreateOverrideApplyPluginFactoryProps) =>\n  createTPluginFactory({\n    key: name,\n    withOverrides: (editor) => {\n      const { apply } = editor;\n      const overrideApply = plugin(editor, apply);\n      // eslint-disable-next-line no-param-reassign\n      editor.apply = (op) => overrideApply(op);\n      return editor;\n    },\n  });\n","import { Selection } from 'slate';\nimport { dequal } from 'dequal';\nimport { createTPluginFactory, MyEditor } from '@decipad/editor-types';\n\ntype OnCursorChangePlugin = (\n  editor: MyEditor\n) => (selection: Selection) => void;\n\nexport const createOnCursorChangePluginFactory = (\n  name: string,\n  plugin: OnCursorChangePlugin\n) =>\n  createTPluginFactory({\n    key: name,\n    withOverrides: (editor) => {\n      const onSelectionChange = plugin(editor);\n      const { onChange } = editor;\n      const previousSelection: Selection | undefined = undefined;\n      // eslint-disable-next-line no-param-reassign\n      editor.onChange = () => {\n        if (!dequal(previousSelection, editor.selection)) {\n          setTimeout(() => onSelectionChange(editor.selection), 0);\n        }\n        onChange();\n      };\n\n      return editor;\n    },\n  });\n","import { BaseEditor, BaseRange, Point, Transforms } from 'slate';\nimport {\n  BlockElement,\n  CodeLineElement,\n  ELEMENT_CODE_LINE,\n  ELEMENT_PARAGRAPH,\n  ParagraphElement,\n  RichText,\n  MyEditor,\n  MARK_MAGICNUMBER,\n} from '@decipad/editor-types';\nimport {\n  pluginStore,\n  getAboveNodeSafe,\n  isElementOfType,\n  insertNodes,\n  createStructuredCodeLine,\n} from '@decipad/editor-utils';\nimport {\n  getBlockAbove,\n  getNodeString,\n  isCollapsed,\n  isElement,\n  setNodes,\n  getEndPoint,\n  toDOMNode,\n  insertText,\n} from '@udecode/plate';\nimport { Computer, getExprRef } from '@decipad/computer';\nimport { ShadowCalcReference } from '@decipad/react-contexts';\nimport { editorAnalytics$, openEditor$ } from '@decipad/editor-components';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport { getAnalytics } from '@decipad/client-events';\nimport { getTextBeforeCursor } from './utils';\nimport { createOnKeyDownPluginFactory } from '../../pluginFactories';\n\ntype LastFormattedBlock = null | {\n  readonly id: string;\n  readonly oldText: string;\n};\n\ninterface AutoFormatCodeLinePluginStore {\n  lastFormattedBlock?: LastFormattedBlock;\n}\n\nconst pluginName = 'AUTO_FORMAT_CODE_LINE_PLUGIN';\n\nexport const createAutoFormatCodeLinePlugin = (computer: Computer) =>\n  createOnKeyDownPluginFactory({\n    name: pluginName,\n    plugin: (editor) => {\n      return (event) => {\n        const store = pluginStore<AutoFormatCodeLinePluginStore>(\n          editor,\n          pluginName,\n          () => ({})\n        );\n        const { lastFormattedBlock } = store;\n        const hasModifiers = event.ctrlKey || event.altKey || event.metaKey;\n\n        if (!hasModifiers && event.key === '=') {\n          const entry = getBlockAbove<BlockElement>(editor);\n          if (!entry) return;\n\n          const { selection } = editor;\n          if (!selection || !isCollapsed(selection)) {\n            return;\n          }\n\n          const [node, paragraphPath] = entry;\n          if (node.type !== ELEMENT_PARAGRAPH) {\n            return;\n          }\n\n          // Because children.length is 1, we know know there is only a text child\n          const paragraph = node as ParagraphElement & { children: [RichText] };\n\n          const nodeText = `${getNodeString(paragraph)}=`;\n          const textBefore = `${getTextBeforeCursor(editor, selection.focus)}=`;\n\n          if (nodeText.trim() === '=') {\n            event.preventDefault();\n\n            const analytics = getAnalytics();\n            if (analytics) {\n              analytics.track('convert paragraph to code line because =');\n            }\n\n            if (isFlagEnabled('CODE_LINE_NAME_SEPARATED')) {\n              const autoVarName = computer.getAvailableIdentifier('Name', 1);\n              const newCodeLine = createStructuredCodeLine({\n                varName: autoVarName,\n              });\n\n              insertNodes(editor, newCodeLine, { at: paragraphPath });\n              const codeTextPath = [...paragraphPath, 1];\n              Transforms.select(editor as BaseEditor, codeTextPath);\n              return;\n            }\n\n            setNodes(editor, { type: ELEMENT_CODE_LINE });\n\n            store.lastFormattedBlock = {\n              id: node.id,\n              oldText: nodeText,\n            };\n          } else if (textBefore.endsWith(' =')) {\n            event.preventDefault();\n\n            const { path } = selection.focus;\n            const offset = editor.selection?.focus.offset || 0;\n\n            const expressionRange: BaseRange = {\n              anchor: { path, offset },\n              focus: { path, offset },\n            };\n\n            commitPotentialFormula(editor, computer, expressionRange, (ref) => {\n              openEditor$.next(ref);\n              editorAnalytics$.next({\n                type: 'action',\n                action: 'number created with =',\n              });\n            });\n          }\n        } else if (!hasModifiers && event.key === 'Backspace') {\n          const entry = getBlockAbove<CodeLineElement>(editor, {\n            match: (n) => isElement(n) && n.type === ELEMENT_CODE_LINE,\n          });\n\n          if (!entry) return;\n\n          const [node, path] = entry;\n\n          const nodeText = getNodeString(node);\n\n          if (\n            lastFormattedBlock &&\n            node.id === lastFormattedBlock.id &&\n            nodeText === ''\n          ) {\n            event.preventDefault();\n\n            setNodes(editor, { type: ELEMENT_PARAGRAPH }, { at: path });\n            insertText(editor as MyEditor, lastFormattedBlock.oldText, {\n              at: path,\n            });\n\n            delete store.lastFormattedBlock;\n          } else if (nodeText === '' && node.children.length === 1) {\n            // Empty code blocks get turned into a paragraph when backspace is pressed\n            event.preventDefault();\n\n            setNodes(editor, { type: ELEMENT_PARAGRAPH }, { at: path });\n          }\n        } else {\n          delete store.lastFormattedBlock;\n        }\n      };\n    },\n  });\n\nconst commitPotentialFormula = (\n  editor: MyEditor,\n  computer: Computer,\n  expressionRange: BaseRange,\n  onCommit: (ref: ShadowCalcReference) => void,\n  id?: string\n) => {\n  const insertionPath = getAboveNodeSafe(editor as MyEditor, {\n    at: expressionRange,\n    match: (x) => isElementOfType(x, ELEMENT_PARAGRAPH),\n  });\n\n  if (!insertionPath) return;\n\n  const codeLineBelow = createStructuredCodeLine({\n    id,\n    varName: computer.getAvailableIdentifier('Name', 1),\n  });\n\n  const magicNumberInstead = {\n    [MARK_MAGICNUMBER]: true,\n    text: getExprRef(codeLineBelow.id),\n  };\n\n  const viewInstead = magicNumberInstead;\n\n  insertNodes(editor, viewInstead, {\n    voids: true,\n    at: expressionRange,\n  });\n\n  const currentBlockEnd: Point = getEndPoint(editor, [\n    expressionRange.anchor.path[0],\n  ]);\n\n  insertNodes(editor, codeLineBelow, { at: currentBlockEnd });\n\n  setTimeout(() => {\n    const domNode = toDOMNode(editor, magicNumberInstead);\n    const dataNode = domNode?.querySelector<HTMLElement>('[data-number-id]');\n    const numberId = dataNode?.dataset.numberId;\n\n    if (!numberId) return;\n\n    onCommit({\n      numberId,\n      codeLineId: codeLineBelow.id,\n      numberNode: magicNumberInstead,\n      codeLineNode: codeLineBelow,\n    });\n  }, 100);\n};\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_SMART_REF,\n} from '@decipad/editor-types';\nimport { isElementOfType } from '@decipad/editor-utils';\nimport {\n  deleteText,\n  getChildren,\n  getNodeString,\n  getParentNode,\n  moveSelection,\n} from '@udecode/plate';\nimport { Path, Range } from 'slate';\nimport { createOnKeyDownPluginFactory } from '../../pluginFactories';\n\nconst pairs = [\n  { start: '{', end: '}' },\n  { start: '[', end: ']' },\n  { start: '(', end: ')' },\n];\n\nconst isAtEndOfLine = (text: string, cursorOffset: number) =>\n  text[cursorOffset] === '\\n' || text[cursorOffset] === undefined;\n\nexport const createAutoPairsPlugin = (computer: Computer) =>\n  createOnKeyDownPluginFactory({\n    name: 'AUTO_PAIR_PLUGIN',\n    plugin: (editor) => (event) => {\n      const { selection } = editor;\n\n      if (selection) {\n        const cursor = Range.start(selection);\n        const parentEntry = getParentNode(editor, cursor);\n        if (parentEntry) {\n          const [node] = parentEntry;\n\n          if (\n            isElementOfType(node, ELEMENT_CODE_LINE) ||\n            isElementOfType(node, ELEMENT_CODE_LINE_V2_CODE)\n          ) {\n            let cursorOffset = cursor.offset;\n            cursorOffset =\n              getChildren(parentEntry)\n                .filter(([_, path]) =>\n                  Path.isBefore(path, editor.selection!.anchor.path)\n                )\n                .reduce(\n                  (acc, [n]) =>\n                    isElementOfType(n, ELEMENT_SMART_REF)\n                      ? acc +\n                        (computer.getSymbolDefinedInBlock(n.blockId) || '')\n                          .length\n                      : acc + getNodeString(n).length,\n                  0\n                ) + cursorOffset;\n\n            const activePair = pairs.find((pair) => pair.start === event.key);\n\n            const nodeText = getChildren(parentEntry).reduce(\n              (acc, [n]) =>\n                isElementOfType(n, ELEMENT_SMART_REF)\n                  ? acc + (computer.getSymbolDefinedInBlock(n.blockId) || '')\n                  : acc + getNodeString(n),\n              ''\n            );\n\n            if (activePair && isAtEndOfLine(nodeText, cursorOffset)) {\n              event.preventDefault();\n              editor.insertText(activePair.start + activePair.end);\n              moveSelection(editor, {\n                distance: 1,\n                unit: 'offset',\n                reverse: true,\n              });\n            }\n\n            const endPair = pairs.find((pair) => pair.end === event.key);\n            if (endPair && nodeText[cursorOffset] === endPair.end) {\n              event.preventDefault();\n              moveSelection(editor, {\n                distance: 1,\n                unit: 'offset',\n              });\n            }\n\n            if (event.key === 'Backspace') {\n              const startPair = pairs.find(\n                (p) => p.start === nodeText[cursorOffset - 1]\n              );\n              const end = pairs.find((p) => p.end === nodeText[cursorOffset]);\n\n              if (startPair && end && startPair === end) {\n                moveSelection(editor, { unit: 'offset', distance: 1 });\n                deleteText(editor, {\n                  unit: 'character',\n                  distance: 1,\n                  reverse: true,\n                });\n              }\n            }\n          }\n        }\n      }\n    },\n  })();\n","import { MyPlatePlugin } from '@decipad/editor-types';\nimport {\n  BlockSelectionArea,\n  BlockStartArea,\n  createBlockSelectionPlugin as _createBlockSelectionPlugin,\n} from '@udecode/plate-selection';\n\nexport const createBlockSelectionPlugin = (): MyPlatePlugin =>\n  _createBlockSelectionPlugin({\n    renderAboveEditable: ({ children }) => (\n      <BlockSelectionArea getBoundaries={() => ['html']}>\n        <BlockStartArea\n          placement=\"left\"\n          size=\"50vw\"\n          style={{\n            top: -104,\n            zIndex: 1,\n          }}\n        />\n        <BlockStartArea\n          placement=\"right\"\n          size=\"50vw\"\n          style={{\n            top: -104,\n            zIndex: 1,\n          }}\n        />\n        {children}\n      </BlockSelectionArea>\n    ),\n    inject: {\n      // BlockSelectable is rendered below DraggableBlock\n      aboveComponent: null,\n    },\n  });\n","export const cleanString = (str: string): string => {\n  return JSON.parse(JSON.stringify(str));\n};\n","import { CalloutElement, ELEMENT_CALLOUT } from '@decipad/editor-types';\nimport { DeserializeHtml } from '@udecode/plate';\nimport { swatchNames, userIconKeys } from 'libs/ui/src/utils';\nimport { nanoid } from 'nanoid';\nimport { cleanString } from '../../utils/cleanString';\n\ninterface SerializableCallout {\n  text: string;\n  color?: string;\n  icon?: string;\n}\n\nconst callout = ({\n  text,\n  color,\n  icon,\n}: SerializableCallout): CalloutElement => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_CALLOUT,\n    children: [{ text }],\n    color,\n    icon,\n  };\n};\n\nexport const deserializeCalloutHtml: DeserializeHtml = {\n  rules: [\n    {\n      validNodeName: 'DIV',\n      validAttribute: {\n        'data-type': 'callout',\n        'data-color': swatchNames,\n        'data-icon': userIconKeys.map((e) => e), // typescript\n      },\n    },\n  ],\n  getNode: (el): CalloutElement | undefined => {\n    return callout({\n      text: cleanString(el.innerText),\n      color: el.getAttribute('data-color') || undefined,\n      icon: el.getAttribute('data-icon') || undefined,\n    });\n  },\n};\n","import { createTPluginFactory, ELEMENT_CALLOUT } from '@decipad/editor-types';\nimport { Callout } from '@decipad/editor-components';\nimport { deserializeCalloutHtml } from './deserializeCalloutHtml';\nimport { serializeCalloutHtml } from './serializeCalloutHtml';\n\nexport const createCalloutPlugin = createTPluginFactory({\n  key: ELEMENT_CALLOUT,\n  isElement: true,\n  component: Callout,\n  deserializeHtml: deserializeCalloutHtml,\n  serializeHtml: serializeCalloutHtml,\n});\n","import { getNodeString } from '@udecode/plate';\nimport { MySerializeHtml } from '@decipad/editor-types';\n\nexport const serializeCalloutHtml: MySerializeHtml = ({ element }) => {\n  return (\n    <div\n      data-type=\"callout\"\n      data-color={element.color}\n      data-icon={element.icon}\n    >\n      {getNodeString(element)}\n    </div>\n  );\n};\n","import { CodeLineElement, CodeLineV2Element } from '@decipad/editor-types';\nimport { createCodeLine } from '@decipad/editor-utils';\nimport { DeserializeHtml } from '@udecode/plate';\nimport { cleanString } from '../../utils/cleanString';\n\nexport const deserializeCodeLineHtml: DeserializeHtml = {\n  rules: [{ validNodeName: 'CODE' }, { validNodeName: 'OUTPUT' }],\n  getNode: (el): CodeLineElement | CodeLineV2Element | undefined =>\n    createCodeLine({\n      code:\n        el.nodeName.toUpperCase() === 'OUTPUT' ? '' : cleanString(el.innerText),\n    }),\n};\n","import { getNodeString } from '@udecode/plate';\nimport { MySerializeHtml } from '@decipad/editor-types';\n\nexport const serializeCodeLineHtml: MySerializeHtml = ({\n  element,\n}): JSX.Element => {\n  return <code>{getNodeString(element)}</code>;\n};\n","import {\n  ELEMENT_CODE_LINE,\n  ELEMENT_PARAGRAPH,\n  MARK_MAGICNUMBER,\n  MyEditor,\n  MyText,\n} from '@decipad/editor-types';\nimport React from 'react';\nimport {\n  findNode,\n  focusEditor,\n  getBlockAbove,\n  getEditorString,\n  getNodeString,\n  getPointAfter,\n  getPointBefore,\n  isDefined,\n  isEditorFocused,\n  TElement,\n} from '@udecode/plate';\nimport {\n  getSlateFragment,\n  getVariableRanges,\n  selectEventRange,\n} from '@decipad/editor-utils';\nimport { DRAG_INLINE_RESULT } from '@decipad/editor-components';\nimport { getExprRef } from '@decipad/computer';\nimport { dndStore } from '@udecode/plate-ui-dnd';\n\nexport const onDropInlineResult =\n  (editor: MyEditor) => (event: React.DragEvent) => {\n    if (editor.dragging === DRAG_INLINE_RESULT) {\n      // eslint-disable-next-line no-param-reassign\n      editor.dragging = null;\n\n      dndStore.set.isDragging(false);\n      event.preventDefault();\n      event.stopPropagation();\n\n      selectEventRange(editor)(event);\n\n      const fragment = getSlateFragment(event.dataTransfer);\n      if (!fragment) return;\n\n      const filteredFragment: MyText[] = [];\n\n      fragment.forEach((node) => {\n        if (node.type === ELEMENT_CODE_LINE) {\n          const entry = findNode(editor, {\n            at: [],\n            match: (n) => (n as TElement).id === node.id,\n          });\n          if (!entry) return;\n\n          const [, path] = entry;\n\n          const blockAbove = getBlockAbove(editor) ?? [];\n          const [block] = blockAbove;\n          if (!block) return;\n\n          const blockId = node.id as string;\n\n          const variableRanges = getVariableRanges(\n            getNodeString(node),\n            path,\n            blockId\n          );\n\n          const variable = variableRanges.find((item) => item.isDeclaration);\n\n          if (variable && isDefined(variable.variableName)) {\n            // Code lines need real varnames\n            if (block.type === ELEMENT_CODE_LINE) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const selection = editor.selection!;\n              const pointBefore = getPointBefore(editor, selection);\n\n              if (pointBefore) {\n                const lastChar = getEditorString(editor, {\n                  anchor: pointBefore,\n                  focus: selection.focus,\n                });\n                if (lastChar.trim().length) {\n                  filteredFragment.push({ text: ' ' });\n                }\n              }\n\n              filteredFragment.push({ text: variable.variableName });\n\n              const pointAfter = getPointAfter(editor, selection);\n\n              if (pointAfter) {\n                const lastChar = getEditorString(editor, {\n                  anchor: selection.focus,\n                  focus: pointAfter,\n                });\n                if (lastChar.trim().length) {\n                  filteredFragment.push({ text: ' ' });\n                }\n              }\n            }\n          }\n\n          // Paragraphs can have a magic number injected with the pill\n          if (block.type === ELEMENT_PARAGRAPH) {\n            filteredFragment.push({\n              text: getExprRef(blockId), // 🔴\n              [MARK_MAGICNUMBER]: true,\n            });\n          }\n        }\n      });\n\n      editor.insertFragment(filteredFragment);\n\n      // When dragging from another source into the editor, it's possible\n      // that the current editor does not have focus.\n      if (!isEditorFocused(editor)) {\n        focusEditor(editor);\n      }\n    }\n  };\n","import {\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_LIC,\n  ELEMENT_PARAGRAPH,\n  MARK_MAGICNUMBER,\n  MyEditor,\n  MyText,\n} from '@decipad/editor-types';\nimport React from 'react';\nimport { getBlockAbove } from '@udecode/plate';\nimport { getSlateFragment, selectEventRange } from '@decipad/editor-utils';\nimport { dndStore } from '@udecode/plate-ui-dnd';\n\nexport const DRAG_SMART_CELL = 'smart-cell';\n\nexport const onDropSmartCell =\n  (editor: MyEditor) => (event: React.DragEvent) => {\n    if (editor.dragging === DRAG_SMART_CELL) {\n      // eslint-disable-next-line no-param-reassign\n      editor.dragging = null;\n\n      dndStore.set.isDragging(false);\n      event.preventDefault();\n      event.stopPropagation();\n\n      selectEventRange(editor)(event);\n\n      const fragment = getSlateFragment(event.dataTransfer) as\n        | string\n        | undefined;\n      if (!fragment) return;\n\n      const [text] = fragment;\n\n      const blockAbove = getBlockAbove(editor) ?? [];\n      const [block] = blockAbove;\n      if (!block) return;\n\n      const filteredFragment: MyText[] = [];\n      if (\n        block.type === ELEMENT_CODE_LINE ||\n        block.type === ELEMENT_CODE_LINE_V2_CODE\n      ) {\n        filteredFragment.push({\n          text,\n        });\n      } else if (\n        block.type === ELEMENT_PARAGRAPH ||\n        block.type === ELEMENT_LIC\n      ) {\n        filteredFragment.push({\n          text,\n          [MARK_MAGICNUMBER]: true,\n        });\n      }\n\n      if (filteredFragment.length) {\n        editor.insertFragment(filteredFragment);\n      }\n    }\n  };\n","import { MyEditor } from '@decipad/editor-types';\nimport React from 'react';\nimport { onDropInlineResult } from './onDropInlineResult';\nimport { onDropTableCellResult } from './onDropTableCellResult';\nimport { onDropSmartCell } from './onDropSmartCell';\n\nexport const onDropCodeLine =\n  (editor: MyEditor) => (event: React.DragEvent) => {\n    onDropInlineResult(editor)(event);\n    onDropSmartCell(editor)(event);\n    onDropTableCellResult(editor)(event);\n  };\n","import {\n  CodeLineElement,\n  ELEMENT_CODE_LINE,\n  MyEditor,\n  MyElement,\n  MyText,\n} from '@decipad/editor-types';\nimport React, { ComponentProps } from 'react';\nimport {\n  getSlateFragment,\n  insertNodes,\n  selectEventRange,\n} from '@decipad/editor-utils';\nimport { DRAG_TABLE_CELL_RESULT } from '@decipad/editor-components';\nimport { getBlockAbove, isElementEmpty, removeNodes } from '@udecode/plate';\nimport { CodeResult } from '@decipad/ui';\nimport { nanoid } from 'nanoid';\nimport { dndStore } from '@udecode/plate-ui-dnd';\n\ntype DragCellData = Parameters<\n  NonNullable<ComponentProps<typeof CodeResult>['onDragStartCell']>\n>[0];\n\nexport const onDropTableCellResult =\n  (editor: MyEditor) => (event: React.DragEvent) => {\n    if (editor.dragging === DRAG_TABLE_CELL_RESULT) {\n      // eslint-disable-next-line no-param-reassign\n      editor.dragging = null;\n\n      dndStore.set.isDragging(false);\n      event.preventDefault();\n      event.stopPropagation();\n\n      selectEventRange(editor)(event);\n\n      const fragment = getSlateFragment(\n        event.dataTransfer\n      ) as unknown as DragCellData[];\n      if (!fragment) return;\n\n      const filteredFragment: MyText[] = [];\n\n      fragment.forEach((data) => {\n        const blockAbove = getBlockAbove(editor) ?? [];\n        const [block, blockPath] = blockAbove;\n        if (!block) return;\n\n        const text = `lookup(${data.tableName}, \"${data.cellValue}\").${data.columnName}`;\n\n        if (block.type === ELEMENT_CODE_LINE) {\n          filteredFragment.push({\n            text,\n          });\n        } else {\n          if (isElementEmpty(editor, block as MyElement)) {\n            removeNodes(editor, { at: blockPath });\n          }\n          insertNodes(editor, {\n            id: nanoid(),\n            type: ELEMENT_CODE_LINE,\n            children: [\n              {\n                text,\n              },\n            ],\n          } as CodeLineElement);\n        }\n      });\n\n      editor.insertFragment(filteredFragment);\n    }\n  };\n","import { CodeLine } from '@decipad/editor-components';\n\nexport default CodeLine;\n","import { MyEditor } from '@decipad/editor-types';\nimport { isElement, isText, TDescendant } from '@udecode/plate';\n\nexport const normalizeInsertNodeText = (\n  editor: MyEditor,\n  node: TDescendant\n) => {\n  if (isElement(node)) {\n    node.children.forEach((child) => {\n      normalizeInsertNodeText(editor, child);\n    });\n  }\n\n  if (isText(node) && node.text.includes('\\u00a0')) {\n    // eslint-disable-next-line no-param-reassign\n    node.text = node.text.replaceAll('\\u00a0', ' ');\n  }\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport {\n  deleteText,\n  getEditorString,\n  getEndPoint,\n  getPointAfter,\n  getPointBefore,\n  getStartPoint,\n  isRangeAcrossBlocks,\n  TNodeEntry,\n} from '@udecode/plate';\nimport { Point, Range } from 'slate';\n\nexport const normalizeCodeLineSpace = (editor: MyEditor, entry: TNodeEntry) => {\n  // const firstLine =\n  const [, path] = entry;\n\n  const normalizeEdge = (firstPoint: Point, secondPoint?: Point) => {\n    if (!secondPoint) return;\n\n    const range = {\n      anchor: firstPoint,\n      focus: secondPoint,\n    } as Range;\n\n    if (\n      !isRangeAcrossBlocks(editor, {\n        at: range,\n      })\n    ) {\n      const char = getEditorString(editor, {\n        anchor: firstPoint,\n        focus: secondPoint,\n      });\n\n      if (/\\s/.test(char)) {\n        deleteText(editor, { at: range });\n\n        normalizeCodeLineSpace(editor, entry);\n      }\n    }\n  };\n\n  const firstPoint = getStartPoint(editor, path);\n  if (firstPoint) {\n    normalizeEdge(firstPoint, getPointAfter(editor, firstPoint));\n  }\n\n  const lastPoint = getEndPoint(editor, path);\n  if (lastPoint) {\n    normalizeEdge(lastPoint, getPointBefore(editor, lastPoint));\n  }\n};\n","import { ELEMENT_CODE_LINE, MyEditor } from '@decipad/editor-types';\nimport {\n  getAboveNode,\n  getNodeChildren,\n  getPointAfter,\n  insertText,\n  isElement,\n  isText,\n  someNode,\n  TNodeEntry,\n  TOperation,\n} from '@udecode/plate';\nimport { normalizeCodeLineSpace } from './normalizeCodeLineSpace';\n\nexport const applyCodeLineSelection = (editor: MyEditor, op: TOperation) => {\n  if (op.type !== 'set_selection' || !op.properties) return;\n\n  let entry: TNodeEntry | undefined;\n\n  try {\n    entry = getAboveNode(editor, {\n      at: op.properties as any,\n      match: (n) => isElement(n) && n.type === ELEMENT_CODE_LINE,\n    });\n  } catch (err) {\n    return;\n  }\n\n  // selection was not in code line\n  if (!entry) return;\n  const [, path] = entry;\n\n  let insideCodeLine: boolean;\n\n  try {\n    insideCodeLine = someNode(editor, {\n      at: op.newProperties as any,\n      match: (n) => isElement(n) && n.type === ELEMENT_CODE_LINE,\n    });\n  } catch (err) {\n    return;\n  }\n\n  // we're still in code line\n  if (insideCodeLine) return;\n\n  const children = Array.from(getNodeChildren(editor, path));\n\n  let index = -1;\n  for (const lineChild of children) {\n    index += 1;\n\n    const [lineChildNode, lineChildPath] = lineChild;\n\n    if (!index && isText(lineChildNode)) {\n      const { text } = lineChildNode;\n      const equalIndex = text.indexOf('=');\n      const doubleEquals = text.indexOf('==');\n      if (equalIndex > 0 && equalIndex !== doubleEquals) {\n        const charBefore = text[equalIndex - 1];\n\n        // if there is no space before =\n        if (charBefore !== ' ') {\n          // insert space before =\n          insertText(editor, ' ', {\n            at: {\n              offset: equalIndex,\n              path: lineChildPath,\n            },\n          });\n\n          applyCodeLineSelection(editor, op);\n          return;\n        }\n\n        const pointAfter = getPointAfter(editor, {\n          offset: equalIndex,\n          path: lineChildPath,\n        });\n        const charAfter = text[equalIndex + 1];\n\n        // if there is no space after =\n        if (\n          pointAfter &&\n          // Path.equals(pointAfter.path, lineChildPath) &&\n          charAfter !== ' '\n        ) {\n          // insert space after =\n          insertText(editor, ' ', {\n            at: {\n              offset: equalIndex + 1,\n              path: lineChildPath,\n            },\n          });\n\n          applyCodeLineSelection(editor, op);\n          return;\n        }\n      }\n    }\n  }\n\n  // selection is set from inside to outside code line -> normalize\n  normalizeCodeLineSpace(editor, entry);\n};\n","import {\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2_CODE,\n  MyWithOverride,\n} from '@decipad/editor-types';\nimport {\n  getEditorString,\n  getPointBefore,\n  getRange,\n  isCollapsed,\n  isVoid,\n  moveSelection,\n  someNode,\n} from '@udecode/plate';\nimport { normalizeInsertNodeText } from './normalizeInsertNodeText';\nimport { applyCodeLineSelection } from './applyCodeLineSelection';\n\nexport const withCodeLine: MyWithOverride = (editor) => {\n  const { insertText, apply } = editor;\n\n  // eslint-disable-next-line no-param-reassign\n  editor.insertText = (text) => {\n    if (\n      text === '\\n' &&\n      editor.selection &&\n      isCollapsed(editor.selection) &&\n      (someNode(editor, {\n        match: { type: ELEMENT_CODE_LINE },\n      }) ||\n        someNode(editor, {\n          match: { type: ELEMENT_CODE_LINE_V2_CODE },\n        }))\n    ) {\n      const previousChar = getEditorString(\n        editor,\n        getRange(\n          editor,\n          editor.selection,\n          getPointBefore(editor, editor.selection)\n        )\n      );\n\n      if (previousChar === '{') {\n        insertText('\\n  \\n');\n        moveSelection(editor, { reverse: true });\n\n        return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  // eslint-disable-next-line no-param-reassign\n  editor.apply = (op) => {\n    if (op.type === 'insert_node' && !isVoid(editor, op.node)) {\n      normalizeInsertNodeText(editor, op.node);\n    }\n\n    applyCodeLineSelection(editor, op);\n\n    apply(op);\n  };\n\n  return editor;\n};\n","import {\n  Computer,\n  STATEMENT_SEP_TOKEN_TYPE,\n  tokenize,\n} from '@decipad/computer';\nimport { getDefined } from '@decipad/utils';\nimport {\n  getBlockAbove,\n  getChildren,\n  getNodeString,\n  isElement,\n} from '@udecode/plate';\nimport {\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_CODE_LINE,\n  ELEMENT_SMART_REF,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { Path } from 'slate';\n\nexport const filterStatementSeparator =\n  (editor: MyEditor) =>\n  (_entry: MyNodeEntry, computer: Computer): boolean => {\n    const anchor = editor.selection?.anchor?.offset ?? 0;\n    const focus = editor.selection?.focus?.offset ?? 0;\n    let cursorStart = anchor < focus ? anchor : focus;\n    const cursorEnd = anchor > focus ? anchor : focus;\n\n    if (cursorStart == null || cursorEnd == null) {\n      return false;\n    }\n\n    const codeLineEntry = getDefined(\n      getBlockAbove(editor, {\n        match: (n) =>\n          isElement(n) &&\n          (n.type === ELEMENT_CODE_LINE ||\n            n.type === ELEMENT_CODE_LINE_V2_CODE),\n      })\n    );\n\n    // if there are smart refs in this code line we need to get text from all code line children, and adjust the cursortStart\n    const children = getChildren(codeLineEntry);\n\n    const nText = children.reduce(\n      (acc, [n]) =>\n        isElement(n) && n.type === ELEMENT_SMART_REF\n          ? acc + (computer.getSymbolDefinedInBlock(n.blockId) || '')\n          : acc + getNodeString(n),\n      ''\n    );\n\n    cursorStart =\n      children\n        .filter(([_, path]) =>\n          Path.isBefore(path, editor.selection!.anchor.path)\n        )\n        .reduce(\n          (acc, [n]) =>\n            isElement(n) && n.type === ELEMENT_SMART_REF\n              ? acc + (computer.getSymbolDefinedInBlock(n.blockId) || '').length\n              : acc + getNodeString(n).length,\n          0\n        ) + cursorStart;\n\n    // This function runs \"onKeyPress\", before the newline has been added to\n    // the text, so it needs to be added at the cursor position for the sake of\n    // calculating statement separation.\n    const text = `${nText.slice(0, cursorStart)}\\n`;\n\n    const statementSep = tokenize(text).some(\n      (tok) => tok.type === STATEMENT_SEP_TOKEN_TYPE\n    );\n    return !statementSep;\n  };\n","/* istanbul ignore file */\n/* tested in apps/client-e2e/src/notebook-calculation-block.ts */\nimport React from 'react';\nimport {\n  MyEditor,\n  ELEMENT_CODE_LINE,\n  MyNodeEntry,\n  ELEMENT_CODE_LINE_V2_CODE,\n} from '@decipad/editor-types';\nimport { focusEditor, getBlockAbove, getEndPoint } from '@udecode/plate';\nimport { Computer } from '@decipad/computer';\nimport {\n  focusAndSetSelection,\n  insertCodeLineBelow,\n} from '@decipad/editor-utils';\nimport { filterStatementSeparator } from './filterStatementSeparator';\n\nconst jumpToCodeLineEnd = (editor: MyEditor, nodeEntry: MyNodeEntry) => {\n  const loc = editor.selection?.focus;\n  if (!loc) return;\n\n  const codeLineEnd = getEndPoint(editor, nodeEntry[1]);\n\n  focusEditor(editor, {\n    focus: codeLineEnd,\n    anchor: codeLineEnd,\n  });\n};\n\nconst findCodeLineParentEntry = (editor: MyEditor) => {\n  const entry = getBlockAbove(editor);\n  if (!entry) return;\n\n  const [node] = entry;\n  if (\n    node.type !== ELEMENT_CODE_LINE &&\n    node.type !== ELEMENT_CODE_LINE_V2_CODE\n  ) {\n    return;\n  }\n\n  return entry;\n};\n\nexport const onKeyDownCodeLine =\n  (computer: Computer) =>\n  (editor: MyEditor) =>\n  (event: React.KeyboardEvent<Element>) => {\n    if (event.key !== 'Enter') return;\n\n    const codeLine = findCodeLineParentEntry(editor);\n    if (!codeLine) return;\n    const path = codeLine[1];\n\n    if (event.shiftKey) {\n      event.preventDefault();\n      insertCodeLineBelow(editor, path, true);\n      const nextBlock = [path[0] + 1, 0];\n      focusAndSetSelection(editor, nextBlock);\n      return;\n    }\n\n    const shouldSoftBreak = filterStatementSeparator(editor)(\n      codeLine,\n      computer\n    );\n\n    if (shouldSoftBreak) {\n      event.preventDefault();\n      editor.insertText('\\n');\n    } else {\n      event.preventDefault();\n      jumpToCodeLineEnd(editor, codeLine);\n    }\n  };\n","import { ELEMENT_CODE_LINE, MyPlatePlugin } from '@decipad/editor-types';\nimport { decorateCode } from '@decipad/editor-utils';\nimport { Computer } from '@decipad/computer';\nimport { deserializeCodeLineHtml } from './deserializeCodeLineHtml';\nimport { serializeCodeLineHtml } from './serializeCodeLineHtml';\nimport { onDropCodeLine } from './onDropCodeLine';\nimport CodeLine from './CodeLine';\nimport { withCodeLine } from './withCodeLine';\nimport { onKeyDownCodeLine } from './onKeyDownCodeLine';\n\nexport const createCodeLinePlugin = (computer: Computer): MyPlatePlugin => ({\n  key: ELEMENT_CODE_LINE,\n  isElement: true,\n  component: CodeLine,\n  deserializeHtml: deserializeCodeLineHtml,\n  serializeHtml: serializeCodeLineHtml,\n  decorate: decorateCode(ELEMENT_CODE_LINE),\n  withOverrides: withCodeLine,\n  handlers: {\n    onDrop: onDropCodeLine,\n    onKeyDown: onKeyDownCodeLine(computer),\n  },\n});\n","import {\n  deleteText,\n  getNodeProps,\n  isElement,\n  isText,\n  setNodes,\n  TEditor,\n  TElement,\n  TNode,\n  TNodeEntry,\n  TNodeProps,\n  unsetNodes,\n} from '@udecode/plate';\n\nconst baseProps = {\n  element: ['type', 'children', 'id', 'isHidden'],\n  text: ['text'],\n};\n\nconst basePropsFor = (node: TNode): string[] => {\n  return isElement(node) ? baseProps.element : baseProps.text;\n};\n\nconst assertElementOrText = ([node, path]: TNodeEntry): void => {\n  if (!isElement(node) && !isText(node)) {\n    console.error(\n      'Detected a node',\n      node,\n      'that is neither element nor text - at path',\n      path\n    );\n    throw new Error('Detected a node that is neither element nor text');\n  }\n  if (isElement(node) && isText(node)) {\n    console.error(\n      'Detected a node',\n      node,\n      'that is both element and text - at path',\n      path\n    );\n    throw new Error('Detected a node that is both element and text');\n  }\n};\n\n/**\n * Transforms given node entry to not have extra properties.\n * @param allowedPropKeys The properties to allow in addition to the common properties like `children` or `text`.\n * @returns Whether there were excess properties removed.\n */\nexport const normalizeExcessProperties = (\n  editor: TEditor,\n  entry: TNodeEntry,\n  allowedPropKeys: string[] = []\n): boolean => {\n  assertElementOrText(entry);\n  const [node, path] = entry;\n  const propKeys = Object.keys(getNodeProps(node));\n  const basePropKeys = basePropsFor(node);\n\n  const excessPropKeys = propKeys.filter(\n    (key) => !basePropKeys.includes(key) && !allowedPropKeys.includes(key)\n  );\n  unsetNodes<TElement>(editor, excessPropKeys, { at: path });\n  return !!excessPropKeys.length;\n};\n\n/**\n * Transforms given node entry to have the required properties. If necessary and possible, creates the missing properties as empty strings.\n * @param mandatoryPropKeys The required properties in addition to the common properties like `children` or `text`.\n * @param missingPropGenerator A function to fill missing mandatory props with values.\n * @returns Whether there were excess properties removed.\n */\nexport const normalizeMissingProperties = (\n  editor: TEditor,\n  entry: TNodeEntry,\n  mandatoryPropKeys: string[] = [],\n  missingPropGenerator: Record<string, () => unknown> = {}\n): boolean => {\n  assertElementOrText(entry);\n  const [node, path] = entry;\n  const presentPropKeys = Object.keys(getNodeProps(node));\n\n  let newProps: TNodeProps<TElement> = {};\n\n  for (const key of mandatoryPropKeys) {\n    if (presentPropKeys.includes(key)) {\n      continue;\n    }\n\n    if (key in missingPropGenerator) {\n      newProps = { ...newProps, [key]: missingPropGenerator[key]() };\n      continue;\n    }\n\n    console.error(\n      'Element',\n      node,\n      'at path',\n      path,\n      'does not have mandatory property',\n      key,\n      'and we do not know how to initialize it. Deleting element.'\n    );\n    deleteText(editor, { at: path });\n    return true;\n  }\n\n  setNodes(editor, newProps, { at: path });\n  return !!Object.keys(newProps).length;\n};\n","/* eslint-disable no-param-reassign */\nimport { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_CODE_LINE,\n  ELEMENT_SMART_REF,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { assertElementType, normalizeSmartRefs } from '@decipad/editor-utils';\nimport {\n  deleteText,\n  getNodeChildren,\n  insertText,\n  isDefined,\n  isElement,\n  isText,\n  unwrapNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { createNormalizerPlugin } from '../../pluginFactories';\nimport { normalizeExcessProperties } from '../../utils/normalize';\n\nexport const normalizeCodeChildren = (\n  computer: Computer,\n  editor: MyEditor,\n  [_node, path]: MyNodeEntry\n) => {\n  const children = Array.from(getNodeChildren(editor, path));\n  for (const lineChild of children) {\n    const [lineChildNode, lineChildPath] = lineChild;\n\n    if (isText(lineChildNode)) {\n      const { text } = lineChildNode;\n\n      // replace tabs by double space\n      for (let charIndex = 0; charIndex < text.length; charIndex += 1) {\n        const char = text[charIndex];\n\n        if (charIndex < text.length - 1) {\n          const charAfter = text[charIndex + 1];\n\n          // if char is { and next char is not a new line\n          if (\n            char === '{' &&\n            isDefined(charAfter) &&\n            !['\\n', '}'].includes(charAfter)\n          ) {\n            insertText(editor, '\\n  ', {\n              at: {\n                offset: charIndex + 1,\n                path: lineChildPath,\n              },\n            });\n            return false;\n          }\n        }\n\n        if (char === '}') {\n          // there is no char before\n          if (!charIndex) {\n            insertText(editor, '\\n', {\n              at: {\n                offset: charIndex,\n                path: lineChildPath,\n              },\n            });\n            return false;\n          }\n\n          const charBefore = text[charIndex - 1];\n\n          if (isDefined(charBefore) && !['\\n', '{'].includes(charBefore)) {\n            insertText(editor, '\\n', {\n              at: {\n                offset: charIndex,\n                path: lineChildPath,\n              },\n            });\n            return false;\n          }\n        }\n\n        if (char === '\\t') {\n          withoutNormalizing(editor, () => {\n            deleteText(editor, {\n              at: {\n                offset: charIndex,\n                path: lineChildPath,\n              },\n            });\n            insertText(editor, '  ', {\n              at: {\n                offset: charIndex,\n                path: lineChildPath,\n              },\n            });\n          });\n          return true;\n        }\n      }\n    }\n\n    // Children must be text or SmartRef\n    if (isElement(lineChildNode) && lineChildNode.type !== ELEMENT_SMART_REF) {\n      unwrapNodes(editor, { at: lineChildPath });\n      return true;\n    }\n\n    // add or extend smart refs\n    if (normalizeSmartRefs(lineChildNode, lineChildPath, editor, computer)) {\n      return true;\n    }\n\n    // Text must be plain\n    if (\n      !isElement(lineChildNode) &&\n      normalizeExcessProperties(editor, lineChild)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst normalizeCodeLine =\n  (computer: Computer) => (editor: MyEditor) => (entry: MyNodeEntry) => {\n    assertElementType(entry[0], ELEMENT_CODE_LINE);\n\n    if (normalizeCodeChildren(computer, editor, entry)) {\n      return true;\n    }\n\n    return false;\n  };\n\nexport const createNormalizeCodeLinePlugin = (computer: Computer) =>\n  createNormalizerPlugin({\n    name: 'NORMALIZE_CODE_LINE_PLUGIN',\n    elementType: ELEMENT_CODE_LINE,\n    plugin: normalizeCodeLine(computer),\n  });\n","import { MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport {\n  getNodeString,\n  unwrapNodes,\n  isElement,\n  isText,\n  removeNodes,\n} from '@udecode/plate';\nimport { normalizeExcessProperties } from './normalize';\n\nexport const normalizePlainTextChildren = (\n  editor: MyEditor,\n  children: Iterable<MyNodeEntry>\n) => {\n  for (const childEntry of children) {\n    const [childNode, childPath] = childEntry;\n\n    if (isElement(childNode)) {\n      const str = getNodeString(childNode);\n      if (str === '') {\n        // unwrapNodes does nothing if the element is empty\n        removeNodes(editor, { at: childPath });\n        return true;\n      }\n\n      unwrapNodes(editor, { at: childPath });\n      return true;\n    }\n\n    if (isText(childNode)) {\n      if (normalizeExcessProperties(editor, childEntry)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import {\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_VARNAME,\n  StructuredVarnameElement,\n  CodeLineV2ElementCode,\n} from '@decipad/editor-types';\nimport { isElementOfType, insertNodes } from '@decipad/editor-utils';\nimport { Computer } from '@decipad/computer';\nimport { nanoid } from 'nanoid';\nimport { getNodeChildren, removeNodes, setNodes } from '@udecode/plate';\nimport { normalizeCodeChildren } from '../NormalizeCodeLine/createNormalizeCodeLinePlugin';\nimport { createNormalizerPlugin } from '../../pluginFactories';\nimport { normalizePlainTextChildren } from '../../utils/normalizePlainTextChildren';\n\nexport const createNormalizeCodeLineV2Plugin = () =>\n  createNormalizerPlugin({\n    name: 'NORMALIZE_CODE_LINE_V2',\n    elementType: ELEMENT_CODE_LINE_V2,\n    acceptableSubElements: [\n      ELEMENT_STRUCTURED_VARNAME,\n      ELEMENT_CODE_LINE_V2_CODE,\n    ],\n    plugin:\n      (editor) =>\n      ([node, path]) => {\n        if (isElementOfType(node, ELEMENT_CODE_LINE_V2)) {\n          if (!node.children) {\n            setNodes(editor, { children: [{ text: '' }] }, { at: path });\n            return true;\n          }\n\n          if (node.children.length < 1) {\n            insertNodes(\n              editor,\n              {\n                type: ELEMENT_STRUCTURED_VARNAME,\n                id: nanoid(),\n                children: [{ text: '' }],\n              } as StructuredVarnameElement,\n              { at: [...path, 0] }\n            );\n\n            return true;\n          }\n\n          if (node.children[0].type !== ELEMENT_STRUCTURED_VARNAME) {\n            removeNodes(editor, { at: [...path, 0] });\n\n            return true;\n          }\n\n          if (node.children.length < 2) {\n            insertNodes(\n              editor,\n              {\n                type: ELEMENT_CODE_LINE_V2_CODE,\n                id: nanoid(),\n                children: [{ text: '' }],\n              } as CodeLineV2ElementCode,\n              { at: [...path, 1] }\n            );\n\n            return true;\n          }\n\n          if (node.children[1].type !== ELEMENT_CODE_LINE_V2_CODE) {\n            removeNodes(editor, { at: [...path, 1] });\n\n            return true;\n          }\n\n          if (!isElementOfType(node.children[0], ELEMENT_STRUCTURED_VARNAME)) {\n            removeNodes(editor, { at: [...path, 0] });\n\n            return true;\n          }\n\n          if (!isElementOfType(node.children[1], ELEMENT_CODE_LINE_V2_CODE)) {\n            removeNodes(editor, { at: [...path, 1] });\n\n            return true;\n          }\n\n          if (node.children.length > 2) {\n            removeNodes(editor, { at: [...path, 2] });\n\n            return true;\n          }\n        }\n\n        return false;\n      },\n  });\n\nexport const createNormalizeCodeLineCodePlugin = (computer: Computer) =>\n  createNormalizerPlugin({\n    name: 'NORMALIZE_CODE_LINE_V2_CODE',\n    elementType: ELEMENT_CODE_LINE_V2_CODE,\n    acceptableSubElements: [],\n    plugin: (editor) => (entry) => {\n      if (isElementOfType(entry[0], ELEMENT_CODE_LINE_V2_CODE)) {\n        return normalizeCodeChildren(computer, editor, entry);\n      }\n      return false;\n    },\n  });\n\nexport const createNormalizeCodeLineVarnamePlugin = () =>\n  createNormalizerPlugin({\n    name: 'NORMALIZE_CODE_LINE_V2_VARNAME',\n    elementType: ELEMENT_STRUCTURED_VARNAME,\n    acceptableSubElements: [],\n    plugin: (editor) => (entry) => {\n      if (isElementOfType(entry[0], ELEMENT_STRUCTURED_VARNAME)) {\n        if (\n          normalizePlainTextChildren(editor, getNodeChildren(editor, entry[1]))\n        ) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n  });\n","import { MyPlatePlugin, MyElement } from '@decipad/editor-types';\nimport { isElementOfType } from '@decipad/editor-utils';\nimport { Path } from 'slate';\nimport { getBlockAbove, isCollapsed, setSelection } from '@udecode/plate';\n\nexport const createSelectionContainmentPlugin = (\n  elType: MyElement['type']\n): MyPlatePlugin => ({\n  key: `CONTAIN_SELECTION_${elType}`,\n  withOverrides: (editor) => {\n    const prevOnChange = editor.onChange;\n\n    let selectionFixerTimerHandle: Parameters<typeof clearTimeout>[0];\n    // eslint-disable-next-line no-param-reassign\n    editor.onChange = () => {\n      prevOnChange();\n\n      clearTimeout(selectionFixerTimerHandle);\n      selectionFixerTimerHandle = setTimeout(() => {\n        let anchorEntry;\n        let focusEntry;\n        if (\n          editor.selection &&\n          !isCollapsed(editor.selection) &&\n          !Path.equals(\n            editor.selection.anchor.path,\n            editor.selection.focus.path\n          ) &&\n          (anchorEntry = getBlockAbove(editor, {\n            at: editor.selection.anchor.path,\n          })) &&\n          (focusEntry = getBlockAbove(editor, {\n            at: editor.selection.focus.path,\n          })) &&\n          !Path.equals(anchorEntry[1], focusEntry[1]) &&\n          isElementOfType(anchorEntry[0], elType)\n        ) {\n          setSelection(editor, {\n            anchor: editor.selection.anchor,\n            focus: editor.selection.anchor,\n          });\n        }\n      });\n    };\n\n    return editor;\n  },\n});\n","import { Computer } from '@decipad/computer';\nimport {\n  createEventInterceptorPluginFactory,\n  createStructuredKeyboard,\n} from '@decipad/editor-plugins';\nimport {\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_VARNAME,\n  MyPlatePlugin,\n} from '@decipad/editor-types';\nimport { decorateCode } from '@decipad/editor-utils';\nimport {\n  CodeLineV2Code,\n  CodeLineV2,\n  CodeLineV2Varname,\n} from '@decipad/editor-components';\nimport {\n  createNormalizeCodeLineCodePlugin,\n  createNormalizeCodeLineV2Plugin,\n  createNormalizeCodeLineVarnamePlugin,\n} from './normalization';\nimport { createSelectionContainmentPlugin } from './selectionContainmentPlugin';\n\nconst createCodeLineVarnamePlugin = (_computer: Computer) => ({\n  key: ELEMENT_STRUCTURED_VARNAME,\n  isElement: true,\n  component: CodeLineV2Varname,\n});\nconst createCodeLineCodeTextPlugin = (_computer: Computer) => ({\n  key: ELEMENT_CODE_LINE_V2_CODE,\n  isElement: true,\n  component: CodeLineV2Code,\n  decorate: decorateCode(ELEMENT_CODE_LINE_V2_CODE),\n});\nconst createCodeLineRootPlugin = (_computer: Computer) => ({\n  key: ELEMENT_CODE_LINE_V2,\n  isElement: true,\n  component: CodeLineV2,\n});\n\nexport const createCodeLineV2Plugin = (computer: Computer): MyPlatePlugin => ({\n  key: 'CODE_LINE_V2_ROOT',\n  plugins: [\n    createCodeLineCodeTextPlugin(computer),\n    createCodeLineVarnamePlugin(computer),\n    createCodeLineRootPlugin(computer),\n    createNormalizeCodeLineV2Plugin(),\n    createNormalizeCodeLineCodePlugin(computer),\n    createNormalizeCodeLineVarnamePlugin(),\n    createSelectionContainmentPlugin(ELEMENT_CODE_LINE_V2_CODE),\n    createSelectionContainmentPlugin(ELEMENT_STRUCTURED_VARNAME),\n    createStructuredKeyboard(computer.getAvailableIdentifier.bind(computer)),\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_CODE_LINE_V2',\n      elementTypes: [ELEMENT_CODE_LINE_V2],\n      interceptor: (_editor, _entry, e) => {\n        // Keyboard shortcut for creating a new element.\n        return e.event.key !== 'Enter';\n      },\n    })(),\n  ],\n});\n","import { PlateComponent, RichText, useTEditorRef } from '@decipad/editor-types';\nimport { useComputer } from '@decipad/react-contexts';\nimport { CodeVariable as UICodeVariable } from '@decipad/ui';\nimport { useCallback } from 'react';\nimport {\n  findNodePath,\n  focusEditor,\n  getEndPoint,\n  setSelection,\n  toSlateNode,\n} from '@udecode/plate';\nimport { VariableInfo } from '@decipad/editor-utils';\n\ntype VariableScope = 'local' | 'global' | 'undefined';\n\ntype VisibleVariables = {\n  global: ReadonlySet<string>;\n  local: ReadonlySet<string>;\n};\n\ntype CodeLeaf = PlateComponent<{\n  leaf: RichText & VariableInfo;\n}>;\n\nexport const getVariableScope = (\n  variableName: string,\n  vars: VisibleVariables | undefined\n): VariableScope => {\n  if (vars?.local.has(variableName)) {\n    return 'local';\n  }\n  if (vars?.global.has(variableName)) {\n    return 'global';\n  }\n  return 'undefined';\n};\n\nexport const CodeVariable: CodeLeaf = ({\n  attributes,\n  children,\n  leaf: { variableName, blockId, isDeclaration, text },\n}) => {\n  const computer = useComputer();\n  const defBlockId = computer.getVarBlockId$.use(variableName);\n  const visibleVariables = computer.getBlockIdResult$.useWithSelector(\n    (x) => x?.visibleVariables,\n    blockId\n  );\n\n  const variableScope = getVariableScope(variableName, visibleVariables);\n  const variableMissing = variableScope === 'undefined';\n\n  const provideVariableDefLink =\n    !isDeclaration && !variableMissing && typeof defBlockId === 'string';\n\n  const editor = useTEditorRef();\n  const goToDefinition = useCallback(() => {\n    if (provideVariableDefLink && defBlockId) {\n      const el = document.getElementById(defBlockId);\n      if (el) {\n        const slateNode = toSlateNode(editor, el);\n        if (slateNode) {\n          const path = findNodePath(editor, slateNode);\n          if (path) {\n            focusEditor(editor);\n            const anchor = getEndPoint(editor, path);\n            setSelection(editor, { anchor, focus: anchor });\n          }\n        }\n      }\n    }\n  }, [defBlockId, editor, provideVariableDefLink]);\n\n  if (!text) {\n    return <span {...attributes}>{children}</span>;\n  }\n\n  return (\n    <span {...attributes}>\n      <UICodeVariable\n        provideVariableDefLink={provideVariableDefLink}\n        variableScope={variableScope}\n        variableMissing={variableMissing && !isDeclaration}\n        defBlockId={defBlockId}\n        onGoToDefinition={goToDefinition}\n      >\n        {children}\n      </UICodeVariable>\n    </span>\n  );\n};\n","import { createTPluginFactory } from '@decipad/editor-types';\nimport { DECORATE_CODE_VARIABLE } from '../../constants';\nimport { CodeVariable } from './CodeVariable';\n\nexport const createCodeVariableHighlightPlugin = createTPluginFactory({\n  key: DECORATE_CODE_VARIABLE,\n  isLeaf: true,\n  // isElement: true,\n\n  component: CodeVariable,\n});\n","import { DividerElement, ELEMENT_HR } from '@decipad/editor-types';\nimport { DeserializeHtml } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\n\nconst divider = (): DividerElement => {\n  return {\n    id: nanoid(),\n    type: ELEMENT_HR,\n    children: [{ text: '' }],\n  };\n};\n\nexport const deserializeDividerHtml: DeserializeHtml = {\n  rules: [{ validNodeName: 'HR' }],\n  getNode: (): DividerElement | undefined => {\n    return divider();\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport { createTPluginFactory, ELEMENT_HR } from '@decipad/editor-types';\nimport { Divider } from '@decipad/editor-components';\nimport { deserializeDividerHtml } from './deserializeDividerHtml';\nimport { serializeDividerHtml } from './serializeDividerHtml';\n\nexport const createDividerPlugin = createTPluginFactory({\n  key: ELEMENT_HR,\n  isVoid: true,\n  isElement: true,\n  component: Divider,\n  deserializeHtml: deserializeDividerHtml,\n  serializeHtml: serializeDividerHtml,\n});\n","import { MySerializeHtml } from '@decipad/editor-types';\n\nexport const serializeDividerHtml: MySerializeHtml = () => {\n  return <hr />;\n};\n","import { getExprRef, parseStatement } from '@decipad/computer';\nimport {\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_SMART_REF,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  ELEMENT_LIC,\n  MARK_MAGICNUMBER,\n  MyElement,\n  RichText,\n  SmartRefElement,\n} from '@decipad/editor-types';\nimport { last } from '@decipad/utils';\nimport { nanoid } from 'nanoid';\nimport { Text } from 'slate';\n\n/**\n * Attempt to parse surrounded with +, suffixed with +, and prefixed with +.\n * The first good parse gets used.\n *\n * Allows people to drag \"a + b + c\" without using the keyboard\n */\nconst surroundWithPlusSigns = (\n  precedingText: string,\n  followingText: string\n) => {\n  const hypotheses = [\n    [' + ', ' + '],\n    [' ', ' + '],\n    [' + ', ' '],\n  ];\n  for (let [textBefore, textAfter] of hypotheses) {\n    if (\n      parseStatement(\n        `${precedingText + textBefore}smartRef${textAfter}${followingText}`\n      ).solution\n    ) {\n      if (textBefore[0] === ' ' && last(precedingText) === ' ') {\n        textBefore = textBefore.slice(1);\n      }\n      if (last(textAfter) === ' ' && followingText[0] === ' ') {\n        textAfter = textAfter.slice(0, -1);\n      }\n      return { textBefore, textAfter };\n    }\n  }\n\n  return { textBefore: ' ', textAfter: ' ' };\n};\n\nexport function insertSmartRef(\n  blockType: MyElement['type'],\n  blockId: string,\n  precedingText = '',\n  followingText = ''\n): (MyElement | Text)[] | undefined {\n  switch (blockType) {\n    case ELEMENT_CODE_LINE_V2_CODE:\n    case ELEMENT_CODE_LINE:\n    case ELEMENT_TABLE_COLUMN_FORMULA: {\n      const { textBefore, textAfter } = surroundWithPlusSigns(\n        precedingText,\n        followingText\n      );\n\n      const smartRef: SmartRefElement = {\n        id: nanoid(),\n        type: ELEMENT_SMART_REF,\n        blockId,\n        children: [{ text: '' }],\n      };\n\n      return [{ text: textBefore }, smartRef, { text: textAfter }];\n    }\n\n    case ELEMENT_LIC:\n    case ELEMENT_PARAGRAPH: {\n      const magicNum: RichText = {\n        text: getExprRef(blockId),\n        [MARK_MAGICNUMBER]: true,\n      };\n\n      return [magicNum];\n    }\n    default: {\n      return undefined;\n    }\n  }\n}\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_SMART_REF,\n  MyEditor,\n  MyElement,\n  MyNode,\n} from '@decipad/editor-types';\nimport {\n  DRAG_BLOCK_ID_CONTENT_TYPE,\n  DRAG_SMART_REF,\n  getCollapsedSelection,\n  insertNodes,\n  selectEventRange,\n} from '@decipad/editor-utils';\nimport {\n  focusEditor,\n  getBlockAbove,\n  getNodeString,\n  isEditorFocused,\n  isElement,\n} from '@udecode/plate';\nimport React from 'react';\nimport { BasePoint, Path } from 'slate';\nimport { dndStore } from '@udecode/plate-ui-dnd';\nimport { insertSmartRef } from './insertSmartRef';\n\nexport const onDropSmartRef =\n  (computer: Computer) => (editor: MyEditor) => (event: React.DragEvent) => {\n    if (editor.dragging === DRAG_SMART_REF) {\n      // eslint-disable-next-line no-param-reassign\n      editor.dragging = null;\n\n      dndStore.set.isDragging(false);\n      event.preventDefault();\n      event.stopPropagation();\n\n      selectEventRange(editor)(event);\n\n      const blockId = event.dataTransfer.getData(DRAG_BLOCK_ID_CONTENT_TYPE);\n      if (!blockId) {\n        return;\n      }\n\n      const selection = getCollapsedSelection(editor);\n      if (!selection) {\n        return;\n      }\n\n      const [blockAbove, blockAbovePath] =\n        getBlockAbove(editor, { at: selection }) ?? [];\n      if (!blockAbove || !blockAbovePath || !isElement(blockAbove)) {\n        return;\n      }\n\n      const result = computer.getBlockIdResult$.get(blockId);\n      if (!result) {\n        return;\n      }\n\n      const { textBefore, textAfter } =\n        findTextBeforeAndAfterPoint(blockAbove, blockAbovePath, selection) ??\n        {};\n\n      if (textBefore == null || textAfter == null) {\n        return;\n      }\n\n      const nodes = insertSmartRef(\n        blockAbove.type,\n        blockId,\n        textBefore,\n        textAfter\n      );\n\n      if (nodes != null) {\n        insertNodes(editor, nodes);\n      }\n\n      // When dragging from another source into the editor, it's possible\n      // that the current editor does not have focus.\n      if (!isEditorFocused(editor)) {\n        focusEditor(editor);\n      }\n    }\n  };\n\nexport function findTextBeforeAndAfterPoint(\n  blockAbove: MyElement,\n  blockAbovePath: Path,\n  { path, offset }: BasePoint\n) {\n  const [myBlockIndex] = Path.relative(path, blockAbovePath);\n  if (myBlockIndex == null) {\n    return;\n  }\n\n  const blocksBefore = blockAbove.children.slice(0, myBlockIndex);\n  const blocksAfter = blockAbove.children.slice(myBlockIndex + 1);\n  const blockItself = blockAbove.children[myBlockIndex];\n\n  if (blockItself == null) {\n    return;\n  }\n\n  const getText = (blocks: MyNode[]): string =>\n    blocks.reduce(\n      (acc, item) =>\n        acc +\n        (isElement(item) && item.type === ELEMENT_SMART_REF\n          ? 'smartrefplaceholder'\n          : getNodeString(item)),\n      ''\n    );\n\n  const textBefore =\n    getText(blocksBefore) + getText([blockItself]).slice(0, offset);\n  const textAfter = getText([blockItself]).slice(offset) + getText(blocksAfter);\n\n  return { textBefore, textAfter };\n}\n","import { MyPlatePlugin } from '@decipad/editor-types';\nimport { DRAG_SMART_REF } from '@decipad/editor-utils';\nimport { Computer } from '@decipad/computer';\nimport { onDropSmartRef } from './onDrop/onDropSmartRef';\n\n/**\n * Plugin that enables dropping smart refs in the document.\n *\n * It works through reading a blockId from DragEvent.dataTransfer (content-type text/x-smart-ref)\n *\n * See `onDragStartSmartRef` for the drag part\n */\nexport const createDndSmartRefPlugin = (computer: Computer): MyPlatePlugin => ({\n  key: DRAG_SMART_REF,\n  handlers: {\n    onDrop: onDropSmartRef(computer),\n  },\n});\n","import { createStore } from '@udecode/plate';\n\nexport const cursorStore = createStore('cursor')({\n  cursors: {},\n});\n","import { MyPlatePlugin } from '@decipad/editor-types';\nimport { cssVar } from '@decipad/ui';\nimport { findEventRange } from '@udecode/plate';\nimport { cursorStore } from '../../stores/cursorStore';\n\nexport const createDragOverCursorPlugin = (): MyPlatePlugin => ({\n  key: 'drag-over-cursor',\n  handlers: {\n    onDragOver: (editor) => (event) => {\n      if (editor.isDragging) return;\n\n      const range = findEventRange(editor, event);\n      if (!range) return;\n\n      cursorStore.set.cursors({\n        drag: {\n          key: 'drag',\n          data: {\n            style: {\n              backgroundColor: cssVar('droplineColor'),\n              width: 2,\n            },\n          },\n          selection: range,\n        },\n      });\n    },\n    onDragLeave: () => () => {\n      cursorStore.set.cursors({});\n    },\n    onDragEnd: () => () => {\n      cursorStore.set.cursors({});\n    },\n    onDrop: () => () => {\n      cursorStore.set.cursors({});\n    },\n  },\n});\n","import { FC } from 'react';\nimport { Loading } from '../../icons';\n\nexport const LoadingIndicator: FC = () => {\n  return (\n    <div css={{ display: 'grid', placeItems: 'center' }}>\n      <div css={{ width: 'min(100%, 60px)', height: 'min(100%, 60px)' }}>\n        <Loading />\n      </div>\n    </div>\n  );\n};\n","import { lazy, Suspense } from 'react';\nimport type { PlateComponent } from '@decipad/editor-types';\nimport { LoadingIndicator } from '@decipad/ui';\nimport { useLockEditorWriting } from '@decipad/react-contexts';\n\nconst EditorElementPlaceholder: PlateComponent = (props) => {\n  useLockEditorWriting();\n  return (\n    <div {...props.attributes}>\n      <div contentEditable={false}>\n        <LoadingIndicator />\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nexport const lazyElementComponent = (\n  factory: Parameters<typeof lazy>['0']\n): PlateComponent => {\n  const LazyElementComponent = lazy(factory);\n\n  const LazyElementLoader: PlateComponent = (props) => {\n    return (\n      <Suspense fallback={<EditorElementPlaceholder {...props} />}>\n        <LazyElementComponent {...props} />\n      </Suspense>\n    );\n  };\n\n  return LazyElementLoader;\n};\n","import { createTPluginFactory, ELEMENT_DRAW } from '@decipad/editor-types';\nimport { lazyElementComponent } from '../../utils/lazyElement';\n\nconst LazyDraw = lazyElementComponent(\n  () => import(/* webpackChunkName: \"editor-draw\" */ './Draw')\n);\n\nexport const createDrawPlugin = createTPluginFactory({\n  key: ELEMENT_DRAW,\n  isElement: true,\n  isVoid: true,\n  component: LazyDraw,\n});\n","import { captureException } from '@sentry/browser';\nimport { TOperation } from '@udecode/plate';\nimport { createOverrideApplyPluginFactory } from '../../pluginFactories';\n\nconst maxHistorySize = 50;\n\nexport const createEditorApplyErrorReporterPlugin =\n  createOverrideApplyPluginFactory({\n    name: 'USE_EDITOR_APPLY_ERROR_REPORTER',\n    plugin: (editor, apply) => {\n      const history: Array<TOperation> = [];\n\n      const pushOp = (op: TOperation) => {\n        history.push(op);\n        if (history.length > maxHistorySize) {\n          // remove oldest op from history\n          history.shift();\n        }\n      };\n\n      return (op: TOperation) => {\n        pushOp(op);\n\n        try {\n          apply.call(editor, op);\n        } catch (err) {\n          console.error(err);\n          console.error('history:', history);\n          captureException(err, {\n            extra: {\n              'editor.history': history,\n              'editor.children': editor.children,\n              'editor.apply.op': op,\n            },\n          });\n          throw err;\n        }\n      };\n    },\n  });\n","import { css } from '@emotion/react';\nimport React from 'react';\nimport { code, cssVar } from '../../primitives';\n\nexport const EvalCodeArea: React.FC<React.PropsWithChildren> = (props) => {\n  return (\n    <div css={containerStyles} spellCheck={false}>\n      {props.children}\n    </div>\n  );\n};\n\nconst containerStyles = css(code, {\n  gridArea: 'code',\n\n  marginTop: '16px',\n  padding: '4px 10px',\n  borderRadius: '10px',\n  border: `1px solid ${cssVar('borderColor')}`,\n});\n","import { useEffect } from 'react';\nimport {\n  EvalElement,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { getNodeString } from '@udecode/plate';\nimport { useElementMutatorCallback } from '@decipad/editor-utils';\nimport { DraggableBlock } from '@decipad/editor-components';\nimport { EvalCodeArea as UIEvalCodeArea } from '@decipad/ui';\n\nimport _ from 'lodash';\nimport { evalUnsafeCode } from './evalUnsafeCode';\n\nconst evalUnsafeCodeDebounced = _.debounce(evalUnsafeCode, 250);\n\nexport const EvalCodeArea: PlateComponent = (props) => {\n  const editor = useTEditorRef();\n  const element = props.element as EvalElement;\n  const unsafeCode = getNodeString(element);\n  const updateResult = useElementMutatorCallback(editor, element, 'result');\n\n  useEffect(() => {\n    evalUnsafeCodeDebounced(unsafeCode)\n      ?.then((expr) => updateResult(expr))\n      .catch((err) => console.error(err));\n  }, [updateResult, unsafeCode]);\n\n  return (\n    <DraggableBlock\n      blockKind=\"codeLine\"\n      element={element}\n      {...props.attributes}\n    >\n      <UIEvalCodeArea>{props.children}</UIEvalCodeArea>\n    </DraggableBlock>\n  );\n};\n","import { Computer } from '@decipad/computer';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport { ELEMENT_EVAL, MyPlatePlugin } from '@decipad/editor-types';\nimport { EvalCodeArea } from './component';\n\nexport const evalPluginCore: MyPlatePlugin = {\n  key: ELEMENT_EVAL,\n  isElement: true,\n  component: EvalCodeArea,\n};\n\nexport const createEvalPlugin = (_computer: Computer): MyPlatePlugin[] =>\n  !isFlagEnabled('UNSAFE_JS_EVAL') ? [] : [evalPluginCore];\n","import {\n  getNode,\n  isEditor,\n  isElement,\n  isCollapsed,\n  TNode,\n} from '@udecode/plate';\nimport { BaseEditor, Editor, Node, Path, Point } from 'slate';\n\n/** Is the cursor at the end|start of the parent element? */\nexport const isCursorAtBlockEdge = (\n  editor: BaseEditor,\n  edge: 'end' | 'start'\n): boolean => {\n  const cursorPath =\n    editor.selection && isCollapsed(editor.selection)\n      ? editor.selection.focus.path\n      : undefined;\n\n  const cursorInLeafNode = leafNodeInCollapsedSelection(editor, cursorPath);\n  if (!cursorInLeafNode || !cursorPath || !editor.selection) {\n    return false;\n  }\n\n  const nonLeafElement = Editor.above(editor, {\n    at: cursorPath,\n    match: (n: Node) => Editor.isBlock(editor, n),\n  });\n  if (!nonLeafElement?.[0]?.children) {\n    return false;\n  }\n\n  const [start, end] = Editor.edges(editor, nonLeafElement[1]);\n\n  return (\n    Point.compare(editor.selection.focus, edge === 'end' ? end : start) === 0\n  );\n};\n\nconst leafNodeInCollapsedSelection = (\n  editor: BaseEditor,\n  cursorPath?: Path\n) => {\n  if (!cursorPath) {\n    return false;\n  }\n\n  const node = cursorPath && getNode(editor as TNode, cursorPath);\n  return node != null && !isEditor(node) && !isElement(node) && 'text' in node;\n};\n","import {\n  ELEMENT_COLUMNS,\n  ELEMENT_LIC,\n  InterceptableEvent,\n  MyEditor,\n  MyElementEntry,\n  MyPlatePlugin,\n} from '@decipad/editor-types';\nimport { getNodeParent, isCollapsed, isElement } from '@udecode/plate';\nimport { BaseEditor, Editor, Location } from 'slate';\nimport { findClosestBlockOrColumn } from './findClosestBlockOrColumn';\nimport { isCursorAtBlockEdge } from './isCursorAtBlockEdge';\n\n/**\n * Prevents default slate/browser weird behavior through allowing to intercept events.\n * Interceptor functions are registered with `createEventInterceptorPluginFactory`\n *\n * Currently the interceptor by default cancels: Backspace, Delete and Enter.\n * This plugin must be the first in the chain, because it has to be the first to see user events.\n */\nexport const createEventInterceptionSuperHandlerPlugin = (): MyPlatePlugin => {\n  return {\n    key: 'EVENT_INTERCEPTION_PLUGIN',\n    handlers: {\n      onKeyDownCapture: (editor) => (event) => {\n        const cursorPath =\n          editor.selection &&\n          isCollapsed(editor.selection) &&\n          editor.selection.focus.path;\n\n        const topLevel =\n          cursorPath && findClosestBlockOrColumn(editor, cursorPath);\n        if (!cursorPath) {\n          return;\n        }\n        const parentNode = getNodeParent(editor, cursorPath);\n\n        if (topLevel) {\n          const prevBlock = Editor.previous(editor as BaseEditor, {\n            at: topLevel[1],\n          });\n          const nextBlock = Editor.next(editor as BaseEditor, {\n            at: topLevel[1],\n          });\n\n          // Input elements are used in elements such as:\n          // Slider (Max and min), and dropdown.\n          // Preventing backspace and other events in them causes\n          // strange behavior.\n          // Also preventing backspace for lists can also lead to a weird behavior\n          if (\n            document.activeElement?.tagName === 'INPUT' ||\n            parentNode.type === ELEMENT_LIC\n          )\n            return;\n          switch (event.key) {\n            case 'Backspace': {\n              // Handle problematic delete (at start of text node)\n              if (isCursorAtBlockEdge(editor as BaseEditor, 'start')) {\n                const wasHandled = bubbleCancelableEvent(\n                  editor,\n                  { type: 'delete-text-start', event },\n                  cursorPath\n                );\n\n                if (!wasHandled && prevBlock != null) {\n                  // Didn't handle it locally!\n                  // What does the block *before* me think about this?\n                  bubbleCancelableEvent(\n                    editor,\n                    { type: 'delete-block', event },\n                    prevBlock[1]\n                  );\n                }\n              }\n              // TODO handle problematic delete of whole selection\n              return;\n            }\n\n            case 'Delete': {\n              // Handle problematic delete (at end of text node)\n\n              if (isCursorAtBlockEdge(editor as BaseEditor, 'end')) {\n                const wasHandled = bubbleCancelableEvent(\n                  editor,\n                  { type: 'delete-text-end', event },\n                  cursorPath\n                );\n\n                if (!wasHandled && nextBlock != null) {\n                  // Didn't handle it locally!\n                  // What does the block *after* me think about this?\n\n                  bubbleCancelableEvent(\n                    editor,\n                    { type: 'delete-block', event },\n                    nextBlock[1]\n                  );\n                }\n              }\n\n              // TODO handle problematic delete of whole selection\n              return;\n            }\n            case 'Enter': {\n              // Let the interceptor for this event handle the enter press\n              bubbleCancelableEvent(\n                editor,\n                { type: 'on-enter', event },\n                cursorPath\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n};\n\n/** goes through event target, parent, grandparent, etc, looking for interceptors */\nfunction bubbleCancelableEvent(\n  editor: MyEditor,\n  interceptableEvent: InterceptableEvent,\n  bubbleAt?: Location\n): boolean {\n  const elementsBubblePath = [\n    ...Editor.levels(editor as BaseEditor, {\n      match: isElement,\n      reverse: true,\n      at: bubbleAt,\n    }),\n  ] as MyElementEntry[];\n\n  const cancel = () => {\n    interceptableEvent.event.preventDefault();\n    interceptableEvent.event.stopPropagation();\n  };\n\n  for (const entry of elementsBubblePath) {\n    if (entry[0].type === ELEMENT_COLUMNS) {\n      return true;\n    }\n\n    const wasHandled = editor.interceptEvent?.(\n      editor,\n      entry,\n      interceptableEvent\n    );\n\n    if (wasHandled === true) {\n      cancel();\n      return true;\n    }\n  }\n\n  return false;\n}\n","import { ELEMENT_COLUMNS, MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport { isElementOfType } from '@decipad/editor-utils';\nimport { last } from '@decipad/utils';\nimport { isElement } from '@udecode/plate';\nimport { BaseEditor, Editor, Path } from 'slate';\n\nexport function findClosestBlockOrColumn(\n  editor: MyEditor,\n  path: Path\n): MyNodeEntry | undefined {\n  const ancestors = [\n    ...Editor.levels(editor as BaseEditor, {\n      match: isElement,\n      at: path,\n      reverse: true,\n    }),\n  ] as MyNodeEntry[];\n\n  return (\n    ancestors.find((entry) => isElementOfType(entry[0], ELEMENT_COLUMNS)) ??\n    last(ancestors)\n  );\n}\n","import { gql } from '@apollo/client';\n\nexport const ATTACH_FILE_TO_PAD = gql`\n  mutation AttachFileToPad($handle: ID!) {\n    attachFileToPad(handle: $handle) {\n      id\n      fileName\n      fileType\n      fileSize\n      url\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const CREATE_EXTERNAL_DATA_SOURCE = gql`\n  mutation CreateExternalDataSource(\n    $name: String!\n    $padId: ID!\n    $provider: ExternalProvider!\n    $externalId: String!\n  ) {\n    createExternalDataSource(\n      dataSource: {\n        name: $name\n        padId: $padId\n        provider: $provider\n        externalId: $externalId\n      }\n    ) {\n      id\n      dataUrl\n      authUrl\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const RENAME_PAD = gql`\n  mutation RenamePad($padId: ID!, $name: String!) {\n    updatePad(id: $padId, pad: { name: $name }) {\n      id\n      name\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const GET_CREATE_ATTACHMENT_FORM = gql`\n  query GetCreateAttachmentForm(\n    $padId: ID!\n    $fileName: String!\n    $fileType: String!\n  ) {\n    getCreateAttachmentForm(\n      padId: $padId\n      fileName: $fileName\n      fileType: $fileType\n    ) {\n      url\n      handle\n      fields {\n        key\n        value\n      }\n    }\n  }\n`;\n","/* eslint-disable camelcase */\nimport { gql, useQuery } from '@apollo/client';\nimport {\n  GetPadById,\n  GetPadByIdVariables,\n  GetPadById_getPadById,\n} from './__generated__/GetPadById';\n\nexport const GET_PAD_BY_ID = gql`\n  query GetPadById($id: ID!) {\n    getPadById(id: $id) {\n      id\n      name\n      myPermissionType\n      icon\n      isPublic\n      access {\n        users {\n          user {\n            id\n            name\n          }\n          permission\n        }\n        secrets {\n          permission\n          secret\n        }\n      }\n      workspace {\n        id\n        name\n      }\n    }\n  }\n`;\n\ntype UseGetNotebookById = {\n  notebook?: GetPadById_getPadById | null;\n  readOnly: boolean;\n  notebookLoading: boolean;\n};\n\nexport const useGetNotebookById = (\n  notebookId: string,\n  secret?: string\n): UseGetNotebookById => {\n  const { data, loading } = useQuery<GetPadById, GetPadByIdVariables>(\n    GET_PAD_BY_ID,\n    {\n      variables: { id: notebookId },\n      context: secret\n        ? { headers: { authorization: `Bearer ${secret}` } }\n        : undefined,\n    }\n  );\n\n  return {\n    notebook: data?.getPadById,\n    readOnly: data?.getPadById?.myPermissionType === 'READ',\n    notebookLoading: loading,\n  };\n};\n","/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\nexport enum ExternalProvider {\n  googlesheets = \"googlesheets\",\n  testdatasource = \"testdatasource\",\n}\n\nexport enum PermissionType {\n  ADMIN = \"ADMIN\",\n  READ = \"READ\",\n  WRITE = \"WRITE\",\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n","import { WithOverride } from '@udecode/plate';\nimport { isImportUrl } from '@decipad/import';\nimport type { UserInteraction } from '@decipad/react-contexts';\nimport { Subject } from 'rxjs';\n\nexport const withImportOverrides =\n  (interactions?: Subject<UserInteraction>): WithOverride =>\n  (editor) => {\n    const { insertData } = editor;\n\n    // eslint-disable-next-line no-param-reassign\n    editor.insertData = (data) => {\n      (async () => {\n        const text = data.getData('text/plain');\n        const [isImportable, source] = await isImportUrl(text);\n        if (isImportable) {\n          interactions?.next({\n            type: 'pasted-link',\n            url: text,\n            source,\n          });\n        }\n      })();\n      insertData(data);\n    };\n\n    return editor;\n  };\n","import { ELEMENT_IMPORT } from '@decipad/editor-types';\nimport type { UserInteraction } from '@decipad/react-contexts';\nimport type { PlatePlugin } from '@udecode/plate';\nimport { Subject } from 'rxjs';\nimport { lazyElementComponent } from '../../utils/lazyElement';\nimport { withImportOverrides } from './withImportOverrides';\n\nconst LazyImport = lazyElementComponent(\n  () => import(/* webpackChunkName: \"editor-import\" */ './Import')\n);\n\nexport const createImportPlugin = (\n  interactions?: Subject<UserInteraction>\n): PlatePlugin => ({\n  key: ELEMENT_IMPORT,\n  isElement: true,\n  component: LazyImport,\n  withOverrides: withImportOverrides(interactions),\n});\n","import { css } from '@emotion/react';\nimport { Children, FC } from 'react';\nimport { slimBlockWidth } from '../../styles/editor-layout';\n\nconst styles = css({\n  display: 'flex',\n  flexWrap: 'wrap',\n  gap: '0px 52px',\n});\n\nconst itemStyles = css({\n  flexGrow: 1,\n  flexBasis: `calc((${slimBlockWidth}px - 100%) * 999)`,\n});\n\nexport const EditorColumns: FC<React.PropsWithChildren<unknown>> = ({\n  children,\n}) => {\n  return (\n    <ul css={styles}>\n      {Children.map(children, (child) => (\n        <li css={itemStyles}>{child}</li>\n      ))}\n    </ul>\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport { createTPluginFactory, ELEMENT_COLUMNS } from '@decipad/editor-types';\nimport { Columns } from './Columns';\n\nexport const createLayoutColumnsPlugin = createTPluginFactory({\n  key: ELEMENT_COLUMNS,\n  isElement: true,\n  component: Columns,\n});\n","import { DraggableBlock } from '@decipad/editor-components';\nimport { ELEMENT_COLUMNS, PlateComponent } from '@decipad/editor-types';\nimport { EditorColumns } from '@decipad/ui';\n\nexport const Columns: PlateComponent = ({ attributes, children, element }) => {\n  if (!element || element.type !== ELEMENT_COLUMNS) {\n    throw new Error('Columns is meant to render columns elements');\n  }\n  if ('data-slate-leaf' in attributes) {\n    throw new Error('Columns is not a leaf');\n  }\n\n  const dependencyId = element.children.map((child) => child.id);\n\n  return (\n    <DraggableBlock\n      blockKind=\"columns\"\n      element={element}\n      disableDrag\n      dependencyId={dependencyId}\n      {...attributes}\n    >\n      <EditorColumns>{children}</EditorColumns>\n    </DraggableBlock>\n  );\n};\n","import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {\n  FloatingLink as PlateFloatingLink,\n  LinkIcon,\n  plateButtonCss,\n  ShortTextIcon,\n  useFloatingLinkSelectors,\n} from '@udecode/plate';\nimport { cssVar } from '../../primitives';\n\nconst IconWrapper = styled.div`\n  display: flex;\n  padding-left: 8px;\n  padding-right: 8px;\n  align-items: center;\n  color: ${cssVar('weakerTextColor')};\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  align-items: center;\n`;\n\nconst inputCss = css`\n  padding: 0;\n  background-color: transparent;\n  font-size: 14px;\n  margin-right: 8px;\n  flex-grow: 1;\n  height: 32px;\n  border-style: none;\n  line-height: 20px;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const floatingLinkRootCss = css`\n  background: ${cssVar('backgroundColor')};\n  z-index: 20 !important;\n  border-radius: 4px;\n  box-shadow: rgb(15 15 15 / 5%) 0 0 0 1px, rgb(15 15 15 / 10%) 0 3px 6px,\n    rgb(15 15 15 / 20%) 0 9px 24px;\n`;\n\nconst VerticalDivider = () => (\n  <div\n    css={css`\n      margin-left: 0.5rem;\n      margin-right: 0.5rem;\n      background-color: ${cssVar('strongHighlightColor')};\n      width: 1px;\n      height: 1.25rem;\n    `}\n  />\n);\n\nconst buttonCss = css`\n  display: inline-flex;\n  position: relative;\n  padding: 4px 10px;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  max-width: 100%;\n  font-weight: 500;\n  border-width: 0;\n  cursor: pointer;\n  background-color: ${cssVar('backgroundColor')};\n\n  :hover {\n    background-color: ${cssVar('tintedBackgroundColor')};\n  }\n  :active {\n    background-color: ${cssVar('tintedBackgroundColor')};\n  }\n\n  font-family: inherit;\n  font-size: 14px;\n  border-radius: 3px;\n\n  color: inherit;\n\n  :active {\n    color: inherit;\n  }\n\n  :visited {\n    color: inherit;\n  }\n`;\n\nconst iconButtonCss = [\n  plateButtonCss,\n  css`\n    padding: 4px;\n    background-color: ${cssVar('backgroundColor')};\n\n    :hover {\n      background-color: ${cssVar('tintedBackgroundColor')};\n    }\n    :active {\n      background-color: ${cssVar('tintedBackgroundColor')};\n    }\n  `,\n];\n\nexport const FloatingLink = () => {\n  const isEditing = useFloatingLinkSelectors().isEditing();\n\n  const input = (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        width: 330px;\n      `}\n    >\n      <InputWrapper>\n        <IconWrapper>\n          <LinkIcon width={18} />\n        </IconWrapper>\n\n        <PlateFloatingLink.UrlInput css={inputCss} placeholder=\"Paste link\" />\n      </InputWrapper>\n\n      <div\n        css={css`\n          background-color: ${cssVar('strongHighlightColor')};\n          height: 1px;\n        `}\n      />\n\n      <InputWrapper>\n        <IconWrapper>\n          <ShortTextIcon width={18} />\n        </IconWrapper>\n        <PlateFloatingLink.TextInput\n          css={inputCss}\n          placeholder=\"Text to display\"\n        />\n      </InputWrapper>\n    </div>\n  );\n\n  const editContent = !isEditing ? (\n    <div\n      css={css`\n        display: flex;\n        padding: 4px 8px;\n        flex-direction: row;\n        align-items: center;\n        width: auto;\n      `}\n    >\n      <PlateFloatingLink.EditButton css={buttonCss}>\n        Edit\n      </PlateFloatingLink.EditButton>\n\n      <VerticalDivider />\n\n      <PlateFloatingLink.UnlinkButton css={iconButtonCss}>\n        Unlink\n      </PlateFloatingLink.UnlinkButton>\n\n      <VerticalDivider />\n\n      <PlateFloatingLink.OpenLinkButton css={iconButtonCss}>\n        Open\n      </PlateFloatingLink.OpenLinkButton>\n    </div>\n  ) : (\n    input\n  );\n\n  return (\n    <>\n      <PlateFloatingLink.InsertRoot css={floatingLinkRootCss}>\n        {input}\n      </PlateFloatingLink.InsertRoot>\n\n      <PlateFloatingLink.EditRoot\n        css={[\n          floatingLinkRootCss,\n          css`\n            width: auto;\n          `,\n        ]}\n      >\n        {editContent}\n      </PlateFloatingLink.EditRoot>\n    </>\n  );\n};\n","import { createLinkPlugin as _createLinkPlugin } from '@udecode/plate';\nimport { FloatingLink } from '@decipad/ui';\n\nexport const createLinkPlugin = () =>\n  _createLinkPlugin({\n    renderAfterEditable: FloatingLink,\n  });\n","import { css } from '@emotion/react';\nimport { p8Medium } from '../../primitives';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\n// If we get further types of labels,\n// consider pulling up the bubble styles into some Bubble Label molecule\n// and making this just about the label text and id behavior.\n\nconst tagStyles = css(p8Medium, {\n  position: 'relative',\n});\n\ninterface TagProps {\n  readonly children: React.ReactNode;\n  readonly explanation?: React.ReactNode;\n}\nexport const Tag: React.FC<TagProps> = ({ children, explanation }) => {\n  const tooltipTrigger = (\n    <span contentEditable={false} css={tagStyles}>\n      {children}\n    </span>\n  );\n  return <Tooltip trigger={tooltipTrigger}>{explanation}</Tooltip>;\n};\n","import { css } from '@emotion/react';\nimport { Children, FC, PropsWithChildren } from 'react';\nimport { useSelected } from 'slate-react';\nimport { Tag } from '../../atoms';\nimport * as icons from '../../icons';\nimport {\n  cssVar,\n  normalOpacity,\n  offBlack,\n  p13Medium,\n  setCssVar,\n  transparency,\n} from '../../primitives';\nimport { slimBlockWidth } from '../../styles/editor-layout';\n\nconst editableLiveCaptionStyles = css({\n  maxWidth: `${slimBlockWidth}px`,\n  marginBottom: '8px',\n});\n\nconst tableTitleWrapper = css({\n  alignItems: 'center',\n  display: 'flex',\n  gap: '9px',\n  lineBreak: 'unset',\n  width: 'min-content',\n  background: cssVar('liveDataBackgroundColor'),\n  borderRadius: '6px',\n  padding: '2px 8px',\n  marginTop: '2.5px',\n});\n\nconst iconWrapperStyles = css({\n  padding: '4px',\n  height: '16px',\n  width: '16px',\n  marginTop: '0',\n  transform: 'translateY(-7%)',\n});\n\nconst iconSvgStyles = css({\n  'svg > path': {\n    fill: cssVar('liveDataBackgroundColor'),\n    stroke: cssVar('liveDataTextColor'),\n  },\n});\n\nconst editableTableCaptionStyles = css({\n  ...p13Medium,\n  color: cssVar('liveDataTextColor'),\n  minWidth: '1rem',\n});\n\nconst notSelectedAriaStyles = css({\n  '::before': {\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    content: 'attr(aria-placeholder)',\n  },\n});\n\ntype EditableTableCaptionProps = PropsWithChildren<{\n  empty?: boolean;\n  source?: string;\n  range?: string;\n  url?: string;\n}>;\n\nexport const EditableLiveDataCaption: FC<EditableTableCaptionProps> = ({\n  empty = false,\n  source,\n  url,\n  range,\n  children,\n}) => {\n  const [caption] = Children.toArray(children);\n  const selected = useSelected();\n\n  return (\n    <div css={editableLiveCaptionStyles}>\n      <div css={tableTitleWrapper}>\n        <div css={[iconWrapperStyles, iconSvgStyles]} contentEditable={false}>\n          <icons.Zap />\n        </div>\n        <div\n          aria-placeholder={empty ? 'LiveConnection' : ''}\n          css={[editableTableCaptionStyles, !selected && notSelectedAriaStyles]}\n        >\n          {caption}\n        </div>\n        {source && (\n          <Tag\n            explanation={\n              url && (\n                <a href={url} rel=\"noreferrer\" target=\"_blank\">\n                  {url}\n                  <br />\n                  <br />\n                  {source.trim()}\n                </a>\n              )\n            }\n          >\n            <span\n              css={css({\n                textTransform: 'uppercase',\n                color: `${transparency(offBlack, normalOpacity).rgba}`,\n              })}\n            >\n              {range !== '' ? `${range}` : 'LIVE'}\n            </span>\n          </Tag>\n        )}\n      </div>\n    </div>\n  );\n};\n","import {\n  ELEMENT_LIVE_CONNECTION_VARIABLE_NAME,\n  LiveConnectionElement,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useEnsureValidVariableName,\n  useNodePath,\n} from '@decipad/editor-utils';\nimport { parseSourceUrl, SourceUrlParseResponse } from '@decipad/import';\nimport { EditableLiveDataCaption, Tooltip } from '@decipad/ui';\nimport { getNodeString, getParentNode } from '@udecode/plate';\nimport pluralize from 'pluralize';\nimport { useMemo } from 'react';\n\nexport const LiveConnectionVarName: PlateComponent = ({\n  element,\n  attributes,\n  children,\n}) => {\n  assertElementType(element, ELEMENT_LIVE_CONNECTION_VARIABLE_NAME);\n  const path = useNodePath(element);\n  const editor = useTEditorRef();\n  const parent = useMemo(\n    () => path && getParentNode<LiveConnectionElement>(editor, path),\n    [editor, path]\n  );\n\n  const { sourceName, url, returnRange } = useMemo(() => {\n    const source = parent?.[0].source ?? '';\n    const parentUrl = parent?.[0].url;\n\n    const sourceParams: SourceUrlParseResponse | undefined =\n      (source && parentUrl != null && parseSourceUrl(source, parentUrl)) ||\n      (parentUrl != null && { userUrl: parentUrl }) ||\n      undefined;\n\n    const { isRange, range, subsheetName, userUrl } = sourceParams || {};\n    const formattedRange = range?.join(':') || '';\n    const rangeExplanation =\n      subsheetName && subsheetName !== '0'\n        ? `(${subsheetName}${isRange ? `, ${formattedRange}` : ''})`\n        : '';\n    return {\n      url: userUrl,\n      sourceName: `${pluralize.singular(source)} ${rangeExplanation}`,\n      returnRange: subsheetName && subsheetName !== '0' ? formattedRange : '',\n    };\n  }, [parent]);\n\n  // ensure var name is unique\n  const tooltip = useEnsureValidVariableName(element, parent?.[0].id);\n\n  const caption = (\n    <div {...attributes}>\n      <EditableLiveDataCaption\n        source={sourceName}\n        url={url}\n        empty={getNodeString(element).length === 0}\n        range={returnRange}\n      >\n        {children}\n      </EditableLiveDataCaption>\n    </div>\n  );\n\n  return tooltip ? (\n    <Tooltip side=\"left\" hoverOnly open trigger={caption}>\n      {tooltip}\n    </Tooltip>\n  ) : (\n    caption\n  );\n};\n","import {\n  createTPluginFactory,\n  ELEMENT_LIVE_CONNECTION,\n  ELEMENT_LIVE_CONNECTION_VARIABLE_NAME,\n} from '@decipad/editor-types';\nimport { lazyElementComponent } from '../../utils/lazyElement';\nimport { LiveConnectionVarName } from './components/LiveConnectionVarName';\n\nconst LazyLiveConnection = lazyElementComponent(\n  () =>\n    import(\n      /* webpackChunkName: \"editor-live-connection\" */ './components/LiveConnection'\n    )\n);\n\nexport const createLiveConnectionPlugin = createTPluginFactory({\n  key: ELEMENT_LIVE_CONNECTION,\n  isElement: true,\n  component: LazyLiveConnection,\n  plugins: [\n    {\n      key: ELEMENT_LIVE_CONNECTION_VARIABLE_NAME,\n      isElement: true,\n      component: LiveConnectionVarName,\n    },\n  ],\n});\n","import {\n  getNode,\n  insertText,\n  TElement,\n  unwrapNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { Path } from 'slate';\nimport { MyEditor } from '@decipad/editor-types';\n\nexport const removeMagicNumberInput = (editor: MyEditor, path: Path) =>\n  withoutNormalizing(editor, () => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { trigger } = getNode<TElement>(editor, path)!;\n\n    insertText(editor, trigger as string, {\n      at: { path: [...path, 0], offset: 0 },\n    });\n    unwrapNodes(editor, {\n      at: path,\n    });\n  });\n","import { findNode, FindNodeOptions, getPluginType } from '@udecode/plate';\nimport { MARK_MAGICNUMBER, MyEditor, MyValue } from '@decipad/editor-types';\n\nexport const findMagicNumberInput = (\n  editor: MyEditor,\n  options?: Omit<FindNodeOptions<MyValue>, 'match'>\n) => {\n  return findNode(editor, {\n    ...options,\n    voids: true,\n    mode: 'all',\n    match: { type: getPluginType(editor, MARK_MAGICNUMBER) },\n  });\n};\n","import { MARK_MAGICNUMBER } from '@decipad/editor-types';\nimport { TText } from '@udecode/plate';\n\nexport type MagicNumber = TText & {\n  [MARK_MAGICNUMBER]: true;\n};\n\nexport const isMagicNumber = (child: TText): child is MagicNumber => {\n  return !!child[MARK_MAGICNUMBER];\n};\n","import { insertNodes } from '@decipad/editor-utils';\nimport { getNodeChildren, isElement, isText } from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../../pluginFactories';\nimport { isMagicNumber } from '../utils/isMagicNumber';\n\nexport const createNormalizeMagicNumbersPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_MAGIC_NUMBERS_PLUGIN',\n  plugin:\n    (editor) =>\n    ([node, path]): boolean => {\n      if (isElement(node)) {\n        const children = Array.from(getNodeChildren(editor, path));\n        if (children.length >= 1) {\n          const [firstChild] = children[0];\n          if (isText(firstChild) && isMagicNumber(firstChild)) {\n            const insertAt = [...path, 0];\n            insertNodes(\n              editor,\n              {\n                text: ' ',\n              },\n              { at: insertAt }\n            );\n            return true;\n          }\n\n          const [lastChild] = children[children.length - 1];\n          if (isText(lastChild) && isMagicNumber(lastChild)) {\n            const insertAt = [...path, children.length];\n            insertNodes(\n              editor,\n              {\n                text: ' ',\n              },\n              { at: insertAt }\n            );\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n});\n","import {\n  getNextNode,\n  getNodeEntry,\n  getStartPoint,\n  hasNode,\n  isCollapsed,\n  isText,\n  setSelection,\n} from '@udecode/plate';\nimport { createOnCursorChangePluginFactory } from '../../../pluginFactories';\nimport { isMagicNumber } from '../utils/isMagicNumber';\n\nexport const createMagicNumberCursorPlugin = createOnCursorChangePluginFactory(\n  'MAGIC_NUMBER_CURSOR_PLUGIN',\n  (editor) => (selection) => {\n    if (isCollapsed(selection)) {\n      const path = selection?.focus.path;\n      if (path && hasNode(editor, path)) {\n        const [node] = getNodeEntry(editor, path);\n\n        if (isText(node) && isMagicNumber(node)) {\n          const next = getNextNode(editor, { at: path });\n          if (next) {\n            const newFocus = getStartPoint(editor, next[1]);\n            newFocus.offset += 1; // skip to end character\n            setSelection(editor, {\n              focus: newFocus,\n              anchor: newFocus,\n            });\n          }\n        }\n      }\n    }\n  }\n);\n","import {\n  getNodeEntry,\n  getPointAfter,\n  getPointBefore,\n  hasNode,\n  isCollapsed,\n  isText,\n  removeNodes,\n  setSelection,\n} from '@udecode/plate';\nimport { createOnKeyDownPluginFactory } from '../../../pluginFactories';\nimport { isMagicNumber } from '../utils/isMagicNumber';\n\nexport const createMagicCursorKeysPlugin = createOnKeyDownPluginFactory({\n  name: 'MAGIC_CURSOR_KEYS_PLUGIN',\n  plugin: (editor) => (event) => {\n    if (isCollapsed(editor.selection)) {\n      if (event.key === 'ArrowLeft' && !event.altKey && !event.ctrlKey) {\n        const focus = editor.selection?.focus;\n        if (focus) {\n          const before = getPointBefore(editor, focus);\n          if (before && hasNode(editor, before.path)) {\n            const [beforeNode, beforePath] = getNodeEntry(editor, before.path);\n            if (isText(beforeNode) && isMagicNumber(beforeNode)) {\n              // User is going into void element. Try to move the cursor past it\n              const beforeBefore = getPointBefore(editor, beforePath);\n              if (beforeBefore) {\n                setSelection(editor, {\n                  focus: beforeBefore,\n                  anchor: beforeBefore,\n                });\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      if (event.key === 'Backspace') {\n        const focus = editor.selection?.focus;\n        if (focus) {\n          const before = getPointBefore(editor, focus);\n          if (before && hasNode(editor, before.path)) {\n            const beforeBefore = getPointBefore(editor, before);\n            if (beforeBefore) {\n              const [beforeNode, beforePath] = getNodeEntry(\n                editor,\n                beforeBefore.path\n              );\n              if (isText(beforeNode) && isMagicNumber(beforeNode)) {\n                removeNodes(editor, { at: beforePath });\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (event.key === 'Delete') {\n      const focus = editor.selection?.focus;\n      if (focus) {\n        const after = getPointAfter(editor, focus);\n        if (after && hasNode(editor, after.path)) {\n          const [afterNode, afterPath] = getNodeEntry(editor, after.path);\n          if (isText(afterNode) && isMagicNumber(afterNode)) {\n            removeNodes(editor, { at: afterPath });\n            return true;\n          }\n          const afterAfter = getPointAfter(editor, after);\n          if (afterAfter) {\n            const [afterAfterNode, afterAfterPath] = getNodeEntry(\n              editor,\n              afterAfter.path\n            );\n            if (isText(afterAfterNode) && isMagicNumber(afterAfterNode)) {\n              removeNodes(editor, { at: afterAfterPath });\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  },\n});\n","import { MagicNumber } from '@decipad/editor-components';\nimport { createTPluginFactory, MARK_MAGICNUMBER } from '@decipad/editor-types';\nimport { withMagicNumberOverrides } from './withMagicNumberOverrides';\nimport {\n  createMagicCursorKeysPlugin,\n  createMagicNumberCursorPlugin,\n  createNormalizeMagicNumbersPlugin,\n} from './plugins';\n\nexport const createMagicNumberPlugin = createTPluginFactory({\n  key: MARK_MAGICNUMBER,\n  type: MARK_MAGICNUMBER,\n  isInline: true,\n  isVoid: true,\n  isLeaf: true,\n  withOverrides: withMagicNumberOverrides,\n  component: MagicNumber,\n  plugins: [\n    createNormalizeMagicNumbersPlugin(),\n    createMagicNumberCursorPlugin(),\n    createMagicCursorKeysPlugin(),\n  ],\n});\n","/* eslint-disable no-param-reassign */\nimport { getPointAfter, getPointBefore, isCollapsed } from '@udecode/plate';\nimport { MyWithOverride } from '@decipad/editor-types';\nimport { removeMagicNumberInput } from './transforms';\nimport { findMagicNumberInput } from './queries';\n\nexport const withMagicNumberOverrides: MyWithOverride = (editor) => {\n  const { deleteBackward, deleteForward } = editor;\n\n  editor.deleteBackward = (unit) => {\n    if (editor.selection && isCollapsed(editor.selection)) {\n      const before = getPointBefore(editor, editor.selection?.focus);\n      const currentMentionInput = findMagicNumberInput(editor, { at: before });\n      if (currentMentionInput) {\n        removeMagicNumberInput(editor, currentMentionInput[1]);\n        return;\n      }\n    }\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (editor.selection && isCollapsed(editor.selection)) {\n      const after = getPointAfter(editor, editor.selection?.focus);\n      const currentMentionInput = findMagicNumberInput(editor, { at: after });\n      if (currentMentionInput) {\n        removeMagicNumberInput(editor, currentMentionInput[1]);\n        return;\n      }\n    }\n    deleteForward(unit);\n  };\n\n  return editor;\n};\n","import {\n  createTPluginFactory,\n  ELEMENT_INLINE_NUMBER,\n} from '@decipad/editor-types';\nimport { InlineNumber } from '@decipad/editor-components';\n\nexport const createInlineNumberPlugin = createTPluginFactory({\n  key: ELEMENT_INLINE_NUMBER,\n  type: ELEMENT_INLINE_NUMBER,\n  isInline: true,\n  isElement: true,\n  isVoid: true,\n  component: InlineNumber,\n});\n","import { Spoiler } from '@decipad/editor-components';\nimport { createTPluginFactory, MARK_SPOILER } from '@decipad/editor-types';\n\nexport const createSpoilerPlugin = createTPluginFactory({\n  key: MARK_SPOILER,\n  type: MARK_SPOILER,\n  isInline: true,\n  isVoid: false,\n  isLeaf: true,\n  component: Spoiler,\n});\n","import { MyPlatePlugin } from '@decipad/editor-types';\nimport {\n  allowsTextStyling,\n  getPathContainingSelection,\n} from '@decipad/editor-utils';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport {\n  createBoldPlugin,\n  createCodePlugin,\n  createHighlightPlugin,\n  createItalicPlugin,\n  createStrikethroughPlugin,\n  createUnderlinePlugin,\n  WithRequired,\n} from '@udecode/plate';\nimport { createMagicNumberPlugin } from '../MagicNumber';\nimport { createInlineNumberPlugin } from '../MagicNumber/createInlineNumberPlugin';\nimport { createSpoilerPlugin } from './createSpoilerPlugin';\n\nexport type StrictPlugin = WithRequired<\n  MyPlatePlugin,\n  'type' | 'options' | 'inject' | 'editor'\n>;\n\nconst withHotkeyRestrictedToAllowedBlocks = (\n  plugin: StrictPlugin\n): StrictPlugin => ({\n  ...plugin,\n  handlers: {\n    onKeyDown:\n      (editor, pi) =>\n      (...args) => {\n        if (\n          plugin.handlers?.onKeyDown &&\n          allowsTextStyling(editor, getPathContainingSelection(editor))\n        ) {\n          return plugin.handlers?.onKeyDown?.(editor, pi)(...args);\n        }\n      },\n  },\n});\n\nconst boldPlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(createBoldPlugin() as StrictPlugin);\n\nconst italicPlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(createItalicPlugin() as StrictPlugin);\n\nconst underlinePlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(createUnderlinePlugin() as StrictPlugin);\n\nconst strikethroughPlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(\n    createStrikethroughPlugin() as StrictPlugin\n  );\n\nconst inlineCodePlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(createCodePlugin() as StrictPlugin);\n\nconst highlightPlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(createHighlightPlugin() as StrictPlugin);\n\nconst magicNumberPlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(\n    createMagicNumberPlugin() as StrictPlugin\n  );\n\nconst spoilerPlugin = () =>\n  withHotkeyRestrictedToAllowedBlocks(createSpoilerPlugin() as StrictPlugin);\n\nconst valueBubblePlugin = () =>\n  !isFlagEnabled('INLINE_BUBBLES')\n    ? []\n    : [\n        withHotkeyRestrictedToAllowedBlocks(\n          createInlineNumberPlugin() as StrictPlugin\n        ),\n      ];\n\nexport const createMarksPlugins = (): StrictPlugin[] => [\n  boldPlugin(),\n  italicPlugin(),\n  underlinePlugin(),\n  inlineCodePlugin(),\n  strikethroughPlugin(),\n  highlightPlugin(),\n  magicNumberPlugin(),\n  spoilerPlugin(),\n  ...valueBubblePlugin(),\n];\n","import { createImagePlugin as _createImagePlugin } from '@udecode/plate';\n\nexport const createImagePlugin = () =>\n  _createImagePlugin({\n    options: {\n      disableUploadInsert: true,\n    },\n  });\n","import {\n  createMediaEmbedPlugin as _createMediaEmbedPlugin,\n  getPluginType,\n  PlateEditor,\n  TMediaEmbedElement,\n  Value,\n} from '@udecode/plate';\nimport { ELEMENT_MEDIA_EMBED } from '@decipad/editor-types';\nimport { nanoid } from 'nanoid';\nimport { insertNodes } from '@decipad/editor-utils';\n\nexport const insertMediaEmbed = <V extends Value>(\n  editor: PlateEditor<V>,\n  url: string | ArrayBuffer\n) => {\n  const node: TMediaEmbedElement = {\n    id: nanoid(),\n    type: getPluginType(editor, ELEMENT_MEDIA_EMBED),\n    url: url as any,\n    children: [{ text: '' }],\n  };\n  insertNodes<TMediaEmbedElement>(editor, node);\n};\n\nexport const createMediaEmbedPlugin = () =>\n  _createMediaEmbedPlugin({\n    withOverrides: (editor, { options }) => {\n      const { insertData } = editor;\n\n      // eslint-disable-next-line no-param-reassign\n      editor.insertData = (dataTransfer) => {\n        const text = dataTransfer.getData('text/plain');\n\n        const { rules } = options;\n\n        if (rules) {\n          for (const rule of rules) {\n            const parsed = rule.parser(text);\n\n            if (parsed?.provider) {\n              insertMediaEmbed(editor, parsed.url!);\n\n              return;\n            }\n          }\n        }\n\n        insertData(dataTransfer);\n      };\n\n      return editor;\n    },\n  });\n","/*\n * We have decided that structured code lines and structured inputs, will\n * be merged. Even though these are behind a feature flag it's good practice\n * to normalize them anyways.\n */\n\nimport {\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_IN,\n  ELEMENT_STRUCTURED_IN_CHILD,\n  ELEMENT_STRUCTURED_VARNAME,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { isElement, removeNodes, setNodes } from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\n\nexport const createMigrateStructuredInputs = createNormalizerPluginFactory({\n  name: 'MIGRATE_STRUCTURED_IN_TO_CODELINE_V2',\n  elementType: ELEMENT_STRUCTURED_IN,\n  plugin:\n    (editor: MyEditor) =>\n    (entry: MyNodeEntry): boolean => {\n      const [node, path] = entry;\n      if (isElement(node) && node.type === ELEMENT_STRUCTURED_IN) {\n        if (\n          node.children.length !== 2 ||\n          node.children[0].type !== ELEMENT_STRUCTURED_VARNAME ||\n          node.children[1].type !== ELEMENT_STRUCTURED_IN_CHILD\n        ) {\n          removeNodes(editor, {\n            at: path,\n          });\n          return true;\n        }\n\n        setNodes(\n          editor,\n          { type: ELEMENT_CODE_LINE_V2 },\n          {\n            at: path,\n          }\n        );\n        setNodes(\n          editor,\n          { type: ELEMENT_CODE_LINE_V2_CODE },\n          {\n            at: [...path, 1],\n          }\n        );\n        return true;\n      }\n      return false;\n    },\n});\n","import { CodeLineElement, MyEditor } from '@decipad/editor-types';\nimport { Path, Selection } from 'slate';\nimport {\n  getNodeString,\n  hasNode,\n  setSelection as plateSetSelection,\n} from '@udecode/plate';\n\nexport function getCodeLineText(node: CodeLineElement): string {\n  return getNodeString(node);\n}\n\nexport function incrementLastElementOfPath(path: Path): Path {\n  return [...path.slice(0, path.length - 1), path[path.length - 1] + 1];\n}\n\nexport function clonePath(path: Path): Path {\n  return Array.from(path);\n}\n\nexport function cloneSelection(sel: Selection): Selection {\n  if (!sel) {\n    return sel;\n  }\n  return {\n    anchor: {\n      path: clonePath(sel.anchor.path),\n      offset: sel.anchor.offset,\n    },\n    focus: {\n      path: clonePath(sel.focus.path),\n      offset: sel.focus.offset,\n    },\n  };\n}\n\nexport function setSelection(editor: MyEditor, sel: Selection): void {\n  if (sel && hasNode(editor, sel.anchor.path)) {\n    plateSetSelection(editor, sel);\n  }\n}\n","import {\n  DeprecatedCodeBlockElement,\n  CodeLineElement,\n  MyEditor,\n} from '@decipad/editor-types';\nimport { getChildren, getNode, getNodeString, select } from '@udecode/plate';\nimport { Path, Point, Selection } from 'slate';\nimport { cloneSelection } from './utils';\n\ninterface Offsets {\n  anchor: number | undefined;\n  focus: number | undefined;\n}\n\nfunction getOffsetFromPath(editor: MyEditor, path: Path): number | undefined {\n  const [codeBlockIndex] = path;\n  let offset = 0;\n  const codeBlock = getNode<DeprecatedCodeBlockElement>(editor, [\n    codeBlockIndex,\n  ]);\n  if (!codeBlock) {\n    return;\n  }\n  for (const codeLineEntry of getChildren<DeprecatedCodeBlockElement>([\n    codeBlock,\n    [codeBlockIndex],\n  ])) {\n    for (const [text, codeLineTextPath] of getChildren<CodeLineElement>(\n      codeLineEntry\n    )) {\n      if (Path.compare(codeLineTextPath, path) < 0) {\n        const codeLineText = getNodeString(text);\n        offset += codeLineText.length;\n      } else {\n        break;\n      }\n    }\n    if (Path.compare(codeLineEntry[1], path) < 0) {\n      offset += 1; // new line\n    } else {\n      break;\n    }\n  }\n  return offset;\n}\n\nfunction getOffsetFromPoint(\n  editor: MyEditor,\n  codeBlockPath: Path,\n  point: Point\n): number | undefined {\n  if (Path.isDescendant(point.path, codeBlockPath)) {\n    const offset = getOffsetFromPath(editor, point.path);\n    if (offset == null) {\n      return undefined;\n    }\n    return offset + point.offset;\n  }\n  return undefined;\n}\n\nexport function getCodeBlockOffsets(\n  editor: MyEditor,\n  codeBlockPath: Path\n): Offsets {\n  const sel = editor.selection;\n  if (!sel) {\n    return { anchor: undefined, focus: undefined };\n  }\n  return {\n    anchor: getOffsetFromPoint(editor, codeBlockPath, sel.anchor),\n    focus: getOffsetFromPoint(editor, codeBlockPath, sel.anchor),\n  };\n}\n\nfunction getPointFromOffset(\n  editor: MyEditor,\n  codeBlockPath: Path,\n  offset: number\n): Point | null {\n  const codeBlock = getNode<DeprecatedCodeBlockElement>(editor, codeBlockPath);\n  if (!codeBlock) {\n    return null;\n  }\n  let currentOffset = 0;\n  for (const entry of getChildren<DeprecatedCodeBlockElement>([\n    codeBlock,\n    codeBlockPath,\n  ])) {\n    for (const [text, path] of getChildren<CodeLineElement>(entry)) {\n      const lineText = getNodeString(text);\n      if (currentOffset + lineText.length < offset) {\n        currentOffset += lineText.length;\n      } else {\n        return {\n          path,\n          offset: offset - currentOffset,\n        };\n      }\n    }\n    currentOffset += 1;\n  }\n  return null;\n}\n\nfunction getSelectionFromOffsets(\n  editor: MyEditor,\n  codeBlockPath: Path,\n  offsets: Offsets\n): Selection {\n  const sel = cloneSelection(editor.selection);\n  if (!sel) {\n    return sel;\n  }\n  if (offsets.anchor) {\n    const point = getPointFromOffset(editor, codeBlockPath, offsets.anchor);\n    if (point) {\n      sel.anchor = point;\n    }\n  }\n  if (offsets.focus) {\n    const point = getPointFromOffset(editor, codeBlockPath, offsets.focus);\n    if (point) {\n      sel.focus = point;\n    }\n  }\n  return sel;\n}\n\nexport function reinstateCursorOffsets(\n  editor: MyEditor,\n  codeBlockPath: Path,\n  offsets: Offsets\n): void {\n  const sel = getSelectionFromOffsets(editor, codeBlockPath, offsets);\n  if (sel) {\n    select(editor, sel);\n  }\n}\n","import {\n  DeprecatedCodeBlockElement,\n  CodeLineElement,\n  ELEMENT_CODE_LINE,\n  MyEditor,\n} from '@decipad/editor-types';\nimport { insertNodes } from '@decipad/editor-utils';\nimport { getNode, insertText, mergeNodes } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport { getCodeBlockOffsets, reinstateCursorOffsets } from './offsets';\nimport { getCodeLineText, incrementLastElementOfPath } from './utils';\n\nfunction reconcileCodeLineByMergingWithNext(\n  editor: MyEditor,\n  line: CodeLineElement,\n  codeLinePath: Path\n): boolean {\n  const nextCodeLinePath = incrementLastElementOfPath(codeLinePath);\n  const next = getNode<CodeLineElement>(editor, nextCodeLinePath);\n  if (next) {\n    const currentCodeLine = getCodeLineText(line);\n    // merge the 2 code_line nodes: the one at next_path with the current one\n    insertText(editor, `${currentCodeLine}\\n`, {\n      at: [...codeLinePath],\n    });\n\n    mergeNodes(editor, {\n      at: nextCodeLinePath,\n    });\n    return true;\n  }\n  return false;\n}\n\nfunction reconcileByMergingWithNext(\n  editor: MyEditor,\n  codeLinePath: Path,\n  expectedStatement: string\n): boolean {\n  const line = getNode<CodeLineElement>(editor, codeLinePath);\n  if (!line) {\n    return false;\n  }\n  const lineText = getCodeLineText(line);\n  if (lineText.length < expectedStatement.length) {\n    return reconcileCodeLineByMergingWithNext(editor, line, codeLinePath);\n  }\n  return false;\n}\n\nfunction reconcileBySplitting(\n  editor: MyEditor,\n  _expectedStatement: string,\n  childText: string,\n  codeLinePath: Path\n): boolean {\n  const expectedStatement = _expectedStatement;\n  // insert one new code line after current one with the rest of the statement\n  let nextLineText = childText.slice(expectedStatement.length);\n  if (nextLineText.startsWith('\\n')) {\n    nextLineText = nextLineText.substring(1);\n  }\n  const newNode: CodeLineElement = {\n    id: nanoid(),\n    type: ELEMENT_CODE_LINE,\n    children: [\n      {\n        text: nextLineText,\n      },\n    ],\n  };\n  insertNodes(editor, newNode as CodeLineElement, {\n    at: incrementLastElementOfPath(codeLinePath),\n  });\n  insertText(editor, expectedStatement, {\n    at: [...codeLinePath, 0],\n  });\n  return true;\n}\n\nfunction reconcileLine(\n  editor: MyEditor,\n  line: CodeLineElement,\n  expectedStatement: string,\n  codeLinePath: Path\n): boolean {\n  const text = getCodeLineText(line);\n  if (text.length > expectedStatement.length) {\n    return reconcileBySplitting(editor, expectedStatement, text, codeLinePath);\n  }\n  return reconcileByMergingWithNext(editor, codeLinePath, expectedStatement);\n}\n\nfunction needsReconciliation(\n  line: CodeLineElement,\n  expectedStatement: string\n): boolean {\n  const text = getCodeLineText(line);\n  return text !== expectedStatement;\n}\n\nexport function reconcileStatements(\n  editor: MyEditor,\n  statements: string[],\n  codeBlockPath: Path\n): boolean {\n  let childIndex = -1;\n  let statementIndex = -1;\n  const codeBlock = getNode<DeprecatedCodeBlockElement>(editor, codeBlockPath);\n  if (!codeBlock) {\n    return false;\n  }\n  const offsets = getCodeBlockOffsets(editor, codeBlockPath);\n  for (const line of codeBlock.children) {\n    childIndex += 1;\n    statementIndex += 1;\n    const expectedText = statements[statementIndex] || '';\n    if (needsReconciliation(line, expectedText)) {\n      const changed = reconcileLine(editor, line, expectedText, [\n        ...codeBlockPath,\n        childIndex,\n      ]);\n      if (changed) {\n        reinstateCursorOffsets(editor, codeBlockPath, offsets);\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import { tokenize, STATEMENT_SEP_TOKEN_TYPE } from '@decipad/computer';\n\nfunction splitSeparationTokenText(text: string): [string, string] {\n  let hadNewLine = false;\n  const before = [];\n  const after = [];\n  for (const c of text) {\n    if (c === '\\n' && !hadNewLine) {\n      hadNewLine = true;\n    } else if (hadNewLine) {\n      after.push(c);\n    } else {\n      before.push(c);\n    }\n  }\n  return [before.join(''), after.join('')];\n}\n\nexport function splitCodeIntoStatements(code: string): string[] {\n  let pending: string[] = [];\n  const resultStatements = tokenize(code).reduce<string[]>(\n    (statements, token) => {\n      if (token.type === STATEMENT_SEP_TOKEN_TYPE) {\n        let rest: string = token.text;\n        do {\n          const beforeAndAfter = splitSeparationTokenText(rest);\n          const beginning = beforeAndAfter[0];\n          [, rest] = beforeAndAfter;\n          pending.push(beginning);\n          const statement = pending.join('');\n          statements.push(statement);\n          pending = [];\n        } while (rest.length > 0);\n      } else {\n        pending.push(token.text);\n      }\n      return statements;\n    },\n    []\n  );\n\n  if (pending.length) {\n    resultStatements.push(pending.join(''));\n  }\n  return resultStatements;\n}\n","/* eslint-disable no-param-reassign */\nimport {\n  DeprecatedCodeBlockElement,\n  CodeLineElement,\n  DEPRECATED_ELEMENT_CODE_BLOCK,\n  ELEMENT_CODE_LINE,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport {\n  ChildOf,\n  getNodeChildren,\n  isElement,\n  isText,\n  unwrapNodes,\n  wrapNodes,\n} from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport { codeBlockToCode } from './codeBlockToCode';\nimport { reconcileStatements } from './reconcileStatements';\nimport { splitCodeIntoStatements } from './splitCodeIntoStatements';\n\nconst normalizeCodeBlock = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  // Code block legacy component\n  if (isElement(node) && node.type === DEPRECATED_ELEMENT_CODE_BLOCK) {\n    for (const blockChild of getNodeChildren<\n      ChildOf<DeprecatedCodeBlockElement>\n    >(editor, path)) {\n      const [blockChildNode, blockChildPath] = blockChild;\n\n      // Element children must be code lines, else unwrap their text\n      if (\n        isElement(blockChildNode) &&\n        blockChildNode.type !== ELEMENT_CODE_LINE\n      ) {\n        unwrapNodes(editor, { at: blockChildPath });\n        return true;\n      }\n\n      // Text must be wrapped in a code line\n      if (isText(blockChildNode)) {\n        wrapNodes(\n          editor,\n          {\n            type: ELEMENT_CODE_LINE,\n            children: [],\n          } as unknown as CodeLineElement,\n          {\n            at: blockChildPath,\n          }\n        );\n        return true;\n      }\n    }\n\n    // At this point the normalization has ensured a matching structure\n    const codeBlockNode = node as DeprecatedCodeBlockElement;\n\n    // Split and merge lines to match statements\n    const blockCode = codeBlockToCode(codeBlockNode);\n    const statements = splitCodeIntoStatements(blockCode);\n    if (statements.length) {\n      if (reconcileStatements(editor, statements, path)) {\n        return true;\n      }\n    }\n\n    // We don't use code blocks anymore so we unwrap their code lines.\n    unwrapNodes(editor, { at: path });\n    return true;\n  }\n  return false;\n};\n\nexport const createNormalizeCodeBlockPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_CODE_BLOCK_PLUGIN',\n  elementType: DEPRECATED_ELEMENT_CODE_BLOCK,\n  acceptableSubElements: [ELEMENT_CODE_LINE],\n  plugin: normalizeCodeBlock,\n});\n","import { DeprecatedCodeBlockElement } from '@decipad/editor-types';\nimport { getNodeString } from '@udecode/plate';\n\nexport function codeBlockToCode(\n  codeBlock: Omit<DeprecatedCodeBlockElement, 'id'>\n): string {\n  return (codeBlock as DeprecatedCodeBlockElement).children\n    .map(getNodeString)\n    .join('\\n');\n}\n","/* eslint-disable no-param-reassign */\nimport {\n  ELEMENT_COLUMNS,\n  ELEMENT_DISPLAY,\n  ELEMENT_VARIABLE_DEF,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport {\n  getNodeChildren,\n  isElement,\n  isText,\n  liftNodes,\n  removeNodes,\n  unwrapNodes,\n} from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\n\nconst normalizeColumns = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n  if (isElement(node) && node.type === ELEMENT_COLUMNS) {\n    for (const childEntry of getNodeChildren(editor, path)) {\n      const [childNode, childPath] = childEntry;\n\n      if (\n        isText(childNode) ||\n        (isElement(childNode) &&\n          childNode.type !== ELEMENT_VARIABLE_DEF &&\n          childNode.type !== ELEMENT_DISPLAY)\n      ) {\n        liftNodes(editor, { at: childPath });\n        return true;\n      }\n    }\n\n    if (node.children.length === 0) {\n      removeNodes(editor, { at: path });\n    }\n    if (node.children.length === 1) {\n      unwrapNodes(editor, { at: path });\n    }\n    return true;\n  }\n\n  return false;\n};\n\nexport const createNormalizeColumnsPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_COLUMNS_PLUGIN',\n  elementType: ELEMENT_COLUMNS,\n  plugin: normalizeColumns,\n});\n","/* eslint-disable no-param-reassign */\nimport {\n  ELEMENT_H1,\n  ELEMENT_PARAGRAPH,\n  H1Element,\n  MyEditor,\n  MyNodeEntry,\n  ParagraphElement,\n  topLevelBlockKinds as allowedTopLevelBlockTypes,\n} from '@decipad/editor-types';\nimport { insertNodes } from '@decipad/editor-utils';\nimport {\n  getNodeChildren,\n  isEditor,\n  isElement,\n  isText,\n  unwrapNodes,\n  wrapNodes,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\n\nconst normalizeEditor = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  if (isEditor(node)) {\n    // Enforce leading H1 even if there are no elements\n    if (!node.children.length) {\n      insertNodes(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_H1,\n          children: [],\n        } as unknown as H1Element,\n        {\n          at: [...path, 0],\n        }\n      );\n      return true;\n    }\n    for (const blockEntry of getNodeChildren(editor, path)) {\n      const [blockNode, blockPath] = blockEntry;\n\n      if (blockPath[0] === 0) {\n        // Enforce leading H1\n        if (isText(blockNode)) {\n          wrapNodes(\n            editor,\n            {\n              id: nanoid(),\n              type: ELEMENT_H1,\n              children: [],\n            } as unknown as H1Element,\n            {\n              at: blockPath,\n            }\n          );\n          return true;\n        }\n        if (isElement(blockNode) && blockNode.type !== ELEMENT_H1) {\n          unwrapNodes(editor, { at: blockPath });\n          return true;\n        }\n      } else if (isElement(blockNode) && blockNode.type === ELEMENT_H1) {\n        // Forbid H1s elsewhere\n        unwrapNodes(editor, { at: blockPath });\n        return true;\n      }\n\n      // Enforce the top-level block allowed elements\n      if (isText(blockNode)) {\n        wrapNodes(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_PARAGRAPH,\n            children: [],\n          } as unknown as ParagraphElement,\n          {\n            at: blockPath,\n          }\n        );\n        return true;\n      }\n      if (\n        isElement(blockNode) &&\n        !allowedTopLevelBlockTypes.includes(blockNode.type)\n      ) {\n        unwrapNodes(editor, { at: blockPath });\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const createNormalizeEditorPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_EDITOR_PLUGIN',\n  plugin: normalizeEditor,\n});\n","/* eslint-disable no-param-reassign */\nimport { MyEditor } from '@decipad/editor-types';\nimport { setNodes, getChildren, TDescendant } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { pluginStore } from '@decipad/editor-utils';\nimport { Node, NodeEntry } from 'slate';\n\ntype Store = Set<string>;\ntype NodeWithId = Node & { id?: string };\n\nconst scanIds = (\n  editor: MyEditor,\n  store: Store,\n  nodes: NodeEntry<TDescendant | MyEditor>[]\n) => {\n  for (const entry of nodes) {\n    const [node, path] = entry;\n    const { id } = node as NodeWithId;\n    if (id) {\n      if (store.has(id)) {\n        // duplicate found\n        setNodes(editor, { id: nanoid() }, { at: path });\n      }\n      store.add(id);\n    }\n    scanIds(editor, store, getChildren(entry));\n  }\n};\n\nexport const withOverrides =\n  (pluginKey: string) =>\n  (editor: MyEditor): MyEditor => {\n    const store = pluginStore(editor, pluginKey, () => new Set<string>());\n\n    // trap the first on change\n    const { onChange } = editor;\n    let done = false;\n    // eslint-disable-next-line no-param-reassign\n    editor.onChange = () => {\n      if (!done) {\n        done = true;\n        scanIds(editor, store, [[editor, []]]);\n      }\n\n      onChange();\n    };\n\n    return editor;\n  };\n","import { createTPluginFactory } from '@decipad/editor-types';\nimport { withOverrides } from './withOverrides';\nimport { createNormalizerPlugin } from '../../pluginFactories/normalizerPlugin';\nimport { normalizeElementIdPlugin } from './normalizeElementIdPlugin';\n\nconst pluginKey = 'NORMALIZE_ELEMENT_ID_PLUGIN';\n\nexport const createNormalizeElementIdPlugin = createTPluginFactory({\n  key: pluginKey,\n  plugins: [\n    {\n      key: `${pluginKey}_OVERRIDES`,\n      withOverrides: withOverrides(pluginKey),\n    },\n    createNormalizerPlugin({\n      name: `${pluginKey}_NORMALIZER`,\n      plugin: normalizeElementIdPlugin,\n    }),\n  ],\n});\n","import { isElement, setNodes } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { MyEditor, MyElement, MyNodeEntry } from '@decipad/editor-types';\n\nexport const normalizeElementIdPlugin =\n  (editor: MyEditor) =>\n  ([node, path]: MyNodeEntry) => {\n    if (isElement(node) && !node.id) {\n      const newId = nanoid();\n      // eslint-disable-next-line no-console\n      console.log('assigning a missing id to', newId, path);\n      setNodes<MyElement>(editor, { id: newId }, { at: path });\n      return true;\n    }\n\n    return false;\n  };\n","/* eslint-disable no-param-reassign */\nimport { ELEMENT_IMAGE, MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport {\n  getNodeChildren,\n  getNodeString,\n  isElement,\n  unwrapNodes,\n} from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport { normalizeExcessProperties } from '../../utils/normalize';\n\nconst normalizeImage = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  if (isElement(node) && node.type === ELEMENT_IMAGE) {\n    if (normalizeExcessProperties(editor, entry, ['url', 'width', 'caption'])) {\n      return true;\n    }\n\n    if (!('url' in node) || getNodeString(node) === '') {\n      unwrapNodes(editor, { at: path });\n      return true;\n    }\n\n    for (const childEntry of getNodeChildren(editor, path)) {\n      const [childNode, childPath] = childEntry;\n\n      if (isElement(childNode)) {\n        unwrapNodes(editor, { at: childPath });\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const createNormalizeImagePlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_IMAGE_PLUGIN',\n  plugin: normalizeImage,\n});\n","/* eslint-disable no-param-reassign */\nimport { ELEMENT_LINK, MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport {\n  getNodeChildren,\n  getNodeString,\n  isElement,\n  unwrapNodes,\n} from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport { normalizeExcessProperties } from '../../utils/normalize';\n\nconst normalizeLink = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  if (isElement(node) && node.type === ELEMENT_LINK) {\n    if (normalizeExcessProperties(editor, entry, ['url'])) {\n      return true;\n    }\n\n    if (!('url' in node) || getNodeString(node) === '') {\n      unwrapNodes(editor, { at: path });\n      return true;\n    }\n\n    for (const childEntry of getNodeChildren(editor, path)) {\n      const [childNode, childPath] = childEntry;\n\n      if (isElement(childNode)) {\n        unwrapNodes(editor, { at: childPath });\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const createNormalizeLinkPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_LINK_PLUGIN',\n  plugin: normalizeLink,\n});\n","/* eslint-disable no-param-reassign */\nimport {\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_OL,\n  ELEMENT_UL,\n  ListElement,\n  ListItemElement,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { insertNodes } from '@decipad/editor-utils';\nimport {\n  ChildOf,\n  deleteText,\n  getNodeChildren,\n  isElement,\n  isText,\n  unwrapNodes,\n  wrapNodes,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport { normalizeExcessProperties } from '../../utils/normalize';\n\nconst normalizeList = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  if (\n    isElement(node) &&\n    (node.type === ELEMENT_UL || node.type === ELEMENT_OL)\n  ) {\n    if (normalizeExcessProperties(editor, entry)) {\n      return true;\n    }\n\n    for (const childEntry of getNodeChildren<ChildOf<ListElement>>(\n      editor,\n      path\n    )) {\n      const [childNode, childPath] = childEntry;\n\n      if (isElement(childNode) && childNode.type !== ELEMENT_LI) {\n        unwrapNodes(editor, { at: childPath });\n        return true;\n      }\n\n      if (isText(childNode)) {\n        wrapNodes(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_LI,\n            children: [],\n          } as unknown as ListItemElement,\n          { at: childPath }\n        );\n        return true;\n      }\n    }\n  }\n\n  if (isElement(node) && node.type === ELEMENT_LI) {\n    if (normalizeExcessProperties(editor, entry)) {\n      return true;\n    }\n\n    const [licChild, listChild, ...furtherChildren] = getNodeChildren<\n      ChildOf<ListItemElement>\n    >(editor, path);\n\n    // LIC child\n    if (!licChild) {\n      insertNodes(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_LIC,\n          children: [{ text: '' }],\n        },\n        { at: [...path, 0] }\n      );\n      return true;\n    }\n\n    const [licChildNode, licChildPath] = licChild;\n\n    if (isElement(licChildNode) && licChildNode.type !== ELEMENT_LIC) {\n      unwrapNodes(editor, { at: licChildPath });\n      return true;\n    }\n\n    if (isText(licChildNode)) {\n      wrapNodes(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_LIC,\n          children: [],\n        },\n        { at: licChildPath }\n      );\n      return true;\n    }\n\n    // Optional list child\n    if (listChild) {\n      const [listChildNode, listChildPath] = listChild;\n      if (\n        !(\n          isElement(listChildNode) &&\n          ((listChildNode.type as string) === ELEMENT_UL ||\n            (listChildNode.type as string) === ELEMENT_OL)\n        )\n      ) {\n        deleteText(editor, { at: listChildPath });\n        return true;\n      }\n\n      if (furtherChildren.length) {\n        // Further children not allowed\n        const furtherChildEntry = furtherChildren[0];\n        const [, furtherChildPath] = furtherChildEntry;\n        deleteText(editor, { at: furtherChildPath });\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\nexport const createNormalizeListPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_LIST_PLUGIN',\n  plugin: normalizeList,\n});\n","/* eslint-disable no-param-reassign */\nimport {\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { getNodeChildren, isElement } from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport { normalizeExcessProperties } from '../../utils/normalize';\nimport { normalizePlainTextChildren } from '../../utils/normalizePlainTextChildren';\n\nconst PLAIN_TEXT_BLOCK_TYPES = [ELEMENT_H1, ELEMENT_H2, ELEMENT_H3];\n\nconst normalizePlainTextBlock = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  if (isElement(node) && PLAIN_TEXT_BLOCK_TYPES.includes(node.type)) {\n    if (normalizeExcessProperties(editor, entry)) {\n      return true;\n    }\n\n    if (normalizePlainTextChildren(editor, getNodeChildren(editor, path))) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const createNormalizePlainTextBlockPlugin =\n  createNormalizerPluginFactory({\n    name: 'NORMALIZE_PLAIN_TEXT_BLOCK_PLUGIN',\n    plugin: normalizePlainTextBlock,\n  });\n","/* eslint-disable no-param-reassign */\nimport {\n  ELEMENT_INLINE_NUMBER,\n  ELEMENT_LINK,\n  MyEditor,\n  MyNodeEntry,\n} from '@decipad/editor-types';\nimport { RICH_TEXT_BLOCK_TYPES } from '@decipad/editor-utils';\nimport { getNodeChildren, isElement, unwrapNodes } from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\n\nconst ALLOWED_CHILD_TYPES = new Set([ELEMENT_LINK, ELEMENT_INLINE_NUMBER]);\n\nconst normalizeRichTextBlock = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node, path] = entry;\n\n  if (isElement(node) && new Set(RICH_TEXT_BLOCK_TYPES).has(node.type)) {\n    for (const childEntry of getNodeChildren(editor, path)) {\n      const [childNode, childPath] = childEntry;\n      if (isElement(childNode) && !ALLOWED_CHILD_TYPES.has(childNode.type)) {\n        unwrapNodes(editor, { at: childPath });\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const createNormalizeRichTextBlockPlugin = createNormalizerPluginFactory(\n  {\n    name: 'NORMALIZE_RICH_TEXT_BLOCK_PLUGIN',\n    plugin: normalizeRichTextBlock,\n  }\n);\n","/* eslint-disable no-param-reassign */\nimport { markKinds, MyEditor, MyNodeEntry } from '@decipad/editor-types';\nimport { isText } from '@udecode/plate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport { normalizeExcessProperties } from '../../utils/normalize';\n\nconst normalizeTextPlugin = (editor: MyEditor) => (entry: MyNodeEntry) => {\n  const [node] = entry;\n\n  if (isText(node)) {\n    if (normalizeExcessProperties(editor, entry, Object.values(markKinds))) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const createNormalizeTextPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_TEXT_PLUGIN',\n  plugin: normalizeTextPlugin,\n});\n","/* eslint-disable no-param-reassign */\nimport {\n  DEPRECATED_ELEMENT_INPUT,\n  ELEMENT_FETCH,\n  ELEMENT_IMPORT,\n  ELEMENT_PLOT,\n  DEPRECATED_ELEMENT_TABLE_INPUT,\n  MyEditor,\n  MyElement,\n  MyNodeEntry,\n  MyText,\n} from '@decipad/editor-types';\nimport { deleteText, getNodeChildren, isElement, isText } from '@udecode/plate';\nimport { Path } from 'slate';\nimport { createNormalizerPluginFactory } from '../../pluginFactories';\nimport {\n  normalizeExcessProperties,\n  normalizeMissingProperties,\n} from '../../utils/normalize';\n\nconst VOID_TYPE_PROPERTIES = {\n  [DEPRECATED_ELEMENT_TABLE_INPUT]: ['tableData'],\n  [ELEMENT_FETCH]: [\n    'data-auth-url',\n    'data-contenttype',\n    'data-error',\n    'data-external-data-source-id',\n    'data-external-id',\n    'data-href',\n    'data-provider',\n    'data-varname',\n  ],\n  [ELEMENT_PLOT]: [\n    'title',\n    'colorScheme',\n    'sourceVarName',\n    'markType',\n    'xColumnName',\n    'yColumnName',\n    'sizeColumnName',\n    'colorColumnName',\n    'thetaColumnName',\n  ],\n  [DEPRECATED_ELEMENT_INPUT]: ['value', 'variableName'],\n  [ELEMENT_IMPORT]: ['url', 'source'],\n};\n\nconst emptyString = () => '';\n\nconst MISSING_ATTRIBUTE_GENERATOR = {\n  [DEPRECATED_ELEMENT_TABLE_INPUT]: {\n    tableData: () => ({ variableName: 'table', columns: [] }), // legacy\n  },\n  [ELEMENT_FETCH]: {\n    'data-auth-url': emptyString,\n    'data-contenttype': emptyString,\n    'data-error': emptyString,\n    'data-external-data-source-id': emptyString,\n    'data-external-id': emptyString,\n    'data-href': emptyString,\n    'data-provider': emptyString,\n    'data-varname': emptyString,\n  },\n  [ELEMENT_PLOT]: {\n    colorScheme: emptyString,\n    sourceVarName: emptyString,\n    markType: emptyString,\n    xColumnName: emptyString,\n    yColumnName: emptyString,\n    sizeColumnName: emptyString,\n    colorColumnName: emptyString,\n    thetaColumnName: emptyString,\n  },\n  [DEPRECATED_ELEMENT_INPUT]: {\n    value: emptyString,\n    variableName: emptyString,\n  },\n};\n\nconst removeExcessProperties = (\n  editor: MyEditor,\n  entry: MyNodeEntry,\n  node: MyElement\n): boolean => {\n  return normalizeExcessProperties(\n    editor,\n    entry,\n    VOID_TYPE_PROPERTIES[node.type as keyof typeof VOID_TYPE_PROPERTIES]\n  );\n};\n\nconst removeBadChildren = (editor: MyEditor, path: Path): boolean => {\n  for (const childEntry of getNodeChildren(editor, path)) {\n    const [childNode, childPath] = childEntry;\n\n    if (\n      isElement(childNode) ||\n      (isText(childNode) && (childNode as MyText).text !== '')\n    ) {\n      deleteText(editor, { at: childPath });\n      return true;\n    }\n  }\n  return false;\n};\n\nconst addMissingProperties = (\n  editor: MyEditor,\n  entry: MyNodeEntry,\n  node: MyElement\n): boolean => {\n  return normalizeMissingProperties(\n    editor,\n    entry,\n    VOID_TYPE_PROPERTIES[node.type as keyof typeof VOID_TYPE_PROPERTIES],\n    MISSING_ATTRIBUTE_GENERATOR[\n      node.type as keyof typeof MISSING_ATTRIBUTE_GENERATOR\n    ]\n  );\n};\n\nconst normalizeVoid =\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [node, path] = entry;\n\n    if (\n      isElement(node) &&\n      Object.keys(VOID_TYPE_PROPERTIES).includes(node.type)\n    ) {\n      if (\n        removeExcessProperties(editor, entry, node as MyElement) ||\n        removeBadChildren(editor, path) ||\n        addMissingProperties(editor, entry, node as MyElement)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\nexport const createNormalizeVoidPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_VOID_PLUGIN',\n  plugin: normalizeVoid,\n});\n","import { MyPlatePlugin } from '@decipad/editor-types';\nimport { setSelectionNext } from '@decipad/editor-utils';\nimport { noop } from '@decipad/utils';\nimport {\n  ELEMENT_H1,\n  getNodeEntry,\n  getNodeString,\n  hasNode,\n} from '@udecode/plate';\nimport { debounce } from 'lodash';\nimport { createEventInterceptorPluginFactory } from '../../pluginFactories';\n\nexport interface UseNotebookTitlePluginOptions {\n  readOnly: boolean;\n  notebookTitle?: string;\n  onNotebookTitleChange?: (newValue: string) => void;\n}\n\nconst key = 'ON_CHANGE_NOTEBOOK_TITLE_PLUGIN';\n\nexport const createNotebookTitlePlugin = ({\n  readOnly,\n  notebookTitle = '',\n  onNotebookTitleChange = noop,\n}: UseNotebookTitlePluginOptions): MyPlatePlugin => ({\n  key,\n  withOverrides: (editor) => {\n    const onNotebookTitleChangeDebounced = debounce(\n      onNotebookTitleChange,\n      1000\n    );\n\n    const { onChange } = editor;\n    let lastNotebookTitle = notebookTitle;\n\n    // eslint-disable-next-line no-param-reassign\n    editor.onChange = () => {\n      onChange();\n      if (!readOnly) {\n        try {\n          if (hasNode(editor, [0, 0])) {\n            const [node] = getNodeEntry(editor, [0, 0]);\n            const newTitle = getNodeString(node);\n\n            if (newTitle !== lastNotebookTitle) {\n              lastNotebookTitle = newTitle;\n              onNotebookTitleChangeDebounced(newTitle);\n            }\n          }\n        } catch (err) {\n          console.error('Error in onChangeNotebookTitle', err);\n        }\n      }\n    };\n    return editor;\n  },\n  plugins: [\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_TITLE',\n      elementTypes: [ELEMENT_H1],\n      interceptor: (editor, entry, event) => {\n        if (event.type === 'on-enter') {\n          setSelectionNext(editor, entry);\n          return true;\n        }\n        return true;\n      },\n    })(),\n  ],\n});\n","import { createOverrideApplyPluginFactory } from '../../pluginFactories';\n\nconst logsColor = `\n  color: green;\n`;\n\nexport const createOperationsBlackboxPlugin = createOverrideApplyPluginFactory({\n  name: 'OPERATIONS_BLACKBOX_PLUGIN',\n  plugin: (editor, apply) => {\n    if (process.env.NODE_ENV === 'test') {\n      return apply;\n    }\n    // eslint-disable-next-line no-console\n    console.debug('%cInitial Document:', logsColor, editor.children);\n\n    // eslint-disable-next-line no-param-reassign\n    return (operation) => {\n      const { type } = operation;\n\n      // eslint-disable-next-line no-console\n      console.debug(`%c${type}`, logsColor, operation);\n\n      return apply(operation);\n    };\n  },\n});\n","import { MyEditor } from '@decipad/editor-types';\n\nexport const selectionStorageKey = (editor: MyEditor): string =>\n  `${editor.id}/selection`;\n","import { createOverrideApplyPluginFactory } from '../../pluginFactories';\nimport { saveSelection } from './saveSelection';\nimport { selectionStorageKey } from './selectionStorageKey';\n\nexport const createPersistSelectionPlugin = createOverrideApplyPluginFactory({\n  name: 'PLUGIN_PERSIST_SELECTION',\n  plugin: (editor, apply) => {\n    const selectionKey = selectionStorageKey(editor);\n    return (op) => {\n      if (op.type === 'set_selection') {\n        saveSelection(selectionKey, {\n          ...editor.selection,\n          ...op.properties,\n          ...op.newProperties,\n        });\n      }\n      return apply(op);\n    };\n  },\n});\n","import { BaseRange } from 'slate';\n\nexport const saveSelection = (\n  storageKey: string,\n  selection?: Partial<BaseRange> | null\n) => {\n  if (selection) {\n    global.localStorage.setItem(storageKey, JSON.stringify(selection));\n  }\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { BaseSelection } from 'slate';\nimport { selectionStorageKey } from './selectionStorageKey';\n\nexport const getPersistedSelection = (\n  editor: MyEditor\n): BaseSelection | null => {\n  const storageKey = selectionStorageKey(editor);\n  try {\n    const encodedSelection = global.localStorage.getItem(storageKey);\n    if (encodedSelection) {\n      return JSON.parse(encodedSelection);\n    }\n  } catch (err) {\n    console.warn(`Error parsing selection: ${(err as Error).message}`);\n  }\n  return null;\n};\n","import { createTPluginFactory, ELEMENT_PLOT } from '@decipad/editor-types';\nimport { createEventInterceptorPluginFactory } from '../../pluginFactories';\nimport { lazyElementComponent } from '../../utils/lazyElement';\n\nconst LazyPlot = lazyElementComponent(\n  () => import(/* webpackChunkName: \"editor-plot\" */ './Plot')\n);\n\nexport const createPlotPlugin = createTPluginFactory({\n  key: ELEMENT_PLOT,\n  isElement: true,\n  component: LazyPlot,\n  plugins: [\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_PLOT',\n      elementTypes: [ELEMENT_PLOT],\n      interceptor: () => {\n        return true;\n      },\n    })(),\n  ],\n});\n","import { getUnitByName } from '@decipad/computer';\n\nexport const acceptableOperators = new Set([\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  'mod',\n  'per',\n  'implicit*',\n]);\n\nexport function isAcceptableUnit(unitName: string): boolean {\n  const wantedQuantities = new Set(['second', 'month']);\n  const unit = getUnitByName(unitName);\n\n  if (unit) {\n    return (\n      wantedQuantities.has(unit.baseQuantity) ||\n      unit?.superBaseQuantity === 'currency'\n    );\n  }\n  return false;\n}\n","import { AST, parseStatement, Token, tokenize } from '@decipad/computer';\nimport { acceptableOperators, isAcceptableUnit } from './languageSubset';\n\ninterface FormulaLoc {\n  anchor: number;\n  focus: number;\n}\n\ntype MyToken = Token & { followsWhitespace?: boolean };\n\nexport function findPotentialFormulas(text: string): FormulaLoc[] {\n  const locs: FormulaLoc[] = [];\n  const allTokens = errorProofTokenize(text); // Mutated!\n\n  while (allTokens.length) {\n    const anchor = allTokens[0].offset;\n\n    if (!allTokens[0].followsWhitespace) {\n      allTokens.shift();\n      continue;\n    }\n\n    // Potential formula start and any \"-\" or \"$\"\n    skipAssignments(allTokens);\n    skipPrefixes(allTokens);\n\n    let tok = allTokens.shift();\n\n    if (tok?.type !== 'number') {\n      continue;\n    }\n\n    let latestGood: FormulaLoc | undefined;\n\n    // Look for large strings of tokens that are valid exprs together\n    formulaEndFinder: do {\n      const focus = tok.offset + (tok.text ?? '').length;\n\n      switch (isPotentialFormula(text.slice(anchor, focus))) {\n        case 'incomplete': {\n          continue;\n        }\n        case true: {\n          latestGood = { anchor, focus };\n          break;\n        }\n        case false: {\n          break formulaEndFinder;\n        }\n      }\n    } while ((tok = allTokens.shift()));\n\n    if (latestGood) {\n      locs.push(latestGood);\n    }\n  }\n\n  return locs;\n}\n\nconst skipAssignments = (tokens: MyToken[]) => {\n  if (\n    tokens.at(0)?.type === 'identifier' &&\n    tokens.at(1)?.type === 'equalSign'\n  ) {\n    tokens.shift();\n    tokens.shift();\n  }\n};\n\nconst skipPrefixes = (tokens: MyToken[]) => {\n  while (['minus', 'currency'].includes(tokens.at(0)?.type ?? '')) {\n    tokens.shift();\n  }\n};\n\nexport function isBasicStatement(exp: AST.Statement): boolean {\n  switch (exp.type) {\n    case 'literal': {\n      return true;\n    }\n    case 'ref': {\n      // Allow simple units\n      return isAcceptableUnit(exp.args[0]);\n    }\n    case 'function-call': {\n      const ident = exp.args[0].args[0];\n\n      if (!acceptableOperators.has(ident)) {\n        return false;\n      }\n\n      return exp.args[1].args.every((a) => isBasicStatement(a));\n    }\n    case 'assign': {\n      return isBasicStatement(exp.args[1]);\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/**\n * true => good-to-go formula\n * incomplete => constructs like \"1 + \"\n * cancel => a forbidden part of the lang was used, let's not go on\n * false => I don't see it\n */\nexport function isPotentialFormula(text: string): true | 'incomplete' | false {\n  const { solution: plain } = parseStatement(text);\n  if (plain) {\n    return isBasicStatement(plain);\n  }\n\n  const { solution: withBinopSatisfier } = parseStatement(`${text} 1`);\n  if (withBinopSatisfier) {\n    return isBasicStatement(withBinopSatisfier) ? 'incomplete' : false;\n  }\n\n  return false;\n}\n\n/** Tokenize while skipping \"error\" tokens */\nfunction errorProofTokenize(text: string): MyToken[] {\n  return tokenize(text).flatMap((token, i, all) => {\n    if (token.type === 'ws') {\n      return [];\n    }\n    if (token.type === 'error') {\n      // Skip 1 character and integrate these tokens\n      const offset = token.offset + 1;\n      const restText = token.text.slice(1);\n\n      return errorProofTokenize(restText).map((restTok) => ({\n        ...restTok,\n        offset: restTok.offset + offset,\n      }));\n    }\n    const followsWhitespace = i === 0 || all.at(i - 1)?.type === 'ws';\n    return [{ ...token, followsWhitespace }];\n  });\n}\n","import { Range } from 'slate';\nimport {\n  DECORATE_POTENTIAL_FORMULA,\n  ELEMENT_PARAGRAPH,\n  markKinds,\n  MyText,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  filterDecorate,\n  memoizeDecorate,\n} from '@decipad/editor-utils';\nimport { isText } from '@udecode/plate';\nimport { findPotentialFormulas } from './findPotentialFormulas';\nimport { PotentialFormulaDecoration } from './interface';\n\nconst allMarks = new Set<string>(Object.values(markKinds));\nconst hasTextMark = (text: MyText) =>\n  Object.keys(text).some((key) => allMarks.has(key));\n\nexport const decoratePotentialFormula = filterDecorate(\n  memoizeDecorate(\n    () =>\n      ([node, parentPath]): (PotentialFormulaDecoration & Range)[] => {\n        assertElementType(node, ELEMENT_PARAGRAPH);\n\n        return node.children.flatMap((child, index) => {\n          if (!isText(child) || hasTextMark(child)) {\n            return [];\n          }\n\n          const path = [...parentPath, index];\n\n          return findPotentialFormulas(child.text).map(({ anchor, focus }) => {\n            return {\n              [DECORATE_POTENTIAL_FORMULA]: true,\n              anchor: { path, offset: anchor },\n              focus: { path, offset: focus },\n              location: { anchor, focus },\n            };\n          });\n        });\n      }\n  ),\n  (entry) => entry[0].type === ELEMENT_PARAGRAPH\n);\n","import { LeafAttributes } from '@decipad/editor-types';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { forwardRef, ReactNode } from 'react';\nimport { Tooltip } from '../../atoms';\nimport { cssVar, grey400, grey500, grey600, p12Medium } from '../../primitives';\n\nconst highlightStyles = css({\n  color: cssVar('strongTextColor'),\n  borderBottom: `1px dashed ${cssVar('normalTextColor')}`,\n});\n\nconst activateStyles = css({\n  textDecoration: 'underline',\n});\n\nconst tabKeyStyles = css({\n  display: 'inline-flex',\n  padding: '0 4px',\n  alignItems: 'center',\n  justifyContent: 'center',\n  borderRadius: '6px',\n  border: `1px solid ${grey500.rgb}`,\n  background: grey600.rgb,\n  color: grey400.rgb,\n  margin: '0 2px',\n});\n\nconst tooltipContentStyles = css({ ...p12Medium });\n\ninterface PotentialFormulaHighlightProps {\n  attributes?: LeafAttributes;\n  onClick?: () => void;\n  onCommit?: () => void;\n  tooltipOpen?: boolean | undefined;\n  children?: ReactNode;\n}\n\nexport const PotentialFormulaHighlight = forwardRef<\n  HTMLSpanElement,\n  PotentialFormulaHighlightProps\n>(\n  (\n    { attributes, onCommit = noop, tooltipOpen = false, onClick, children },\n    ref\n  ) => {\n    return (\n      <span\n        data-testid=\"potential-formula\"\n        {...attributes}\n        css={highlightStyles}\n        ref={ref}\n        onClick={onClick}\n      >\n        <Tooltip\n          onClick={onCommit}\n          trigger={<span>{children}</span>}\n          open={tooltipOpen}\n        >\n          <span css={tooltipContentStyles}>\n            <button css={activateStyles}>Click to activate</button> (or use{' '}\n            <kbd css={tabKeyStyles}>TAB</kbd>)\n          </span>\n        </Tooltip>\n      </span>\n    );\n  }\n);\n","import { MyEditor } from '@decipad/editor-types';\nimport { EditorChangeContext } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { isCollapsed } from '@udecode/plate';\nimport { useContext, useEffect, useState } from 'react';\nimport { concat, of } from 'rxjs';\nimport { useSelected } from 'slate-react';\nimport type { PotentialFormulaDecoration } from '../decorate/interface';\n\n/** Do we show the tooltip? */\nexport function useIsPotentialFormulaSelected(\n  editor: MyEditor,\n  decoration: PotentialFormulaDecoration\n) {\n  const editorChange$ = useContext(EditorChangeContext);\n  const parentSelected = useSelected();\n\n  const [selected, setSelected] = useState(false);\n\n  // Sync editor.selection to `selected` but don't subscribe unless the paragraph is selected\n  useEffect(() => {\n    if (!parentSelected) {\n      setSelected(false);\n      return noop;\n    }\n\n    const sub = concat(of(undefined), editorChange$).subscribe(() => {\n      setSelected(isPotentialFormulaSelected(editor, decoration));\n    });\n    return () => sub.unsubscribe();\n  }, [editor, parentSelected, editorChange$, decoration]);\n\n  // Close the tooltip if the user clicks-outside\n  useEffect(() => {\n    if (!selected) {\n      return noop;\n    }\n\n    const onKeyDown = (ev: KeyboardEvent) => {\n      if (ev.key === 'Escape') {\n        setSelected(false);\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [editor, parentSelected, editorChange$, selected, decoration]);\n\n  return selected;\n}\n\n/** Decorations don't have a path!\n * we have to manually check cursor pos to see if we're selected */\nfunction isPotentialFormulaSelected(\n  editor: MyEditor,\n  decoration: PotentialFormulaDecoration\n) {\n  const sel = isCollapsed(editor.selection) && editor.selection;\n\n  if (sel) {\n    const cursorPos = sel.anchor.offset;\n    const { anchor: leafStart, focus: leafEnd } = decoration.location;\n\n    return cursorPos >= leafStart && cursorPos <= leafEnd;\n  }\n  return false;\n}\n","import {\n  ELEMENT_INLINE_NUMBER,\n  ELEMENT_PARAGRAPH,\n  PlateComponent,\n  RichText,\n  useTEditorRef,\n  InlineNumberElement,\n  MyEditor,\n  MARK_MAGICNUMBER,\n} from '@decipad/editor-types';\nimport {\n  getAboveNodeSafe,\n  isElementOfType,\n  insertNodes,\n  createStructuredCodeLine,\n} from '@decipad/editor-utils';\nimport { PotentialFormulaHighlight as UIPotentialFormulaHighlight } from '@decipad/ui';\nimport { noop } from '@decipad/utils';\nimport {\n  findNodePath,\n  getEndPoint,\n  getNodeString,\n  toDOMNode,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { useCallback, useEffect, useContext } from 'react';\nimport { BaseRange, Path, Point } from 'slate';\nimport { Computer, getExprRef } from '@decipad/computer';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport {\n  useEditorTeleportContext,\n  ShadowCalcReference,\n  useComputer,\n} from '@decipad/react-contexts';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport type { PotentialFormulaDecoration } from '../decorate/interface';\nimport { useIsPotentialFormulaSelected } from './useIsPotentialFormulaSelected';\n\nexport const PotentialFormulaHighlight: PlateComponent<{\n  leaf: PotentialFormulaDecoration & RichText;\n}> = ({ attributes, children, text, leaf }) => {\n  const editor = useTEditorRef();\n  const computer = useComputer();\n  const selected = useIsPotentialFormulaSelected(editor, leaf);\n\n  const { openEditor } = useEditorTeleportContext();\n  const clientEvent = useContext(ClientEventsContext);\n\n  const onCommit = useCallback(() => {\n    const path = text && findNodePath(editor, text);\n\n    if (!path || !leaf?.location) {\n      return;\n    }\n\n    const afterCommit = isFlagEnabled('SHADOW_CODE_LINES') ? openEditor : noop;\n\n    // FIXME: Opt out to use inline numbers in ENG-1401\n    commitPotentialFormula(editor, computer, path, leaf, 'magic', afterCommit);\n\n    clientEvent({\n      type: 'action',\n      action: 'number converted to code line',\n    });\n  }, [editor, text, leaf, clientEvent, computer, openEditor]);\n\n  useEffect(() => {\n    if (!selected) {\n      return noop;\n    }\n\n    const onKeyDown = (ev: KeyboardEvent) => {\n      if (ev.key === 'Tab') {\n        ev.preventDefault();\n        ev.stopPropagation();\n        onCommit();\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [selected, onCommit]);\n\n  return (\n    <UIPotentialFormulaHighlight\n      attributes={attributes}\n      onCommit={onCommit}\n      tooltipOpen={selected}\n    >\n      {children}\n    </UIPotentialFormulaHighlight>\n  );\n};\n\nexport const commitPotentialFormula = (\n  editor: MyEditor,\n  computer: Computer,\n  path: Path,\n  leaf: RichText & PotentialFormulaDecoration,\n  mode: 'magic' | 'inline',\n  onCommit: (ref: ShadowCalcReference) => void,\n  id?: string\n) => {\n  const insertionPath = getAboveNodeSafe(editor as MyEditor, {\n    at: path,\n    match: (x) => isElementOfType(x, ELEMENT_PARAGRAPH),\n  });\n\n  if (!insertionPath) return;\n\n  const codeLineBelow = createStructuredCodeLine({\n    id,\n    varName: computer.getAvailableIdentifier('Name', 1),\n    code: getNodeString(leaf as RichText),\n  });\n\n  const magicNumberInstead = {\n    [MARK_MAGICNUMBER]: true,\n    text: getExprRef(codeLineBelow.id),\n  };\n\n  const inlineNumberInstead: InlineNumberElement = {\n    type: ELEMENT_INLINE_NUMBER,\n    id: nanoid(),\n    blockId: codeLineBelow.id,\n    children: [{ text: '' }],\n  };\n\n  const viewInstead =\n    mode === 'inline' ? inlineNumberInstead : magicNumberInstead;\n\n  const expressionRange: BaseRange = {\n    anchor: { path, offset: leaf.location.anchor },\n    focus: { path, offset: leaf.location.focus },\n  };\n\n  insertNodes(editor, viewInstead, {\n    voids: true,\n    at: expressionRange,\n  });\n\n  const currentBlockEnd: Point = getEndPoint(editor, [path[0]]);\n\n  insertNodes(editor, codeLineBelow, { at: currentBlockEnd });\n\n  setTimeout(() => {\n    const domNode = toDOMNode(editor, magicNumberInstead);\n    const dataNode = domNode?.querySelector<HTMLElement>('[data-number-id]');\n    const numberId = dataNode?.dataset.numberId;\n\n    if (!numberId) return;\n\n    onCommit({\n      numberId,\n      codeLineId: codeLineBelow.id,\n      numberNode: magicNumberInstead,\n      codeLineNode: codeLineBelow,\n    });\n  }, 100);\n};\n","import {\n  DECORATE_POTENTIAL_FORMULA,\n  MyPlatePlugin,\n} from '@decipad/editor-types';\nimport { decoratePotentialFormula } from './decorate/decoratePotentialFormula';\nimport { PotentialFormulaHighlight } from './component/PotentialFormulaHighlight';\n\n/**\n * Decorates things that look like code, so users can turn it into a formula\n *\n * Eg: 50 * 10\n */\nexport const createPotentialFormulaHighlightPlugin = (\n  isReadonly: boolean\n): MyPlatePlugin => ({\n  key: DECORATE_POTENTIAL_FORMULA,\n  isLeaf: true,\n  component: PotentialFormulaHighlight,\n  decorate: isReadonly ? undefined : decoratePotentialFormula,\n});\n","import { MyEditor } from '@decipad/editor-types';\nimport {\n  getNodeEntries,\n  getRange,\n  isBlock,\n  setSelection,\n} from '@udecode/plate';\nimport { Location, Range } from 'slate';\nimport { createOnKeyDownPluginFactory } from '../../pluginFactories';\n\nconst getEntries = (editor: MyEditor, at: Location) => {\n  const entriesGen = getNodeEntries(editor, {\n    at,\n    voids: true,\n    match: (n) => isBlock(editor, n),\n  });\n\n  const entries = [];\n  for (const entry of entriesGen) {\n    entries.push(entry);\n  }\n  return entries;\n};\n\nexport const createSelectionShortcutPlugin = createOnKeyDownPluginFactory({\n  name: 'SELECTION_SHORTCUT_PLUGIN',\n  plugin: (editor) => (event) => {\n    const { selection } = editor;\n\n    if ((event.metaKey || event.ctrlKey) && event.key === 'a') {\n      if (!selection) {\n        // The cursor is not on any node inside the editor, select everything.\n        return;\n      }\n\n      const entries = getEntries(editor, selection);\n      if (entries.length !== 1) {\n        // The selection spans multiple nodes, select everything.\n        return;\n      }\n\n      const range = getRange(editor, entries[0][1]);\n\n      if (Range.equals(selection, range)) {\n        // The node is already selected, select everything.\n        return;\n      }\n\n      setSelection(editor, range);\n\n      event.preventDefault();\n    }\n  },\n});\n","import { addBreadcrumb } from '@sentry/react';\nimport { createOverrideApplyPluginFactory } from '../../pluginFactories';\n\nexport const createSentryBreadcrumbsPlugin = createOverrideApplyPluginFactory({\n  name: 'SENTRY_BREADCRUMBS_PLUGIN',\n  plugin: (_, apply) => (operation) => {\n    addBreadcrumb({\n      message: 'Slate operation',\n      data: { operation },\n      timestamp: Date.now(),\n    });\n    apply(operation);\n  },\n});\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { CodeVariable } from '../../molecules';\nimport { cssVar } from '../../primitives';\nimport { CodeError } from '../CodeError/CodeError';\n\ntype SmartRefProps = {\n  readonly symbolName?: string;\n  readonly defBlockId?: string;\n  readonly errorMessage?: string;\n  readonly isSelected?: boolean;\n  readonly hasPreviousContent?: boolean;\n  readonly hasNextContent?: boolean;\n};\n\nconst smartRefWrapperStyles = (hasPrevious: boolean, hasNext: boolean) =>\n  css({\n    ...(hasPrevious\n      ? {\n          marginLeft: '1px',\n        }\n      : {}),\n    ...(hasNext\n      ? {\n          marginRight: '1px',\n        }\n      : {}),\n    cursor: 'pointer',\n    color: cssVar('variableHighlightTextColor'),\n  });\n\nexport const SmartRef: FC<SmartRefProps> = ({\n  symbolName,\n  defBlockId,\n  errorMessage,\n  isSelected,\n  hasPreviousContent,\n  hasNextContent,\n}: SmartRefProps) => {\n  return (\n    <span\n      css={smartRefWrapperStyles(!!hasPreviousContent, !!hasNextContent)}\n      contentEditable={false}\n      data-testid=\"smart-ref\"\n    >\n      {symbolName && (\n        <CodeVariable\n          defBlockId={defBlockId}\n          isSelected={isSelected}\n          provideVariableDefLink\n        >\n          {symbolName}\n        </CodeVariable>\n      )}\n      {errorMessage && <CodeError message={errorMessage} url=\"/docs\" />}\n    </span>\n  );\n};\n","import {\n  ELEMENT_SMART_REF,\n  MyNode,\n  SmartRefElement,\n} from '@decipad/editor-types';\nimport { isElement } from '@udecode/plate';\n\nexport const isSmartRef = (node: MyNode): node is SmartRefElement => {\n  return isElement(node) && node.type === ELEMENT_SMART_REF;\n};\n","import {\n  getEndPoint,\n  getNodeEntry,\n  getParentNode,\n  getPointAfter,\n  getPointBefore,\n  getStartPoint,\n  hasNode,\n  isCollapsed,\n  setSelection,\n} from '@udecode/plate';\nimport { createOnKeyDownPluginFactory } from '../../../pluginFactories';\nimport { isSmartRef } from '../utils/isSmartRef';\n\nexport const createSmartRefKeysPlugin = createOnKeyDownPluginFactory({\n  name: 'SMART_REF_KEYS_PLUGIN',\n  plugin: (editor) => (event) => {\n    if (isCollapsed(editor.selection)) {\n      if (event.key === 'Backspace' && !event.altKey && !event.ctrlKey) {\n        const focus = editor.selection?.focus;\n        if (focus) {\n          const before = getPointBefore(editor, focus);\n          if (before && hasNode(editor, before.path)) {\n            const [, beforePath] = getNodeEntry(editor, before.path);\n            const parentEntry = getParentNode(editor, beforePath);\n            if (parentEntry) {\n              const [parentNode, parentPath] = parentEntry;\n              if (isSmartRef(parentNode)) {\n                // User is backspacing into smart ref.\n                // Select it instead of removing imemdiately\n                const smartRefPoint = getStartPoint(editor, parentPath);\n                setSelection(editor, {\n                  focus: smartRefPoint,\n                  anchor: smartRefPoint,\n                });\n                event.stopPropagation();\n                event.preventDefault();\n              }\n            }\n          }\n        }\n      } else if (event.key === 'Delete' && !event.altKey && !event.ctrlKey) {\n        const focus = editor.selection?.focus;\n        if (focus) {\n          const after = getPointAfter(editor, focus);\n          if (after && hasNode(editor, after.path)) {\n            const [, afterPath] = getNodeEntry(editor, after.path);\n            const parentEntry = getParentNode(editor, afterPath);\n            if (parentEntry) {\n              const [parentNode, parentPath] = parentEntry;\n              if (isSmartRef(parentNode)) {\n                // User is deleting into smart ref.\n                // Select it instead of removing imemdiately\n                const smartRefPoint = getEndPoint(editor, parentPath);\n                setSelection(editor, {\n                  focus: smartRefPoint,\n                  anchor: smartRefPoint,\n                });\n                event.stopPropagation();\n                event.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  },\n});\n","import { createTPluginFactory, ELEMENT_SMART_REF } from '@decipad/editor-types';\nimport { SmartRef } from './components/SmartRef';\nimport { createSmartRefKeysPlugin } from './plugins/createSmartRefKeysPlugin';\n\nexport const createSmartRefPlugin = createTPluginFactory({\n  key: ELEMENT_SMART_REF,\n  type: ELEMENT_SMART_REF,\n  isInline: true,\n  isVoid: true,\n  isElement: true,\n  component: SmartRef,\n  plugins: [createSmartRefKeysPlugin()],\n});\n","import {\n  ELEMENT_SMART_REF,\n  MyElement,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n} from '@decipad/editor-utils';\nimport { useComputer, useEditorChangeState } from '@decipad/react-contexts';\nimport { SmartRef as UISmartRef } from '@decipad/ui';\nimport {\n  getNextNode,\n  getNodeString,\n  getPreviousNode,\n  isElement,\n  isText,\n} from '@udecode/plate';\nimport { debounceTime, filter } from 'rxjs';\nimport { useEffect } from 'react';\nimport { ReactEditor, useSelected } from 'slate-react';\n\nexport const SmartRef: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_SMART_REF);\n\n  const siblingContent = useEditorChangeState(\n    (editor) => {\n      const previousNode = getPreviousNode<MyElement>(editor, {\n        at: ReactEditor.findPath(editor as ReactEditor, element),\n      })?.[0];\n      const previousStr = isText(previousNode)\n        ? getNodeString(previousNode)\n        : '';\n      const previousElement = getPreviousNode<MyElement>(editor, {\n        at: ReactEditor.findPath(editor as ReactEditor, element),\n        match: (node) => isElement(node),\n      })?.[0];\n      const hasPrevious = previousStr.length\n        ? /\\w$/.test(previousStr)\n        : previousElement?.type === ELEMENT_SMART_REF;\n\n      const nextNode = getNextNode<MyElement>(editor, {\n        at: ReactEditor.findPath(editor as ReactEditor, element),\n      })?.[0];\n      const nextStr = isText(nextNode) ? getNodeString(nextNode) : '';\n      const nextElement = getNextNode<MyElement>(editor, {\n        at: ReactEditor.findPath(editor as ReactEditor, element),\n        match: (node) => isElement(node),\n      })?.[0];\n      const hasNext = nextStr.length\n        ? /^\\w/.test(nextStr)\n        : nextElement?.type === ELEMENT_SMART_REF;\n\n      return {\n        hasPrevious,\n        hasNext,\n      };\n    },\n    { hasNext: false, hasPrevious: false }\n  );\n\n  const editor = useTEditorRef();\n  const mutateLastSeen = useElementMutatorCallback(\n    editor,\n    element,\n    'lastSeenVariableName'\n  );\n\n  const computer = useComputer();\n  const symbolName = computer.getSymbolOrColumnName$.use(element.blockId);\n\n  const errorMessage =\n    (symbolName == null &&\n      `The variable ${\n        (element.lastSeenVariableName != null &&\n          `\"${element.lastSeenVariableName}\"`) ||\n        ''\n      } is no longer defined`) ||\n    undefined;\n\n  const isSelected = useSelected();\n\n  useEffect(() => {\n    const symbolName$ = computer.getSymbolOrColumnName$\n      .observe(element.blockId)\n      .pipe(debounceTime(5000))\n      .pipe(filter((name) => !!name));\n\n    const sub = symbolName$.subscribe((debouncedSymbolName) => {\n      if (debouncedSymbolName !== element.lastSeenVariableName) {\n        mutateLastSeen(debouncedSymbolName);\n      }\n    });\n\n    return () => sub.unsubscribe();\n  }, [computer, element.blockId, element.lastSeenVariableName, mutateLastSeen]);\n\n  return (\n    <span {...attributes}>\n      <UISmartRef\n        defBlockId={element.blockId}\n        symbolName={symbolName ?? element.lastSeenVariableName}\n        errorMessage={errorMessage}\n        isSelected={isSelected}\n        hasPreviousContent={siblingContent?.hasPrevious}\n        hasNextContent={siblingContent?.hasNext}\n      />\n      {children}\n    </span>\n  );\n};\n","import { getBlockAbove, queryNode, QueryNodeOptions } from '@udecode/plate';\nimport isHotkey from 'is-hotkey';\nimport {\n  BlockElement,\n  MyEditor,\n  MyKeyboardHandler,\n  MyNodeEntry,\n} from '@decipad/editor-types';\n\nexport interface MyQueryNodeOptions {\n  /**\n   * Query the node entry.\n   */\n  filter?: (editor: MyEditor) => (entry: MyNodeEntry) => boolean;\n  /**\n   * List of types that are valid. If empty or undefined - allow all.\n   */\n  allow?: string[] | string;\n  /**\n   * List of types that are invalid.\n   */\n  exclude?: string[] | string;\n}\n\nexport interface SoftBreakRule {\n  hotkey: string;\n  /**\n   * Filter the block types where the rule applies.\n   */\n  query?: MyQueryNodeOptions;\n}\n\nexport interface SoftBreakOnKeyDownOptions {\n  rules?: SoftBreakRule[];\n}\n\n// NOTE: this code is pretty similar to\n// https://github.com/udecode/plate/blob/cbbf813229567b066ff6f7f52537cea4a6841b3d/packages/editor/break/src/soft-break/onKeyDownSoftBreak.ts\n// except that it allows for the filter function to receive the editor in a\n// curry'd way, eg. (editor: MyEditor) => (entry: MyNodeEntry) => boolean, which\n// was needed for this soft break plugin to work.\nexport const getSoftBreakOnKeyDown =\n  ({\n    rules = [{ hotkey: 'shift+enter' }],\n  }: SoftBreakOnKeyDownOptions = {}): MyKeyboardHandler =>\n  (editor) =>\n  (event) => {\n    const entry = getBlockAbove<BlockElement>(editor);\n    if (!entry) return;\n\n    rules.forEach(({ hotkey, query }) => {\n      if (\n        isHotkey(hotkey, { byKey: true }, event) &&\n        queryNode<BlockElement>(entry, {\n          ...query,\n          filter: query?.filter?.(editor),\n        } as QueryNodeOptions)\n      ) {\n        event.preventDefault();\n\n        editor.insertText('\\n');\n      }\n    });\n  };\n","import {\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_VARNAME,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n} from '@decipad/editor-types';\nimport { createOnKeyDownPluginFactory } from '../../pluginFactories';\nimport { getSoftBreakOnKeyDown } from './getSoftBreakOnKeyDown';\n\n/**\n * Insert soft break following configurable rules.\n * Each rule specifies a hotkey and query options.\n */\nexport const createSoftBreakPlugin = createOnKeyDownPluginFactory({\n  name: 'SOFT_BREAK_PLUGIN',\n  plugin: getSoftBreakOnKeyDown({\n    rules: [\n      {\n        hotkey: 'shift+enter',\n        query: {\n          exclude: [\n            ELEMENT_CODE_LINE,\n            ELEMENT_CODE_LINE_V2,\n            ELEMENT_CODE_LINE_V2_CODE,\n            ELEMENT_STRUCTURED_VARNAME,\n            ELEMENT_TABLE_COLUMN_FORMULA,\n          ],\n        },\n      },\n    ],\n  }),\n});\n","import { SyntaxErrorHighlight as UISyntaxErrorHighlight } from '@decipad/ui';\nimport { ComponentProps } from 'react';\nimport { PlateComponent } from '@decipad/editor-types';\nimport { useDelayedTrue } from '@decipad/react-utils';\n\nexport type SyntaxErrorHighlightProps = Pick<\n  ComponentProps<typeof UISyntaxErrorHighlight>,\n  'variant' | 'error'\n>;\n\nexport const SyntaxErrorHighlight: PlateComponent<\n  SyntaxErrorHighlightProps\n> = ({ attributes, children, variant, error }) => {\n  const errorsVisible = useDelayedTrue(true);\n\n  return (\n    <span {...attributes}>\n      <UISyntaxErrorHighlight\n        hideError={!errorsVisible}\n        variant={variant}\n        error={error}\n      >\n        {children}\n      </UISyntaxErrorHighlight>\n    </span>\n  );\n};\n","import {\n  createTPluginFactory,\n  DECORATE_SYNTAX_ERROR,\n} from '@decipad/editor-types';\nimport { SyntaxErrorHighlight } from './SyntaxErrorHighlight';\n\nexport const createSyntaxErrorHighlightPlugin = createTPluginFactory({\n  key: DECORATE_SYNTAX_ERROR,\n  isLeaf: true,\n  component: (props) => (\n    <SyntaxErrorHighlight\n      {...props}\n      variant={props.leaf.variant}\n      error={props.leaf.error}\n    />\n  ),\n});\n","import {\n  ELEMENT_CODE_LINE,\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_VARIABLE_NAME,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  MyEditor,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport {\n  getAboveNode,\n  getParentNode,\n  moveSelection,\n  select,\n  isElement,\n} from '@udecode/plate';\nimport { isElementOfType } from '@decipad/editor-utils';\nimport { Range } from 'slate';\nimport { createOnKeyDownPluginFactory } from '../../pluginFactories';\n\n/**\n * This plugin handles navigation keys, such as\n * Tab and Enter. Different elements require different levels\n * of control, such as a table.\n */\n\nexport const createNavigationPlugin = createOnKeyDownPluginFactory({\n  name: 'NAVIGATION_PLUGIN',\n  plugin: (editor: MyEditor) => (event) => {\n    const { selection } = editor;\n    if (!selection) return;\n\n    const cursor = Range.start(selection);\n    const parentNode = getParentNode(editor, cursor);\n\n    if (!parentNode) return;\n    const [node] = parentNode;\n\n    // Checks selection is collapsed\n    if (selection.focus.offset !== selection.anchor.offset) return;\n\n    if (isElementOfType(node, ELEMENT_CODE_LINE) && event.key === 'Tab') {\n      event.preventDefault();\n      // add 2 spaces instead of tab, tabs are just too big by default.\n      editor.insertText('  ');\n    } else if (\n      isElementOfType(node, ELEMENT_TD) ||\n      isElementOfType(node, ELEMENT_TH) ||\n      isElementOfType(node, ELEMENT_TABLE_VARIABLE_NAME)\n    ) {\n      // get the table element\n      const table = getAboveNode(editor, {\n        at: cursor,\n        match: (n) => isElement(n) && n.type === ELEMENT_TABLE,\n      });\n\n      if (!table) return;\n\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        event.stopPropagation();\n        // Move to the next cell (to the right).\n        // or to the element below if at the end of the table (bottom right corner).\n        // if shift is also pressed, move backwards.\n        try {\n          moveSelection(editor, {\n            distance: 1,\n            unit: 'line',\n            reverse: event.shiftKey,\n          });\n        } catch (e) {\n          // Catch when there is no next node.\n        }\n      } else if (event.key === 'Enter') {\n        // Move to the next row (below the current cell).\n        event.preventDefault();\n        event.stopPropagation();\n        const direction = 1;\n        const path = [...cursor.path];\n\n        try {\n          // if user is at the last usable row of table\n          if (table[0].children.length > path[1] + 1 && direction === 1) {\n            path[1] += direction;\n            select(editor, path);\n          } else if (\n            (table[0].children[1] as TableHeaderElement).children.length - 1 >\n              path[2] &&\n            direction === 1\n          ) {\n            // if the user is not on the bottom right cell\n            path[1] = 2;\n            path[2] += direction;\n            select(editor, path);\n          }\n        } catch (e) {\n          // just in case type casting goes wrong.\n        }\n      }\n    }\n  },\n});\n","import { Subject } from 'rxjs';\nimport { Computer, ComputeRequest } from '@decipad/computer';\nimport { MyPlatePlugin } from '@decipad/editor-types';\nimport { editorToProgram } from '@decipad/editor-language-elements';\n\nexport interface UpdateComputerPluginProps {\n  computeRequests: Subject<ComputeRequest>;\n}\n\nexport const createUpdateComputerPlugin = (\n  computer: Computer\n): MyPlatePlugin => ({\n  key: 'UPDATE_COMPUTER_PLUGIN',\n  withOverrides: (editor) => {\n    const { onChange } = editor;\n    const compute = async () => {\n      computer.pushCompute(await editorToProgram(editor, computer));\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    editor.onChange = () => {\n      compute();\n      onChange();\n    };\n\n    compute();\n\n    return editor;\n  },\n});\n","import { MyPlatePlugin } from '@decipad/editor-types';\n\nexport const createWithDocSyncHistoryPlugin = (): MyPlatePlugin => ({\n  key: 'WITH_DOC_SYNC_HISTORY_PLUGIN',\n  handlers: {\n    onKeyDown: (editor) => (event) => {\n      if (event.ctrlKey && event.key === 'z') {\n        if (!event.shiftKey) {\n          editor.undo();\n        } else {\n          editor.redo();\n        }\n      }\n    },\n  },\n});\n","import { ClientEventContextType } from '@decipad/client-events';\nimport { createOverrideApplyPluginFactory } from '@decipad/editor-plugins';\nimport { BaseElement, ElementKind } from '@decipad/editor-types';\nimport { getParentNode } from '@udecode/plate';\n\nexport const createUserEventPlugin = (events: ClientEventContextType) => {\n  return createOverrideApplyPluginFactory({\n    name: 'CREATE_USER_EVENTS_PLUGIN',\n    plugin: (editor, apply) => {\n      return (op) => {\n        apply(op);\n        // Try catch because we are doing some castings, and all of them are ok,\n        // But just in case.\n        try {\n          if (op.type !== 'set_selection') {\n            if (op.type === 'insert_text') {\n              const parentNode = getParentNode(editor, op.path);\n              if (!parentNode) return;\n\n              const editorParent = editor.children[parentNode[1][0]];\n\n              const node = parentNode[0] as unknown as BaseElement;\n\n              events({\n                type: 'checklist',\n                props: {\n                  interaction: 'interaction',\n                  element: node.type,\n                  parent: editorParent.type,\n                  variant:\n                    'variant' in editorParent\n                      ? (editorParent.variant as string)\n                      : undefined,\n                  text: node.children[0].text as string,\n                },\n              });\n            } else if (op.type === 'insert_node') {\n              if ('id' in op.node) {\n                events({\n                  type: 'checklist',\n                  props: {\n                    interaction: 'creation',\n                    element: op.node.type as ElementKind,\n                  },\n                });\n              }\n            } else if (op.type === 'set_node') {\n              if ('type' in op.newProperties) {\n                // Plate sets newProperties as an object, so we must do some\n                // Interesting castings\n                const newNode = (op.newProperties as any).type as ElementKind;\n                events({\n                  type: 'checklist',\n                  props: {\n                    interaction: 'creation',\n                    element: newNode,\n                  },\n                });\n              }\n            }\n          }\n        } catch (e) {\n          console.warn(e);\n        }\n      };\n    },\n  })();\n};\n","import {\n  createTPluginFactory,\n  ELEMENT_DISPLAY,\n  DisplayElement,\n} from '@decipad/editor-types';\nimport { Display } from '@decipad/editor-components';\nimport { nanoid } from 'nanoid';\nimport { createEventInterceptorPluginFactory } from '../../pluginFactories';\n\nexport const createDisplayPlugin = createTPluginFactory({\n  key: ELEMENT_DISPLAY,\n  isElement: true,\n  isVoid: true,\n  component: Display,\n  plugins: [\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_DISPLAY',\n      elementTypes: [ELEMENT_DISPLAY],\n      interceptor: () => {\n        return true;\n      },\n    })(),\n  ],\n  deserializeHtml: {\n    rules: [\n      {\n        validNodeName: 'div',\n      },\n    ],\n    getNode: (): DisplayElement | undefined => {\n      return {\n        id: nanoid(),\n        type: ELEMENT_DISPLAY,\n        blockId: '',\n        children: [{ text: '' }],\n      };\n    },\n  },\n  serializeHtml: ({ children }) => {\n    return <div data-type=\"display\">{children}</div>;\n  },\n});\n","import { ELEMENT_PARAGRAPH } from '@decipad/editor-types';\nimport {\n  createPluginFactory,\n  getLastNodeByLevel,\n  getNodeString,\n  insertElements,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\n\nexport const createTrailingParagraphPlugin = createPluginFactory({\n  key: 'PLUGIN_TRAILING_PARAGRAPH',\n  withOverrides: (editor) => {\n    const { normalizeNode } = editor;\n    // eslint-disable-next-line no-param-reassign\n    editor.normalizeNode = ([currentNode, currentPath]) => {\n      if (!currentPath.length) {\n        const lastChild = getLastNodeByLevel(editor, 0);\n\n        const lastChildNode = lastChild?.[0];\n\n        if (\n          !lastChildNode ||\n          lastChildNode.type !== ELEMENT_PARAGRAPH ||\n          getNodeString(lastChildNode)\n        ) {\n          const at = lastChild ? Path.next(lastChild[1]) : [0];\n\n          insertElements(\n            editor,\n            {\n              type: ELEMENT_PARAGRAPH,\n              id: nanoid(),\n              children: [{ text: '' }],\n            },\n            { at }\n          );\n          return;\n        }\n      }\n\n      return normalizeNode([currentNode, currentPath]);\n    };\n\n    return editor;\n  },\n});\n","import { ELEMENT_PARAGRAPH } from '@decipad/editor-types';\nimport {\n  getPath,\n  getPluginType,\n  insertElements,\n  PlateEditor,\n  Value,\n  ExitBreakRule,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport { exitBreakAtEdges } from './exitBreakAtEdges';\n\nexport const exitBreak = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    level = 0,\n    defaultType = getPluginType(editor, ELEMENT_PARAGRAPH),\n    query = {},\n    before,\n  }: Omit<ExitBreakRule, 'hotkey'>\n) => {\n  if (!editor.selection) return;\n\n  const { queryEdge, isEdge, isStart } = exitBreakAtEdges(editor, query);\n  // eslint-disable-next-line no-param-reassign\n  if (isStart) before = true;\n\n  if (queryEdge && !isEdge) return;\n\n  const selectionPath = getPath(editor, editor.selection);\n\n  let insertPath;\n  if (before) {\n    insertPath = selectionPath.slice(0, level + 1);\n  } else {\n    insertPath = Path.next(selectionPath.slice(0, level + 1));\n  }\n\n  insertElements(\n    editor,\n    { type: defaultType, children: [{ text: '' }], id: nanoid() },\n    {\n      at: insertPath,\n      select: !isStart,\n    }\n  );\n\n  return true;\n};\n","import {\n  isExpanded,\n  isSelectionAtBlockEnd,\n  isSelectionAtBlockStart,\n  TEditor,\n  Value,\n} from '@udecode/plate';\n\n/**\n * Check if the selection is at the edge of its parent block.\n * If it is and if the selection is expanded, delete its content.\n */\nexport const exitBreakAtEdges = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    start,\n    end,\n  }: {\n    start?: boolean;\n    end?: boolean;\n  }\n) => {\n  let queryEdge = false;\n  let isEdge = false;\n  let isStart = false;\n  if (start || end) {\n    queryEdge = true;\n\n    if (start && isSelectionAtBlockStart(editor)) {\n      isEdge = true;\n      isStart = true;\n    }\n\n    if (end && isSelectionAtBlockEnd(editor)) {\n      isEdge = true;\n    }\n\n    if (isEdge && isExpanded(editor.selection)) {\n      editor.deleteFragment();\n    }\n  }\n\n  return {\n    queryEdge,\n    isEdge,\n    isStart,\n  };\n};\n","import { createPluginFactory } from '@udecode/plate';\nimport { onKeyDownExitBreak } from './onKeyDownExitBreak';\n\nexport const KEY_EXIT_BREAK = 'exitBreak';\n\n/**\n * Insert soft break following configurable rules.\n * Each rule specifies a hotkey and query options.\n */\nexport const createExitBreakPlugin = createPluginFactory({\n  key: KEY_EXIT_BREAK,\n  handlers: {\n    onKeyDown: onKeyDownExitBreak,\n  },\n  options: {\n    rules: [\n      { hotkey: 'mod+enter' },\n      { hotkey: 'mod+shift+enter', before: true },\n    ],\n  },\n});\n","import {\n  getBlockAbove,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  queryNode,\n  Value,\n  WithPlatePlugin,\n  ExitBreakPlugin,\n} from '@udecode/plate';\nimport isHotkey from 'is-hotkey';\nimport { exitBreak } from './exitBreak';\n\nexport const onKeyDownExitBreak =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    { options: { rules = [] } }: WithPlatePlugin<ExitBreakPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (event) => {\n    const entry = getBlockAbove(editor);\n    if (!entry) return;\n\n    rules.forEach(({ hotkey, ...rule }) => {\n      if (isHotkey(hotkey, event as any) && queryNode(entry, rule.query)) {\n        if (exitBreak(editor as any, rule)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    });\n  };\n","import { createPluginFactory, PlatePluginComponent } from '@udecode/plate';\nimport { ComponentProps, FC } from 'react';\n\ntype ComponentKey = string;\ninterface ComponentStats {\n  totalTimeMs: number;\n  maxTimeMs: number;\n  totalRenderCount: number;\n}\n\nconst stats = new Map<ComponentKey, ComponentStats>();\n\nconst pushStats = (key: ComponentKey, elapsed: number) => {\n  let stat: ComponentStats | undefined = stats.get(key);\n  if (!stat) {\n    stat = {\n      totalTimeMs: 0,\n      maxTimeMs: 0,\n      totalRenderCount: 0,\n    };\n    stats.set(key, stat);\n  }\n  stat.totalRenderCount += 1;\n  stat.totalTimeMs += elapsed;\n  if (elapsed > stat.maxTimeMs) {\n    stat.maxTimeMs = elapsed;\n  }\n  stat.totalRenderCount += 1;\n};\n\nconst showStats = () => {\n  const table = [...stats.entries()].map(([key, stat]) => ({\n    key,\n    totalRenderCount: stat.totalRenderCount,\n    totalTimeμs: Math.round(stat.totalTimeMs * 1000),\n    averageRenderTimeμs: Math.round(\n      (stat.totalTimeMs * 1000) / stat.totalRenderCount\n    ),\n    maxRenderTimeμs: stat.maxTimeMs * 1000,\n  }));\n  // eslint-disable-next-line no-console\n  console.table(table, [\n    'key',\n    'totalRenderCount',\n    'totalTimeμs',\n    'averageRenderTimeμs',\n    'maxRenderTimeμs',\n  ]);\n  stats.clear();\n};\n\ninterface Deci {\n  showStats: () => void;\n}\ninterface WithDeci {\n  deci: Deci;\n}\n\n(global as unknown as WithDeci).deci = {\n  showStats,\n};\n\nexport const createRenderPerformanceStatsPlugin = createPluginFactory({\n  key: 'PLUGIN_RENDER_PERFORMANCE_STATS',\n  withOverrides: (editor) => {\n    if (process.env.NODE_ENV === 'production') {\n      return editor;\n    }\n    const performanceWrapper =\n      <T extends PlatePluginComponent>(\n        key: string,\n        Component: T\n      ): FC<ComponentProps<T>> =>\n      (props: ComponentProps<T>) => {\n        const t1 = performance.now();\n        const c = <Component {...props} />;\n        const t2 = performance.now();\n        pushStats(key, t2 - t1);\n        return c;\n      };\n\n    editor.plugins\n      .filter((plugin) => plugin.isElement)\n      .forEach((plugin) => {\n        const { component } = plugin;\n        if (component) {\n          // eslint-disable-next-line no-param-reassign\n          plugin.component = performanceWrapper(plugin.key, component);\n        }\n      });\n    return editor;\n  },\n});\n","import { MyEditor, MyPlatePlugin } from '@decipad/editor-types';\nimport { CursorEditor } from '@decipad/slate-yjs';\nimport { debounce } from 'lodash';\nimport { cursorStore } from '../../stores/cursorStore';\nimport { cursorColor } from './cursorColor';\n\nconst RETRY_INTERVAL_MS = 1000;\nconst DEBOUNCE_MS = 1000;\n\nconst schedule = (_editor: MyEditor) => {\n  setTimeout(() => {\n    const editor = _editor as unknown as CursorEditor;\n    if (!editor.awareness) {\n      return schedule(_editor);\n    }\n    editor.awareness.on(\n      'update',\n      debounce(() => {\n        const newCursorData = Array.from(editor.awareness.getStates())\n          .filter(([clientId]) => clientId !== editor.sharedType.doc?.clientID)\n          .map(([clientID, awareness]) => {\n            const { anchor, focus } = awareness;\n            const color = cursorColor(clientID);\n\n            return {\n              key: clientID,\n              selection: {\n                anchor,\n                focus,\n              },\n              data: {\n                ...awareness,\n                style: {\n                  _backgroundColor: color,\n                  backgroundColor: color.rgb,\n                  width: 2,\n                },\n              },\n            };\n          })\n          .filter(\n            (cursor) => cursor.selection.anchor && cursor.selection.focus\n          );\n\n        cursorStore.set.cursors(newCursorData);\n      }, DEBOUNCE_MS)\n    );\n  }, RETRY_INTERVAL_MS);\n};\n\nexport const createRemoteCursorsPlugin = (): MyPlatePlugin => ({\n  key: 'PLUGIN_REMOTE_CURSORS',\n  then: schedule,\n});\n","import { OpaqueColor, swatchNames, baseSwatches } from '@decipad/ui';\n\nexport const cursorColor = (clientID: number): OpaqueColor => {\n  return baseSwatches[swatchNames[clientID % swatchNames.length]];\n};\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_CODE_LINE_V2,\n  MyEditor,\n  MyElement,\n} from '@decipad/editor-types';\nimport { insertStructuredCodeLineBelow } from '@decipad/editor-utils';\nimport {\n  getEndPoint,\n  getFirstNode,\n  getLastNode,\n  getNode,\n  getStartPoint,\n} from '@udecode/plate';\nimport { KeyboardEvent } from 'react';\nimport { Path } from 'slate';\nimport { createOnKeyDownPluginFactory } from '../../pluginFactories';\nimport { setSelection } from '../NormalizeCodeBlock/utils';\n\ntype Shortcuts =\n  | 'move-right'\n  | 'move-left'\n  | 'move-up'\n  | 'move-down'\n  | 'new-element';\n\n// In the future this function could be used by all elements to get shortcuts.\nfunction getShortcut(event: KeyboardEvent): Shortcuts | undefined {\n  switch (true) {\n    case (event.key === 'Tab' || event.key === 'Enter') && !event.shiftKey:\n      return 'move-right';\n    case event.key === 'Tab' && event.shiftKey:\n      return 'move-left';\n    case event.key === 'ArrowUp':\n      return 'move-up';\n    case event.key === 'ArrowDown':\n      return 'move-down';\n    case event.key === 'Enter' && event.shiftKey:\n      return 'new-element';\n  }\n  return undefined;\n}\n\n/**\n * Selects the whole text on a given path.\n *\n * If you have a text note `1234`, the anchor will stay before 1 and the focus\n * after 4, as to select the whole text.\n */\nfunction setSelectionFullText(editor: MyEditor, path: Path) {\n  setSelection(editor, {\n    anchor: getStartPoint(editor, path),\n    focus: getEndPoint(editor, path),\n  });\n}\n\nconst ALLOWED_ELEMENTS = new Set([ELEMENT_CODE_LINE_V2]);\n\nexport function createStructuredKeyboard(\n  getAvailableIdentifier: Computer['getAvailableIdentifier']\n) {\n  return createOnKeyDownPluginFactory({\n    name: 'STRUCTURED_KEYBOARD_SHORTCUTS',\n    plugin:\n      (editor) =>\n      (event): boolean => {\n        const { selection } = editor;\n        if (!selection) return false;\n        const anchorPath = [...selection.anchor.path];\n        const anchorOffset = selection.anchor.offset;\n\n        const node = getNode<MyElement>(editor, [anchorPath[0]]);\n        if (!node || !ALLOWED_ELEMENTS.has(node.type)) return false;\n\n        const shortcut = getShortcut(event);\n        switch (shortcut) {\n          case 'move-left':\n          case 'move-right':\n            event.preventDefault();\n            event.stopPropagation();\n            if (\n              (anchorPath[1] === 0 && shortcut === 'move-right') ||\n              (anchorPath[1] === 1 && shortcut === 'move-left')\n            ) {\n              anchorPath[1] = shortcut === 'move-right' ? 1 : 0;\n              setSelectionFullText(editor, anchorPath);\n              return true;\n            }\n\n            // If we are moving right and at the end, we move down to the next element\n            // And vise versa for the left\n            anchorPath[0] += shortcut === 'move-right' ? 1 : -1;\n            const [, path] =\n              shortcut === 'move-right'\n                ? getFirstNode(editor, [anchorPath[0]])\n                : getLastNode(editor, [anchorPath[0]]);\n            setSelectionFullText(editor, path);\n            return true;\n          case 'move-up':\n          case 'move-down':\n            anchorPath[0] += shortcut === 'move-up' ? -1 : 1;\n            const isNextSame = ALLOWED_ELEMENTS.has(\n              getNode<MyElement>(editor, [anchorPath[0]])?.type || ''\n            );\n\n            if (!isNextSame) return false;\n            event.preventDefault();\n            event.stopPropagation();\n\n            const newRange = {\n              offset: anchorOffset,\n              path: anchorPath,\n            };\n            setSelection(editor, {\n              anchor: newRange,\n              focus: newRange,\n            });\n            return true;\n          case 'new-element':\n            event.preventDefault();\n            event.stopPropagation();\n            insertStructuredCodeLineBelow(\n              editor,\n              [anchorPath[0]],\n              false,\n              getAvailableIdentifier\n            );\n            return true;\n        }\n\n        return false;\n      },\n  })();\n}\n","import { AnyElement, createTPluginFactory } from '@decipad/editor-types';\nimport { pluginStore } from '@decipad/editor-utils';\nimport { Element } from 'slate';\nimport { findNode, isElement, nanoid, setNodes } from '@udecode/plate';\nimport { getDefined } from '@decipad/utils';\n\nconst key = 'DEDUPLICATE_ELEMENT_IDS_PLUGIN';\n\ninterface DeduplicateElementIdsPluginStore {\n  seenIds: Set<string>;\n  needsDeduping: Map<string, Element[]>;\n}\n\nconst createStore = (): DeduplicateElementIdsPluginStore => ({\n  needsDeduping: new Map(),\n  seenIds: new Set(),\n});\n\nexport const createDeduplicateElementIdsPlugin = createTPluginFactory({\n  key,\n  withOverrides: (editor) => {\n    const { seenIds, needsDeduping } = pluginStore(editor, key, createStore);\n    const { apply, normalizeNode } = editor;\n\n    const insertNeedsDeduping = (id: string, element: Element) => {\n      console.info('needs deduping', id);\n      if (needsDeduping.has(id)) {\n        getDefined(needsDeduping.get(id)).push(element);\n      } else {\n        needsDeduping.set(id, [element]);\n      }\n    };\n\n    const removeNeedsDeduping = (id: string, element: Element) => {\n      const elements = getDefined(needsDeduping.get(id));\n      const elementPos = elements.indexOf(element);\n      elements.splice(elementPos, 1);\n      if (elements.length === 0) {\n        needsDeduping.delete(id);\n      }\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    editor.apply = (op) => {\n      apply(op);\n      if (op.type === 'insert_node' && isElement(op.node)) {\n        const el = op.node as AnyElement;\n        if (el.id && seenIds.has(el.id)) {\n          insertNeedsDeduping(el.id, op.node);\n        }\n        seenIds.add(el.id);\n      } else if (\n        op.type === 'set_node' &&\n        'id' in op.newProperties &&\n        op.newProperties.id\n      ) {\n        seenIds.delete(op.newProperties.id as string);\n      } else if (op.type === 'remove_node' && 'id' in op.node && op.node.id) {\n        seenIds.delete(op.node.id as string);\n      } else if (\n        op.type === 'split_node' &&\n        'id' in op.properties &&\n        op.properties.id\n      ) {\n        const lookForId = op.properties.id;\n        const entry = findNode(editor, {\n          match: (n) => isElement(n) && n.id === lookForId,\n        });\n        if (entry && isElement(entry[0])) {\n          insertNeedsDeduping(op.properties.id as string, entry[0]);\n        }\n      }\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    editor.normalizeNode = (entry) => {\n      const [n, path] = entry;\n      if (!isElement(n)) {\n        // early break\n        return normalizeNode(entry);\n      }\n      const elementsNeedingDedup = needsDeduping.get((n as AnyElement).id);\n      if (elementsNeedingDedup) {\n        if (elementsNeedingDedup.includes(n)) {\n          console.info('fixing deduping', n.id);\n          setNodes(editor, { id: nanoid() }, { at: path });\n          removeNeedsDeduping((n as AnyElement).id, n);\n        }\n        return;\n      }\n      return normalizeNode(entry);\n    };\n\n    return editor;\n  },\n});\n","import { isFlagEnabled } from '@decipad/feature-flags';\n\nexport const evalUnsafeCode = async (unsafeCode: string): Promise<string> => {\n  if (!isFlagEnabled('UNSAFE_JS_EVAL'))\n    throw new Error('eval is only available for developers');\n\n  // We allow eval only for developers.\n  // Please sandbox execution if we ever decide to ship it to the users.\n  // eslint-disable-next-line no-eval\n  const result = eval(unsafeCode);\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (typeof result === 'object' && 'then' in result) {\n    const promise: Promise<any> = result;\n\n    return promise.then((res: any) => {\n      if (typeof res !== 'string') {\n        throw new Error('Result should be a string');\n      }\n\n      return res;\n    });\n  }\n\n  throw new Error('Result should be a string');\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { setSlateFragment } from '@decipad/editor-utils';\nimport { DragEvent } from 'react';\nimport { Computer, Result, SerializedTypes } from '@decipad/computer';\nimport { DeciNumber } from '@decipad/number';\nimport { dndPreviewActions } from '@decipad/react-contexts';\n\nexport const DRAG_SMART_CELL_RESULT = 'smart-cell-result';\n\nexport const onDragSmartCellResultStarted =\n  (editor: MyEditor) =>\n  ({\n    expression,\n    computer,\n    result,\n  }: {\n    expression: string;\n    computer: Computer;\n    result: Result.Result;\n  }) =>\n  (e: DragEvent) => {\n    // eslint-disable-next-line no-param-reassign\n    editor.dragging = DRAG_SMART_CELL_RESULT;\n\n    setSlateFragment(e.dataTransfer, [expression]);\n\n    if (editor.previewRef?.current) {\n      const formatted = computer.formatNumber(\n        result.type as SerializedTypes.Number,\n        result.value as DeciNumber\n      );\n\n      dndPreviewActions.previewText(formatted.asString);\n\n      e.dataTransfer.setDragImage(editor.previewRef.current, 0, 0);\n    }\n\n    editor.setFragmentData(e.dataTransfer, 'drag');\n  };\n","import { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\n\ninterface SmartRowProps {\n  readonly smartCells: ReactNode[];\n}\n\nexport const SmartRow: FC<SmartRowProps> = ({ smartCells }) => {\n  return (\n    <>\n      {smartCells\n        .filter((_, i) => i !== 0)\n        .map((smartCell, index) => (\n          <th\n            css={css({\n              verticalAlign: 'middle',\n            })}\n            key={index}\n          >\n            {smartCell}\n          </th>\n        ))}\n      <th css={css({ display: 'none' })}></th>\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Path } from 'slate';\nimport { SmartRow as UISmartRow } from '@decipad/ui';\nimport { AnyElement } from '@decipad/editor-types';\nimport { SmartColumnCell } from '..';\nimport { TableColumn } from '../../hooks';\n\ninterface SmartRowProps {\n  readonly tableName: string;\n  readonly tablePath?: Path;\n  readonly columns: TableColumn[];\n  readonly aggregationTypeNames: Array<string | undefined>;\n  readonly onAggregationTypeNameChange: (\n    columnIndex: number,\n    aggType: string | undefined\n  ) => void;\n  readonly selectedSmartCellAggregationTypes?: Array<string | undefined>;\n  readonly element: AnyElement;\n}\nexport const SmartRow: FC<SmartRowProps> = ({\n  columns,\n  aggregationTypeNames,\n  onAggregationTypeNameChange,\n  element,\n  ...props\n}) => (\n  <UISmartRow\n    {...props}\n    smartCells={columns.map((column, index) => {\n      return (\n        <SmartColumnCell\n          key={index}\n          {...props}\n          column={column}\n          columnIndex={index}\n          selectedAggregationTypeName={aggregationTypeNames[index]}\n          onAggregationTypeNameChange={(agg) =>\n            onAggregationTypeNameChange(index, agg)\n          }\n          element={element}\n        />\n      );\n    })}\n  />\n);\n","import { Result } from '@decipad/computer';\nimport { AnyElement } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport { DragEvent, FC, ReactNode, RefObject, useState } from 'react';\nimport {\n  antiwiggle,\n  cssVar,\n  p12Regular,\n  setCssVar,\n  wiggle,\n} from '../../primitives';\nimport { table } from '../../styles';\nimport { resultBubbleStyles } from '../../styles/results';\nimport { CodeResult } from '../CodeResult/CodeResult';\n\nconst resultWrapperStyles = css({\n  userSelect: 'all',\n  cursor: 'grab',\n  wordBreak: 'break-all',\n  textAlign: 'left',\n});\n\nconst grabbingStyles = css({\n  cursor: 'grabbing',\n});\n\nconst inlineResultStyles = css(resultBubbleStyles, {\n  ':empty': { display: 'none' },\n  ':hover': {\n    animation: `${antiwiggle} 0.5s ease-in-out`,\n  },\n\n  ':hover:after': {\n    backgroundColor: 'blue',\n    animation: `${wiggle} 0.5s ease-in-out`,\n  },\n\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap',\n\n  padding: '2px 8px',\n\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n});\n\nconst smartColumnCellStyles = css(p12Regular, {\n  color: cssVar('normalTextColor'),\n  display: 'inline-flex',\n  padding: '0 6px 0 10px',\n  alignItems: 'center',\n  position: 'relative',\n  maxWidth: table.tdMaxWidth,\n  minWidth: table.tdMinWidth,\n  width: '100%',\n  justifyContent: 'space-between',\n  marginTop: `${table.smartRowHorizontalPadding}`,\n});\n\ninterface SmartColumnCellProps {\n  readonly aggregationTypeMenu: ReactNode | ReactNode[];\n  readonly onDragStart: (e: DragEvent) => void;\n  readonly onDragEnd?: (e: DragEvent) => void;\n  readonly result?: Result.Result;\n  readonly element?: AnyElement;\n  readonly previewRef?: RefObject<HTMLDivElement>;\n}\n\nexport const SmartColumnCell: FC<SmartColumnCellProps> = ({\n  aggregationTypeMenu,\n  onDragStart,\n  onDragEnd,\n  result,\n  element,\n}) => {\n  // Drag and drop\n\n  const [grabbing, setGrabbing] = useState(false);\n\n  return (\n    <div css={[smartColumnCellStyles]}>\n      <div\n        css={css({\n          display: 'inline-flex',\n          alignItems: 'center',\n          position: 'relative',\n        })}\n      >\n        {aggregationTypeMenu}\n      </div>\n      <span\n        key=\"result\"\n        css={[\n          resultWrapperStyles,\n          inlineResultStyles,\n          grabbing && grabbingStyles,\n        ]}\n        draggable\n        onDragStart={(ev) => {\n          setGrabbing(true);\n          onDragStart(ev);\n        }}\n        onDragEnd={(ev) => {\n          setGrabbing(false);\n          onDragEnd?.(ev);\n        }}\n      >\n        {result && (\n          <CodeResult variant=\"inline\" {...result} element={element} />\n        )}\n      </span>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { ReactNode, useCallback, useState } from 'react';\nimport { MenuItem } from '../../atoms';\nimport { Caret } from '../../icons';\nimport { MenuList } from '../../molecules';\nimport { p12Regular } from '../../primitives';\nimport { hideOnPrint } from '../../styles/editor-layout';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\n\nconst selectWrapperStyles = css({\n  position: 'relative',\n});\n\nconst menuListWrapperStyles = css({\n  marginLeft: 'auto',\n});\n\nconst itemStyles = css(p12Regular, {\n  textAlign: 'right',\n  whiteSpace: 'nowrap',\n});\n\nconst selectButtonStyles = css({\n  display: 'flex',\n  alignItems: 'center',\n});\n\nconst triggerStyles = css({\n  display: 'grid',\n  alignItems: 'center',\n  width: '16px',\n});\n\ninterface SelectProps<T extends string> {\n  variant?: 'transparent';\n  caretColor?: 'weak' | 'normal';\n  options: T[];\n  value?: T;\n  label?: ReactNode;\n  onChange: (newSelected: T | undefined) => void;\n  clear?: boolean;\n}\n\nexport function Select<T extends string>({\n  options,\n  value,\n  onChange,\n  label,\n  caretColor = 'normal',\n  clear = false,\n}: SelectProps<T>) {\n  const [opened, setOpened] = useState(false);\n  const onTriggerClick = useEventNoEffect(\n    useCallback(() => {\n      setOpened((o) => !o);\n    }, [])\n  );\n  return (\n    <div css={selectWrapperStyles}>\n      <div css={menuListWrapperStyles}>\n        <MenuList\n          root\n          dropdown\n          open={opened}\n          onChangeOpen={setOpened}\n          trigger={\n            <button\n              css={[\n                selectButtonStyles,\n                label === 'Calculate' ? hideOnPrint : null,\n              ]}\n              onClick={onTriggerClick}\n            >\n              {label}\n              <span css={[triggerStyles, hideOnPrint]}>\n                <Caret color={caretColor} variant=\"down\" />\n              </span>\n            </button>\n          }\n        >\n          {clear && (\n            <MenuItem\n              itemAlignment=\"left\"\n              selected={value == null}\n              key=\"clear\"\n              onSelect={() => onChange(undefined)}\n            >\n              <span css={itemStyles}>Reset</span>\n            </MenuItem>\n          )}\n          {options.map((text, index) => (\n            <MenuItem\n              itemAlignment=\"left\"\n              selected={value === text}\n              key={index}\n              onSelect={() => onChange(text)}\n            >\n              <span css={itemStyles}>{text}</span>\n            </MenuItem>\n          ))}\n        </MenuList>\n      </div>\n    </div>\n  );\n}\n","import { Result } from '@decipad/computer';\nimport { AnyElement, useTEditorRef } from '@decipad/editor-types';\nimport { useComputer } from '@decipad/react-contexts';\nimport { Select, SmartColumnCell as UISmartColumnCell } from '@decipad/ui';\nimport {\n  DragEvent,\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { EMPTY } from 'rxjs';\nimport { Path } from 'slate';\nimport { TableColumn, useColumnAggregationTypes } from '../../hooks';\nimport { AggregationType } from '../../utils';\nimport { onDragSmartCellResultStarted } from './onDragSmartCellResultStarted';\nimport { useOnDragEnd } from '../../../../editor-components/src/utils/useDnd';\n\ninterface SmartColumnCellProps {\n  tableName: string;\n  tablePath?: Path;\n  column: TableColumn;\n  columnIndex: number;\n  readonly selectedAggregationTypeName: string | undefined;\n  readonly onAggregationTypeNameChange: (\n    aggTypeName: string | undefined\n  ) => void;\n  readonly element: AnyElement;\n}\n\nexport const SmartColumnCell: FC<SmartColumnCellProps> = ({\n  tableName,\n  tablePath,\n  column,\n  columnIndex,\n  selectedAggregationTypeName,\n  onAggregationTypeNameChange,\n  element,\n}) => {\n  const editor = useTEditorRef();\n  const [selectedAggregationType, setSelectedAggregationType] = useState<\n    AggregationType | undefined\n  >();\n  const availableAggregationTypes = useColumnAggregationTypes({\n    column,\n    tablePath,\n    columnIndex,\n  });\n\n  const [result, setResult] = useState<Result.Result | null>(null);\n\n  useEffect(() => {\n    const aggType =\n      (selectedAggregationTypeName != null &&\n        availableAggregationTypes?.find(\n          (agg) => agg.name === selectedAggregationTypeName\n        )) ||\n      undefined;\n    setSelectedAggregationType(aggType);\n  }, [availableAggregationTypes, selectedAggregationTypeName]);\n\n  useEffect(() => {\n    if (selectedAggregationType == null) {\n      setResult(null);\n    }\n  }, [selectedAggregationType]);\n\n  const expression = useMemo(() => {\n    if (column.name && tableName) {\n      const columnRef = `${tableName}.${column.name}`;\n      return selectedAggregationType?.expression(columnRef, {\n        sum: `sum(${columnRef})`,\n      });\n    }\n    return undefined;\n  }, [column.name, selectedAggregationType, tableName]);\n\n  // Expression and result\n  const computer = useComputer();\n\n  useEffect(() => {\n    const sub = (\n      (expression && computer.expressionResultFromText$(expression)) ||\n      EMPTY\n    ).subscribe((r) => {\n      if (selectedAggregationType) {\n        setResult(r);\n      }\n    });\n    return () => sub.unsubscribe();\n  }, [computer, expression, selectedAggregationType]);\n\n  const onDragExpressionStart = useCallback(\n    (ev: DragEvent) => {\n      expression &&\n        result &&\n        onDragSmartCellResultStarted(editor)({\n          computer,\n          result,\n          expression,\n        })(ev);\n    },\n    [computer, editor, expression, result]\n  );\n\n  const onDragEnd = useOnDragEnd();\n\n  const showMenu = availableAggregationTypes?.length > 0;\n\n  return (\n    <UISmartColumnCell\n      onDragStart={onDragExpressionStart}\n      onDragEnd={onDragEnd}\n      result={result || undefined}\n      aggregationTypeMenu={\n        showMenu && (\n          <Select\n            key=\"selectaggregation\"\n            variant=\"transparent\"\n            caretColor=\"weak\"\n            label={\n              <span key=\"name\">\n                {(selectedAggregationType &&\n                  (selectedAggregationType.shortName ||\n                    selectedAggregationType.name)) ||\n                  'Calculate'}\n              </span>\n            }\n            options={availableAggregationTypes?.map((agg) => agg.name) ?? []}\n            value={selectedAggregationType?.name}\n            clear={!!selectedAggregationType}\n            onChange={onAggregationTypeNameChange}\n          ></Select>\n        )\n      }\n      element={element}\n    />\n  );\n};\n","import { MyEditor, MyElement } from '@decipad/editor-types';\nimport { findColumnByCell } from '@decipad/editor-table';\nimport { CellDndProps } from '../contexts/TableDndContext';\n\nexport const findColumnAndDragItem = (\n  editor: MyEditor,\n  table: MyElement,\n  { dragItem: dragItemCell, cell }: CellDndProps\n) => {\n  const column = findColumnByCell(editor, table, cell);\n  const dragItem = findColumnByCell(editor, table, dragItemCell);\n\n  if (!column) return;\n  if (!dragItem) return;\n\n  const swapCtx = {\n    editor,\n    table,\n    column,\n  };\n\n  return { column, dragItem, swapCtx };\n};\n","import { MyEditor, MyElement } from '@decipad/editor-types';\nimport {\n  findNodePath,\n  focusEditor,\n  getStartPoint,\n  hasNode,\n  setSelection,\n} from '@udecode/plate';\n\nexport const focusEditorForColumnDnd = (\n  editor: MyEditor,\n  table: MyElement,\n  columns: [number, number]\n) => {\n  focusEditor(editor);\n\n  const tablePath = findNodePath(editor, table);\n  if (!tablePath) return;\n\n  const thPath = [...tablePath, 1, columns[1]];\n  if (hasNode(editor, thPath)) {\n    const newFocus = getStartPoint(editor, thPath);\n    setSelection(editor, {\n      focus: newFocus,\n      anchor: newFocus,\n    });\n  }\n};\n","import React, { useCallback, useState } from 'react';\n\nimport {\n  findSwappableColumns,\n  getHoverDirection,\n  useTableActions,\n} from '@decipad/editor-table';\nimport {\n  MyEditor,\n  TableElement,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { dndStore } from '@udecode/plate-ui-dnd';\nimport {\n  CellDndProps,\n  ColumnDropLine,\n  TableDndContext,\n} from '../../contexts/TableDndContext';\nimport { findColumnAndDragItem } from '../../utils/findColumnAndDragItem';\nimport { focusEditorForColumnDnd } from '../../utils/focusEditorForColumnDnd';\n\nexport const TableDndProvider = ({\n  editor,\n  table,\n  children,\n}: React.PropsWithChildren<{\n  editor: MyEditor;\n  table: TableElement;\n}>) => {\n  const { onMoveColumn } = useTableActions(editor, table);\n  const [columnDropLine, setColumnDropLine] = useState<ColumnDropLine | null>(\n    null\n  );\n  const dropLine = columnDropLine?.direction;\n\n  const onCellHover = useCallback(\n    (props: CellDndProps) => {\n      const dnd = findColumnAndDragItem(editor, table, props);\n      if (!dnd) return;\n\n      const direction = getHoverDirection(editor, {\n        monitor: props.monitor,\n        element: props.cell,\n        dragItem: props.dragItem,\n      });\n\n      if (dropLine !== direction) {\n        const element = props.cell as TableHeaderElement;\n        setColumnDropLine(direction ? { direction, element } : null);\n      }\n\n      const columns = findSwappableColumns(\n        dnd.swapCtx,\n        dnd.dragItem,\n        props.monitor\n      );\n      if (!columns) return;\n\n      focusEditorForColumnDnd(editor, table, columns);\n    },\n    [dropLine, editor, table]\n  );\n\n  const onCellDrop = useCallback(\n    (props: CellDndProps) => {\n      const dnd = findColumnAndDragItem(editor, table, props);\n      if (!dnd) return;\n\n      const columns = findSwappableColumns(\n        dnd.swapCtx,\n        dnd.dragItem,\n        props.monitor\n      );\n\n      if (columns) {\n        onMoveColumn(...columns);\n      }\n    },\n    [editor, onMoveColumn, table]\n  );\n\n  const onCellDragEnd = useCallback(() => {\n    dndStore.set.isDragging(false);\n    // eslint-disable-next-line no-param-reassign\n    editor.isDragging = false;\n    setColumnDropLine(null);\n  }, [editor]);\n\n  const tableDndContextValue = {\n    onCellHover,\n    onCellDrop,\n    onCellDragEnd,\n    columnDropLine,\n  };\n\n  return (\n    <TableDndContext.Provider value={tableDndContextValue}>\n      {children}\n    </TableDndContext.Provider>\n  );\n};\n","import { useSelected } from 'slate-react';\nimport { getTableGridAbove, useEditorRef } from '@udecode/plate';\nimport { useEffect } from 'react';\nimport { dequal } from 'dequal';\nimport { useTableStore } from '../../contexts/tableStore';\n\nexport const useSelectedCells = () => {\n  const selected = useSelected();\n  const editor = useEditorRef();\n\n  const [selectedCells, setSelectedCells] = useTableStore().use.selectedCells();\n\n  useEffect(() => {\n    if (!selected) setSelectedCells(null);\n  }, [selected, editor, setSelectedCells]);\n\n  useEffect(() => {\n    const cellEntries = getTableGridAbove(editor, { format: 'cell' });\n\n    if (cellEntries.length > 1) {\n      const cells = cellEntries.map((entry) => entry[0]);\n\n      if (!dequal(cells, selectedCells)) {\n        setSelectedCells(cells);\n      }\n    } else if (selectedCells) {\n      setSelectedCells(null);\n    }\n  }, [editor, editor.selection, selectedCells, setSelectedCells]);\n};\n","import { DraggableBlock } from '@decipad/editor-components';\nimport {\n  ELEMENT_TABLE,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { assertElementType, useNodePath } from '@decipad/editor-utils';\nimport {\n  EditorTableContext,\n  EditorTableContextValue,\n  useEditorStylesContext,\n} from '@decipad/react-contexts';\nimport { AvailableSwatchColor, EditorTable, UserIconKey } from '@decipad/ui';\nimport { useMemo, useState } from 'react';\nimport {\n  MAX_UNCOLLAPSED_TABLE_ROWS,\n  WIDE_MIN_COL_COUNT,\n} from '../../constants';\nimport { useTableStore } from '../../contexts/tableStore';\nimport { useTable, useTableActions } from '../../hooks';\nimport { SmartRow } from '../SmartRow';\nimport { TableDndProvider } from '../TableDndProvider/TableDndProvider';\nimport { useSelectedCells } from './useSelectedCells';\n\nexport const Table: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_TABLE);\n  const [deleted, setDeleted] = useState(false);\n\n  const editor = useTEditorRef();\n\n  const {\n    onDelete,\n    onAddRow,\n    onAddColumn,\n    onChangeColumnAggregation,\n    onSetCollapsed,\n    onSetHideFormulas,\n    onSaveColor,\n    onSaveIcon,\n  } = useTableActions(editor, element);\n  const selectedCells = useTableStore().get.selectedCells();\n\n  useSelectedCells();\n\n  const { name, columns, headers, rowCount } = useTable(element);\n\n  const blockId = element.id;\n\n  const contextValue: EditorTableContextValue = useMemo(() => {\n    return {\n      blockId,\n      cellTypes: columns.map((col) => col.cellType),\n      columnBlockIds: columns.map((col) => col.blockId),\n    };\n  }, [blockId, columns]);\n\n  const tablePath = useNodePath(element);\n\n  const wideTable = columns.length >= WIDE_MIN_COL_COUNT;\n\n  const { color: defaultColor } = useEditorStylesContext();\n\n  return (\n    (!deleted && (\n      <DraggableBlock\n        element={element}\n        blockKind={wideTable ? 'editorWideTable' : 'editorTable'}\n        onDelete={() => {\n          setDeleted(true);\n          onDelete();\n        }}\n        {...attributes}\n        suppressContentEditableWarning\n        id={blockId}\n        dependencyId={blockId}\n      >\n        <EditorTableContext.Provider value={contextValue}>\n          <TableDndProvider editor={editor} table={element}>\n            <EditorTable\n              id={element.id}\n              onChangeIcon={onSaveIcon}\n              onChangeColor={onSaveColor}\n              onSetCollapsed={onSetCollapsed}\n              hideFormulas={element.hideFormulas}\n              onSetHideFormulas={onSetHideFormulas}\n              icon={(element.icon ?? 'Table') as UserIconKey}\n              color={(element.color ?? defaultColor) as AvailableSwatchColor}\n              isCollapsed={element.isCollapsed}\n              onAddRow={onAddRow}\n              onAddColumn={onAddColumn}\n              columns={columns}\n              tableWidth={wideTable ? 'WIDE' : 'SLIM'}\n              isSelectingCell={!!selectedCells}\n              hiddenRowCount={\n                element.isCollapsed\n                  ? Math.max(0, rowCount - MAX_UNCOLLAPSED_TABLE_ROWS)\n                  : 0\n              }\n              smartRow={\n                <SmartRow\n                  onAggregationTypeNameChange={onChangeColumnAggregation}\n                  aggregationTypeNames={headers.map((h) => h.aggregation)}\n                  tableName={name}\n                  tablePath={tablePath}\n                  columns={columns}\n                  element={element}\n                />\n              }\n            >\n              {children}\n            </EditorTable>\n          </TableDndProvider>\n        </EditorTableContext.Provider>\n      </DraggableBlock>\n    )) ||\n    null\n  );\n};\n","export const DECORATION_CELL_UNIT = 'dec-cell-unit';\nexport const WIDE_MIN_COL_COUNT = 5;\nexport const MAX_UNCOLLAPSED_TABLE_ROWS = 10;\n","import {\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_CAPTION,\n  PlateComponent,\n  TableElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  useEnsureValidVariableName,\n} from '@decipad/editor-utils';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { EditableTableCaption, Tooltip } from '@decipad/ui';\nimport {\n  findNodePath,\n  getAboveNode,\n  getNodeChild,\n  getNodeString,\n  isElement,\n} from '@udecode/plate';\nimport { insertDataViewBelow } from 'libs/editor-components/src/utils/data-view';\nimport { useCallback } from 'react';\nimport { WIDE_MIN_COL_COUNT } from '../../constants';\nimport { useTableColumnCount } from '../../hooks';\n\nexport const TableCaption: PlateComponent = ({\n  element,\n  attributes,\n  children,\n}) => {\n  const readOnly = useIsEditorReadOnly();\n\n  assertElementType(element, ELEMENT_TABLE_CAPTION);\n  const columnCount = useTableColumnCount(element);\n  const editor = useTEditorRef();\n  const path = findNodePath(editor, element);\n  const parent = getAboveNode<TableElement>(editor, {\n    at: path,\n    match: (node) => {\n      return isElement(node) && node.type === ELEMENT_TABLE;\n    },\n  });\n\n  // ensure name is unique\n  const varNameElement = element.children[0];\n  const tooltip = useEnsureValidVariableName(varNameElement, parent?.[0].id);\n\n  const onAddDataViewButtonPress = useCallback(() => {\n    if (!parent) {\n      return;\n    }\n\n    const [tableElement, parentPath] = parent;\n\n    return (\n      path &&\n      insertDataViewBelow(\n        editor,\n        parentPath,\n        tableElement.id,\n        getNodeString(getNodeChild(element, 0))\n      )\n    );\n  }, [editor, element, parent, path]);\n\n  const caption = (\n    <div {...attributes}>\n      <EditableTableCaption\n        readOnly={readOnly}\n        isForWideTable={\n          (columnCount && columnCount >= WIDE_MIN_COL_COUNT) || false\n        }\n        empty={getNodeString(element.children[0]).length === 0}\n        onAddDataViewButtonPress={onAddDataViewButtonPress}\n        showToggleCollapsedButton={!!parent}\n      >\n        {children}\n      </EditableTableCaption>\n    </div>\n  );\n\n  return tooltip ? (\n    <Tooltip side=\"left\" hoverOnly open trigger={caption}>\n      {tooltip}\n    </Tooltip>\n  ) : (\n    caption\n  );\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { Path } from 'slate';\nimport { select } from '@udecode/plate';\n\nexport const selectRow = (editor: MyEditor, rowPath: Path) => {\n  select(editor, rowPath);\n};\n","import { getNodeEntry } from '@udecode/plate';\nimport { Path } from 'slate';\nimport {\n  TableHeaderRow,\n  TableRow as UITableRow,\n  TableStyleContext,\n} from '@decipad/ui';\nimport {\n  ELEMENT_TR,\n  PlateComponent,\n  TableElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { assertElementType, useNodePath } from '@decipad/editor-utils';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { useDndNode } from '@udecode/plate-ui-dnd';\nimport { useTableActions } from '../../hooks';\nimport { selectRow } from '../../utils/selectRow';\nimport { MAX_UNCOLLAPSED_TABLE_ROWS } from '../../constants';\nimport { useTableRowStore } from '../../contexts/tableStore';\n\nconst DRAG_ITEM_ROW = 'row';\n\nexport const TableRow: PlateComponent = ({ attributes, children, element }) => {\n  assertElementType(element, ELEMENT_TR);\n  const editor = useTEditorRef();\n  const path = useNodePath(element);\n\n  const { isCollapsed } = useContext(TableStyleContext);\n\n  const isVisible =\n    path &&\n    (!isCollapsed || path[path.length - 1] <= MAX_UNCOLLAPSED_TABLE_ROWS + 1);\n  const tablePath = path && Path.parent(path);\n  const tableEntry = tablePath && getNodeEntry<TableElement>(editor, tablePath);\n  const table = tableEntry?.[0];\n  const { onRemoveRow } = useTableActions(editor, table);\n\n  const { id } = element;\n  const trRef = useRef<HTMLTableRowElement>(null);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const { dragRef, dropLine, isDragging } = useDndNode({\n    type: DRAG_ITEM_ROW,\n    id,\n    nodeRef: trRef,\n    preview: {\n      ref: previewRef,\n    },\n  });\n\n  const setDropLine = useTableRowStore().set.dropLine();\n  const setRowWidth = useTableRowStore().set.rowWidth();\n\n  const rowObserver = React.useRef(\n    new ResizeObserver((rowEntries) => {\n      rowEntries.forEach((rowEntry) => {\n        setRowWidth(rowEntry.contentRect.width);\n      });\n    })\n  );\n\n  useEffect(() => {\n    const currentRef = rowObserver.current;\n    setDropLine(dropLine);\n    // we need to calculate and store the width of the current row for the '+' button\n    if (trRef.current) {\n      currentRef.observe(trRef.current);\n    }\n\n    return () => currentRef.disconnect();\n  }, [dropLine, setDropLine, rowObserver]);\n\n  const firstRow = path?.[path.length - 1] === 1;\n  if (firstRow) {\n    return (\n      <TableHeaderRow attributes={attributes} readOnly={false}>\n        {children}\n      </TableHeaderRow>\n    );\n  }\n  return (\n    <UITableRow\n      attributes={attributes}\n      readOnly={false}\n      onRemove={() => onRemoveRow(element.id)}\n      onSelect={() => path && selectRow(editor, path)}\n      dragRef={dragRef}\n      previewRef={previewRef}\n      ref={trRef}\n      isBeingDragged={isDragging}\n      isVisible={isVisible}\n    >\n      {children}\n    </UITableRow>\n  );\n};\n","import { ELEMENT_TABLE, MyEditor, TableElement } from '@decipad/editor-types';\nimport { Path } from 'slate';\nimport {\n  getAboveNode,\n  getEndPoint,\n  getStartPoint,\n  select,\n} from '@udecode/plate';\n\nexport const selectColumn = (editor: MyEditor, cellPath: Path) => {\n  const tableEntry = getAboveNode<TableElement>(editor, {\n    at: cellPath,\n    match: { type: ELEMENT_TABLE },\n  });\n  if (!tableEntry) return;\n\n  const colIndex = cellPath[cellPath.length - 1];\n\n  const [tableNode, tablePath] = tableEntry;\n\n  select(editor, {\n    anchor: getStartPoint(editor, [...tablePath, 2, colIndex]),\n    focus: getEndPoint(editor, [\n      ...tablePath,\n      tableNode.children.length - 1,\n      colIndex,\n    ]),\n  });\n};\n","import { useContext, useMemo } from 'react';\nimport {\n  MyEditor,\n  TableCellElement,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { useDragNode } from '@udecode/plate-ui-dnd';\nimport { getEmptyImage } from '@decipad/editor-utils';\nimport { DRAG_ITEM_COLUMN, TableDndContext } from '../contexts/TableDndContext';\n\nexport const useDragColumn = (\n  editor: MyEditor,\n  element: TableHeaderElement | TableCellElement\n) => {\n  const tableDnd = useContext(TableDndContext);\n\n  const [{ isDragging }, dragSource, dragPreview] = useDragNode(editor, {\n    id: element.id,\n    type: DRAG_ITEM_COLUMN,\n    end: tableDnd.onCellDragEnd,\n  });\n\n  dragPreview(getEmptyImage(), { captureDraggingState: true });\n\n  return useMemo(\n    () => ({ isDragging, dragSource, dragPreview }),\n    [isDragging, dragSource, dragPreview]\n  );\n};\n","export const getEmptyImage = (): HTMLImageElement => {\n  return document.createElement('img');\n};\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  ColumnMenuDropdown,\n  ELEMENT_TH,\n  ELEMENT_VARIABLE_DEF,\n  PlateComponent,\n  TableElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  EditorChangeContext,\n  useComputer,\n  useIsEditorReadOnly,\n} from '@decipad/react-contexts';\nimport { TableColumnHeader } from '@decipad/ui';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n  useNodePath,\n} from '@decipad/editor-utils';\nimport { getNode, getNodeString } from '@udecode/plate';\nimport { Path } from 'slate';\nimport { useSelected } from 'slate-react';\nimport { concat, of } from 'rxjs';\nimport { dequal } from 'dequal';\nimport { selectColumn } from '../../utils/selectColumn';\nimport { useDragColumn } from '../../hooks/useDragColumn';\nimport {\n  useColumnDropDirection,\n  useDropColumn,\n  useTableActions,\n  useColumnInferredType,\n} from '../../hooks';\n\nexport const TableHeaderCell: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  assertElementType(element, ELEMENT_TH);\n  const computer = useComputer();\n  const editor = useTEditorRef();\n  const path = useNodePath(element);\n  const nThChild = path?.[path.length - 1];\n  const tablePath = path && Path.parent(Path.parent(path));\n  const table = tablePath && getNode<TableElement>(editor, tablePath);\n  const { onChangeColumnType, onRemoveColumn } = useTableActions(editor, table);\n  const focused = useSelected();\n  const readOnly = useIsEditorReadOnly();\n\n  const { dragSource, isDragging } = useDragColumn(editor, element);\n  const [{ isOver }, dropTarget] = useDropColumn(editor, element);\n  const dropDirection = useColumnDropDirection(editor, element);\n\n  const parseUnit = useMemo(\n    () => computer.getUnitFromText.bind(computer),\n    [computer]\n  );\n\n  const editorChanges = useContext(EditorChangeContext);\n\n  const [cols, setCols] = useState<ColumnMenuDropdown[]>([]);\n\n  const mutateDropdownType = useElementMutatorCallback(\n    editor,\n    element,\n    'cellType'\n  );\n\n  useEffect(() => {\n    const editorChanges$ = concat(of(undefined), editorChanges);\n    const sub = editorChanges$.subscribe(() => {\n      const dropdowns = editor.children.filter(\n        (c) => c.type === ELEMENT_VARIABLE_DEF && c.variant === 'dropdown'\n      );\n      const dropdownContent = dropdowns.map((d) => {\n        assertElementType(d, ELEMENT_VARIABLE_DEF);\n        return {\n          id: d.id,\n          value: d.children[0].children[0].text,\n          type:\n            d.coerceToType?.kind === 'string'\n              ? ('string' as const)\n              : ('number' as const),\n        };\n      });\n\n      if (element.cellType.kind === 'dropdown') {\n        const selectedDropdown = dropdownContent.find((d) => {\n          if (element.cellType.kind === 'dropdown') {\n            return element.cellType.id === d.id;\n          }\n          return undefined;\n        });\n        if (\n          selectedDropdown?.type !== element.cellType.type &&\n          selectedDropdown\n        ) {\n          mutateDropdownType({\n            kind: 'dropdown',\n            id: selectedDropdown.id,\n            type: selectedDropdown.type,\n          });\n        }\n      }\n\n      if (!dequal(cols, dropdownContent)) {\n        setCols(dropdownContent);\n      }\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [\n    editor.children,\n    editorChanges,\n    element.cellType,\n    mutateDropdownType,\n    cols,\n  ]);\n\n  const { type: inferredType } = useColumnInferredType(element);\n\n  return (\n    <TableColumnHeader\n      attributes={attributes}\n      readOnly={readOnly}\n      empty={getNodeString(element).length === 0}\n      focused={focused}\n      isFirst={nThChild === 0}\n      onChangeColumnType={(newType) =>\n        nThChild != null && onChangeColumnType(nThChild, newType)\n      }\n      onRemoveColumn={() => onRemoveColumn(element.id)}\n      onSelectColumn={() => path && selectColumn(editor, path)}\n      parseUnit={parseUnit}\n      type={\n        element.cellType?.kind === 'anything' ? inferredType : element.cellType\n      }\n      draggable={true}\n      dragSource={dragSource}\n      dropTarget={dropTarget}\n      draggingOver={!isDragging && isOver}\n      dropDirection={dropDirection}\n      dropdownNames={cols}\n    >\n      {children}\n    </TableColumnHeader>\n  );\n};\n","import { DropLineDirection } from '@udecode/plate-ui-dnd';\nimport { DropLine } from './DropLine';\nimport { dropLineWidth } from '../../styles/drop-line';\n\nexport const RowDropLine = ({ dropLine }: { dropLine: DropLineDirection }) => {\n  return (\n    <div\n      contentEditable={false}\n      css={{\n        position: 'absolute',\n        top: dropLine === 'top' ? -(dropLineWidth / 2) - 0.5 : undefined,\n        left: 0,\n        bottom: dropLine === 'bottom' ? -(dropLineWidth / 2) - 1 : undefined,\n        width: 'calc(100% + 1px)',\n        zIndex: 2,\n      }}\n    >\n      <DropLine variant=\"table\" />\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { getExprRef } from '@decipad/computer';\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  ELEMENT_VARIABLE_DEF,\n  PlateComponent,\n  TableCellElement,\n  TableRowElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  isElementOfType,\n  useSelection,\n  useTableColumnFormulaResultForCell,\n} from '@decipad/editor-utils';\nimport { useComputer } from '@decipad/react-contexts';\nimport { useDelayedTrue } from '@decipad/react-utils';\nimport {\n  CodeResult,\n  ColumnDropLine,\n  FormulaTableData,\n  RowDropLine,\n  TableData,\n} from '@decipad/ui';\nimport { NewElementLine } from '@decipad/ui/src/atoms/NewElementLine/NewElementLine';\nimport {\n  findNodePath,\n  getNodeString,\n  insertText,\n  isCollapsed,\n  useElement,\n} from '@udecode/plate';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelected } from 'slate-react';\nimport { useTableRowStore, useTableStore } from '../../contexts/tableStore';\nimport {\n  addRowFromCell,\n  useCellType,\n  useColumnDropDirection,\n  useDropColumn,\n  useIsCellSelected,\n  useIsColumnSelected,\n} from '../../hooks';\nimport { isCellAlignRight } from '../../utils/isCellAlignRight';\n\nexport const TableCell: PlateComponent = ({\n  attributes,\n  children,\n  element,\n}) => {\n  const editor = useTEditorRef();\n  const selected = useIsCellSelected(element!);\n  const focused = useSelected();\n  const collapsed = isCollapsed(useSelection());\n  const selectedCells = useTableStore().get.selectedCells();\n  const dropLine = useTableRowStore().get.dropLine();\n  const [, dropTarget] = useDropColumn(editor, element!);\n  const direction = useColumnDropDirection(editor, element!);\n  const hoveredRowId = useTableStore().get.hoveredRowId();\n  const setHoveredRowId = useTableStore().set.hoveredRowId();\n  const hoveredRowBottomId = useTableStore().get.hoveredRowBottomId();\n  const setHoveredRowBottomId = useTableStore().set.hoveredRowBottomId();\n  const table = useElement(ELEMENT_TABLE);\n  const row = useElement<TableRowElement>(ELEMENT_TR);\n  const isRowHovered = hoveredRowId === row.id;\n  const isLastRow = table.children[table.children.length - 1] === row;\n  const isLastRowHovered = hoveredRowBottomId === row.id && isLastRow;\n  const isLastColumnPerRow =\n    row.children[row.children.length - 1].id === element?.id;\n  const rowWidth = useTableRowStore().get.rowWidth() || 0;\n\n  if (\n    !isElementOfType(element, ELEMENT_TH) &&\n    !isElementOfType(element, ELEMENT_TD)\n  ) {\n    throw new Error(\n      `TableCell is meant to render table cells, not ${element?.type}`\n    );\n  }\n\n  const formulaResult = useTableColumnFormulaResultForCell(element);\n\n  // series\n  const cellType = useCellType(element);\n\n  const isColumnSelected = useIsColumnSelected(element);\n  const isSeriesColumn = useMemo(() => cellType?.kind === 'series', [cellType]);\n  const editable = useMemo(() => {\n    const path = findNodePath(editor, element);\n    if (path && path[path.length - 2] !== 2 && isSeriesColumn) {\n      // first data row\n      return false;\n    }\n    return true;\n  }, [editor, element, isSeriesColumn]);\n\n  const disabled = useMemo(() => {\n    const path = findNodePath(editor, element);\n    return (\n      isSeriesColumn && path && path[path.length - 2] !== 2 && isColumnSelected\n    );\n  }, [editor, element, isColumnSelected, isSeriesColumn]);\n\n  const computer = useComputer();\n  // Displaying the unit on an empty cell creates a visual glitch\n  const nodeText = getNodeString(element);\n  const nodeTrimmedText = nodeText.trim();\n  const hasText = nodeTrimmedText.length > 0;\n  const isSoleNumber = !Number.isNaN(Number(nodeText));\n  const unit =\n    cellType?.kind === 'number' &&\n    cellType.unit?.length &&\n    hasText &&\n    isSoleNumber\n      ? computer.formatUnit(cellType.unit)\n      : undefined;\n\n  const parseError = computer.getImperativeParseError$.useWithSelector(\n    (elm) => elm?.error,\n    element.id\n  );\n  const parseErrorMessage =\n    typeof parseError === 'string' ? parseError : parseError?.message;\n\n  const showParseError = useDelayedTrue(Boolean(parseError));\n\n  const onChangeValue = useCallback(\n    (newValue: string | undefined) => {\n      const path = findNodePath(editor, element);\n      if (path && newValue) {\n        insertText(editor, newValue, { at: path });\n      }\n    },\n    [editor, element]\n  );\n\n  // When I start editing and the cell type is anything, align right until I unfocus.\n  const [forceAlignRight, setForceAlignRight] = useState(false);\n  useEffect(() => {\n    if (isColumnSelected && cellType?.kind === 'anything') {\n      setForceAlignRight(true);\n    }\n\n    if (!isColumnSelected && forceAlignRight) {\n      setForceAlignRight(false);\n    }\n  }, [cellType?.kind, isColumnSelected, forceAlignRight]);\n\n  const dropdownResult = computer.getVarResult$.use(nodeText)?.result;\n  const dropdownOptions = useMemo(() => {\n    if (!cellType || cellType.kind !== 'dropdown') return [];\n\n    const dropdown = editor.children.find((child) => child.id === cellType.id);\n    if (!dropdown) {\n      return [];\n    }\n    assertElementType(dropdown, ELEMENT_VARIABLE_DEF);\n    if (dropdown.variant !== 'dropdown') return [];\n    const { options } = dropdown.children[1];\n\n    return options.map((o) => ({\n      ...o,\n      focused: nodeText === getExprRef(o.id),\n    }));\n  }, [cellType, editor.children, nodeText]);\n\n  const DropLine = (\n    <>\n      {!dropLine && (\n        <NewElementLine\n          onMouseEnter={() => setHoveredRowId(row.id)}\n          onMouseLeave={() => setHoveredRowId(null)}\n          onClick={() => setHoveredRowId(null)}\n          onAdd={() =>\n            addRowFromCell(editor, {\n              cellElement: element as TableCellElement,\n            })\n          }\n          show={isRowHovered}\n          isTable\n          tableAdditionalProps={{\n            isLastColumn: isLastColumnPerRow,\n            rowWidth,\n          }}\n        />\n      )}\n\n      {!dropLine && isLastRow && (\n        <NewElementLine\n          onMouseEnter={() => {\n            setHoveredRowBottomId(row.id);\n          }}\n          onMouseLeave={() => {\n            setHoveredRowBottomId(null);\n          }}\n          onClick={() => setHoveredRowBottomId(null)}\n          onAdd={() =>\n            addRowFromCell(editor, {\n              offset: 1,\n              cellElement: element as TableCellElement,\n            })\n          }\n          show={isLastRowHovered}\n          isTable\n          tableAdditionalProps={{\n            isLastColumn: isLastColumnPerRow,\n            rowWidth,\n          }}\n          reverse\n        />\n      )}\n\n      {dropLine === 'top' && <RowDropLine dropLine={dropLine} />}\n      {direction === 'left' && <ColumnDropLine dropDirection={direction} />}\n      {direction === 'right' && <ColumnDropLine dropDirection={direction} />}\n      {dropLine === 'bottom' && <RowDropLine dropLine={dropLine} />}\n    </>\n  );\n\n  if (formulaResult != null) {\n    // IMPORTANT NOTE: do not remove the children elements from rendering.\n    // Even though they're one element with an empty text property, their absence triggers\n    // an uncaught exception in slate-react.\n    // Also, be careful with the element structure:\n    // https://github.com/ianstormtaylor/slate/issues/3930#issuecomment-723288696\n    return (\n      <FormulaTableData\n        result={<CodeResult {...formulaResult} element={element} />}\n        resultType={formulaResult.type.kind}\n        {...attributes}\n        selected={selected}\n        firstChildren={DropLine}\n      >\n        {children}\n      </FormulaTableData>\n    );\n  }\n\n  return (\n    <TableData\n      isEditable={editable}\n      disabled={disabled}\n      isUserContent\n      as=\"td\"\n      attributes={attributes}\n      dropTarget={dropTarget}\n      selected={selected}\n      focused={selectedCells && selectedCells.length > 1 ? false : focused}\n      collapsed={collapsed}\n      unit={unit}\n      type={cellType}\n      value={nodeText}\n      onChangeValue={onChangeValue}\n      alignRight={forceAlignRight || isCellAlignRight(cellType)}\n      parseError={showParseError ? parseErrorMessage : undefined}\n      firstChildren={DropLine}\n      dropdownOptions={{\n        dropdownOptions,\n        dropdownResult,\n      }}\n      element={element}\n    >\n      {children}\n    </TableData>\n  );\n};\n","import { IdentifiedError, IdentifiedResult } from '@decipad/computer';\nimport { useOnBlurNormalize } from '@decipad/editor-components';\nimport {\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  PlateComponent,\n  TableElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { assertElementType, isElementOfType } from '@decipad/editor-utils';\nimport { useComputer } from '@decipad/react-contexts';\nimport { CodeLine, CodeVariable } from '@decipad/ui';\nimport { ELEMENT_TABLE, findNodePath, getAboveNode } from '@udecode/plate';\nimport { Node } from 'slate';\nimport { useTableColumnHeaderOfTableAbove } from '../../hooks';\n\nexport const TableColumnFormula: PlateComponent = ({ children, element }) => {\n  assertElementType(element, ELEMENT_TABLE_COLUMN_FORMULA);\n  const header = useTableColumnHeaderOfTableAbove(element, element.columnId);\n  const typeErrorResult = useComputer().getBlockIdResult$.useWithSelector(\n    selectTypeErrors,\n    element.columnId\n  );\n\n  const editor = useTEditorRef();\n  const path = findNodePath(editor, element)!;\n  const tableEntry = getAboveNode<TableElement>(editor, {\n    at: path,\n    match: (n) => isElementOfType(n, ELEMENT_TABLE),\n  })!;\n\n  // transform variable references in column formulas into smart refs on blur\n  useOnBlurNormalize(editor, element, tableEntry[0]);\n\n  return (\n    <CodeLine variant=\"table\" result={typeErrorResult} element={element}>\n      <span contentEditable={false}>\n        <CodeVariable type={{ kind: 'table-formula' }} showTooltip={false}>\n          {header && Node.string(header)}\n        </CodeVariable>{' '}\n        ={' '}\n      </span>\n      {children}\n    </CodeLine>\n  );\n};\n\nconst selectTypeErrors = (blockResult?: IdentifiedResult | IdentifiedError) => {\n  if (blockResult?.result?.type.kind === 'type-error') {\n    return blockResult.result;\n  }\n  return undefined;\n};\n","import { createContext } from 'react';\nimport { DropTargetMonitor } from 'react-dnd';\nimport type { MyElement, TableHeaderElement } from '@decipad/editor-types';\nimport type { ColumnDndDirection, DragColumnItem } from '..';\n\nexport const DRAG_ITEM_COLUMN = 'column';\n\nexport type CellDndProps = {\n  dragItem: DragColumnItem;\n  monitor: DropTargetMonitor<DragColumnItem, void>;\n  cell: MyElement;\n};\n\nexport type ColumnDropLine = {\n  element: TableHeaderElement;\n  direction: NonNullable<ColumnDndDirection>;\n};\n\ninterface TableDndContextValue {\n  onCellHover(props: CellDndProps): void;\n  onCellDrop(props: CellDndProps): void;\n  onCellDragEnd(): void;\n  columnDropLine: ColumnDropLine | null;\n}\n\nexport const TableDndContext = createContext<TableDndContextValue>({\n  onCellHover() {},\n  onCellDrop() {},\n  onCellDragEnd() {},\n  columnDropLine: null,\n});\n","import { createAtomStore, TElement } from '@udecode/plate';\nimport { ELEMENT_TABLE, ELEMENT_TR } from '@decipad/editor-types';\n\nexport const { useTableStore } = createAtomStore(\n  {\n    selectedCells: null as TElement[] | null,\n    hoveredRowId: null as string | null,\n    hoveredRowBottomId: null as string | null,\n  },\n  { name: 'table', scope: ELEMENT_TABLE }\n);\n\nexport const { useTableRowStore } = createAtomStore(\n  {\n    // Drop line direction for rows (horizontal)\n    dropLine: '',\n    rowWidth: null as number | null,\n  },\n  { name: 'tableRow', scope: ELEMENT_TR }\n);\n","/* eslint-disable no-underscore-dangle */\nimport {\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  MyEditor,\n  MyValue,\n  TableCellElement,\n  TableCellType,\n  TableElement,\n  TableHeaderElement,\n  TableHeaderRowElement,\n  TableRowElement,\n} from '@decipad/editor-types';\nimport {\n  insertNodes,\n  useElementMutatorCallback,\n  withPath,\n} from '@decipad/editor-utils';\nimport { nanoid } from 'nanoid';\nimport { useCallback } from 'react';\nimport {\n  findNodePath,\n  getNodeChildren,\n  getNodeEntry,\n  hasNode,\n  InsertNodesOptions,\n  insertText,\n  moveNodes,\n  removeNodes,\n  setNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { Path } from 'slate';\nimport { useComputer } from '@decipad/react-contexts';\nimport { getColumnName } from '../utils';\nimport { changeColumnType } from '../utils/changeColumnType';\n\nexport interface TableActions {\n  onDelete: () => void;\n  onChangeColumnName: (columnIndex: number, newColumnName: string) => void;\n  onChangeColumnType: (\n    columnIndex: number,\n    newColumnType: TableCellType\n  ) => void;\n  onSetCollapsed: (collapsed: boolean) => void;\n  onSetHideFormulas: (isHidden: boolean) => void;\n  onChangeColumnAggregation: (\n    columnIndex: number,\n    newColumnAggregation: string | undefined\n  ) => void;\n  onAddColumn: () => void;\n  onRemoveColumn: (columnId: string) => void;\n  onAddRow: () => void;\n  onRemoveRow: (rowIndex: string) => void;\n  onMoveColumn: (fromColumnIndex: number, toColumnIndex: number) => void;\n  onSaveIcon: (icon?: string) => void;\n  onSaveColor: (color?: string) => void;\n}\n\nexport const addColumn = (\n  editor: MyEditor,\n  {\n    tablePath,\n    cellType = { kind: 'anything' },\n  }: {\n    tablePath: Path;\n    cellType?: TableCellType;\n  }\n) => {\n  const headerRowPath = [...tablePath, 1];\n  const headerRowEntry = getNodeEntry<TableHeaderRowElement>(\n    editor,\n    headerRowPath\n  );\n  const headerRow = headerRowEntry[0];\n  const columnCount = headerRow.children.length;\n\n  const tableEntry = getNodeEntry<TableRowElement>(editor, tablePath);\n  const table = tableEntry[0];\n  const [, , ...body] = table.children;\n  const columnName = getColumnName(editor, tablePath, columnCount + 1);\n  withoutNormalizing(editor, () => {\n    insertNodes<TableHeaderElement>(\n      editor,\n      {\n        id: nanoid(),\n        type: ELEMENT_TH,\n        cellType,\n        children: [{ text: columnName }],\n      },\n      {\n        at: [...tablePath, 1, columnCount],\n      }\n    );\n\n    body.forEach((_row, rowIndex) => {\n      insertNodes<TableCellElement>(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_TD,\n          children: [{ text: '' }],\n        },\n        {\n          at: [...tablePath, rowIndex + 2, columnCount],\n        }\n      );\n    });\n  });\n};\n\nexport const addRow = (\n  editor: MyEditor,\n  tablePath: Path,\n  options?: InsertNodesOptions<MyValue>\n) => {\n  const headerRowPath = [...tablePath, 1];\n  const [table] = getNodeEntry(editor, tablePath);\n  const elementCount = (table as TableElement).children.length;\n  const headerRowEntry = getNodeEntry(editor, headerRowPath);\n  const headerRow = headerRowEntry[0] as TableHeaderRowElement;\n  const columnCount = headerRow.children.length;\n  const emptyCells: TableCellElement[] = Array.from(\n    { length: columnCount },\n    (): TableCellElement => ({\n      id: nanoid(),\n      type: ELEMENT_TD,\n      children: [{ text: '' }],\n    })\n  );\n  const newRow: TableRowElement = {\n    id: nanoid(),\n    type: ELEMENT_TR,\n    children: emptyCells,\n  };\n  // @ts-ignore\n  insertNodes<TableRowElement>(editor, newRow, {\n    at: [...tablePath, elementCount],\n    ...options,\n  });\n};\n\nexport const addRowFromCell = (\n  editor: MyEditor,\n  {\n    cellElement,\n    offset = 0,\n  }: { cellElement: TableCellElement; offset?: number }\n) => {\n  const cellPath = findNodePath(editor, cellElement);\n  if (!cellPath) return;\n\n  const rowPath = cellPath.slice(0, cellPath.length - 1);\n  const rowIndex = rowPath[rowPath.length - 1];\n  const tablePath = rowPath.slice(0, rowPath.length - 1);\n\n  addRow(editor, tablePath, {\n    at: [...tablePath, rowIndex + offset],\n    select: true,\n  });\n};\n\nexport const useTableActions = (\n  editor: MyEditor,\n  element: TableElement | null | undefined\n): TableActions => {\n  const onDelete = useCallback(() => {\n    withPath(editor, element, (path) => {\n      withoutNormalizing(editor, () => {\n        removeNodes(editor, { at: path });\n      });\n    });\n  }, [editor, element]);\n\n  const onChangeColumnName = useCallback(\n    (columnIndex: number, newColumnName: string) => {\n      withPath(editor, element, (path) => {\n        const columnHeaderPath = [...path, 1, columnIndex];\n        if (hasNode(editor, columnHeaderPath)) {\n          insertText(editor, newColumnName, {\n            at: path,\n          });\n        }\n      });\n    },\n    [editor, element]\n  );\n\n  const computer = useComputer();\n  const onChangeColumnType = useCallback(\n    (columnIndex: number, cellType: TableCellType) => {\n      withPath(editor, element, (path) => {\n        withoutNormalizing(editor, () => {\n          changeColumnType(editor, path, cellType, columnIndex, computer);\n        });\n      });\n    },\n    [editor, element, computer]\n  );\n\n  const onChangeColumnAggregation = useCallback(\n    (columnIndex: number, aggregation: string | undefined) => {\n      withPath(editor, element, (path) => {\n        const columnHeaderPath = [...path, 1, columnIndex];\n        if (hasNode(editor, columnHeaderPath)) {\n          withoutNormalizing(editor, () => {\n            setNodes<TableHeaderElement>(\n              editor,\n              { aggregation },\n              {\n                at: columnHeaderPath,\n              }\n            );\n          });\n        }\n      });\n    },\n    [editor, element]\n  );\n\n  const onAddColumn = useCallback(() => {\n    withPath(editor, element, (path) => {\n      withoutNormalizing(editor, () => {\n        addColumn(editor, {\n          tablePath: path,\n        });\n      });\n    });\n  }, [editor, element]);\n\n  const onSetCollapsed = useElementMutatorCallback(\n    editor,\n    element,\n    'isCollapsed'\n  );\n\n  const onSetHideFormulas = useElementMutatorCallback(\n    editor,\n    element,\n    'hideFormulas'\n  );\n\n  const onSaveIcon = useElementMutatorCallback(editor, element, 'icon');\n  const onSaveColor = useElementMutatorCallback(editor, element, 'color');\n\n  const onRemoveColumn = useCallback(\n    (columnHeaderId: string) => {\n      withPath(editor, element, (path) => {\n        const headerRowPath = [...path, 1];\n\n        const columns = Array.from(getNodeChildren(editor, headerRowPath));\n        const columnIndex = columns.findIndex(\n          ([column]) => (column as unknown as Element).id === columnHeaderId\n        );\n\n        if (columnIndex >= 0) {\n          withoutNormalizing(editor, () => {\n            const children = Array.from(getNodeChildren(editor, path));\n            children.forEach(([, childPath], childIndex) => {\n              if (childIndex === 0) {\n                // caption\n                return;\n              }\n              const cellToDeletePath = [...childPath, columnIndex];\n              removeNodes(editor, {\n                at: cellToDeletePath,\n              });\n            });\n          });\n        }\n      });\n    },\n    [editor, element]\n  );\n\n  const onAddRow = useCallback(() => {\n    withPath(editor, element, (path) => {\n      withoutNormalizing(editor, () => {\n        addRow(editor, path);\n      });\n    });\n  }, [editor, element]);\n\n  const onRemoveRow = useCallback(\n    (id: string) => {\n      withPath(editor, element, (path) => {\n        const [table] = getNodeEntry(editor, path);\n        const rows = (table as TableElement).children;\n        const rowIndex = rows.findIndex((row) => row.id === id);\n        const rowPath = [...path, rowIndex];\n        if (hasNode(editor, rowPath)) {\n          withoutNormalizing(editor, () => {\n            removeNodes(editor, { at: rowPath });\n          });\n        }\n      });\n    },\n    [editor, element]\n  );\n\n  const onMoveColumn = useCallback(\n    (fromIndex: number, toIndex: number) => {\n      withPath(editor, element, (path) => {\n        withoutNormalizing(editor, () => {\n          let childIndex = -1;\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          for (const _row of getNodeChildren(editor, path)) {\n            childIndex += 1;\n            if (childIndex < 1) {\n              // skip caption element\n              continue;\n            }\n            const sourcePath = [...path, childIndex, fromIndex];\n            const targetPath = [...path, childIndex, toIndex];\n            if (hasNode(editor, sourcePath) && hasNode(editor, targetPath)) {\n              moveNodes(editor, { at: sourcePath, to: targetPath });\n            }\n          }\n        });\n      });\n    },\n    [editor, element]\n  );\n\n  return {\n    onDelete,\n    onChangeColumnName,\n    onChangeColumnType,\n    onChangeColumnAggregation,\n    onAddColumn,\n    onRemoveColumn,\n    onAddRow,\n    onRemoveRow,\n    onMoveColumn,\n    onSetCollapsed,\n    onSetHideFormulas,\n    onSaveIcon,\n    onSaveColor,\n  };\n};\n","import { useContext } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { MyEditor, MyElement } from '@decipad/editor-types';\n\nimport { getHoverDirection } from '../utils';\nimport { ColumnDndDirection, DragColumnItem } from '../types';\nimport { DRAG_ITEM_COLUMN, TableDndContext } from '../contexts/TableDndContext';\n\ninterface CollectedProps {\n  isOver: boolean;\n  overDirection: ColumnDndDirection;\n}\n\nexport const useDropColumn = (editor: MyEditor, cell: MyElement) => {\n  const tableDnd = useContext(TableDndContext);\n\n  return useDrop<DragColumnItem, void, CollectedProps>({\n    accept: DRAG_ITEM_COLUMN,\n    hover: (dragItem, monitor) =>\n      tableDnd.onCellHover({ dragItem, monitor, cell }),\n    drop: (dragItem, monitor) =>\n      tableDnd.onCellDrop({ dragItem, monitor, cell }),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      overDirection:\n        (monitor.isOver() &&\n          getHoverDirection(editor, { monitor, element: cell })) ||\n        undefined,\n    }),\n  });\n};\n","import { useContext, useMemo } from 'react';\nimport { MyEditor, MyElement } from '@decipad/editor-types';\n\nimport { getColumnDropDirection } from '../utils/getColumnDropDirection';\nimport { TableDndContext } from '../contexts/TableDndContext';\n\nexport const useColumnDropDirection = (\n  editor: MyEditor,\n  element: MyElement\n) => {\n  const { columnDropLine } = useContext(TableDndContext);\n\n  return useMemo(\n    () =>\n      getColumnDropDirection(editor, {\n        dropLine: columnDropLine,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        element: element!,\n      }),\n    [columnDropLine, editor, element]\n  );\n};\n","import { MyEditor, MyElement } from '@decipad/editor-types';\nimport { findNodePath } from '@udecode/plate';\nimport { ColumnDropLine } from '../contexts/TableDndContext';\n\nexport const getColumnDropDirection = (\n  editor: MyEditor,\n  { dropLine, element }: { dropLine: ColumnDropLine | null; element: MyElement }\n) => {\n  if (!dropLine) return;\n\n  const path = findNodePath(editor, element);\n  if (!path) return;\n\n  const { element: headerElement } = dropLine;\n  const headerPath = findNodePath(editor, headerElement);\n  if (!headerPath) return;\n\n  if (headerPath[headerPath.length - 1] !== path[path.length - 1]) return;\n\n  return dropLine.direction;\n};\n","import { EditorAboveOptions, Element, NodeEntry } from 'slate';\nimport { useEditorSelector } from '@decipad/react-contexts';\nimport { findNodePath, getAboveNode } from '@udecode/plate';\nimport { MyNode } from '@decipad/editor-types';\n\nexport const useElementAbove = (\n  node: MyNode,\n  options: EditorAboveOptions<Element>\n): Element | undefined => {\n  const entry = useEditorSelector<NodeEntry<Element> | undefined>((editor) => {\n    const path = findNodePath(editor, node);\n    if (path) {\n      return getAboveNode(editor, { ...options, at: path });\n    }\n    return undefined;\n  });\n\n  return entry && entry[0];\n};\n","import { ELEMENT_TABLE, TableElement } from '@decipad/editor-types';\nimport { isElement } from '@udecode/plate';\nimport { Node } from 'slate';\n\nexport const isTable = (node: Node): node is TableElement => {\n  return isElement(node) && node.type === ELEMENT_TABLE;\n};\n","import {\n  ELEMENT_TABLE,\n  MyElement,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { assertElementType, useElementAbove } from '@decipad/editor-utils';\nimport { isTable } from '../utils/isTable';\n\nexport const useTableColumnHeaderOfTableAbove = (\n  element: MyElement,\n  columnId: string\n): TableHeaderElement | undefined => {\n  const table = useElementAbove(element, { match: isTable });\n\n  if (table) {\n    assertElementType(table, ELEMENT_TABLE);\n    const firstRow = table.children[1];\n    return firstRow.children.find((th) => th.id === columnId);\n  }\n  return undefined;\n};\n","import { ELEMENT_TABLE, MyElement } from '@decipad/editor-types';\nimport { assertElementType, useElementAbove } from '@decipad/editor-utils';\nimport { isTable } from '../utils/isTable';\n\nexport const useTableColumnCount = (element: MyElement): number | undefined => {\n  const table = useElementAbove(element, { match: isTable });\n  if (table) {\n    assertElementType(table, ELEMENT_TABLE);\n    return table.children[1]?.children.length;\n  }\n  return undefined;\n};\n","import { useMemo } from 'react';\nimport { TElement } from '@udecode/plate';\nimport { useTableStore } from '../contexts/tableStore';\n\nexport const useIsCellSelected = (element: TElement) => {\n  const selectedCells = useTableStore().get.selectedCells();\n\n  return useMemo(\n    () => selectedCells?.includes(element),\n    [element, selectedCells]\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { useComputer, useEditorChange } from '@decipad/react-contexts';\nimport { findNodePath, getNode, getNodeString } from '@udecode/plate';\nimport {\n  MyEditor,\n  TableCellElement,\n  CellValueType,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { inferColumn } from '@decipad/parse';\n\ninterface UseColumnInferredTypeResult {\n  type?: CellValueType;\n}\n\nconst collectColumnData = (\n  editor: MyEditor,\n  element: TableHeaderElement\n): string[] => {\n  const columnData: string[] = [];\n  const path = findNodePath(editor, element);\n  if (path) {\n    const tablePath = path?.slice(0, -2);\n    const columnIndex = path[path.length - 1];\n    let rowIndex = 0;\n    let columnEnded = false;\n    while (!columnEnded) {\n      const dataPath = [...tablePath, rowIndex + 2, columnIndex];\n      const node = getNode<TableCellElement>(editor, dataPath);\n      if (!node) {\n        columnEnded = true;\n      } else {\n        columnData.push(getNodeString(node));\n      }\n      rowIndex += 1;\n    }\n  }\n  return columnData;\n};\n\nexport const useColumnInferredType = (\n  element?: TableHeaderElement\n): UseColumnInferredTypeResult => {\n  const computer = useComputer();\n  const [type, setType] = useState<CellValueType | undefined>(\n    () => element?.cellType\n  );\n  const inferColumnType = useCallback(\n    async (editor: MyEditor): Promise<CellValueType | undefined> => {\n      if (element && element.cellType?.kind !== 'anything') {\n        return element.cellType;\n      }\n      return (\n        element &&\n        inferColumn(computer, collectColumnData(editor, element), {\n          userType: element.cellType,\n        })\n      );\n    },\n    [computer, element]\n  );\n\n  const settleType = useCallback(\n    async (tableCell: Promise<CellValueType | undefined>) => {\n      const cellType = await tableCell;\n      setType(cellType);\n    },\n    []\n  );\n\n  useEditorChange(settleType, inferColumnType);\n\n  return { type };\n};\n","import {\n  TableCellElement,\n  CellValueType,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { useEditorSelector } from '@decipad/react-contexts';\nimport { findNodePath, getNode } from '@udecode/plate';\nimport { useColumnInferredType } from './useColumnInferredType';\n\nexport const useCellType = (\n  element: TableCellElement | TableHeaderElement\n): CellValueType | undefined => {\n  const header = useEditorSelector((editor) => {\n    const cellPath = findNodePath(editor, element);\n    if (cellPath) {\n      const colIndex = cellPath[cellPath.length - 1];\n      const tablePath = cellPath.slice(0, -2);\n      const headerPath = [...tablePath, 1, colIndex];\n      return getNode<TableHeaderElement>(editor, headerPath) ?? undefined;\n    }\n    return undefined;\n  });\n\n  return useColumnInferredType(header)?.type;\n};\n","import { findNodePath, isCollapsed } from '@udecode/plate';\nimport { TableCellElement, TableHeaderElement } from '@decipad/editor-types';\nimport { Path } from 'slate';\nimport { useEditorSelector } from '@decipad/react-contexts';\n\nexport const useIsColumnSelected = (\n  element: TableCellElement | TableHeaderElement\n): boolean => {\n  return useEditorSelector((editor) => {\n    const { selection } = editor;\n    if (selection && isCollapsed(selection)) {\n      const path = findNodePath(editor, element);\n      if (path) {\n        const tablePath = path.slice(0, -2);\n        if (tablePath.length) {\n          const selectedPath = selection.anchor.path;\n          const selectedTablePath = selectedPath.slice(0, -3);\n          if (Path.equals(selectedTablePath, tablePath)) {\n            const selectedSubTablePath = selectedPath[tablePath.length];\n            const columnIndex = path[path.length - 1];\n            return (\n              selectedSubTablePath >= 2 &&\n              columnIndex === selectedPath[selectedPath.length - 2]\n            );\n          }\n        }\n      }\n    }\n    return false;\n  });\n};\n","import { useCallback, useState } from 'react';\nimport { useComputer, useEditorChange } from '@decipad/react-contexts';\nimport { findNodePath, getNode, getNodeString } from '@udecode/plate';\nimport {\n  MyEditor,\n  TableCellElement,\n  CellValueType,\n  TableElement,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { inferColumn } from '@decipad/parse';\n\ninterface UseColumnInferredTypeResult {\n  types: CellValueType[];\n}\n\nconst collectColumnData = (\n  editor: MyEditor,\n  element: TableHeaderElement\n): string[] => {\n  const columnData: string[] = [];\n  const path = findNodePath(editor, element);\n  if (path) {\n    const tablePath = path?.slice(0, -2);\n    const columnIndex = path[path.length - 1];\n    let rowIndex = 0;\n    let columnEnded = false;\n    while (!columnEnded) {\n      const dataPath = [...tablePath, rowIndex + 2, columnIndex];\n      const node = getNode<TableCellElement>(editor, dataPath);\n      if (!node) {\n        columnEnded = true;\n      } else {\n        columnData.push(getNodeString(node));\n      }\n      rowIndex += 1;\n    }\n  }\n  return columnData;\n};\n\nconst collectColumnsData = (\n  editor: MyEditor,\n  element: TableElement\n): string[][] => {\n  const headerRow = element.children[1];\n  return headerRow.children.map((th) => collectColumnData(editor, th));\n};\n\nexport const useColumnsInferredTypes = (\n  element: TableElement\n): UseColumnInferredTypeResult => {\n  const computer = useComputer();\n  const [types, setTypes] = useState<CellValueType[]>(() =>\n    element.children[1].children.map((th) => th.cellType)\n  );\n\n  const inferColumnsTypes = useCallback(\n    (editor: MyEditor): Promise<CellValueType[]> => {\n      const columnsData = collectColumnsData(editor, element);\n      const headerCells = element.children[1].children;\n      return Promise.all(\n        columnsData.map((columnData, columnIndex) =>\n          inferColumn(computer, columnData, {\n            userType: headerCells[columnIndex]?.cellType,\n          })\n        )\n      );\n    },\n    [computer, element]\n  );\n\n  const settleColumnTypes = useCallback(\n    async (columnTypes: Promise<CellValueType[]>) => {\n      const settledColumnTypes = await columnTypes;\n      setTypes(settledColumnTypes);\n    },\n    []\n  );\n\n  useEditorChange(settleColumnTypes, inferColumnsTypes);\n\n  return { types };\n};\n","import {\n  CellValueType,\n  TableElement,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { useEditorSelector } from '@decipad/react-contexts';\nimport { getNodeString } from '@udecode/plate';\nimport { useColumnsInferredTypes } from './useColumnsInferredTypes';\n\nexport interface TableColumn {\n  blockId: string;\n  name: string;\n  cellType: CellValueType;\n}\n\nexport interface TableInfo {\n  name: string;\n  columns: TableColumn[];\n  headers: TableHeaderElement[];\n  rowCount: number;\n}\n\nexport const useTable = (element: TableElement): TableInfo => {\n  const { types: columnTypes } = useColumnsInferredTypes(element);\n\n  return useEditorSelector(() => {\n    return {\n      name: getNodeString(element.children[0].children[0]),\n      headers: element.children[1]?.children ?? [],\n      columns:\n        element.children[1]?.children.map((th, index) => ({\n          blockId: th.id,\n          name: getNodeString(th),\n          cellType: columnTypes[index] ?? { kind: 'nothing' },\n        })) ?? [],\n      rowCount: element.children.length - 2,\n    };\n  });\n};\n","import { Path } from 'slate';\nimport { useMemo } from 'react';\nimport { useTableColumnFormulaResultForColumn } from '@decipad/editor-utils';\nimport { TableCellType } from '@decipad/editor-types';\nimport {\n  AggregationType,\n  columnAggregationTypes,\n} from '../utils/columnAggregationTypes';\nimport { TableColumn } from './useTable';\n\ninterface UseAggregationTypeProps {\n  column: TableColumn;\n  tablePath?: Path;\n  columnIndex: number;\n}\n\nexport const useColumnAggregationTypes = ({\n  column,\n  columnIndex,\n}: UseAggregationTypeProps): AggregationType[] => {\n  const formulaResult = useTableColumnFormulaResultForColumn(columnIndex);\n  return useMemo(\n    () =>\n      columnAggregationTypes(\n        formulaResult\n          ? (formulaResult.type.cellType as TableCellType)\n          : (column.cellType as TableCellType)\n      ),\n    [column, formulaResult]\n  );\n};\n","import { Computer } from '@decipad/computer';\nimport { createNormalizerPlugin } from '@decipad/editor-plugins';\nimport {\n  ELEMENT_SMART_REF,\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  MyEditor,\n  MyNodeEntry,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport {\n  assertElementType,\n  insertNodes,\n  normalizeSmartRefs,\n} from '@decipad/editor-utils';\nimport {\n  hasNode,\n  deleteText,\n  getNodeChildren,\n  isElement,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\n\nexport const normalizeTableFormula =\n  (computer: Computer) =>\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [element, path] = entry;\n    assertElementType(element, ELEMENT_TABLE);\n\n    const [caption, firstRow] = element.children;\n    const [, ...formulas] = caption?.children || [];\n    const headersWithFormulas =\n      firstRow?.children.filter(\n        (th) => th.cellType?.kind === 'table-formula'\n      ) || [];\n\n    const columnIdToHeader = new Map<string, TableHeaderElement>();\n    for (const header of headersWithFormulas) {\n      columnIdToHeader.set(header.id, header);\n    }\n\n    // insert missing formulas\n\n    for (const header of headersWithFormulas) {\n      const captionChildIndex = caption.children.findIndex(\n        (el) =>\n          el.type === ELEMENT_TABLE_COLUMN_FORMULA && el.columnId === header.id\n      );\n      if (captionChildIndex < 0) {\n        const insertPath = [...path, 0, caption.children.length];\n        insertNodes(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_TABLE_COLUMN_FORMULA,\n            columnId: header.id,\n            children: [{ text: '' }],\n          },\n          { at: insertPath }\n        );\n        return true;\n      }\n    }\n\n    // delete formulas that don't have a column\n    for (const formula of formulas) {\n      const formulaPath = [...path, 0, caption.children.indexOf(formula)];\n      if (!columnIdToHeader.has(formula.columnId)) {\n        if (hasNode(editor, formulaPath)) {\n          deleteText(editor, {\n            at: formulaPath,\n          });\n          return true;\n        }\n      }\n      for (const lineChild of getNodeChildren(editor, formulaPath)) {\n        const [lineChildNode, lineChildPath] = lineChild;\n        if (\n          !isElement(lineChildNode) ||\n          lineChildNode.type === ELEMENT_SMART_REF\n        ) {\n          if (\n            normalizeSmartRefs(lineChildNode, lineChildPath, editor, computer)\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n\n    // TODO: sort formulas like the columns\n\n    return false;\n  };\n\nexport const createNormalizeTableFormulaPlugin = (computer: Computer) =>\n  createNormalizerPlugin({\n    name: 'NORMALIZE_TABLE_FORMULA_PLUGIN',\n    elementType: ELEMENT_TABLE,\n    plugin: normalizeTableFormula(computer),\n  });\n","import {\n  getChildren,\n  getNodeString,\n  hasNode,\n  insertText,\n  isElement,\n  setSelection,\n  TNodeEntry,\n} from '@udecode/plate';\nimport { createNormalizerPlugin } from '@decipad/editor-plugins';\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  MyEditor,\n  MyNodeEntry,\n  TableCellElement,\n  TableElement,\n  TableHeaderElement,\n  TableHeaderRowElement,\n  TableRowElement,\n} from '@decipad/editor-types';\nimport { enumerate, getDefined } from '@decipad/utils';\nimport { nanoid } from 'nanoid';\nimport { NodeEntry } from 'slate';\nimport { Computer } from '@decipad/computer';\nimport { dequal } from 'dequal';\nimport { parseSeriesStart, seriesIterator } from '@decipad/parse';\nimport { insertNodes } from '@decipad/editor-utils';\n\nconst tableIsSquare = ({\n  children: [, headerRow, ...dataRows],\n}: TableElement) =>\n  headerRow?.children?.length > 0 &&\n  dataRows.every((tr) => tr.children?.length === headerRow.children?.length);\n\nconst getBlankCell = (isHeader: boolean) => {\n  const id = nanoid();\n  const children = [{ text: '' }];\n\n  return isHeader\n    ? ({\n        id,\n        type: ELEMENT_TH,\n        children,\n        cellType: { kind: 'string' },\n      } as TableHeaderElement)\n    : ({ id, type: ELEMENT_TD, children } as TableCellElement);\n};\n\nconst normalizeFormulaColumns = (\n  editor: MyEditor,\n  [table, tablePath]: TNodeEntry<TableElement>\n) => {\n  const [, headerRow] = table.children;\n  if (!tableIsSquare(table)) return false;\n\n  const formulaColIndices = headerRow.children.flatMap((th, index) => {\n    if (th.cellType?.kind === 'table-formula') {\n      return [index];\n    }\n    return [];\n  });\n\n  if (formulaColIndices.length === 0) {\n    return false;\n  }\n\n  // Prevent formula columns from being the first column\n  if (formulaColIndices[0] === 0) {\n    let didTransform = false;\n    for (const [rowIndex, row] of enumerate(table.children)) {\n      if (row.type !== ELEMENT_TR) {\n        continue;\n      }\n\n      const newCellPath = [...tablePath, rowIndex, 0];\n\n      if (hasNode(editor, newCellPath)) {\n        const newCell = getBlankCell(row.children[0].type === ELEMENT_TH);\n\n        insertNodes(editor, [newCell], { at: newCellPath });\n        didTransform = true;\n      }\n    }\n\n    if (didTransform) return true;\n  }\n\n  // Empty formula cells. They must have no text (results come from off-document)\n  for (const [rowIndex, row] of enumerate(table.children)) {\n    if (row.type !== ELEMENT_TR) {\n      // Skip caption\n      continue;\n    }\n\n    for (const cellIndex of formulaColIndices) {\n      const cell = row.children[cellIndex];\n\n      if (cell.type === ELEMENT_TD && getNodeString(cell) !== '') {\n        const tdPath = [...tablePath, rowIndex, cellIndex];\n\n        insertText(editor, '', { at: tdPath });\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst normalizeSeriesColumn = (\n  computer: Computer,\n  editor: MyEditor,\n  tableEntry: TNodeEntry<TableElement>,\n  [th]: NodeEntry<TableHeaderElement>,\n  columnIndex: number\n): boolean => {\n  if (th.cellType.kind !== 'series') {\n    return false;\n  }\n\n  const rows = getChildren(tableEntry).slice(2) as NodeEntry<TableRowElement>[];\n  const [firstRow, ...restRows] = rows;\n  const firstCell = getChildren(firstRow)[columnIndex];\n  if (!firstCell) {\n    return false;\n  }\n  const firstCellContent = getNodeString(firstCell[0]).trim();\n  if (!firstCellContent) {\n    return false;\n  }\n  const { type, granularity, error } = parseSeriesStart(\n    th.cellType.seriesType,\n    firstCellContent\n  );\n  const cellId = firstCell[0].id;\n  if (error) {\n    computer.imperativelySetParseError(cellId, { elementId: cellId, error });\n    return false;\n  }\n  // no parse error\n  if (computer.hasImperativelySetParseError(cellId)) {\n    computer.imperativelyUnsetParseError(cellId);\n  }\n\n  // now we need to ensure all the remaining cells have the expected from the next in the series\n  const series = seriesIterator(\n    type,\n    getDefined(granularity),\n    firstCellContent\n  );\n  for (const row of restRows) {\n    const cell = getChildren(row)[columnIndex];\n    if (cell) {\n      const [cellEl, cellPath] = cell;\n      const existingText = getNodeString(cellEl).trim();\n      const expectedText = series.next().value;\n      if (existingText !== expectedText) {\n        const selectionBefore = editor.selection;\n        insertText(editor, expectedText, { at: cellPath });\n        if (selectionBefore && !dequal(selectionBefore, editor.selection)) {\n          setSelection(editor, selectionBefore);\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst normalizeSeriesColumns = (\n  computer: Computer,\n  editor: MyEditor,\n  tableEntry: TNodeEntry<TableElement>\n) => {\n  const [, _ths] = getChildren(tableEntry); // second element of a table is a header table row\n  const ths = _ths as NodeEntry<TableHeaderRowElement>;\n  for (const [index, th] of enumerate(getChildren(ths))) {\n    if (normalizeSeriesColumn(computer, editor, tableEntry, th, index)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const normalizeTableFormulaAndSeries =\n  (computer: Computer) =>\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [node, path] = entry;\n    if (!isElement(node) || node.type !== ELEMENT_TABLE) {\n      return false;\n    }\n    if (node.type === ELEMENT_TABLE) {\n      return (\n        normalizeFormulaColumns(editor, [node, path]) ||\n        normalizeSeriesColumns(computer, editor, [node, path])\n      );\n    }\n    return false;\n  };\n\nexport const createNormalizeTableFormulaAndSeriesCellsPlugin = (\n  computer: Computer\n) =>\n  createNormalizerPlugin({\n    name: 'NORMALIZE_TABLE_FORMULA_AND_SERIES_CELLS_PLUGIN',\n    plugin: normalizeTableFormulaAndSeries(computer),\n  });\n","import { WithRequired } from '@udecode/plate';\nimport {\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_TABLE_VARIABLE_NAME,\n  TableCaptionElement,\n} from '@decipad/editor-types';\nimport { nanoid } from 'nanoid';\n\nexport const createTableCaption = (\n  props: WithRequired<Partial<TableCaptionElement>, 'id'>\n): TableCaptionElement => ({\n  type: ELEMENT_TABLE_CAPTION,\n  children: [\n    {\n      id: nanoid(),\n      type: ELEMENT_TABLE_VARIABLE_NAME,\n      children: [{ text: '' }],\n    },\n  ],\n  ...props,\n});\n","import { SerializedType, Unit } from '@decipad/computer';\n\ntype LegacyUnits = { type: 'units'; args: Unit[] };\nconst isLegacyUnitObject = (\n  unit: Unit[] | LegacyUnits | null | undefined\n): unit is LegacyUnits =>\n  unit != null &&\n  'type' in unit &&\n  'args' in unit &&\n  unit.type === 'units' &&\n  Array.isArray(unit.args);\n\nexport const convertLegacyType = (\n  type: SerializedType\n): SerializedType | undefined => {\n  /* Keep up with the august 2022 language refactor that changed number units */\n  if (type.kind === 'number' && isLegacyUnitObject(type.unit)) {\n    return { kind: 'number', unit: type.unit.args };\n  }\n\n  return undefined;\n};\n","import {\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  ELEMENT_TABLE_VARIABLE_NAME,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  MyEditor,\n  TableCaptionElement,\n  TableCellElement,\n  TableColumnFormulaElement,\n  TableElement,\n  TableHeaderElement,\n  TableRowElement,\n  TableVariableNameElement,\n} from '@decipad/editor-types';\nimport {\n  insertNodes,\n  isElementOfType,\n  normalizeIdentifierElement,\n} from '@decipad/editor-utils';\nimport {\n  ChildOf,\n  deleteText,\n  getChildren,\n  getNodeChildren,\n  hasNode,\n  isElement,\n  isText,\n  setNodes,\n  TNodeEntry,\n  unwrapNodes,\n  wrapNodes,\n} from '@udecode/plate';\nimport { enumerate } from '@decipad/utils';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport { createTableCaption } from './createTableCaption';\nimport { convertLegacyType } from './convertLegacyType';\n\nconst normalizeTableStructure = (\n  editor: MyEditor,\n  [node, path]: TNodeEntry<TableElement>\n): boolean => {\n  const [caption, header, ...body] = node.children;\n\n  // caption\n  if (!caption) {\n    insertNodes<TableCaptionElement>(\n      editor,\n      createTableCaption({ id: node.id }),\n      { at: [...path, 0] }\n    );\n    return true;\n  }\n  if (caption.type !== ELEMENT_TABLE_CAPTION) {\n    deleteText(editor, { at: [...path, 0] });\n    return true;\n  }\n\n  // header\n  if (!header) {\n    insertNodes(\n      editor,\n      {\n        id: nanoid(),\n        type: ELEMENT_TR,\n        children: [\n          {\n            id: nanoid(),\n            type: ELEMENT_TH,\n            cellType: {\n              kind: 'string',\n            },\n            children: [{ text: '' }],\n          },\n        ],\n      } as unknown as TableRowElement,\n      { at: [...path, 1] }\n    );\n    return true;\n  }\n\n  if (header.type !== ELEMENT_TR) {\n    deleteText(editor, { at: [...path, 1] });\n    return true;\n  }\n\n  // body\n  let rowIndex = -1;\n  for (const row of body) {\n    rowIndex += 1;\n    if (row.type !== ELEMENT_TR) {\n      deleteText(editor, { at: [...path, 2 + rowIndex] });\n    }\n  }\n\n  return false;\n};\n\nconst normalizeTableCaption = (\n  editor: MyEditor,\n  entry: TNodeEntry<TableElement>\n): boolean => {\n  const [caption] = getChildren(entry);\n  for (const [captionChildIndex, captionChild] of enumerate(\n    getChildren(caption)\n  )) {\n    const [captionChildNode, captionChildPath] = captionChild;\n    if (\n      captionChildIndex === 0 &&\n      isElement(captionChildNode) &&\n      !isElementOfType(captionChildNode, ELEMENT_TABLE_VARIABLE_NAME)\n    ) {\n      insertNodes(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_TABLE_VARIABLE_NAME,\n          children: [{ text: '' }],\n        },\n        { at: [...caption[1], 0] }\n      );\n      return true;\n    }\n\n    if (isText(captionChildNode)) {\n      wrapNodes<TableVariableNameElement | TableColumnFormulaElement>(\n        editor,\n        {\n          id: nanoid(),\n          type:\n            captionChildIndex === 0\n              ? ELEMENT_TABLE_VARIABLE_NAME\n              : ELEMENT_TABLE_COLUMN_FORMULA,\n          children: [captionChildNode],\n        } as TableVariableNameElement,\n        { at: captionChildPath }\n      );\n      return true;\n    }\n  }\n\n  const [varName] = getChildren(caption);\n  const [varNameText] = getChildren(varName);\n  return normalizeIdentifierElement(editor, varNameText);\n};\n\nconst normalizeTableHeaderCell = (\n  editor: MyEditor,\n  path: Path,\n  th: TableHeaderElement\n): boolean => {\n  if (isText(th)) {\n    wrapNodes<TableHeaderElement>(\n      editor,\n      {\n        id: th.id,\n        type: ELEMENT_TH,\n        cellType: {\n          kind: 'string',\n        },\n        children: [th],\n      },\n      {\n        at: path,\n      }\n    );\n    return true;\n  }\n\n  if (isElement(th) && th.type !== ELEMENT_TH) {\n    const replaceWith: Partial<TableHeaderElement> = {\n      type: ELEMENT_TH,\n    };\n    setNodes(editor, replaceWith, {\n      at: path,\n    });\n    return true;\n  }\n\n  if (!th.cellType) {\n    const insert: Partial<TableHeaderElement> = {\n      cellType: { kind: 'string' },\n    };\n    setNodes(editor, insert, {\n      at: path,\n    });\n    return true;\n  }\n\n  if (typeof th.cellType === 'string') {\n    const insert: Partial<TableHeaderElement> = {\n      cellType: { kind: th.cellType },\n    };\n    setNodes(editor, insert, {\n      at: path,\n    });\n    return true;\n  }\n\n  if (th.cellType.kind === 'number') {\n    const newCellType = convertLegacyType(th.cellType);\n    if (newCellType) {\n      setNodes(editor, { cellType: newCellType }, { at: path });\n      return true;\n    }\n  }\n\n  let childIndex = -1;\n  for (const el of th.children || []) {\n    childIndex += 1;\n    if (isElement(el) && el.type === ELEMENT_TABLE_COLUMN_FORMULA) {\n      break;\n    }\n    if (!isText(el)) {\n      unwrapNodes(editor, { at: [...path, childIndex] });\n      return true;\n    }\n  }\n\n  const [text] = getChildren([th, path]);\n  return normalizeIdentifierElement(editor, text);\n};\n\nconst normalizeTableHeaderRow = (\n  editor: MyEditor,\n  [node, path]: TNodeEntry<TableElement>\n): boolean => {\n  const headerRow = node.children[1];\n  const headerRowPath = [...path, 1];\n  if (headerRow.type !== ELEMENT_TR) {\n    setNodes(\n      editor,\n      { type: ELEMENT_TR },\n      {\n        at: headerRowPath,\n      }\n    );\n    return true;\n  }\n\n  let thIndex = -1;\n  for (const th of headerRow.children) {\n    thIndex += 1;\n    const thPath = [...headerRowPath, thIndex];\n    if (normalizeTableHeaderCell(editor, thPath, th)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst normalizeTableDataCell = (\n  editor: MyEditor,\n  [node, path]: TNodeEntry<TableCellElement>\n): boolean => {\n  if (isText(node)) {\n    wrapNodes(\n      editor,\n      {\n        id: node.id,\n        type: ELEMENT_TD,\n        children: [node],\n      },\n      {\n        at: path,\n      }\n    );\n    return true;\n  }\n\n  if (node.type !== ELEMENT_TD) {\n    setNodes(\n      editor,\n      { type: ELEMENT_TD },\n      {\n        at: path,\n      }\n    );\n    return true;\n  }\n\n  let childIndex = -1;\n  for (const el of node.children || []) {\n    childIndex += 1;\n    if (!isText(el)) {\n      unwrapNodes(editor, { at: [...path, childIndex] });\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst normalizeTableDataRow = (\n  editor: MyEditor,\n  [, path]: TNodeEntry<TableRowElement>\n): boolean => {\n  for (const [cell, cellPath] of getNodeChildren<ChildOf<TableRowElement>>(\n    editor,\n    path\n  )) {\n    if (normalizeTableDataCell(editor, [cell, cellPath])) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst normalizeTableDataRows = (\n  editor: MyEditor,\n  [, path]: TNodeEntry<TableElement>\n): boolean => {\n  for (const [row, rowPath] of Array.from(\n    getNodeChildren<ChildOf<TableElement, 2>>(editor, path)\n  ).slice(2)) {\n    if (row.type !== ELEMENT_TR) {\n      setNodes(\n        editor,\n        { type: ELEMENT_TR },\n        {\n          at: rowPath,\n        }\n      );\n      return true;\n    }\n    if (normalizeTableDataRow(editor, [row, rowPath])) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst normalizeTableRowColumnCount = (\n  editor: MyEditor,\n  [, path]: TNodeEntry<TableElement>\n): boolean => {\n  let rowIndex = -1;\n  let columnCount = -1;\n  for (const [row, rowPath] of Array.from(getNodeChildren(editor, path)).slice(\n    1\n  )) {\n    rowIndex += 1;\n    if (!isElement(row)) {\n      return false;\n    }\n    const rowChildCount = row.children?.length;\n    if (rowIndex === 0 && columnCount < 0) {\n      columnCount = rowChildCount;\n    } else if (columnCount >= 0) {\n      if (rowChildCount > columnCount) {\n        const deleteAt = [...rowPath, columnCount];\n        deleteText(editor, { at: deleteAt });\n        return true;\n      }\n      if (rowChildCount < columnCount) {\n        const insertAt = [...rowPath, rowChildCount];\n        insertNodes(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_TD,\n            children: [{ text: '' }],\n          },\n          { at: insertAt }\n        );\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst normalizeTableRowCount = (\n  editor: MyEditor,\n  [, path]: TNodeEntry<TableElement>\n): boolean => {\n  // at least two rows of data\n  for (const rowIndex of [2]) {\n    const firstDataRowPath = [...path, rowIndex];\n    if (!hasNode(editor, firstDataRowPath)) {\n      insertNodes(\n        editor,\n        {\n          id: nanoid(),\n          type: ELEMENT_TR,\n          children: [\n            {\n              id: nanoid(),\n              type: ELEMENT_TD,\n              children: [{ text: '' }],\n            },\n          ],\n        },\n        { at: firstDataRowPath }\n      );\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const normalizeTable = (\n  editor: MyEditor,\n  entry: TNodeEntry<TableElement>\n): boolean => {\n  return (\n    normalizeTableStructure(editor, entry) ||\n    normalizeTableCaption(editor, entry) ||\n    normalizeTableHeaderRow(editor, entry) ||\n    normalizeTableDataRows(editor, entry) ||\n    normalizeTableRowColumnCount(editor, entry) ||\n    normalizeTableRowCount(editor, entry)\n  );\n};\n","import { createNormalizerPluginFactory } from '@decipad/editor-plugins';\nimport {\n  ELEMENT_TABLE,\n  DEPRECATED_ELEMENT_TABLE_INPUT,\n  MyEditor,\n  MyNodeEntry,\n  DeprecatedTableInputElement,\n} from '@decipad/editor-types';\nimport { deleteText, isElement, TNodeEntry } from '@udecode/plate';\nimport { insertNodes } from '@decipad/editor-utils';\nimport { tableFromLegacyTableInputElement } from '../utils/tableFromLegacyTableInputElement';\nimport { normalizeTable } from '../utils/normalizeTable';\n\nconst normalizeTableInput = (\n  editor: MyEditor,\n  entry: TNodeEntry<DeprecatedTableInputElement>\n) => {\n  const [element, path] = entry;\n  const table = tableFromLegacyTableInputElement(element);\n  deleteText(editor, { at: path });\n  insertNodes(editor, table, { at: path });\n};\n\nexport const normalizeTables =\n  (editor: MyEditor) =>\n  (entry: MyNodeEntry): boolean => {\n    const [node, path] = entry;\n    if (\n      !isElement(node) ||\n      (node.type !== DEPRECATED_ELEMENT_TABLE_INPUT &&\n        node.type !== ELEMENT_TABLE)\n    ) {\n      return false;\n    }\n    if (node.type === DEPRECATED_ELEMENT_TABLE_INPUT) {\n      normalizeTableInput(editor, [node, path]);\n      return true;\n    }\n    if (node.type === ELEMENT_TABLE) {\n      return normalizeTable(editor, [node, path]);\n    }\n    return false;\n  };\n\nexport const createNormalizeTablesPlugin = createNormalizerPluginFactory({\n  name: 'NORMALIZE_TABLES_PLUGIN',\n  plugin: normalizeTables,\n});\n","import { nanoid } from 'nanoid';\nimport {\n  ELEMENT_TABLE,\n  TableHeaderRowElement,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  TableHeaderElement,\n  TableRowElement,\n  ELEMENT_TD,\n  TableElement,\n  DeprecatedTableInputElement,\n  ELEMENT_TABLE_CAPTION,\n  TableCaptionElement,\n  ELEMENT_TABLE_VARIABLE_NAME,\n} from '@decipad/editor-types';\n\nexport const tableFromLegacyTableInputElement = (\n  element: DeprecatedTableInputElement\n): TableElement => {\n  const { tableData } = element;\n  const headers: TableHeaderElement[] = [];\n  for (const column of tableData.columns) {\n    headers.push({\n      id: nanoid(),\n      type: ELEMENT_TH,\n      cellType: column.cellType,\n      children: [{ text: column.columnName }],\n    });\n  }\n  const rows: TableRowElement[] = [];\n  if (tableData.columns.length > 0) {\n    const restOfTableColumns = tableData.columns.slice(1);\n    const [firstColumn] = tableData.columns;\n    firstColumn.cells.forEach((firstColumnCell, rowIndex) => {\n      const rowCells = [\n        firstColumnCell,\n        ...restOfTableColumns.map((column) => column.cells[rowIndex]),\n      ];\n      rows.push({\n        id: nanoid(),\n        type: ELEMENT_TR,\n        children: rowCells.map((rowCell) => ({\n          id: nanoid(),\n          type: ELEMENT_TD,\n          children: [{ text: rowCell }],\n        })),\n      });\n    });\n  }\n  const tableHeader: TableHeaderRowElement = {\n    id: nanoid(),\n    type: ELEMENT_TR,\n    children: headers,\n  };\n\n  const caption: TableCaptionElement = {\n    id: nanoid(),\n    type: ELEMENT_TABLE_CAPTION,\n    children: [\n      {\n        id: nanoid(),\n        type: ELEMENT_TABLE_VARIABLE_NAME,\n        children: [{ text: tableData.variableName }],\n      },\n    ],\n  };\n\n  return {\n    id: element.id,\n    type: ELEMENT_TABLE,\n    children: [caption, tableHeader, ...rows],\n  };\n};\n","import { createOnKeyDownPluginFactory } from '@decipad/editor-plugins';\nimport { BlockElement, ELEMENT_TD, ELEMENT_TH } from '@decipad/editor-types';\nimport { getBlockAbove, getPointAfter, select } from '@udecode/plate';\n\nexport const createPreventEnterToCreateCellPlugin =\n  createOnKeyDownPluginFactory({\n    name: 'PREVENT_ENTER_TO_CREATE_CELL_PLUGIN',\n    plugin: (editor) => (event) => {\n      if (event.code === 'Enter') {\n        const entry = getBlockAbove<BlockElement>(editor);\n        if (!entry) return false;\n        const [node, path] = entry;\n        if (node.type === ELEMENT_TD || node.type === ELEMENT_TH) {\n          const after = getPointAfter(editor, path);\n          if (after) {\n            select(editor, after);\n          }\n          event.stopPropagation();\n          event.preventDefault();\n          return true;\n        }\n      }\n      return false;\n    },\n  });\n","import { createOnKeyDownPluginFactory } from '@decipad/editor-plugins';\nimport {\n  BlockElement,\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n} from '@decipad/editor-types';\nimport {\n  getBlockAbove,\n  getEndPoint,\n  getStartPoint,\n  isCollapsed,\n} from '@udecode/plate';\nimport { Point } from 'slate';\n\nexport const createPreventDestructiveDeleteOnTablePlugin =\n  createOnKeyDownPluginFactory({\n    name: 'CREATE_PREVENT_DESTRUCTIVE_ON_TABLE_PLUGIN',\n    plugin: (editor) => (event) => {\n      if (event.code === 'Delete' || event.code === 'Backspace') {\n        const isInsideTable = getBlockAbove<BlockElement>(editor, {\n          match: { type: ELEMENT_TABLE },\n        });\n        const isInsideTableColumnFormula = getBlockAbove<BlockElement>(editor, {\n          match: { type: ELEMENT_TABLE_COLUMN_FORMULA },\n        });\n\n        if (\n          !editor.selection ||\n          !isCollapsed(editor.selection) ||\n          isInsideTableColumnFormula ||\n          !isInsideTable\n        ) {\n          return false;\n        }\n        const { focus } = editor.selection;\n        const avoidActionAtPoint =\n          event.code === 'Delete'\n            ? getEndPoint(editor, focus.path)\n            : getStartPoint(editor, focus.path);\n        if (Point.equals(editor.selection.focus, avoidActionAtPoint)) {\n          event.stopPropagation();\n          event.preventDefault();\n          return true;\n        }\n      }\n      return false;\n    },\n  });\n","import { createOnKeyDownPluginFactory } from '@decipad/editor-plugins';\nimport {\n  BlockElement,\n  ELEMENT_TD,\n  MyEditor,\n  MyElement,\n  TableCellType,\n} from '@decipad/editor-types';\nimport { last } from '@decipad/utils';\nimport { getBlockAbove } from '@udecode/plate';\nimport { Node, Path } from 'slate';\nimport { changeColumnType } from '../utils/changeColumnType';\n\nconst TRIGGER_KEY = '=';\n\nexport const createCellFormulaShortcutPlugin = createOnKeyDownPluginFactory({\n  name: 'ARROW_CELL_FORMULA_SHORTCUT_PLUGIN',\n  plugin: (editor: MyEditor) => (event) => {\n    if (event.key !== TRIGGER_KEY) return false;\n    const entry = getBlockAbove<BlockElement>(editor);\n    if (!entry) return false;\n\n    const [node, path] = entry;\n    const element: MyElement = node;\n    const columnIndex = last(path);\n\n    // can't have formulas on first column\n    if (columnIndex == null || columnIndex === 0) return false;\n    if (element.type !== ELEMENT_TD) return false;\n\n    const content = Node.string(element).trim();\n\n    if (content) return false;\n\n    const tablePath = getTablePathFromCell(path);\n    const cellType: TableCellType = { kind: 'table-formula' };\n\n    changeColumnType(editor, tablePath, cellType, columnIndex);\n\n    return false;\n  },\n});\n\nconst getTablePathFromCell = (path: Path): Path => {\n  return path.slice(0, 1);\n};\n","import { DragEvent } from 'react';\nimport {\n  CodeLineElement,\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_LIC,\n  ELEMENT_PARAGRAPH,\n  MARK_MAGICNUMBER,\n  MyEditor,\n  MyElement,\n  MyText,\n} from '@decipad/editor-types';\nimport {\n  getSlateFragment,\n  insertNodes,\n  selectEventRange,\n} from '@decipad/editor-utils';\nimport { getBlockAbove, isElementEmpty, removeNodes } from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { dndStore } from '@udecode/plate-ui-dnd';\nimport { DRAG_SMART_CELL_RESULT } from '../components/SmartColumnCell/onDragSmartCellResultStarted';\n\ntype DragCellData = string;\n\nexport const onDropSmartCellResult =\n  (editor: MyEditor) => (event: DragEvent) => {\n    if (editor.dragging === DRAG_SMART_CELL_RESULT) {\n      // eslint-disable-next-line no-param-reassign\n      editor.dragging = null;\n\n      dndStore.set.isDragging(false);\n      event.preventDefault();\n      event.stopPropagation();\n\n      selectEventRange(editor)(event);\n\n      const fragment = getSlateFragment(\n        event.dataTransfer\n      ) as unknown as DragCellData[];\n      if (!fragment) return;\n\n      const filteredFragment: MyText[] = [];\n\n      fragment.forEach((data) => {\n        const blockAbove = getBlockAbove(editor) ?? [];\n        const [block, blockPath] = blockAbove;\n        if (!block) return;\n\n        const text = data;\n\n        if (\n          block.type === ELEMENT_CODE_LINE ||\n          block.type === ELEMENT_CODE_LINE_V2_CODE\n        ) {\n          filteredFragment.push({\n            text,\n          });\n        } else if (\n          block.type === ELEMENT_PARAGRAPH ||\n          block.type === ELEMENT_LIC\n        ) {\n          filteredFragment.push({\n            text,\n            [MARK_MAGICNUMBER]: true,\n          });\n        } else {\n          if (isElementEmpty(editor, block as MyElement)) {\n            removeNodes(editor, { at: blockPath });\n          }\n          insertNodes(editor, {\n            id: nanoid(),\n            type: ELEMENT_CODE_LINE,\n            children: [\n              {\n                text,\n              },\n            ],\n          } as CodeLineElement);\n        }\n      });\n\n      editor.insertFragment(filteredFragment);\n    }\n  };\n","/* eslint-disable no-param-reassign */\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  getMyEditor,\n  MyElement,\n  MyValue,\n  MyWithOverride,\n  TableHeaderRowElement,\n} from '@decipad/editor-types';\nimport {\n  isElement,\n  someNode,\n  withDeleteTable,\n  withGetFragmentTable,\n  withInsertFragmentTable,\n  withInsertTextTable,\n  withSelectionTable,\n} from '@udecode/plate';\nimport { createTableCaption } from '../utils/createTableCaption';\n\nconst createEmptyTableHeaderCell = () => ({\n  type: ELEMENT_TH,\n  cellType: {\n    kind: 'string',\n  },\n  children: [{ text: '' }],\n});\n\nexport const withTable: MyWithOverride = (editor, plugin) => {\n  editor = withDeleteTable<MyValue>(editor);\n  editor = withGetFragmentTable<MyValue>(editor);\n  editor = withInsertFragmentTable<MyValue>(editor, plugin);\n  editor = withInsertTextTable<MyValue>(editor, plugin);\n  editor = withSelectionTable<MyValue>(editor);\n\n  const myEditor = getMyEditor(editor);\n  const { insertFragment } = myEditor;\n\n  /**\n   * If not in a table and inserted table has no caption:\n   * - add a table caption as first child\n   * - add an empty header row if first row is not composed of th\n   */\n  myEditor.insertFragment = (fragment) => {\n    if (!someNode(editor, { match: { type: ELEMENT_TABLE } })) {\n      fragment = fragment.map((node) => {\n        if (isElement(node) && node.type === ELEMENT_TABLE) {\n          if (!node.children.length) return node;\n\n          if (node.children[0].type !== ELEMENT_TABLE_CAPTION) {\n            const isHeaderRow = node.children[0].children.every(\n              (cell) => (cell as MyElement).type === ELEMENT_TH\n            );\n\n            if (!isHeaderRow) {\n              const cells = Array.from(\n                { length: node.children[0].children.length },\n                createEmptyTableHeaderCell\n              );\n\n              node.children.unshift({\n                type: ELEMENT_TR,\n                children: cells,\n              } as unknown as TableHeaderRowElement);\n            }\n\n            node.children.unshift(\n              createTableCaption({\n                id: node.id,\n              })\n            );\n          }\n        }\n\n        return node;\n      });\n    }\n\n    insertFragment(fragment);\n  };\n\n  return editor;\n};\n","import {\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  MyKeyboardHandler,\n} from '@decipad/editor-types';\nimport isHotkey from 'is-hotkey';\nimport {\n  findNode,\n  moveSelection,\n  onKeyDownTable as onKeyDownTablePlate,\n} from '@udecode/plate';\nimport { Path } from 'slate';\nimport { addColumn } from '../hooks/index';\n\nexport const onKeyDownTable: MyKeyboardHandler =\n  (editor, plugin) => (event) => {\n    onKeyDownTablePlate(editor, plugin)(event);\n\n    if (isHotkey('shift+enter', event)) {\n      const entry = findNode(editor, {\n        match: { type: ELEMENT_TABLE_COLUMN_FORMULA },\n      });\n\n      if (entry) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const [, path] = entry;\n\n        addColumn(editor, {\n          tablePath: Path.parent(Path.parent(path)),\n          cellType: { kind: 'table-formula' },\n        });\n        moveSelection(editor);\n      }\n    }\n  };\n","import {\n  ELEMENT_TABLE,\n  ELEMENT_TABLE_CAPTION,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n  MyPlatePlugin,\n  MyValue,\n} from '@decipad/editor-types';\nimport { Computer } from '@decipad/computer';\nimport { decorateCode } from '@decipad/editor-utils';\nimport { TablePlugin } from '@udecode/plate';\nimport { createEventInterceptorPluginFactory } from '@decipad/editor-plugins';\nimport {\n  Table,\n  TableCaption,\n  TableCell,\n  TableColumnFormula,\n  TableHeaderCell,\n  TableRow,\n} from '../components';\nimport { createNormalizeTableFormulaPlugin } from './createNormalizeTableFormulaPlugin';\n// import { createExtraColumnPlaceholderPlugin } from './createExtraColumnPlaceholderPlugin';\n// import { createExtraRowPlaceholderPlugin } from './createExtraRowPlaceholderPlugin';\nimport { createNormalizeTableFormulaAndSeriesCellsPlugin } from './createNormalizeTableFormulaAndSeriesCellsPlugin';\nimport { createNormalizeTablesPlugin } from './createNormalizeTablesPlugin';\nimport { createPreventEnterToCreateCellPlugin } from './createPreventEnterToCreateCellPlugin';\nimport { createPreventDestructiveDeleteOnTablePlugin } from './createPreventDestructiveDeleteOnTablePlugin';\nimport { createCellFormulaShortcutPlugin } from './createCellFormulaShortcutPlugin';\nimport { createCursorFocusPlugin } from './createCursorFocusPlugin';\nimport { onDropSmartCellResult } from './onDropSmartCellResult';\nimport { addColumn, addRow } from '../hooks/index';\nimport { withTable } from './withTable';\nimport { onKeyDownTable } from './onKeyDownTable';\n\ntype Attributes =\n  | {\n      colspan?: string;\n      rowspan?: string;\n    }\n  | undefined;\n\nexport const createTablePlugin = (\n  computer: Computer\n): MyPlatePlugin<TablePlugin<MyValue>> => ({\n  key: ELEMENT_TABLE,\n  isElement: true,\n  component: Table,\n  deserializeHtml: {\n    rules: [{ validNodeName: 'TABLE' }],\n  },\n  options: {\n    insertColumn: (editor, { fromCell }) => {\n      const tablePath = fromCell.slice(0, -2);\n      addColumn(editor, {\n        tablePath,\n      });\n    },\n    insertRow: (editor, { fromRow }) => {\n      const tablePath = fromRow.slice(0, -1);\n      addRow(editor, tablePath);\n    },\n  },\n  withOverrides: withTable,\n  handlers: {\n    onDrop: onDropSmartCellResult,\n    onKeyDown: onKeyDownTable,\n  },\n  plugins: [\n    createPreventEnterToCreateCellPlugin(),\n    createPreventDestructiveDeleteOnTablePlugin(),\n    // createArrowCellNavigationPlugin(),\n    createCursorFocusPlugin(),\n    // TODO: enable this\n    // createExtraColumnPlaceholderPlugin(),\n    // TODO: enable this\n    // createExtraRowPlaceholderPlugin(),\n    createCellFormulaShortcutPlugin(),\n    createNormalizeTableFormulaPlugin(computer),\n    createNormalizeTableFormulaAndSeriesCellsPlugin(computer),\n    createNormalizeTablesPlugin(),\n    {\n      key: ELEMENT_TABLE_CAPTION,\n      isElement: true,\n      component: TableCaption,\n    },\n    {\n      key: ELEMENT_TR,\n      isElement: true,\n      component: TableRow,\n      deserializeHtml: {\n        rules: [{ validNodeName: 'TR' }],\n      },\n    },\n    {\n      key: ELEMENT_TD,\n      isElement: true,\n      component: TableCell,\n      deserializeHtml: {\n        attributeNames: ['rowspan', 'colspan'],\n        rules: [{ validNodeName: 'TD' }],\n      },\n      props: ({ element }) => ({\n        nodeProps: {\n          colSpan: (element?.attributes as Attributes)?.colspan,\n          rowSpan: (element?.attributes as Attributes)?.rowspan,\n        },\n      }),\n    },\n    {\n      key: ELEMENT_TH,\n      isElement: true,\n      component: TableHeaderCell,\n      deserializeHtml: {\n        attributeNames: ['rowspan', 'colspan'],\n        rules: [{ validNodeName: 'TH' }],\n      },\n      props: ({ element }) => ({\n        nodeProps: {\n          colSpan: (element?.attributes as Attributes)?.colspan,\n          rowSpan: (element?.attributes as Attributes)?.rowspan,\n        },\n      }),\n    },\n    {\n      key: ELEMENT_TABLE_COLUMN_FORMULA,\n      isElement: true,\n      component: TableColumnFormula,\n      decorate: decorateCode(ELEMENT_TABLE_COLUMN_FORMULA),\n    },\n    createEventInterceptorPluginFactory({\n      name: 'INTERCEPT_TABLE',\n      elementTypes: [ELEMENT_TABLE],\n      interceptor: (_, _1, event) => {\n        if (event.type === 'on-enter') {\n          return false;\n        }\n        return true;\n      },\n    })(),\n  ],\n});\n","import { createTPluginFactory, MyEditor } from '@decipad/editor-types';\nimport { Path } from 'slate';\nimport { focusAndSetSelection, pluginStore } from '@decipad/editor-utils';\nimport { hasNode } from '@udecode/plate';\n\ntype FocusTargetFn = () => Path | null;\n\ninterface FocusTarget {\n  getPath?: FocusTargetFn;\n}\n\nconst PLUGIN_KEY = 'CURSOR_FOCUS_PLUGIN';\n\nexport const createCursorFocusPlugin = createTPluginFactory({\n  key: PLUGIN_KEY,\n  withOverrides: (editor) => {\n    const { onChange } = editor;\n\n    const target = pluginStore<FocusTarget>(editor, PLUGIN_KEY, () => ({}));\n    const focus = () => {\n      const path = target.getPath?.();\n\n      if (!path) return;\n      if (!hasNode(editor, path)) return;\n\n      focusAndSetSelection(editor, path);\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    editor.onChange = () => {\n      try {\n        focus();\n      } finally {\n        delete target.getPath;\n        onChange();\n      }\n    };\n\n    return editor;\n  },\n});\n\nexport const focusCursorOnPath = (editor: MyEditor, getPath: FocusTargetFn) => {\n  const target = pluginStore<FocusTarget>(editor, PLUGIN_KEY, () => ({}));\n\n  target.getPath = getPath;\n};\n","import { Path } from 'slate';\nimport {\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  TableElement,\n} from '@decipad/editor-types';\n\nexport const findTableFormulaPath = (\n  table: TableElement,\n  tablePath: Path,\n  columnIndex: number\n): Path | null => {\n  const columnColumnElement = table.children[1].children[columnIndex];\n  const formulaElement = table.children[0].children.findIndex(\n    (el) =>\n      el.type === ELEMENT_TABLE_COLUMN_FORMULA &&\n      el.columnId === columnColumnElement.id\n  );\n\n  if (formulaElement < 0) {\n    return null;\n  }\n\n  return [...tablePath, 0, formulaElement];\n};\n","import { Computer } from '@decipad/computer';\nimport {\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  ELEMENT_TH,\n  MyEditor,\n  TableCaptionElement,\n  TableCellType,\n  TableColumnFormulaElement,\n  TableElement,\n  TableHeaderElement,\n} from '@decipad/editor-types';\nimport { assertElementType, insertNodes } from '@decipad/editor-utils';\nimport { formatResultPreview } from '@decipad/format';\nimport {\n  ELEMENT_TD,\n  getNode,\n  getNodeEntry,\n  hasNode,\n  insertText,\n  setNodes,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport { focusCursorOnPath } from '../plugins/createCursorFocusPlugin';\nimport { findTableFormulaPath } from './findTableFormulaPath';\n\nexport const changeColumnType = (\n  editor: MyEditor,\n  path: Path,\n  cellType: TableCellType,\n  columnIndex: number,\n  computer?: Computer // Needed when changing from dropdown to other types\n) => {\n  withoutNormalizing(editor, () => {\n    if (cellType.kind === 'table-formula') {\n      focusCursorOnPath(editor, () => {\n        const table = getNode<TableElement>(editor, path);\n        return table && findTableFormulaPath(table, path, columnIndex);\n      });\n    }\n\n    const columnHeaderPath = [...path, 1, columnIndex];\n    if (hasNode(editor, columnHeaderPath)) {\n      const [node] = getNodeEntry(editor, columnHeaderPath);\n      assertElementType(node, ELEMENT_TH);\n\n      setNodes<TableHeaderElement>(\n        editor,\n        { cellType },\n        {\n          at: columnHeaderPath,\n        }\n      );\n\n      if (cellType.kind === 'dropdown') {\n        let counter = 2;\n        let entry = getNodeEntry(editor, [...path, counter, columnIndex]);\n        while (entry) {\n          entry = getNodeEntry(editor, [...path, counter, columnIndex]);\n          counter += 1;\n          if (!entry) continue;\n          assertElementType(entry[0], ELEMENT_TD);\n\n          insertText(editor, '', {\n            at: [...path, counter - 1, columnIndex, 0],\n          });\n        }\n      }\n\n      if (node.cellType.kind === 'dropdown' && computer) {\n        let counter = 2;\n        let entry = getNodeEntry(editor, [...path, counter, columnIndex]);\n        while (entry) {\n          entry = getNodeEntry(editor, [...path, counter, columnIndex]);\n          counter += 1;\n          if (!entry) continue;\n          assertElementType(entry[0], ELEMENT_TD);\n\n          const result = computer.getVarResult$.get(\n            entry[0].children[0].text\n          )?.result;\n          if (!result) continue;\n\n          const textResult = formatResultPreview(result);\n          insertText(editor, textResult, {\n            at: [...path, counter - 1, columnIndex, 0],\n          });\n        }\n      }\n\n      const tableCaptionPath = [...path, 0];\n      const caption = getNode<TableCaptionElement>(editor, tableCaptionPath);\n      if (!caption) {\n        return;\n      }\n      const newFormulaPath = [...tableCaptionPath, caption.children.length];\n      const maybePreviousPath = [\n        ...tableCaptionPath,\n        caption.children.length - 1,\n      ];\n      const headerId = getNode<TableHeaderElement>(\n        editor,\n        columnHeaderPath\n      )?.id;\n      if (headerId == null) {\n        return;\n      }\n      const maybePreviousNode = getNode<TableColumnFormulaElement>(\n        editor,\n        maybePreviousPath\n      );\n      if (\n        maybePreviousNode?.type === 'table-column-formula' &&\n        maybePreviousNode?.columnId === headerId\n      ) {\n        setNodes(\n          editor,\n          { type: 'table-column-formula' },\n          {\n            at: maybePreviousPath,\n          }\n        );\n      } else {\n        insertNodes(\n          editor,\n          {\n            id: nanoid(),\n            type: ELEMENT_TABLE_COLUMN_FORMULA,\n            children: [{ text: ' ' }],\n            columnId: headerId,\n          },\n          {\n            at: newFormulaPath,\n          }\n        );\n      }\n    }\n  });\n};\n","import { TableCellType } from '@decipad/editor-types';\nimport { TotalAggregationExpressions } from '../types';\n\nexport interface AggregationType {\n  name: string;\n  shortName?: string;\n  expression: (\n    colRef: string,\n    totalAggregationExpressions: TotalAggregationExpressions\n  ) => string;\n}\n\nconst aggregationTypes: { [type: string]: AggregationType[] } = {\n  boolean: [\n    {\n      name: 'Count true',\n      expression: (colRef) => `countif(${colRef} == true)`,\n    },\n    {\n      name: 'Count false',\n      expression: (colRef) => `countif(${colRef} == false)`,\n    },\n    {\n      name: 'Percent true',\n      expression: (colRef) =>\n        `countif(${colRef} == true) / count(${colRef}) in %`,\n    },\n    {\n      name: 'Percent false',\n      expression: (colRef) =>\n        `countif(${colRef} == false) / count(${colRef}) in %`,\n    },\n  ],\n\n  date: [\n    {\n      name: 'Earliest',\n      expression: (colRef) => `min(${colRef})`,\n    },\n    {\n      name: 'Latest',\n      expression: (colRef) => `max(${colRef})`,\n    },\n    {\n      name: `Time span`,\n      shortName: 'Span',\n      expression: (colRef) => `max(${colRef}) - min(${colRef})`,\n    },\n  ],\n  number: [\n    {\n      name: 'Sum',\n      expression: (colRef) => `sum(${colRef})`,\n    },\n    {\n      name: 'Maximum value',\n      shortName: 'Max',\n      expression: (colRef) => `max(${colRef})`,\n    },\n    {\n      name: 'Minimum value',\n      shortName: 'Min',\n      expression: (colRef) => `min(${colRef})`,\n    },\n    {\n      name: 'Average',\n      expression: (colRef) => `average(${colRef})`,\n    },\n    {\n      name: 'Median',\n      expression: (colRef) => `median(${colRef})`,\n    },\n    {\n      name: 'Span',\n      expression: (colRef) => `max(${colRef}) - min(${colRef})`,\n    },\n    {\n      name: 'Count unique values',\n      shortName: 'Unique',\n      expression: (colRef) => `count(unique(${colRef}))`,\n    },\n    {\n      name: '% of total',\n      shortName: 'Percent',\n      expression: (colDef, totalAggregationExpressions) =>\n        `sum(${colDef}) / (${totalAggregationExpressions.sum}) in %`,\n    },\n  ],\n  string: [\n    {\n      name: 'Count unique values',\n      shortName: 'Unique',\n      expression: (colRef) => `count(unique(${colRef}))`,\n    },\n  ],\n};\n\nexport const columnAggregationTypes = (\n  type: TableCellType\n): AggregationType[] => {\n  const kind = type.kind === 'series' ? 'date' : type.kind;\n  return aggregationTypes[kind] ?? [];\n};\n","import { Path } from 'slate';\nimport { getNodeChildren, getNodeString } from '@udecode/plate';\nimport { MyEditor } from '@decipad/editor-types';\n\nexport const getColumnNames = (editor: MyEditor, path: Path): Set<string> => {\n  const headerRowPath = [...path, 1];\n  return new Set(\n    Array.from(getNodeChildren(editor, headerRowPath)).map((th) =>\n      getNodeString(th[0])\n    )\n  );\n};\n","import { Path } from 'slate';\nimport { MyEditor } from '@decipad/editor-types';\nimport { getColumnNames } from './getColumnNames';\n\nexport const getColumnName = (\n  editor: MyEditor,\n  tablePath: Path,\n  start: number\n): string => {\n  const columnNames = getColumnNames(editor, tablePath);\n  let num = start;\n  const createProposal = () => `Property${num}`;\n  let proposal = createProposal();\n  while (columnNames.has(proposal)) {\n    num += 1;\n    proposal = createProposal();\n  }\n  return proposal;\n};\n","import { MyReactEditor } from '@decipad/editor-types';\nimport { DropTargetMonitor } from 'react-dnd';\nimport { TElement, toDOMNode } from '@udecode/plate';\nimport { MutableRefObject } from 'react';\nimport { ColumnDndDirection, DragColumnItem } from '../types';\n\nexport interface GetHoverDirectionOptions {\n  dragItem?: DragColumnItem;\n\n  monitor: DropTargetMonitor;\n\n  element?: TElement;\n\n  ref?: MutableRefObject<HTMLTableCellElement | null>;\n}\n\n/**\n * If dragging a block A over another block B:\n * get the direction of block A relative to block B.\n */\nexport const getHoverDirection = (\n  editor: MyReactEditor,\n  { monitor, element, dragItem, ref }: GetHoverDirectionOptions\n): ColumnDndDirection => {\n  if (dragItem) {\n    // Don't replace items with themselves\n    if (element && dragItem.id === element.id) return;\n  }\n\n  const node = element && toDOMNode(editor, element);\n  if (!node && !ref) return;\n\n  // Determine rectangle on screen\n  const hoverBoundingRect = node\n    ? node.getBoundingClientRect()\n    : ref && ref.current?.getBoundingClientRect();\n  if (!hoverBoundingRect) return;\n\n  // Get middle\n  const hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n\n  // Determine mouse position\n  const clientOffset = monitor.getClientOffset();\n  if (!clientOffset) return;\n\n  const hoverClientX = clientOffset.x - hoverBoundingRect.left;\n\n  if (hoverClientX < hoverMiddleX) {\n    return 'left';\n  }\n\n  if (hoverClientX >= hoverMiddleX) {\n    return 'right';\n  }\n\n  return undefined;\n};\n","import { DropTargetMonitor } from 'react-dnd';\nimport { findNodePath, getNodeChildren } from '@udecode/plate';\nimport { MyEditor, MyElement } from '@decipad/editor-types';\nimport { DragColumnItem } from '../types';\nimport { getHoverDirection } from '.';\n\nexport const findSwappableColumns = (\n  {\n    editor,\n    column,\n    table,\n  }: {\n    editor: MyEditor;\n    column: MyElement;\n    table: MyElement;\n  },\n  dragItem: DragColumnItem,\n  monitor: DropTargetMonitor,\n  hoverDirection?: 'left' | 'right'\n): [number, number] | null => {\n  const path = findNodePath(editor, table);\n\n  if (!path) {\n    return null;\n  }\n  const children = Array.from(getNodeChildren(editor, path));\n  const firstRow = children[1];\n  if (!firstRow) {\n    return null;\n  }\n  const columns = Array.from(getNodeChildren(editor, firstRow[1]));\n  const sourceColumnIndex = columns.findIndex(\n    (col) => dragItem.id === (col[0] as MyElement).id\n  );\n  const targetColumnIndex = columns.findIndex(\n    (col) => column.id === (col[0] as MyElement).id\n  );\n  if (sourceColumnIndex >= 0 && targetColumnIndex >= 0) {\n    const direction =\n      hoverDirection ||\n      getHoverDirection(editor, {\n        monitor,\n        dragItem,\n        element: column,\n      });\n    let swappableColumns: [number, number] = [\n      sourceColumnIndex,\n      direction === 'right' ? targetColumnIndex + 1 : targetColumnIndex,\n    ];\n    if (swappableColumns[0] < swappableColumns[1]) {\n      swappableColumns = [swappableColumns[0], swappableColumns[1] - 1];\n    }\n    if (swappableColumns[0] === swappableColumns[1]) {\n      return null;\n    }\n    return swappableColumns;\n  }\n  return null;\n};\n","import { MyEditor, MyElement } from '@decipad/editor-types';\nimport { findNodePath, getNodeChildren } from '@udecode/plate';\nimport { DragColumnItem } from '../types';\n\nexport const findColumnByCell = (\n  editor: MyEditor,\n  table: MyElement,\n  cell: DragColumnItem\n): MyElement | null => {\n  const path = findNodePath(editor, table);\n  if (!path) return null;\n\n  const children = Array.from(getNodeChildren(editor, path));\n  const firstRow = children[1];\n\n  if (!firstRow) return null;\n\n  const colHeaderElements: Record<number, MyElement> = {};\n\n  Array.from(getNodeChildren(editor, firstRow[1])).forEach(([r], idx) => {\n    colHeaderElements[idx] = r;\n  });\n\n  const colIdx = children\n    .map(([, rowPath]) => {\n      const cells = Array.from(getNodeChildren(editor, rowPath));\n      return cells.findIndex(([c, _p]) => c.id === cell.id);\n    })\n    .find((e) => e >= 0);\n\n  if (colIdx == null) return null;\n\n  return colHeaderElements[colIdx];\n};\n","import { TableCellType } from '@decipad/editor-types';\nimport { SerializedType } from '@decipad/computer';\n\nexport const isCellAlignRight = (cellType?: TableCellType | SerializedType) =>\n  cellType?.kind && ['number', 'boolean', 'date'].includes(cellType.kind);\n","export const DECORATE_CODE_VARIABLE = 'decorate_code_variable';\nexport const DECORATE_SYNTAX_ERROR = 'decorate_syntax_error';\nexport const DECORATE_POTENTIAL_FORMULA = 'decorate_potential_formula';\nexport const DECORATE_AUTO_COMPLETE_MENU = 'decorate_auto_complete_menu';\n","export {\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_HIGHLIGHT,\n  MARK_ITALIC,\n  MARK_STRIKETHROUGH,\n  MARK_UNDERLINE,\n} from '@udecode/plate';\n\nexport const MARK_MAGICNUMBER = 'magicnumberz';\nexport const MARK_SPOILER = 'spoiler';\n","import { TElement, TImageElement, TMediaEmbedElement } from '@udecode/plate';\nimport { Unit } from '@decipad/language';\nimport {\n  DEPRECATED_ELEMENT_CODE_BLOCK,\n  DEPRECATED_ELEMENT_TABLE_INPUT,\n  ElementKind,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_CODE_LINE,\n  ELEMENT_COLUMNS,\n  ELEMENT_EVAL,\n  ELEMENT_FETCH,\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  ELEMENT_IMAGE,\n  ELEMENT_INLINE_NUMBER,\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_LINK,\n  ELEMENT_MEDIA_EMBED,\n  ELEMENT_OL,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_PLOT,\n  ELEMENT_TABLE,\n  ELEMENT_UL,\n  EvalElement,\n  InteractiveElement,\n  MarkKind,\n} from '.';\nimport {\n  DataViewCaptionElement,\n  DataViewElement,\n  DataViewHeader,\n  DataViewHeaderRowElement,\n  DataViewNameElement,\n} from './data-view';\nimport {\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_VARNAME,\n  ELEMENT_DATA_VIEW,\n  ELEMENT_DRAW,\n  ELEMENT_IMPORT,\n  ELEMENT_LIVE_CONNECTION,\n  ELEMENT_SMART_REF,\n  ELEMENT_STRUCTURED_IN,\n  ELEMENT_STRUCTURED_IN_CHILD,\n  ELEMENT_VARIABLE_DEF,\n} from './element-kinds';\nimport {\n  CaptionElement,\n  DisplayElement,\n  DropdownElement,\n  ExpressionElement,\n  LiveConnectionVarNameElement,\n  SliderElement,\n  VariableDefinitionElement,\n} from './interactive-elements';\nimport {\n  DeprecatedTableInputElement,\n  TableCaptionElement,\n  TableCellElement,\n  TableColumnFormulaElement,\n  TableElement,\n  TableHeaderElement,\n  TableHeaderRowElement,\n  TableRowElement,\n  TableVariableNameElement,\n} from './table';\nimport { DrawElement, DrawElements, DrawElementDescendant } from './draw';\n\nexport type { DrawElement, DrawElements, DrawElementDescendant };\n\n// Defining specific elements\n\nexport interface BaseElement extends TElement {\n  type: ElementKind;\n  id: string;\n  isHidden?: boolean;\n}\n\n// Headings\nexport interface H1Element extends BaseElement {\n  type: typeof ELEMENT_H1;\n  children: PlainTextChildren;\n}\nexport interface H2Element extends BaseElement {\n  type: typeof ELEMENT_H2;\n  children: PlainTextChildren;\n}\nexport interface H3Element extends BaseElement {\n  type: typeof ELEMENT_H3;\n  children: PlainTextChildren;\n}\n\n// Text blocks\nexport interface ParagraphElement extends BaseElement {\n  type: typeof ELEMENT_PARAGRAPH;\n  children: InlineChildren;\n}\nexport interface BlockquoteElement extends BaseElement {\n  type: typeof ELEMENT_BLOCKQUOTE;\n  children: InlineChildren;\n}\nexport interface CalloutElement extends BaseElement {\n  type: typeof ELEMENT_CALLOUT;\n  children: InlineChildren;\n  icon?: string;\n  color?: string;\n}\nexport interface DividerElement extends BaseElement {\n  type: typeof ELEMENT_HR;\n  children: [EmptyText];\n}\n\n// Media Blocks\nexport interface ImageElement extends TImageElement, BaseElement {\n  type: typeof ELEMENT_IMAGE;\n  children: [EmptyText];\n}\nexport interface MediaEmbedElement extends TMediaEmbedElement, BaseElement {\n  type: typeof ELEMENT_MEDIA_EMBED;\n  children: [EmptyText];\n}\n\n// Code\nexport interface CodeLineElement extends BaseElement {\n  type: typeof ELEMENT_CODE_LINE;\n  children: Array<PlainText | SmartRefElement>;\n}\nexport interface CodeLineV2Element extends BaseElement {\n  type: typeof ELEMENT_CODE_LINE_V2;\n  unit?: '%' | Unit[];\n  children: [StructuredVarnameElement, CodeLineV2ElementCode];\n}\nexport interface StructuredVarnameElement extends BaseElement {\n  type: typeof ELEMENT_STRUCTURED_VARNAME;\n  children: [PlainText];\n}\nexport interface CodeLineV2ElementCode extends BaseElement {\n  type: typeof ELEMENT_CODE_LINE_V2_CODE;\n  children: Array<PlainText | SmartRefElement>;\n}\nexport interface DeprecatedCodeBlockElement extends BaseElement {\n  type: typeof DEPRECATED_ELEMENT_CODE_BLOCK;\n  children: Array<CodeLineElement>;\n}\n\nexport interface StructuredInputElement extends BaseElement {\n  type: typeof ELEMENT_STRUCTURED_IN;\n  unit?: string | Unit[];\n  children: [StructuredVarnameElement, StructuredInputElementChildren];\n}\n\nexport interface StructuredInputElementChildren extends BaseElement {\n  type: typeof ELEMENT_STRUCTURED_IN_CHILD;\n  children: [PlainText];\n}\n\n// Lists\nexport interface UnorderedListElement extends BaseElement {\n  type: typeof ELEMENT_UL;\n  children: Array<ListItemElement>;\n}\nexport interface OrderedListElement extends BaseElement {\n  type: typeof ELEMENT_OL;\n  children: Array<ListItemElement>;\n}\n\nexport type ListElement = UnorderedListElement | OrderedListElement;\n\nexport interface ListItemElement extends BaseElement {\n  type: typeof ELEMENT_LI;\n  children: [ListItemContentElement];\n}\nexport interface ListItemContentElement extends BaseElement {\n  type: typeof ELEMENT_LIC;\n  children: InlineChildren;\n}\n\n// Inline\nexport interface LinkElement extends BaseElement {\n  type: typeof ELEMENT_LINK;\n  children: Array<RichText>;\n  url: string;\n}\n\nexport interface InlineNumberElement extends BaseElement {\n  type: typeof ELEMENT_INLINE_NUMBER;\n  blockId: string;\n  children: [EmptyText];\n}\n\nexport interface SmartRefElement extends BaseElement {\n  type: typeof ELEMENT_SMART_REF;\n  lastSeenVariableName?: string;\n  blockId: string;\n  children: [PlainText];\n}\n\n// Layout\nexport interface ColumnsElement extends BaseElement {\n  type: typeof ELEMENT_COLUMNS;\n  children: [\n    VariableDefinitionElement,\n    VariableDefinitionElement,\n    ...Array<VariableDefinitionElement>\n  ];\n}\n\n// Overall node types\n\nexport type EmptyText = {\n  text: '';\n};\nexport type PlainText = EmptyText | { text: string };\nexport type RichText = PlainText & Partial<Record<MarkKind, true>>;\nexport type Text = PlainText | RichText;\n\nexport type BlockElement =\n  // Headings\n  | H1Element\n  | H2Element\n  | H3Element\n  // Text blocks\n  | ParagraphElement\n  | BlockquoteElement\n  | CalloutElement\n  | DividerElement\n  // Media\n  | ImageElement\n  | MediaEmbedElement\n  | DrawElement\n  // Code\n  | DeprecatedCodeBlockElement\n  | CodeLineElement\n  | CodeLineV2Element\n  // Lists\n  | UnorderedListElement\n  | OrderedListElement\n  | ListItemElement\n  | ListItemContentElement\n  // Layout\n  | ColumnsElement\n  // Special elements\n  | InteractiveElement\n  | LiveConnectionVarNameElement\n  // Table elements\n  | DeprecatedTableInputElement\n  | TableElement\n  | TableCaptionElement\n  | TableVariableNameElement\n  | TableRowElement\n  | TableHeaderRowElement\n  | TableHeaderElement\n  | TableCellElement\n  | ExpressionElement\n  | DisplayElement\n  | CaptionElement\n  | SliderElement\n  | DataViewElement\n  | DataViewHeaderRowElement\n  | DataViewHeader\n  | DropdownElement\n  | StructuredInputElement\n  | StructuredInputElementChildren\n  | TableColumnFormulaElement\n  // Draw Elements\n  | DrawElementDescendant;\n\ntype InlineElement = LinkElement | InlineNumberElement | SmartRefElement;\n\nexport type MyValue = [\n  H1Element,\n  ...Array<\n    | H1Element\n    | H2Element\n    | H3Element\n    | ParagraphElement\n    | BlockquoteElement\n    | InlineNumberElement\n    | SmartRefElement\n    | CalloutElement\n    | CodeLineElement\n    | CodeLineV2Element\n    | StructuredInputElement\n    | DividerElement\n    | EvalElement\n    | ImageElement\n    | MediaEmbedElement\n    | DrawElement\n    | DeprecatedCodeBlockElement\n    | UnorderedListElement\n    | OrderedListElement\n    | ColumnsElement\n    | InteractiveElement\n    | DataViewElement\n  >\n];\n\nexport type Document = {\n  children: MyValue;\n};\n\ntype InlineDescendant = InlineElement | RichText;\n\ntype InlineChildren = Array<InlineDescendant>;\ntype PlainTextChildren = [PlainText];\n\nexport type AnyElement =\n  | BlockElement\n  | InlineElement\n  | CodeLineV2ElementCode\n  | StructuredVarnameElement\n  | DataViewCaptionElement\n  | DataViewNameElement;\n\nexport const topLevelBlockKinds: string[] = [\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_HR,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_CALLOUT,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_IMAGE,\n  DEPRECATED_ELEMENT_CODE_BLOCK, // Legacy\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_STRUCTURED_IN,\n  ELEMENT_UL,\n  ELEMENT_OL,\n  DEPRECATED_ELEMENT_TABLE_INPUT,\n  ELEMENT_TABLE,\n  ELEMENT_DATA_VIEW,\n  ELEMENT_FETCH,\n  ELEMENT_PLOT,\n  ELEMENT_COLUMNS,\n  ELEMENT_EVAL,\n  ELEMENT_VARIABLE_DEF,\n  ELEMENT_LIVE_CONNECTION,\n  ELEMENT_IMPORT,\n  ELEMENT_DRAW,\n];\n","import {\n  AutoformatPlugin,\n  createAutoformatPlugin,\n  createPlateEditor,\n  CreatePlateEditorOptions,\n  createPluginFactory,\n  getTEditor,\n  NoInfer,\n  PlatePlugin,\n  PluginOptions,\n  useEditorRef,\n  usePlateEditorRef,\n  usePlateEditorState,\n  usePlateSelectors,\n} from '@udecode/plate';\nimport { MyValue } from './value';\nimport { MyEditor } from './nodes';\nimport { MyOverrideByKey, MyPlatePlugin } from './plate';\n\n/**\n * Plate store, Slate context\n */\n\nexport const getMyEditor = (editor: MyEditor) =>\n  getTEditor<MyValue, MyEditor>(editor);\nexport const useTEditorRef = () => useEditorRef<MyValue, MyEditor>();\nexport const useTPlateEditorRef = (id?: string) =>\n  usePlateEditorRef<MyValue, MyEditor>(id);\nexport const useTPlateEditorState = (id?: string) =>\n  usePlateEditorState<MyValue, MyEditor>(id);\nexport const useTPlateSelectors = (id?: string) =>\n  usePlateSelectors<MyValue, MyEditor>(id);\n\n/**\n * Utils\n */\n\nexport const createTPlateEditor = (\n  options: CreatePlateEditorOptions<MyValue, MyEditor> = {}\n) => createPlateEditor<MyValue, MyEditor>(options);\nexport const createTPluginFactory = <P = PluginOptions>(\n  defaultPlugin: PlatePlugin<NoInfer<P>, MyValue, MyEditor>\n) => createPluginFactory(defaultPlugin);\n\n/**\n * My plugins\n */\n\nexport const createTAutoformatPlugin = (\n  override?: Partial<MyPlatePlugin<AutoformatPlugin<MyValue, MyEditor>>>,\n  overrideByKey?: MyOverrideByKey\n) =>\n  createAutoformatPlugin<\n    AutoformatPlugin<MyValue, MyEditor>,\n    MyValue,\n    MyEditor\n  >(override, overrideByKey);\n","/* eslint-disable import/newline-after-import */\n/* eslint-disable import/first */\nimport { SerializedType } from '@decipad/computer';\n\nexport * from './event-interception';\nexport * from './decorator-kinds';\n\nexport * from './mark-kinds';\nimport * as markKinds from './mark-kinds';\nimport * as elementKindsModule from './element-kinds';\nexport { markKinds };\n\nimport type { TableCellType } from './table';\n\nexport type MarkKind = typeof markKinds[keyof typeof markKinds];\n\nexport * from './decorator-kinds';\nexport * from './element-kinds';\nexport const elementKinds = Object.values(elementKindsModule);\nexport type ElementKind =\n  typeof elementKindsModule[keyof typeof elementKindsModule];\n\nexport * from './interactive-elements';\nexport * from './value';\nexport * from './table';\nexport * from './components';\nexport * from './data-view';\nexport * from './utils';\nexport * from './nodes';\nexport * from './plate';\n\nexport const alwaysWritableElementTypes = [\n  elementKindsModule.ELEMENT_TABLE,\n  elementKindsModule.ELEMENT_VARIABLE_DEF,\n  elementKindsModule.ELEMENT_COLUMNS,\n];\n\nexport const allElementKinds: readonly string[] = Object.freeze(\n  Object.values(elementKinds)\n);\n\nexport type CellValueType = TableCellType | SerializedType;\n","import {\n  ElementKind,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n  ELEMENT_IMAGE,\n  ELEMENT_INLINE_NUMBER,\n  ELEMENT_LIC,\n  ELEMENT_PARAGRAPH,\n  InlineNumberElement,\n  MyEditor,\n  MyElement,\n} from '@decipad/editor-types';\nimport {\n  getEndPoint,\n  getNextNode,\n  getNode,\n  setSelection,\n  TDescendant,\n  TElement,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Path } from 'slate';\nimport { insertNodes } from './insertNodes';\nimport {\n  getBlockParentPath,\n  getNonTextParentPath,\n  requirePathBelowBlock,\n} from './path';\nimport { getPathContainingSelection } from './selection';\n\nexport const closestBlockAncestorHasType = (\n  editor: MyEditor,\n  path: Path,\n  type: ElementKind\n): boolean => {\n  const blockParentPath = getBlockParentPath(editor, path);\n  if (!blockParentPath) {\n    return false;\n  }\n\n  const block = getNode<MyElement>(editor, blockParentPath);\n  if (!block) {\n    throw new Error('Cannot find node at the block path');\n  }\n  return block.type === type;\n};\n\nexport const closestElementAncestorHasType = (\n  editor: MyEditor,\n  path: Path,\n  type: ElementKind\n) => {\n  const elementParentPath = getNonTextParentPath(editor, path);\n  if (!elementParentPath) {\n    return false;\n  }\n\n  const block = getNode<MyElement>(editor, elementParentPath);\n  if (!block) {\n    throw new Error('Cannot find node at the block path');\n  }\n\n  return block.type === type;\n};\n\nexport const RICH_TEXT_BLOCK_TYPES: ReadonlyArray<ElementKind> = [\n  ELEMENT_PARAGRAPH,\n  ELEMENT_LIC,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CALLOUT,\n];\n\nexport const allowsTextStyling = (\n  editor: MyEditor,\n  path: Path | null\n): boolean => {\n  return path\n    ? RICH_TEXT_BLOCK_TYPES.some((type) =>\n        closestBlockAncestorHasType(editor, path, type)\n      )\n    : false;\n};\n\nexport const selectionIsNotBubble = (editor: MyEditor): boolean => {\n  const path = getPathContainingSelection(editor);\n  return path\n    ? !closestElementAncestorHasType(editor, path, ELEMENT_INLINE_NUMBER)\n    : false;\n};\n\nexport const getSelectionBubble = (\n  editor: MyEditor\n): InlineNumberElement | null => {\n  const path = getPathContainingSelection(editor);\n  if (!path) return null;\n\n  const blockParentPath = getNonTextParentPath(editor, path);\n  if (!blockParentPath) return null;\n\n  const element = getNode<MyElement>(editor, blockParentPath);\n\n  if (element == null) return null;\n  if (element.type !== ELEMENT_INLINE_NUMBER) return null;\n\n  return element as InlineNumberElement;\n};\n\nexport const insertDividerBelow = (\n  editor: MyEditor,\n  path: Path,\n  type: ElementKind\n): void => {\n  const at = requirePathBelowBlock(editor, path);\n  insertNodes<TElement>(\n    editor,\n    { id: nanoid(), type, children: [{ text: '' }] },\n    { at }\n  );\n\n  const next = getNextNode(editor, { at });\n  if (next) {\n    const [, nextPath] = next;\n    const end = getEndPoint(editor, nextPath);\n    setSelection(editor, { anchor: end, focus: end });\n  }\n};\n\nexport const insertBlockOfTypeBelow = (\n  editor: MyEditor,\n  path: Path,\n  type: ElementKind\n): void => {\n  insertNodes<TElement>(\n    editor,\n    { id: nanoid(), type, children: [{ text: '' }] },\n    { at: requirePathBelowBlock(editor, path) }\n  );\n};\n\nexport const insertImageBelow = (\n  editor: MyEditor,\n  path: Path,\n  url: string,\n  alt = ''\n): void => {\n  insertNodes<TElement>(\n    editor,\n    {\n      id: nanoid(),\n      type: ELEMENT_IMAGE,\n      children: [{ text: alt } as TDescendant],\n      url,\n    },\n    { at: requirePathBelowBlock(editor, path) }\n  );\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { deleteText, getEditorString } from '@udecode/plate';\nimport { Path } from 'slate';\nimport { Computer } from '@decipad/computer';\nimport { createStructuredCodeLine, createCodeLine } from './createCodeLine';\nimport { insertNodes } from './insertNodes';\nimport { requireBlockParentPath, requirePathBelowBlock } from './path';\n\nexport const insertCodeLineBelow = (\n  editor: MyEditor,\n  path: Path,\n  select: boolean\n) => {\n  const elm = createCodeLine({ code: '' });\n\n  insertNodes(editor, elm, {\n    at: requirePathBelowBlock(editor, path),\n    select,\n  });\n};\n\nexport const insertStructuredCodeLineBelow = (\n  editor: MyEditor,\n  path: Path,\n  select: boolean,\n  getAvailableIdentifier: Computer['getAvailableIdentifier']\n) => {\n  const elm = createStructuredCodeLine({\n    varName: getAvailableIdentifier('Name', 1),\n  });\n\n  insertNodes(editor, elm, {\n    at: requirePathBelowBlock(editor, path),\n    select,\n  });\n};\n\nexport const insertStructuredCodeLineBelowOrReplace = (\n  editor: MyEditor,\n  path: Path,\n  select: boolean,\n  getAvailableIdentifier: Computer['getAvailableIdentifier']\n) => {\n  const blockPath = requireBlockParentPath(editor, path);\n  const isBlockEmpty = !getEditorString(editor, blockPath);\n\n  insertStructuredCodeLineBelow(\n    editor,\n    blockPath,\n    select,\n    getAvailableIdentifier\n  );\n  if (isBlockEmpty) {\n    deleteText(editor, { at: blockPath });\n  }\n};\n","import { nanoid } from 'nanoid';\nimport {\n  CodeLineElement,\n  CodeLineV2Element,\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  ELEMENT_STRUCTURED_VARNAME,\n} from '@decipad/editor-types';\nimport { isFlagEnabled } from '@decipad/feature-flags';\n\nexport interface CreateCodeLineOptions {\n  /** Pass this in when it's important to have the same ID as before */\n  id?: string;\n  varName?: string;\n  code?: string;\n}\n\nexport const createCodeLine = ({\n  id,\n  varName = '',\n  code = '',\n}: CreateCodeLineOptions): CodeLineElement => ({\n  id: id ?? nanoid(),\n  type: ELEMENT_CODE_LINE,\n  children: [{ text: varName ? `${varName} = ${code}` : code }],\n});\n\nexport const createStructuredCodeLine = ({\n  id,\n  varName = '',\n  code = '',\n}: CreateCodeLineOptions): CodeLineElement | CodeLineV2Element => {\n  if (!isFlagEnabled('CODE_LINE_NAME_SEPARATED')) {\n    return createCodeLine({ id, varName, code });\n  }\n\n  return {\n    id: id ?? nanoid(),\n    type: ELEMENT_CODE_LINE_V2,\n    children: [\n      {\n        type: ELEMENT_STRUCTURED_VARNAME,\n        id: nanoid(),\n        children: [{ text: varName }],\n      },\n      {\n        type: ELEMENT_CODE_LINE_V2_CODE,\n        id: nanoid(),\n        children: [{ text: code }],\n      },\n    ],\n  };\n};\n","import {\n  TRange,\n  getAboveNode,\n  getNodeString,\n  getPointAfter,\n} from '@udecode/plate';\nimport {\n  MyDecorate,\n  MyElementEntry,\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_LINE_V2,\n  ELEMENT_CODE_LINE_V2_CODE,\n  DECORATE_CODE_VARIABLE,\n  ELEMENT_TABLE_COLUMN_FORMULA,\n  MyNodeEntry,\n  MyEditor,\n  MyDecorateEntry,\n  DECORATE_AUTO_COMPLETE_MENU,\n  ELEMENT_SMART_REF,\n  CodeLineV2Element,\n} from '@decipad/editor-types';\nimport { BasePoint, Path, Range } from 'slate';\nimport { parseStatement } from '@decipad/computer';\nimport { isExprRef } from 'libs/computer/src/exprRefs';\nimport { getVariableRanges } from './getVariableRanges';\nimport type { RangeWithVariableInfo } from './getVariableRanges';\nimport { getSyntaxErrorRanges } from './getSyntaxErrorRanges';\nimport { isElementOfType } from './isElementOfType';\nimport { filterDecorate } from './filterDecorate';\nimport { getCodeLineSource } from './getCodeLineSource';\nimport { memoizeDecorateWithSelection } from './memoizeDecorate';\n\nconst isNotExpreRef = (range: RangeWithVariableInfo) =>\n  !isExprRef(range.variableName);\n\ninterface SubNode {\n  start: number;\n  path: number[];\n  length: number;\n}\n\nconst simpleRangeToSubNodeRange = (range: Range, subNodes: SubNode[]) => {\n  const subNode = subNodes\n    .slice()\n    .reverse()\n    .find((node: SubNode) => node.start <= range.anchor.offset);\n\n  if (subNode) {\n    /* eslint-disable-next-line no-param-reassign */\n    range.anchor = {\n      path: subNode.path,\n      offset: range.anchor.offset - subNode.start,\n    };\n    /* eslint-disable-next-line no-param-reassign */\n    range.focus = {\n      path: subNode.path,\n      offset: range.focus.offset - subNode.start + subNode.length,\n    };\n  }\n  return range;\n};\n\nconst subNodeCoords = (entry: MyElementEntry): SubNode[] => {\n  const [node, path] = entry;\n  let offset = 0;\n  return node.children.map((child, i) => {\n    const sn = {\n      start: offset,\n      path: [...path, i],\n      length: getNodeString(child).length,\n    };\n    offset += getNodeString(child).length;\n    return sn;\n  });\n};\n\nexport interface AutocompleteDecorationProps {\n  variableInfo: RangeWithVariableInfo;\n  [DECORATE_AUTO_COMPLETE_MENU]: true;\n}\n\nexport const decorateCode = (\n  elementType:\n    | typeof ELEMENT_CODE_LINE\n    | typeof ELEMENT_TABLE_COLUMN_FORMULA\n    | typeof ELEMENT_CODE_LINE_V2_CODE\n): MyDecorate =>\n  filterDecorate(\n    memoizeDecorateWithSelection((editor: MyEditor): MyDecorateEntry => {\n      const syntaxErrorDecorations = (\n        [, path]: MyElementEntry,\n        source: string\n      ): TRange[] => {\n        const { error } = parseStatement(source);\n        const ranges = getSyntaxErrorRanges(path, error);\n        return ranges;\n      };\n\n      const variableDecorations = (\n        variableRanges: RangeWithVariableInfo[]\n      ): RangeWithVariableInfo[] => {\n        return variableRanges\n          .map((range) => ({\n            ...range,\n            [DECORATE_CODE_VARIABLE]: true,\n          }))\n          .filter(isNotExpreRef);\n      };\n\n      const autoCompleteMenuDecoration = (\n        [, path]: MyNodeEntry,\n        variableRanges: RangeWithVariableInfo[]\n      ): (Range & AutocompleteDecorationProps)[] => {\n        const { selection } = editor;\n\n        if (\n          selection?.focus?.path &&\n          Path.isCommon(path, selection.focus.path)\n        ) {\n          const variableInfo = getVariableUnderCursor(\n            selection.focus,\n            variableRanges\n          );\n\n          if (variableInfo != null) {\n            const pointAfter = getPointAfter(editor, selection.focus, {\n              distance: 1,\n              unit: 'character',\n            });\n\n            if (!cursorInsideVariable(pointAfter, variableInfo)) {\n              return [\n                {\n                  anchor: variableInfo.anchor,\n                  focus: variableInfo.anchor,\n                  variableInfo,\n                  [DECORATE_AUTO_COMPLETE_MENU]: true,\n                },\n              ];\n            }\n          }\n        }\n\n        return [];\n      };\n\n      const decorate = (entry: MyElementEntry): Range[] => {\n        const [node, path] = entry;\n        if (node.type !== elementType) {\n          return [];\n        }\n\n        const nodeId = getRootNodeId(editor, entry);\n        const sourceString = getCodeLineSource(node);\n\n        // Slate seems to have an issue with decorators on empty lines so we're skipping them.\n        if (!sourceString.length) {\n          return [];\n        }\n\n        const sourceStrings = node.children.map((c) =>\n          isElementOfType(c, ELEMENT_SMART_REF) ? '' : getNodeString(c)\n        );\n        let firstDeclarationFound = false;\n        const variableRanges: RangeWithVariableInfo[] = sourceStrings.flatMap(\n          (source, i) => {\n            const varPath = [...path, i];\n\n            const varRanges = getVariableRanges(source, varPath, nodeId);\n            const res = [];\n            for (const vr of varRanges) {\n              // if previously on this line there was a declaration,\n              // following declarations are column declarations and should be ignored\n              // THIS IS UGLY AND SHOULD BE DONE IN A BETTER WAY\n              if (!firstDeclarationFound || !vr.isDeclaration) res.push(vr);\n              if (vr.isDeclaration) {\n                firstDeclarationFound = true;\n              }\n            }\n\n            return res;\n          }\n        );\n\n        const subNodes = subNodeCoords(entry);\n\n        const decorations: TRange[] = [\n          ...syntaxErrorDecorations(entry, sourceString).map((range) =>\n            simpleRangeToSubNodeRange(range, subNodes)\n          ),\n          ...variableDecorations(variableRanges),\n          ...autoCompleteMenuDecoration(entry, variableRanges),\n        ];\n\n        return decorations;\n      };\n\n      return decorate as MyDecorateEntry;\n    }),\n    ([node]) => node.type === elementType\n  );\n\n/** Get the node representing \"this\" element. To be fed into the Computer and avoid recursive references. */\nexport function getRootNodeId(editor: MyEditor, [node, path]: MyElementEntry) {\n  if (node.type === ELEMENT_TABLE_COLUMN_FORMULA) {\n    return node.columnId;\n  }\n\n  if (node.type === ELEMENT_CODE_LINE_V2_CODE) {\n    const codeLine = getAboveNode<CodeLineV2Element>(editor, {\n      at: path,\n      match: (n) => isElementOfType(n, ELEMENT_CODE_LINE_V2),\n    });\n    if (codeLine) {\n      return codeLine[0].id;\n    }\n  }\n\n  return node.id;\n}\n\nfunction getVariableUnderCursor(\n  cursor: BasePoint,\n  variableRanges: RangeWithVariableInfo[]\n) {\n  return variableRanges.find((varRange) => {\n    return !varRange.isDeclaration && Range.includes(varRange, cursor);\n  });\n}\n\nfunction cursorInsideVariable(\n  pointAfter: BasePoint | undefined,\n  varName: Range\n) {\n  return pointAfter != null && Range.includes(varName, pointAfter);\n}\n","import { MyDecorate, MyElementEntry } from '@decipad/editor-types';\n\nexport const filterDecorate =\n  (\n    decorate: MyDecorate,\n    predicate: (entry: MyElementEntry) => boolean\n  ): MyDecorate =>\n  (...args) =>\n  (entry) =>\n    predicate(entry as unknown as MyElementEntry)\n      ? decorate(...args)(entry)\n      : [];\n","import { MyEditor } from '@decipad/editor-types';\nimport { Path } from 'slate';\nimport { getEndPoint, getNode, isVoid, setSelection } from '@udecode/plate';\nimport { ReactEditor } from 'slate-react';\n\nexport const focusAndSetSelection = (editor: MyEditor, path: Path) => {\n  const node = getNode(editor, path);\n  if (!node) {\n    return;\n  }\n  if (isVoid(editor, node)) {\n    return;\n  }\n\n  const point = getEndPoint(editor, path);\n\n  ReactEditor.focus(editor as ReactEditor);\n  setTimeout(() => setSelection(editor, { focus: point, anchor: point }), 0);\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { getAboveNode, GetAboveNodeOptions } from '@udecode/plate';\n\nexport const getAboveNodeSafe = (\n  editor: MyEditor,\n  options?: GetAboveNodeOptions\n) => {\n  try {\n    return getAboveNode(editor, options);\n  } catch (err) {\n    // do nothing\n  }\n  return undefined;\n};\n","import { TDescendant } from '@udecode/plate';\n\n/**\n * Get slate fragment from data transfer.\n */\nexport const getSlateFragment = (dataTransfer: DataTransfer) => {\n  const data = dataTransfer.getData('application/x-slate-fragment');\n  if (!data) return;\n\n  const decoded = decodeURIComponent(window.atob(data));\n  return JSON.parse(decoded) as TDescendant[];\n};\n","import { isSyntaxError, Parser, hasBracketError } from '@decipad/computer';\nimport { Path } from 'slate';\nimport { DECORATE_SYNTAX_ERROR } from '@decipad/editor-types';\nimport { SyntaxErrorAnnotation } from './SyntaxErrorAnnotation';\n\nexport function getSyntaxErrorRanges(\n  path: Path,\n  error: Parser.ParserError | undefined\n): SyntaxErrorAnnotation[] {\n  if (!error) {\n    return [];\n  }\n\n  if (isSyntaxError(error) && error.token != null) {\n    const { token } = error;\n    return [\n      {\n        anchor: { path, offset: token.offset },\n        focus: {\n          path,\n          offset: token.offset + 1,\n        },\n        [DECORATE_SYNTAX_ERROR]: true,\n        variant: undefined,\n      },\n    ];\n  }\n\n  if (hasBracketError(error) && error?.bracketError != null) {\n    const { bracketError } = error;\n    return [\n      (bracketError.type === 'mismatched-brackets' ||\n        bracketError.type === 'never-closed') &&\n        bracketError.open,\n      (bracketError.type === 'mismatched-brackets' ||\n        bracketError.type === 'never-opened') &&\n        bracketError.close,\n    ]\n      .filter((tok): tok is moo.Token => !!tok)\n      .map((token) => ({\n        anchor: { path, offset: token.offset },\n        focus: {\n          path,\n          offset: token.offset + 1,\n        },\n        [DECORATE_SYNTAX_ERROR]: true,\n        variant: bracketError.type,\n      }));\n  }\n\n  return [];\n}\n","import { Path, Range } from 'slate';\nimport { getUsedIdentifiers } from '@decipad/computer';\n\nexport type RangeWithVariableInfo = Range & VariableInfo;\n\nexport interface VariableInfo {\n  readonly variableName: string;\n  readonly blockId: string;\n  readonly isDeclaration: boolean;\n}\n\nexport const getVariableRanges = (\n  code: string,\n  path: Path,\n  blockId: string\n): RangeWithVariableInfo[] => {\n  return getUsedIdentifiers(code).map((ident) => {\n    const variableName = ident.text;\n    return {\n      blockId,\n      anchor: { path, offset: ident.start },\n      focus: { path, offset: ident.end },\n      variableName,\n      isDeclaration: ident.isDeclaration,\n    };\n  });\n};\n","import { insertNodes as plateInsertNodes } from '@udecode/plate-core';\nimport { getAnalytics } from '@decipad/client-events';\nimport { isElement, TElement } from '@udecode/plate';\n\nconst elementsFrom = (n: unknown | unknown[]): TElement[] => {\n  const ret = Array.isArray(n) ? n : [n];\n  return ret.filter(isElement);\n};\n\nexport const insertNodes: typeof plateInsertNodes = (\n  editor,\n  options,\n  ...args\n) => {\n  setTimeout(() => {\n    const analytics = getAnalytics();\n    if (analytics) {\n      for (const el of elementsFrom(options)) {\n        analytics.track('create notebook element', { type: el.type });\n      }\n    }\n  }, 0);\n  return plateInsertNodes(editor, options, ...args);\n};\n","import {\n  getAboveNode,\n  isElement,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate';\nimport { Path } from 'slate';\nimport {\n  ColumnsElement,\n  ELEMENT_COLUMNS,\n  MyEditor,\n  MyElementOrText,\n} from '@decipad/editor-types';\nimport { nanoid } from 'nanoid';\nimport { insertNodes } from './insertNodes';\n\nexport const hasLayoutAncestor = (editor: MyEditor, path: Path): boolean => {\n  return !!getAboveNode(editor, {\n    at: path,\n    match: (node) => isElement(node) && node.type === ELEMENT_COLUMNS,\n  });\n};\n\nexport const wrapIntoColumns = (editor: MyEditor, path: Path) => {\n  const hasLayoutAncestorElement = hasLayoutAncestor(editor, path);\n  if (!hasLayoutAncestorElement) {\n    wrapNodes(\n      editor,\n      {\n        id: nanoid(),\n        type: ELEMENT_COLUMNS,\n      } as ColumnsElement,\n      { at: path }\n    );\n  }\n};\n\nexport const insertNodeIntoColumns = (\n  editor: MyEditor,\n  node: MyElementOrText,\n  path: Path\n): void => {\n  withoutNormalizing(editor, () => {\n    const hasLayoutAncestorElement = hasLayoutAncestor(editor, path);\n    if (!hasLayoutAncestorElement) {\n      wrapIntoColumns(editor, path);\n    }\n\n    insertNodes(editor, node, {\n      at: hasLayoutAncestorElement ? Path.next(path) : [...path, 1],\n    });\n  });\n};\n","import { MyDecorate, MyNodeEntry } from '@decipad/editor-types';\nimport { BaseEditor, Editor, Range } from 'slate';\n\ninterface CacheEntry {\n  /** The same object might deserve a second annotate call */\n  dedupeKey: string;\n  decoratorRet: ReturnType<ReturnType<MyDecorate>>;\n}\n\nexport const memoizeDecorate = (decorate: MyDecorate): MyDecorate => {\n  const cache = new WeakMap<MyNodeEntry[0], CacheEntry>();\n\n  return (editor, ...args) =>\n    (entry) => {\n      const dedupeKey = JSON.stringify({ entry });\n\n      const cacheEntry = cache.get(entry[0]);\n      if (cacheEntry && cacheEntry.dedupeKey === dedupeKey) {\n        return cacheEntry.decoratorRet;\n      }\n\n      const decoratorRet = decorate(editor, ...args)(entry);\n\n      cache.set(entry[0], { decoratorRet, dedupeKey });\n\n      return decoratorRet;\n    };\n};\n\nexport const memoizeDecorateWithSelection = (\n  decorate: MyDecorate\n): MyDecorate => {\n  const cache = new WeakMap<MyNodeEntry[0], CacheEntry>();\n\n  return (editor, ...args) =>\n    (entry) => {\n      const selectionIntersectsPath =\n        editor.selection != null &&\n        Range.intersection(\n          Editor.range(editor as BaseEditor, entry[1]),\n          editor.selection\n        ) != null;\n\n      const selectionKey = selectionIntersectsPath ? editor.selection : null;\n      const dedupeKey = JSON.stringify({ selectionKey, entry });\n\n      const cacheEntry = cache.get(entry[0]);\n      if (cacheEntry && cacheEntry.dedupeKey === dedupeKey) {\n        return cacheEntry.decoratorRet;\n      }\n\n      const decoratorRet = decorate(editor, ...args)(entry);\n\n      cache.set(entry[0], { decoratorRet, dedupeKey });\n\n      return decoratorRet;\n    };\n};\n","import { identifierRegExpGlobal } from '@decipad/computer';\nimport { getNodeString, insertText, TNodeEntry } from '@udecode/plate';\nimport { MyEditor } from '@decipad/editor-types';\n\nexport const normalizeIdentifierElement = (\n  editor: MyEditor,\n  [node, path]: TNodeEntry\n): boolean => {\n  const text = getNodeString(node);\n  const replacement =\n    text.match(new RegExp(identifierRegExpGlobal))?.join('') || '';\n  if (replacement !== text) {\n    insertText(editor, replacement, { at: path });\n    return true;\n  }\n  return false;\n};\n","import { Computer, getUsedIdentifiers, tokenize } from '@decipad/computer';\nimport {\n  ELEMENT_SMART_REF,\n  MyEditor,\n  MyNode,\n  SmartRefElement,\n} from '@decipad/editor-types';\nimport {\n  getNextNode,\n  getNodeString,\n  insertText,\n  isElement,\n  removeNodes,\n  setSelection,\n  withoutNormalizing,\n} from '@udecode/plate';\nimport { nanoid } from 'nanoid';\nimport { Location, Path, Point, Range } from 'slate';\nimport { insertNodes } from './insertNodes';\n\nexport const normalizeSmartRefs = (\n  node: MyNode,\n  path: Path,\n  editor: MyEditor,\n  computer: Computer\n) => {\n  const names = computer\n    .getNamesDefined()\n    .filter((n) => !!n.blockId)\n    .filter((n) => n.kind === 'variable' || n.kind === 'column')\n    .map((n) => [n.name, n.blockId]);\n  const namesToIds: { [name: string]: string } = Object.fromEntries(names);\n  const idsToNames: { [blockId: string]: string } = Object.fromEntries(\n    names.map((n) => [n[1], n[0]])\n  );\n\n  // text\n  if (!isElement(node)) {\n    return handleTextNode(node, path, editor, namesToIds);\n  }\n  // smart ref\n  if (node.type === ELEMENT_SMART_REF) {\n    return handleSmartRefNode(node, path, editor, idsToNames);\n  }\n\n  return false;\n};\n\nconst handleSmartRefNode = (\n  node: SmartRefElement,\n  path: Path,\n  editor: MyEditor,\n  idsToNames: { [blockId: string]: string }\n) => {\n  const curName = idsToNames[node.blockId];\n  if (!curName) {\n    return false;\n  }\n\n  const nextEntry = getNextNode(editor, { at: path });\n  if (nextEntry) {\n    const [nextNode, nextPath] = nextEntry;\n    const nextNodeStr = getNodeString(nextNode);\n    const nextTokens = tokenize(nextNodeStr).filter((t) => t?.type !== 'ws');\n\n    // turn smart ref into text if it's in the LHS of a declaration\n    if (nextTokens[0]?.type === 'equalSign') {\n      withoutNormalizing(editor, () => {\n        insertText(editor, curName, {\n          at: { path: nextPath, offset: 0 },\n        });\n        removeNodes(editor, { at: path });\n      });\n      return true;\n    }\n  }\n  return false;\n};\nconst handleTextNode = (\n  node: MyNode,\n  path: Path,\n  editor: MyEditor,\n  namesToIds: { [name: string]: string }\n) => {\n  const fullStr = getNodeString(node);\n  const identifs = getUsedIdentifiers(fullStr);\n\n  for (const token of identifs) {\n    if (!token.isDeclaration && !token.isBeforeDot) {\n      const blockId = namesToIds[token.text];\n      if (blockId) {\n        const start = { path, offset: token.start };\n        const end = { path, offset: token.end };\n        const textRange = { anchor: start, focus: end };\n        const inside =\n          editor.selection && !!Range.intersection(editor.selection, textRange);\n\n        // dont replace if selection is inside or right next to the var name\n        if (inside) {\n          return false;\n        }\n        replaceTextWithSmartRef(editor, textRange, blockId);\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const smartRefToText = (\n  editor: MyEditor,\n  smartRefLocation: Location,\n  text: string,\n  textPoint: Point\n) => {\n  removeNodes(editor, { at: smartRefLocation });\n  insertText(editor, text, {\n    at: textPoint,\n  });\n  setSelection(editor, { anchor: textPoint, focus: textPoint });\n};\n\nconst replaceTextWithSmartRef = (\n  editor: MyEditor,\n  textRange: Range,\n  blockId: string\n) => {\n  const smartRef: SmartRefElement = {\n    id: nanoid(),\n    type: ELEMENT_SMART_REF,\n    blockId,\n    children: [{ text: '' }],\n  };\n  insertNodes(editor, [{ text: '' }, smartRef, { text: '' }], {\n    at: textRange,\n  });\n};\n","import {\n  CodeLineElement,\n  CodeLineV2Element,\n  MyEditor,\n} from '@decipad/editor-types';\nimport React from 'react';\nimport { Computer, Result, SerializedTypes } from '@decipad/computer';\nimport { DeciNumber } from '@decipad/number';\nimport { dndPreviewActions } from '@decipad/react-contexts';\n\nexport const DRAG_SMART_REF = 'smart-ref';\nexport const DRAG_BLOCK_ID_CONTENT_TYPE = 'text/x-block-id';\n\nexport type SmartRefDragCallback = (opts: {\n  blockId?: string;\n  element?: CodeLineElement | CodeLineV2Element;\n  asText: string;\n  computer: Computer;\n  result: Result.Result;\n}) => (e: React.DragEvent) => void;\n\n/**\n * Use this as an onDragStart event handler, to initiate dragging a blockId from one place to another\n *\n * See `createDndSmartRefPlugin` for the drop part. This function is here to avoid import cycles.\n */\nexport const onDragStartSmartRef =\n  (editor: MyEditor): SmartRefDragCallback =>\n  ({ blockId, element, asText, computer, result }) =>\n  (e: React.DragEvent) => {\n    // eslint-disable-next-line no-param-reassign\n    editor.dragging = DRAG_SMART_REF;\n\n    const id = element?.id ?? blockId!;\n\n    if (element) {\n      if (editor.previewRef?.current) {\n        const formatted = computer.formatNumber(\n          result.type as SerializedTypes.Number,\n          result.value as DeciNumber\n        );\n\n        dndPreviewActions.previewText(formatted.asString);\n\n        e.dataTransfer.setDragImage(editor.previewRef.current, 0, 0);\n      }\n    }\n\n    e.dataTransfer.dropEffect = 'link';\n\n    e.dataTransfer.setData(DRAG_BLOCK_ID_CONTENT_TYPE, id);\n    e.dataTransfer.setData('text/plain', asText);\n  };\n","import { Path } from 'slate';\nimport {\n  getAboveNode,\n  getNodeEntry,\n  isBlock,\n  isElement,\n  isText,\n  TEditor,\n} from '@udecode/plate';\n\nexport const getBlockParentPath = (\n  editor: TEditor,\n  path: Path\n): Path | null => {\n  const currentBlockPath = isBlock(editor, getNodeEntry(editor, path)[0])\n    ? path\n    : getAboveNode(editor, {\n        at: path,\n        match: (node) => isBlock(editor, node),\n      })?.[1];\n\n  return currentBlockPath ?? null;\n};\nexport const requireBlockParentPath = (editor: TEditor, path: Path): Path => {\n  const blockParentPath = getBlockParentPath(editor, path);\n  if (!blockParentPath) {\n    throw new Error('Cannot find block parent');\n  }\n  return blockParentPath;\n};\n\nexport const requirePathBelowBlock = (editor: TEditor, path: Path): Path => {\n  return Path.next(requireBlockParentPath(editor, path));\n};\n\nexport const getNonTextParentPath = (\n  editor: TEditor,\n  path: Path\n): Path | null => {\n  const nodeEntry = getNodeEntry(editor, path)[0];\n  const currentBlockPath =\n    isElement(nodeEntry) && !isText(nodeEntry)\n      ? path\n      : getAboveNode(editor, {\n          at: path,\n          match: (node) => isElement(node) && !isText(node),\n        })?.[1];\n\n  return currentBlockPath ?? null;\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-multi-assign */\nimport { MyEditor } from '@decipad/editor-types';\n\nconst pluginStoreSymbol = Symbol('PLUGIN_STORE');\n\ntype StoreByPlugin = Record<string, unknown>;\ntype StoreBearing = {\n  [pluginStoreSymbol]?: StoreByPlugin;\n};\ntype Creator<T> = () => T;\n\nconst editorStore = (editor: MyEditor): StoreByPlugin => {\n  let store = (editor as StoreBearing)[pluginStoreSymbol];\n  if (!store) {\n    store = {};\n    Object.defineProperty(editor, pluginStoreSymbol, {\n      value: store,\n      writable: false,\n      enumerable: false,\n    });\n  }\n  return store;\n};\n\nconst getPluginStore = <T>(\n  globalStore: StoreByPlugin,\n  pluginKey: string,\n  create: Creator<T>\n): T => {\n  let store = globalStore[pluginKey] as T | undefined;\n  if (!store) {\n    store = globalStore[pluginKey] = create();\n  }\n  return store;\n};\n\nexport const pluginStore = <T>(\n  editor: MyEditor,\n  pluginKey: string,\n  create: Creator<T>\n): T => {\n  const globalStore = editorStore(editor);\n  return getPluginStore<T>(globalStore, pluginKey, create);\n};\n","import { Path } from 'slate';\nimport { hasNode, removeNodes, withoutNormalizing } from '@udecode/plate';\nimport { MyEditor } from '@decipad/editor-types';\n\nexport const safeDelete = (editor: MyEditor, path: Path): boolean => {\n  if (hasNode(editor, path)) {\n    withoutNormalizing(editor, () => {\n      removeNodes(editor, { at: path });\n    });\n    return true;\n  }\n  return false;\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport React from 'react';\nimport { findEventRange, select } from '@udecode/plate';\n\n/**\n * Find the range where the drop happened and select it if defined.\n */\nexport const selectEventRange =\n  (editor: MyEditor) => (event: React.DragEvent) => {\n    // Find the range where the drop happened\n    const range = findEventRange(editor, event);\n    if (!range) return;\n\n    select(editor, range);\n  };\n","import { getNodeEntry, isSelectionExpanded, TEditor } from '@udecode/plate';\nimport { Path, Point } from 'slate';\n\n/**\n * Get the point of the current selection,\n * throwing if there is no selection or the selection is expanded.\n */\nexport const requireCollapsedSelection = (editor: TEditor): Point => {\n  if (!editor.selection) {\n    throw new Error('There is no selection');\n  }\n  if (isSelectionExpanded(editor)) {\n    throw new Error('The selection is expanded');\n  }\n  return editor.selection.anchor;\n};\n\nexport const getCollapsedSelection = (editor: TEditor): Point | null => {\n  if (!editor.selection || isSelectionExpanded(editor)) {\n    return null;\n  }\n  return editor.selection.anchor;\n};\n\nexport const getPathContainingSelection = (editor: TEditor): Path | null => {\n  return editor.selection && getNodeEntry(editor, editor.selection)?.[1];\n};\n","import { MyEditor, MyElementEntry } from '@decipad/editor-types';\nimport { getNextNode, getNodeString, setSelection } from '@udecode/plate';\n\n/**\n * Sets the selection onto either, the end of the current text, or\n * if we are at the end, sets the selection to the next available node,\n * by finding an available node either on the current path level, or the ones above.\n *\n * @param editor: a reference to the editor object\n * @param entry: The node entry @see `MyElementEntry`\n */\nexport const setSelectionNext = (\n  editor: MyEditor,\n  [node, path]: MyElementEntry\n) => {\n  const text = getNodeString(node);\n  if (editor.selection?.anchor.offset === text.length) {\n    // Let's find a next node that is available, by gradually\n    // moving up a level in the path.\n    for (let p = path; p.length > 0; p.pop()) {\n      const nextNode = getNextNode(editor, { at: p });\n      if (!nextNode) continue;\n      setSelection(editor, {\n        anchor: {\n          offset: 0,\n          path: nextNode[1],\n        },\n        focus: {\n          offset: 0,\n          path: nextNode[1],\n        },\n      });\n      break;\n    }\n    return;\n  }\n  setSelection(editor, {\n    anchor: {\n      offset: text.length,\n      path,\n    },\n    focus: {\n      offset: text.length,\n      path,\n    },\n  });\n};\n","/**\n * Set a slate fragment value in the data transfer.\n */\nexport const setSlateFragment = (data: DataTransfer, value: unknown) => {\n  const string = JSON.stringify(value);\n  const encoded = window.btoa(encodeURIComponent(string));\n  data.setData('application/x-slate-fragment', encoded);\n  // This is needed to make it draggable.\n  data.setData('text', '');\n};\n","import { MyElement, MyReactEditor } from '@decipad/editor-types';\nimport { useCallback } from 'react';\nimport { findNodePath, setNodes } from '@udecode/plate';\n\nexport const useElementMutatorCallback = <\n  E extends MyElement,\n  PropName extends keyof E\n>(\n  editor: MyReactEditor,\n  element: E | null | undefined,\n  propName: PropName,\n  sideEffects?: () => void\n): ((newValue: E[PropName]) => void) => {\n  return useCallback(\n    (newValue: E[PropName]) => {\n      const at = element && findNodePath(editor, element);\n      if (!at) {\n        return;\n      }\n      const mutation = {\n        [propName]: newValue,\n      };\n      try {\n        setNodes(editor, mutation, { at });\n        sideEffects?.();\n      } catch (err) {\n        console.error(err);\n        // WTF: preventing https://linear.app/decipad/issue/ENG-1841/typeerror-converting-circular-structure-to-json]\n        if (\n          !(err as Error).message.includes(\n            'Converting circular structure to JSON'\n          )\n        ) {\n          throw err;\n        }\n      }\n    },\n    [editor, element, propName, sideEffects]\n  );\n};\n","import { MyElement, PlainText, useTEditorRef } from '@decipad/editor-types';\nimport { useComputer } from '@decipad/react-contexts';\nimport { findNodePath, getNodeString, insertText } from '@udecode/plate';\nimport { useSelected } from 'slate-react';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { BehaviorSubject, Observable, switchMap } from 'rxjs';\nimport { useBehaviorSubject } from '@decipad/react-utils';\nimport { timeout } from '@decipad/utils';\nimport { Computer, identifierRegExpGlobal } from '@decipad/computer';\n\n/**\n * Makes sure a variable name is not empty or duplicate\n *\n * When that happens a new name is given to it\n *\n * Returns an error message meant to be placed in a tooltip.\n * Error message becomes undefined after a while\n *\n * useSelected() is called within this hook, so it should\n * be called in a slate element component\n */\nexport function useEnsureValidVariableName(\n  element: MyElement & { children: [PlainText] },\n  blockId?: string,\n  defaultVarName = 'Name'\n): string | undefined {\n  const editor = useTEditorRef();\n  const computer = useComputer();\n\n  const [validationMessage$] = useState(\n    () => new BehaviorSubject<string | undefined>(undefined)\n  );\n\n  useSlateOnBlur(\n    computer,\n    useCallback(() => {\n      const path = findNodePath(editor, element);\n      const currentVarName = getNodeString(element);\n\n      const varExists = computer.variableExists(currentVarName, blockId);\n\n      const message = getVariableValidationErrorMessage({\n        varName: currentVarName,\n        varExists,\n      });\n      const shouldRename = message != null;\n\n      validationMessage$.next(message);\n\n      // Get next available and valid name\n      if (shouldRename && path) {\n        const tentativeNewName =\n          stripOffInvalidIdentifierCharacters(currentVarName).replace(\n            /\\d+$/,\n            ''\n          ) || defaultVarName;\n        const newName = computer.getAvailableIdentifier(tentativeNewName, 2);\n\n        insertText(editor, newName, { at: path });\n      }\n    }, [editor, element, blockId, validationMessage$, defaultVarName, computer])\n  );\n\n  return useBehaviorSubject(validationMessage$, hideMessageLater);\n}\n\nexport const variableValidationErrors = {\n  varExists: (name: string) => `\"${name}\" already exists`,\n  varEmpty: 'Variables must have names',\n  varInvalid: 'Invalid variable name',\n};\n\n/** Get whether we should revert to the previous varname, and an error message if any */\nexport const getVariableValidationErrorMessage = ({\n  varName,\n  varExists,\n}: {\n  varName: string;\n  varExists: boolean;\n}): string | undefined => {\n  if (stripOffInvalidIdentifierCharacters(varName) !== varName) {\n    return variableValidationErrors.varInvalid;\n  }\n\n  if (varName === '') {\n    return variableValidationErrors.varEmpty;\n  }\n\n  return varExists ? variableValidationErrors.varExists(varName) : undefined;\n};\n\n/** When there's a message, hide it later */\nconst hideMessageLater: (\n  obs: Observable<string | undefined>\n) => Observable<string | undefined> = (obs) =>\n  obs.pipe(\n    switchMap(async function* yieldUndefinedLater(message) {\n      yield message;\n\n      await timeout(2000);\n      // Hide message\n      yield undefined;\n    })\n  );\n\n/** \"bad: identifier! \" => \"badidentifier\" */\nfunction stripOffInvalidIdentifierCharacters(varName: string) {\n  return varName.match(new RegExp(identifierRegExpGlobal))?.join('') || '';\n}\n\n/** Calls callback when slate useSelected() changes to false */\nfunction useSlateOnBlur(computer: Computer, onBlur: () => void) {\n  const selected = useSelected();\n  const previouslySelected = useRef(selected);\n\n  useEffect(() => {\n    if (selected === previouslySelected.current) {\n      return;\n    }\n\n    previouslySelected.current = selected;\n\n    if (selected === false) {\n      // Invoke later to make sure to have Computer's latest state\n      setTimeout(onBlur, computer.requestDebounceMs);\n    }\n  }, [selected, onBlur, computer]);\n}\n","import { MyNode, useTEditorRef } from '@decipad/editor-types';\nimport { useEditorSelector } from '@decipad/react-contexts';\nimport { findNodePath } from '@udecode/plate';\nimport { Path } from 'slate';\n\nexport const useNodePath = (node?: MyNode): Path | undefined => {\n  const editor = useTEditorRef();\n  return useEditorSelector(() => node && findNodePath(editor, node));\n};\n","import { useEditorSelector } from '@decipad/react-contexts';\nimport { Selection } from 'slate';\nimport { useSelected } from 'slate-react';\n\nexport const useSelection = (): Selection => {\n  const isSelected = useSelected();\n  return useEditorSelector((editor) => (isSelected ? editor.selection : null));\n};\n","import { findNodePath } from '@udecode/plate';\nimport { Result } from '@decipad/computer';\nimport {\n  MyReactEditor,\n  TableCellElement,\n  TableHeaderElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { useComputer, useEditorTableContext } from '@decipad/react-contexts';\n\nexport function useTableColumnFormulaResultForCell(\n  element: TableCellElement | TableHeaderElement\n): Result.Result | undefined {\n  const editor = useTEditorRef();\n  const computer = useComputer();\n\n  const [rowIndex, colIndex] = findFormulaCoordinates(editor, element);\n  const columnBlockId = useColumnBlockId(colIndex);\n\n  return computer.getBlockIdResult$.useWithSelector((result) => {\n    const column = getColumnResult(result?.result);\n\n    if (column && rowIndex != null) {\n      const type = column.type.cellType;\n      const value = column.value.at(rowIndex);\n\n      return (type && value && { type, value }) || undefined;\n    }\n    return undefined;\n  }, columnBlockId);\n}\n\nexport function useTableColumnFormulaResultForColumn(\n  colIndex?: number\n): Result.Result<'column'> | undefined {\n  const computer = useComputer();\n  const blockId = useColumnBlockId(colIndex);\n\n  return getColumnResult(computer.getBlockIdResult$.use(blockId)?.result);\n}\n\nconst findFormulaCoordinates = (\n  editor: MyReactEditor,\n  element: TableCellElement | TableHeaderElement | undefined\n) => {\n  const path = element && findNodePath(editor, element);\n  if (!path) {\n    return [undefined, undefined] as const;\n  }\n  const headerRowCount = 2; // skip caption and column headers\n  const rowIndex = path[path.length - 2] - headerRowCount;\n  const colIndex = path[path.length - 1];\n\n  return [rowIndex, colIndex] as const;\n};\n\nconst getColumnResult = (result: Result.Result | undefined) => {\n  if (result?.type.kind === 'column') {\n    return result as Result.Result<'column'>;\n  }\n  return undefined;\n};\n\nconst useColumnBlockId = (colIndex?: number) => {\n  const { cellTypes, columnBlockIds } = useEditorTableContext();\n\n  return colIndex != null && cellTypes[colIndex]?.kind === 'table-formula'\n    ? columnBlockIds.at(colIndex)\n    : undefined;\n};\n","import { Path } from 'slate';\nimport { findNodePath } from '@udecode/plate';\nimport { MyEditor, MyElement } from '@decipad/editor-types';\n\ntype WithPathFunction = (path: Path) => void;\n\nexport const withPath = (\n  editor: MyEditor,\n  element: MyElement | null | undefined,\n  fn: WithPathFunction\n): void => {\n  if (element) {\n    const path = findNodePath(editor, element);\n    if (path) {\n      fn(path);\n    }\n  }\n};\n","import { keyframes } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\n\nconst loadingKeyframes = keyframes`\n  0% {\n    opacity: 1;\n  }\n  40% {\n    opacity: 0.25;\n  }\n  60% {\n    opacity: 0.75;\n  }\n  80% {\n    opacity: 0.25;\n  }\n  100% {\n    opacity: 1;\n  }\n`;\n\nexport const LoadingFilter: FC<{ children: ReactNode; loading: boolean }> = ({\n  children,\n  loading,\n}) => {\n  return (\n    <div\n      css={\n        loading && {\n          animation: `${loadingKeyframes} linear 1.5s infinite`,\n        }\n      }\n    >\n      {children}\n    </div>\n  );\n};\n","import { FC, forwardRef, ReactNode } from 'react';\nimport { slimBlockWidth } from '../../styles/editor-layout';\n\nexport const EditorLayout = forwardRef<HTMLDivElement, { children: ReactNode }>(\n  ({ children }, ref): ReturnType<FC> => {\n    return (\n      <div\n        ref={ref}\n        style={{\n          position: 'relative',\n        }}\n        css={{\n          '[data-slate-editor]': {\n            maxWidth: slimBlockWidth,\n            margin: '0 auto',\n            zIndex: 1,\n          },\n        }}\n        data-stop-animate-query\n      >\n        {children}\n      </div>\n    );\n  }\n);\n","// These should generally not be imported directly and rendered individually in a frontend,\n// instead templates and pages should be composed of them.\n// But in some cases, like when using Slate to render a component tree, direct access is needed.\nimport * as allIcons from './icons';\n\nexport * from './atoms';\nexport * from './hooks';\nexport * from './molecules';\nexport * from './organisms';\nexport * from './pages';\nexport * from './primitives';\nexport * from './templates';\nexport * from './utils';\nexport * from './utils/useEventNoEffect';\n\nexport const icons = allIcons;\n","import { css } from '@emotion/react';\nimport { HTMLAttributes } from 'react';\nimport { cssVar } from '../../primitives/index';\n\nexport const floatingButtonStyles = css({\n  backgroundColor: 'transparent',\n  border: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  height: '100%',\n  borderRadius: '3px',\n  padding: '0 8px',\n  cursor: 'pointer',\n  transition: 'background-color 0.2s ease-out',\n  '&:hover': {\n    backgroundColor: `${cssVar('highlightColor')}`,\n  },\n  '> div > svg > path': {\n    transition: 'stroke 0.2s ease-out',\n  },\n});\n\nconst activeFloatingButtonStyles = css({\n  '> div > svg > path': {\n    stroke: `${cssVar('normalTextColor')}`,\n    strokeWidth: '2',\n  },\n});\n\nexport interface FloatingButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  isActive?: boolean;\n}\n\nexport const FloatingButton = ({ isActive, ...props }: FloatingButtonProps) => (\n  <button\n    css={[floatingButtonStyles, isActive && activeFloatingButtonStyles]}\n    {...props}\n  />\n);\n","import { css } from '@emotion/react';\n\nexport const dividerStyle = css({\n  backgroundColor: '#f0f0f2',\n  margin: '0 8px',\n  height: '30px',\n  width: '1px',\n});\n","import {\n  getPreventDefaultHandler,\n  isMarkActive,\n  toggleMark,\n} from '@udecode/plate';\nimport { FC, useState } from 'react';\nimport { MyMark, useTEditorRef } from '@decipad/editor-types';\nimport { FloatingButton } from '@decipad/ui';\nimport { useEditorChange } from '@decipad/react-contexts';\nimport { dividerStyle } from '../../styles/divider';\n\ninterface ToggleMarkButtonProps {\n  type: MyMark;\n  icon: ReturnType<FC>;\n  divider?: boolean;\n}\n\nexport const ToggleMarkButton = ({\n  type,\n  icon,\n  divider,\n}: ToggleMarkButtonProps): ReturnType<FC> => {\n  const editor = useTEditorRef();\n\n  const [active, setActive] = useState(\n    !!editor?.selection && isMarkActive(editor, type)\n  );\n\n  useEditorChange(\n    (result: boolean) => {\n      setActive(result);\n    },\n    () => !!editor?.selection && isMarkActive(editor, type)\n  );\n\n  return (\n    <>\n      {divider && <div css={dividerStyle} />}\n      <FloatingButton\n        className=\"toggle\"\n        isActive={active}\n        onMouseDown={(e) => {\n          if (editor) {\n            setActive(!active);\n            getPreventDefaultHandler(toggleMark, editor, { key: type })(e);\n          }\n        }}\n      >\n        {icon}\n      </FloatingButton>\n    </>\n  );\n};\n","import { css } from '@emotion/react';\nimport {\n  cssVar,\n  offBlack,\n  offWhite,\n  transparency,\n  weakOpacity,\n} from 'libs/ui/src/primitives';\n\nexport const wrapperStyles = css({\n  background: cssVar('backgroundColor'),\n  boxShadow: `0px 2px 24px -4px ${transparency(offBlack, weakOpacity).rgba}`,\n  borderRadius: '6px',\n  border: `1px solid ${offWhite.rgb}`,\n  height: '48px',\n  display: 'flex',\n  alignItems: 'center',\n  padding: '6px',\n  zIndex: 2,\n});\n","import {\n  focusEditor,\n  getPluginType,\n  someNode,\n  triggerFloatingLink,\n  unwrapLink,\n} from '@udecode/plate';\nimport { ComponentProps, FC, MouseEvent, useCallback } from 'react';\nimport { ELEMENT_LINK, useTEditorRef } from '@decipad/editor-types';\nimport { FloatingButton, useEventNoEffect } from '@decipad/ui';\n\nexport const LinkButton = (\n  props: ComponentProps<typeof FloatingButton>\n): ReturnType<FC> => {\n  const editor = useTEditorRef();\n\n  const type = getPluginType(editor, ELEMENT_LINK);\n  const isLink = !!editor?.selection && someNode(editor, { match: { type } });\n\n  return (\n    <FloatingButton\n      isActive={isLink}\n      onMouseDown={useCallback((event: MouseEvent) => {\n        event.preventDefault();\n      }, [])}\n      onClick={useEventNoEffect(\n        useCallback(() => {\n          if (!editor) return;\n\n          focusEditor(editor, editor.selection ?? editor.prevSelection!);\n\n          setTimeout(() => {\n            if (isLink) {\n              unwrapLink(editor);\n              return;\n            }\n            triggerFloatingLink(editor, { focused: true });\n          }, 0);\n        }, [editor, isLink])\n      )}\n      {...props}\n    ></FloatingButton>\n  );\n};\n","import {\n  MARK_BOLD,\n  MARK_CODE,\n  MARK_HIGHLIGHT,\n  MARK_ITALIC,\n  MARK_STRIKETHROUGH,\n  MARK_UNDERLINE,\n} from '@decipad/editor-types';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { icons } from '@decipad/ui';\nimport { css } from '@emotion/react';\nimport { FC, ReactElement } from 'react';\nimport { MyMark } from 'libs/editor-types/src/nodes';\nimport { ToggleMarkButton } from './buttons/ToggleMarkButton/ToggleMarkButton';\nimport { useEditorTooltip } from './hooks/useEditorTooltip';\nimport { wrapperStyles } from './styles/wrapper';\nimport { LinkButton } from './buttons/LinkButton';\n\nconst iconWrapper = css({\n  width: '16px',\n  height: '16px',\n});\n\ninterface TooltipMark {\n  type: MyMark;\n  icon: ReactElement;\n  divider: boolean;\n}\n\nconst toolTipMarks: TooltipMark[] = [\n  {\n    type: MARK_BOLD,\n    icon: (\n      <div css={iconWrapper}>\n        <icons.Bold />\n      </div>\n    ),\n    divider: false,\n  },\n  {\n    type: MARK_ITALIC,\n    icon: (\n      <div css={iconWrapper}>\n        <icons.Italic />\n      </div>\n    ),\n    divider: false,\n  },\n  {\n    type: MARK_UNDERLINE,\n    icon: (\n      <div css={iconWrapper}>\n        <icons.Underline />\n      </div>\n    ),\n    divider: false,\n  },\n  {\n    type: MARK_STRIKETHROUGH,\n    icon: (\n      <div css={iconWrapper}>\n        <icons.Strikethrough />\n      </div>\n    ),\n    divider: false,\n  },\n  {\n    type: MARK_HIGHLIGHT,\n    icon: (\n      <div css={iconWrapper}>\n        <icons.Highlight />\n      </div>\n    ),\n    divider: true,\n  },\n  {\n    type: MARK_CODE,\n    icon: (\n      <div css={iconWrapper}>\n        <icons.Code />\n      </div>\n    ),\n    divider: false,\n  },\n];\n\nexport const Tooltip = (): ReturnType<FC> => {\n  const { floating, style, open } = useEditorTooltip();\n\n  const readOnly = useIsEditorReadOnly();\n\n  if (readOnly || !open) return null;\n\n  return (\n    <div ref={floating} style={style} css={wrapperStyles}>\n      {toolTipMarks.map((m) => (\n        <ToggleMarkButton key={m.type} {...m} />\n      ))}\n      <LinkButton>\n        <div css={iconWrapper}>\n          <icons.Link />\n        </div>\n      </LinkButton>\n    </div>\n  );\n};\n","import { useTPlateEditorRef } from '@decipad/editor-types';\nimport {\n  allowsTextStyling,\n  getPathContainingSelection,\n} from '@decipad/editor-utils';\nimport { useFloatingToolbar } from '@udecode/plate';\n\nexport const useEditorTooltip = () => {\n  const editor = useTPlateEditorRef();\n  const floatingToolbar = useFloatingToolbar();\n\n  if (editor) {\n    if (!allowsTextStyling(editor, getPathContainingSelection(editor))) {\n      floatingToolbar.open = false;\n    }\n  }\n  return floatingToolbar;\n};\n","import {\n  CursorData,\n  CursorOverlay as PlateCursorOverlay,\n  CursorOverlayProps,\n} from '@udecode/plate';\nimport { cursorStore } from '@decipad/editor-plugins';\n\n// TODO: styling once plate decouples SC\nexport const CursorOverlay = (props: CursorOverlayProps<CursorData>) => {\n  const cursors = cursorStore.use.cursors();\n\n  return <PlateCursorOverlay {...props} cursors={cursors} />;\n};\n","import { css } from '@emotion/react';\nimport { FC, PropsWithChildren } from 'react';\nimport { slimBlockWidth } from '../../styles/editor-layout';\nimport { smallestDesktop } from '../../primitives';\n\nconst remoteAvatarOverlayWrapperStyles = css({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  marginTop: '0px',\n  width: 'calc(100%)',\n  height: '100%',\n});\n\nconst remoteAvatarOverlayStyles = css({\n  position: 'relative',\n  maxWidth: slimBlockWidth,\n  margin: '0 auto',\n  height: '100%',\n  zIndex: 0,\n});\n\nconst mobileQuery = `@media (max-width: ${smallestDesktop.portrait.width}px)`;\n\nconst invisibleOnSmallScreens = css({\n  [mobileQuery]: {\n    display: 'none',\n  },\n});\n\nexport const RemoteAvatarOverlay: FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <div css={[invisibleOnSmallScreens, remoteAvatarOverlayWrapperStyles]}>\n      <div css={remoteAvatarOverlayStyles}>{children}</div>\n    </div>\n  );\n};\n","/* eslint-disable no-underscore-dangle */\nimport { Avatar } from '@decipad/ui';\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { OpaqueColor, shortAnimationDuration } from '../../primitives';\nimport { slimBlockWidth } from '../../styles/editor-layout';\n\nconst avatarSize = '30px';\nconst avatarMarginLeft = '5px';\n\nconst remoteAvatarStyles = css({\n  position: 'absolute',\n  width: avatarSize,\n  height: avatarSize,\n  transition: `top ${shortAnimationDuration} ease-in-out`,\n});\n\ninterface RemoteAvatarProps {\n  name: string;\n  email?: string;\n  top: number;\n  left: number;\n  backgroundColor: OpaqueColor;\n}\n\nexport const RemoteAvatar: FC<RemoteAvatarProps> = ({\n  name,\n  email,\n  top,\n  left,\n  backgroundColor,\n}) => {\n  const rightDisplacement = Math.max(\n    Math.min(left, slimBlockWidth) - slimBlockWidth,\n    0\n  );\n  return (\n    <div\n      css={[\n        remoteAvatarStyles,\n        {\n          top: `${top}px`,\n          right: `calc((-${avatarSize} - ${avatarMarginLeft} - ${rightDisplacement}px))`,\n        },\n      ]}\n    >\n      <Avatar name={name} email={email} backgroundColor={backgroundColor} />\n    </div>\n  );\n};\n","import { MyElement } from '@decipad/editor-types';\nimport { Path } from 'slate';\n\nexport const isTopLevelBlock = (_el: MyElement, path: Path) =>\n  path.length === 1;\n","import {\n  ELEMENT_DATA_VIEW,\n  ELEMENT_LIVE_CONNECTION,\n  MyValue,\n} from '@decipad/editor-types';\nimport { ELEMENT_TABLE } from '@udecode/plate';\n\nconst potentiallyWideElementTypes = new Set([\n  ELEMENT_TABLE,\n  ELEMENT_DATA_VIEW,\n  ELEMENT_LIVE_CONNECTION,\n]);\n\nexport const isPotentiallyWideElement = (el: MyValue[number]) =>\n  potentiallyWideElementTypes.has(el.type);\n","/* eslint-disable no-underscore-dangle */\nimport { MyValue, useTEditorRef } from '@decipad/editor-types';\nimport { OpaqueColor, RemoteAvatar as UIRemoteAvatar } from '@decipad/ui';\nimport { Session } from 'next-auth';\nimport { FC, RefObject } from 'react';\nimport { Range } from 'slate';\nimport { getNodeEntries, toDOMNode, isElement } from '@udecode/plate';\nimport {\n  isTopLevelBlock,\n  isPotentiallyWideElement,\n} from '@decipad/editor-utils';\n\nconst MIN_VERTICAL_DISPLACEMENT = 50;\n\ninterface RemoteAvatarProps {\n  cursor: {\n    data: Session & {\n      style: {\n        _backgroundColor: OpaqueColor;\n      };\n    };\n    selection: Range;\n  };\n  containerRef: RefObject<HTMLElement>;\n}\n\nexport const RemoteAvatar: FC<RemoteAvatarProps> = ({\n  cursor,\n  containerRef,\n}) => {\n  const {\n    data: { user },\n    selection,\n  } = cursor;\n\n  const editor = useTEditorRef();\n\n  const entries = Array.from(\n    getNodeEntries<MyValue[number]>(editor, {\n      at: selection.focus,\n      block: true,\n      match: isTopLevelBlock,\n    })\n  );\n\n  if (!entries.length) {\n    return null;\n  }\n  const [[block]] = entries;\n  const node = toDOMNode(editor, block);\n  if (!node) {\n    return null;\n  }\n  const { y: containerVerticalDisplacement = 0 } =\n    containerRef.current?.getBoundingClientRect() ?? {};\n  const { y, height, width } = node.getBoundingClientRect();\n  const verticallyCenterOnBlock =\n    !isElement(block) || !isPotentiallyWideElement(block);\n\n  return (\n    (user?.name && (\n      <UIRemoteAvatar\n        name={user.name}\n        email={user.email ?? undefined}\n        top={\n          verticallyCenterOnBlock\n            ? y - containerVerticalDisplacement + height / 2\n            : y - containerVerticalDisplacement + MIN_VERTICAL_DISPLACEMENT\n        }\n        left={width}\n        backgroundColor={cursor.data.style?._backgroundColor}\n      />\n    )) ||\n    null\n  );\n};\n","import { cursorStore } from '@decipad/editor-plugins';\nimport { ComponentProps, FC, RefObject } from 'react';\nimport { RemoteAvatarOverlay as UIRemoteAvatarOverlay } from '@decipad/ui';\nimport { RemoteAvatar } from './RemoteAvatar';\n\ninterface RemoteAvatarOverlayProps {\n  containerRef: RefObject<HTMLElement>;\n}\n\nexport const RemoteAvatarOverlay: FC<RemoteAvatarOverlayProps> = ({\n  containerRef,\n}) => {\n  const cursors = cursorStore.use.cursors();\n\n  return (\n    <UIRemoteAvatarOverlay>\n      {Object.entries(cursors)\n        .filter(([cursorName]) => cursorName !== 'drag')\n        .map(([key, cursor]) => (\n          <RemoteAvatar\n            key={key}\n            containerRef={containerRef}\n            cursor={cursor as ComponentProps<typeof RemoteAvatar>['cursor']}\n          />\n        ))}\n    </UIRemoteAvatarOverlay>\n  );\n};\n","import { TableCellElement } from '@decipad/editor-types';\nimport { ReactNode, useMemo } from 'react';\nimport { useComputer } from '@decipad/react-contexts';\nimport { isCellAlignRight, useCellType } from '@decipad/editor-table';\nimport { getNodeString } from '@udecode/plate';\nimport { CodeResult, FormulaTableData, TableData } from '@decipad/ui';\nimport { useTableColumnFormulaResultForCell } from '@decipad/editor-utils';\n\nexport const DndCellPreview = ({\n  element,\n  colIndex,\n  children,\n}: {\n  element: TableCellElement;\n  colIndex: number;\n  children: ReactNode;\n}) => {\n  const computer = useComputer();\n  const formulaResult = useTableColumnFormulaResultForCell(element);\n\n  const cellType = useCellType(element);\n  const nodeText = getNodeString(element).trim();\n  const hasText = nodeText !== '';\n  const isSoleNumber = nodeText === Number(nodeText).toString();\n\n  const unit = useMemo(\n    () =>\n      cellType?.kind === 'number' &&\n      cellType.unit?.length &&\n      hasText &&\n      isSoleNumber\n        ? computer.formatUnit(cellType.unit)\n        : undefined,\n    [cellType, computer, hasText, isSoleNumber]\n  );\n\n  if (formulaResult != null) {\n    // IMPORTANT NOTE: do not remove the children elements from rendering.\n    // Even though they're one element with an empty text property, their absence triggers\n    // an uncaught exception in slate-react.\n    // Also, be careful with the element structure:\n    // https://github.com/ianstormtaylor/slate/issues/3930#issuecomment-723288696\n    return (\n      <FormulaTableData\n        result={<CodeResult {...formulaResult} />}\n        resultType={formulaResult.type.kind}\n        hiddenCounter={colIndex !== 0}\n      >\n        {children}\n      </FormulaTableData>\n    );\n  }\n\n  return (\n    <TableData\n      showPlaceholder={colIndex === 0}\n      isUserContent\n      as=\"td\"\n      unit={unit}\n      alignRight={isCellAlignRight(cellType)}\n    >\n      {children}\n    </TableData>\n  );\n};\n","import { CSSProperties, useMemo } from 'react';\nimport {\n  findNode,\n  getBlockAbove,\n  getNodeString,\n  TNodeEntry,\n} from '@udecode/plate';\nimport {\n  ELEMENT_TABLE,\n  TableCellElement,\n  TableCellType,\n  TableElement,\n  TableHeaderElement,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { DragColumnItem, useTable } from '@decipad/editor-table';\nimport {\n  EditorTableContext,\n  EditorTableContextValue,\n} from '@decipad/react-contexts';\nimport {\n  AvailableSwatchColor,\n  EditorTable,\n  TableColumnHeader,\n  TableRow,\n  UserIconKey,\n} from '@decipad/ui';\nimport { DndCellPreview } from './DndCellPreview';\n\nconst previewOpacity = 0.7;\n\nconst ColumnPreview = ({\n  thEntry,\n  tableEntry,\n  style,\n}: {\n  style: CSSProperties;\n  thEntry: TNodeEntry<TableHeaderElement>;\n  tableEntry: TNodeEntry<TableElement>;\n}) => {\n  const [, thPath] = thEntry;\n  const [tableNode] = tableEntry;\n\n  const colIndex = thPath[thPath.length - 1];\n\n  const tableCells: TableCellElement[] = useMemo(() => {\n    const cells = [{ type: 'caption', children: [{ text: '' }] } as any];\n\n    tableNode.children.forEach((row, rowIndex) => {\n      row.children.forEach((cell, cellIndex) => {\n        if (rowIndex === 0) return;\n\n        if (cellIndex === colIndex) {\n          cells.push(cell as TableCellElement);\n        }\n      });\n    });\n\n    return cells;\n  }, [colIndex, tableNode.children]);\n\n  const { columns } = useTable(tableNode);\n\n  const blockId = tableNode.id;\n\n  const contextValue: EditorTableContextValue = useMemo(() => {\n    return {\n      blockId,\n      cellTypes: columns.map((col) => col.cellType),\n      columnBlockIds: columns.map((col) => col.blockId),\n      isCollapsed: false,\n    };\n  }, [blockId, columns]);\n\n  return (\n    <div style={{ ...style, opacity: previewOpacity, zIndex: 1 }}>\n      <EditorTableContext.Provider value={contextValue}>\n        <EditorTable\n          columns={columns}\n          previewMode\n          icon={(tableNode.icon ?? 'Table') as UserIconKey}\n          color={tableNode.color as AvailableSwatchColor}\n        >\n          {tableCells.map((cell, index) => {\n            const children = getNodeString(cell);\n\n            return (\n              <TableRow key={cell.id} previewMode>\n                {index === 1 && (\n                  <TableColumnHeader type={cell.cellType as TableCellType}>\n                    {children}\n                  </TableColumnHeader>\n                )}\n\n                {index > 1 && (\n                  <DndCellPreview colIndex={colIndex} element={cell}>\n                    {children}\n                  </DndCellPreview>\n                )}\n              </TableRow>\n            );\n          })}\n        </EditorTable>\n      </EditorTableContext.Provider>\n    </div>\n  );\n};\n\nexport const DndColumnPreview = (props: {\n  item: DragColumnItem;\n  style: CSSProperties;\n}) => {\n  const { item } = props;\n\n  const editor = useTEditorRef();\n\n  const thEntry = useMemo(\n    () =>\n      findNode<TableHeaderElement>(editor, {\n        match: { id: item.id },\n        at: [],\n      }),\n    [editor, item.id]\n  );\n\n  const tableEntry = useMemo(\n    () =>\n      thEntry &&\n      getBlockAbove<TableElement>(editor, {\n        match: { type: ELEMENT_TABLE },\n        at: thEntry[1],\n      }),\n    [editor, thEntry]\n  );\n\n  if (!thEntry || !tableEntry) return null;\n\n  return <ColumnPreview {...props} thEntry={thEntry} tableEntry={tableEntry} />;\n};\n","import { usePreview } from 'react-dnd-preview';\nimport { DRAG_ITEM_COLUMN, DragColumnItem } from '@decipad/editor-table';\nimport { useEditorRef } from '@udecode/plate';\nimport { useEffect, useRef } from 'react';\nimport { cssVar, setCssVar } from '@decipad/ui';\nimport { varStyles } from '@decipad/ui/src/styles/code-block';\nimport { useDndPreviewSelectors } from '@decipad/react-contexts';\nimport { DndColumnPreview } from './DndColumnPreview';\n\nexport const DndPreview = () => {\n  const editor = useEditorRef();\n\n  const previewText = useDndPreviewSelectors().previewText();\n\n  const previewRef = useRef(null);\n  const preview = usePreview<DragColumnItem>();\n  const { display } = preview;\n\n  useEffect(() => {\n    // eslint-disable-next-line no-param-reassign\n    editor.previewRef = previewRef;\n  }, [editor]);\n\n  return (\n    <>\n      {display && preview.itemType === DRAG_ITEM_COLUMN && (\n        <DndColumnPreview {...preview} />\n      )}\n      <div\n        ref={previewRef}\n        data-testid=\"preview-ref\"\n        style={{\n          position: 'absolute',\n          top: -9999,\n          left: -9999,\n          zIndex: 1000,\n        }}\n      >\n        <div\n          css={[\n            varStyles,\n            {\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n\n              padding: '2px 8px',\n\n              backgroundColor: cssVar('backgroundColor'),\n              border: `1px solid ${cssVar('borderColor')}`,\n              borderRadius: '8px',\n              ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n            },\n            {\n              transform: 'rotate(3deg)',\n            },\n          ]}\n        >\n          {previewText}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { Tooltip } from '../../atoms';\nimport { CircularArrow, CurvedArrow } from '../../icons';\nimport { cssVar, grey500, mediumShadow, p13Bold } from '../../primitives';\nimport { hideOnPrint } from '../../styles/editor-layout';\n\nconst wrapperStyles = css({\n  display: 'flex',\n  alignItems: 'center',\n  padding: '4px',\n  gap: '4px',\n  position: 'fixed',\n  height: '42px',\n  boxShadow: `0px 2px 24px -4px ${mediumShadow}`,\n  borderRadius: '8px',\n  bottom: '11px',\n  zIndex: 2,\n});\n\nconst buttonStyles = css({\n  width: '32px',\n  height: '32px',\n  backgroundColor: cssVar('buttonHoverBackground'),\n  borderRadius: 6,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\n\nconst inactiveStyles = {\n  cursor: 'default',\n};\n\nconst activeStyles = {\n  cursor: 'pointer',\n};\n\nconst activeButtonStyles = css({\n  backgroundColor: cssVar('buttonHoverBackground'),\n  ':hover': {\n    backgroundColor: cssVar('buttonHoverBackgroundHover'),\n  },\n});\n\nconst revertChangesStyles = css([\n  p13Bold,\n  {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingLeft: '16px',\n    paddingRight: '16px',\n    gap: '4px',\n    borderRadius: '6px',\n    height: '32px',\n    color: cssVar('weakerTextColor'),\n    backgroundColor: cssVar('buttonHoverBackground'),\n    ':hover': {\n      backgroundColor: cssVar('buttonHoverBackgroundHover'),\n    },\n  },\n]);\n\nconst activeRevertChangesStyles = css({\n  color: cssVar('normalTextColor'),\n  ':hover': {\n    backgroundColor: cssVar('buttonHoverBackgroundHover'),\n  },\n});\n\ntype State = 'saved' | 'unsaved' | 'offline' | 'error';\n\n// saved: all is ok, being || saved remotely and locally\n// unsaved: after the debouncing 2s we still couldnt save the document, || locally saved\n// offline: we have no access to the internet so things are || locally saved\n// error (unused): an error has happened, you should contact support (e.g. broken block)\n\nconst getColour = (\n  state: State\n): { background: string; foreground: string } => {\n  switch (state) {\n    case 'saved':\n      return {\n        background: cssVar('notebookStateOkLight'),\n        foreground: cssVar('notebookStateOkHeavy'),\n      };\n    case 'unsaved':\n      return {\n        background: cssVar('notebookStateWarningLight'),\n        foreground: cssVar('notebookStateWarningHeavy'),\n      };\n    case 'offline':\n      return {\n        background: cssVar('notebookStateDisabledLight'),\n        foreground: cssVar('notebookStateDisabledHeavy'),\n      };\n    case 'error':\n      return {\n        background: cssVar('notebookStateDangerLight'),\n        foreground: cssVar('notebookStateDangerHeavy'),\n      };\n  }\n};\n\nconst stateStyles = (state: State) => {\n  const colours = getColour(state);\n  return css({\n    width: '32px',\n    height: '32px',\n    borderRadius: '6px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    transition: 'all 0.2s ease-in-out',\n    backgroundColor: cssVar('buttonHoverBackground'),\n    ':hover': {\n      backgroundColor: colours.background,\n    },\n    ':after': {\n      content: '\"\"',\n      width: '6px',\n      borderRadius: '6px',\n      height: '6px',\n      backgroundColor: colours.foreground,\n    },\n  });\n};\n\nexport interface NotebookStateProps {\n  undo: () => void;\n  redo: () => void;\n  revertChanges: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n  readOnly: boolean;\n  saved: boolean;\n  isOffline: boolean;\n  authed: boolean;\n}\n\nconst getText = (readOnly: boolean, saved: boolean, isOffline: boolean) => {\n  if (readOnly) {\n    return (\n      <>\n        <p>Play with this notebook 🕹️</p>\n        <p>\n          <span css={{ color: grey500.rgb }}>\n            Duplicate if you have an account. <br /> Or sign up for early\n            access.\n          </span>\n        </p>\n      </>\n    );\n  }\n  if (isOffline) {\n    return (\n      <>\n        <p>Offline 🌐</p>\n        <p>\n          <span css={{ color: grey500.rgb }}>\n            We're saving your work and your changes will sync when you are back\n            online. <br /> If you think something is wrong contact support.\n          </span>\n        </p>\n      </>\n    );\n  }\n  if (!saved) {\n    return (\n      <>\n        <p>Changes not synced</p>\n        <p>\n          <span css={{ color: grey500.rgb }}>\n            If this error persists contact support.\n          </span>\n        </p>\n      </>\n    );\n  }\n  return <p>Notebook saved</p>;\n};\n\nexport const NotebookState: FC<NotebookStateProps> = ({\n  undo,\n  redo,\n  revertChanges,\n  canUndo,\n  canRedo,\n  readOnly,\n  saved,\n  isOffline,\n  authed,\n}) => {\n  const state = isOffline\n    ? 'offline'\n    : readOnly || !saved\n    ? 'unsaved'\n    : 'saved';\n  return (\n    <div\n      css={[\n        wrapperStyles,\n        hideOnPrint,\n        {\n          right: !authed ? '14px' : '80px',\n        },\n        !canUndo && readOnly && { display: 'none' },\n      ]}\n    >\n      <div css={[buttonStyles, canUndo && activeButtonStyles]}>\n        <button\n          css={[\n            { width: 24, height: 24 },\n            inactiveStyles,\n            canUndo && activeStyles,\n          ]}\n          onClick={undo}\n          title={canUndo ? 'Undo ⌘ + Z' : ''}\n        >\n          <CurvedArrow direction=\"left\" active={canUndo} />\n        </button>\n      </div>\n      <div css={[buttonStyles, canRedo && activeButtonStyles]}>\n        <button\n          css={[\n            { width: 24, height: 24 },\n            inactiveStyles,\n            canRedo && activeStyles,\n          ]}\n          onClick={redo}\n          title={canRedo ? 'Redo ⌘ + SHIFT + Z' : ''}\n        >\n          <CurvedArrow direction=\"right\" active={canRedo} />\n        </button>\n      </div>\n      {readOnly && (\n        <button\n          css={[\n            revertChangesStyles,\n            inactiveStyles,\n            canUndo && activeStyles,\n            canUndo && activeRevertChangesStyles,\n          ]}\n          onClick={revertChanges}\n          title={!canUndo ? 'Reset all changes to the document' : ''}\n        >\n          <div css={{ width: 16, height: 16 }}>\n            <CircularArrow />\n          </div>\n          Reset Changes\n        </button>\n      )}\n      <Tooltip\n        trigger={<div aria-label={state} css={stateStyles(state)}></div>}\n        side=\"top\"\n        hoverOnly\n        wrapperStyles={css({\n          marginRight: '16px',\n          borderRadius: '8px',\n        })}\n      >\n        <div css={[{ maxWidth: '200px' }]}>\n          {getText(readOnly, saved, isOffline)}\n        </div>\n      </Tooltip>\n    </div>\n  );\n};\n","import { FC, useState, useEffect, useCallback } from 'react';\nimport { BehaviorSubject, debounceTime } from 'rxjs';\nimport { useTPlateEditorState } from '@decipad/editor-types';\nimport { useIsOffline } from '@decipad/editor-utils';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { NotebookState as UINotebookState } from '@decipad/ui';\nimport { useSession } from 'next-auth/react';\n\ninterface NotebookStateProps {\n  isSavedRemotely?: BehaviorSubject<boolean>;\n}\n\n// In milliseconds\nconst DEBOUNCE_TIME = 2000;\n\nexport const NotebookState: FC<NotebookStateProps> = ({ isSavedRemotely }) => {\n  const [saved, setSaved] = useState(true);\n  const session = useSession();\n\n  useEffect(() => {\n    const sub = isSavedRemotely\n      ?.pipe(debounceTime(DEBOUNCE_TIME))\n      .subscribe((newSaved) => setSaved(newSaved));\n    return () => sub?.unsubscribe();\n  }, [isSavedRemotely]);\n\n  // State editor because this component needs to re-render on state changes.\n  const editor = useTPlateEditorState();\n  const readOnly = useIsEditorReadOnly();\n\n  const canUndo = !!editor.undoManager?.canUndo?.();\n  const canRedo = !!editor.undoManager?.canRedo?.();\n\n  const revertChanges = useCallback(() => {\n    while (editor.undoManager?.canUndo?.()) {\n      editor.undo();\n    }\n  }, [editor]);\n\n  const { isOffline } = useIsOffline();\n\n  return (\n    <UINotebookState\n      undo={editor.undo}\n      redo={editor.redo}\n      revertChanges={revertChanges}\n      canUndo={canUndo}\n      canRedo={canRedo}\n      readOnly={readOnly}\n      saved={saved}\n      isOffline={isOffline}\n      authed={session.status === 'authenticated'}\n    />\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nexport const useIsOffline = () => {\n  const [isOffline, setIsOffline] = useState(false);\n\n  const handleOfflineStatusChange = useCallback(async () => {\n    if (!navigator.onLine) {\n      const resp = await fetch(window.location.href);\n      setIsOffline(!resp.ok);\n    } else {\n      setIsOffline(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if ('addEventListener' in global) {\n      global.addEventListener('online', handleOfflineStatusChange);\n      global.addEventListener('offline', handleOfflineStatusChange);\n    }\n    return () => {\n      if ('removeEventListener' in global) {\n        global.removeEventListener('online', handleOfflineStatusChange);\n        global.removeEventListener('offline', handleOfflineStatusChange);\n      }\n    };\n  }, [handleOfflineStatusChange]);\n\n  return { isOffline };\n};\n","import { MutableRefObject, useCallback } from 'react';\nimport autoAnimate, { AutoAnimateOptions } from '@formkit/auto-animate';\nimport {\n  easing as defaultEasing,\n  shortAnimationDurationMs as defaultDuration,\n} from '@decipad/ui';\n\nconst supportsAnimation = process.browser && 'IntersectionObserver' in global;\n\ninterface AutoAnimateValue {\n  onRefChange: (ref: MutableRefObject<HTMLElement | undefined>) => void;\n}\n\nfunction useAutoAnimate({\n  easing = defaultEasing,\n  duration = defaultDuration,\n}: Partial<AutoAnimateOptions> = {}): AutoAnimateValue {\n  const onRefChange = useCallback(\n    (ref: MutableRefObject<HTMLElement | undefined>) => {\n      if (supportsAnimation && ref.current instanceof HTMLElement)\n        autoAnimate(ref.current, { easing, duration });\n    },\n    [duration, easing]\n  );\n\n  return { onRefChange };\n}\n\nexport { useAutoAnimate };\n","import { useTEditorRef } from '@decipad/editor-types';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { useCallback } from 'react';\n\nexport const useUndo = () => {\n  const editor = useTEditorRef();\n  useWindowListener(\n    'keydown',\n    useCallback(\n      (event) => {\n        if (event.metaKey || event.ctrlKey) {\n          if (event.key === 'z' && !event.shiftKey) {\n            event.preventDefault();\n            event.stopPropagation();\n            editor.undo();\n          } else if (\n            event.key === 'Z' ||\n            (event.key === 'z' && event.shiftKey)\n          ) {\n            event.preventDefault();\n            event.stopPropagation();\n            editor.redo();\n          }\n        }\n      },\n      [editor]\n    )\n  );\n};\n","import { MyEditor } from '@decipad/editor-types';\nimport { focusEditor } from '@udecode/plate';\nimport { useState, useCallback } from 'react';\nimport { ReactEditor } from 'slate-react';\n\nexport const useWriteLock = (editor: ReactEditor) => {\n  const [writeLockCount, setWriteLockCount] = useState(0);\n  const lockWriting = useCallback(() => {\n    setWriteLockCount((prevCount) => prevCount + 1);\n    let locked = true;\n    return () => {\n      if (locked) {\n        locked = false;\n        const { selection } = editor;\n        setWriteLockCount((prevCount) => {\n          const newCount = prevCount - 1;\n          if (newCount === 0) {\n            // Slightly risky hack to re-focus the editor after it lost focus because it was temporarily readonly\n            setTimeout(() => {\n              if (selection) {\n                focusEditor(editor as MyEditor, selection);\n              }\n            }, 0);\n          }\n          return newCount;\n        });\n      }\n    };\n  }, [editor]);\n  return { isWritingLocked: writeLockCount > 0, lockWriting };\n};\n","import {\n  TeleportEditor,\n  NumberCatalog,\n  BlockLengthSynchronizationProvider,\n} from '@decipad/editor-components';\nimport { MyEditor, MyValue } from '@decipad/editor-types';\nimport {\n  EditorBlockParentRefProvider,\n  EditorChangeContextProvider,\n  EditorReadOnlyContext,\n} from '@decipad/react-contexts';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { LoadingFilter } from '@decipad/ui';\nimport { Plate } from '@udecode/plate';\nimport { EditorLayout, EditorPlaceholder } from 'libs/ui/src/atoms';\nimport { ReactNode, RefObject, useCallback, useRef, useState } from 'react';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { ReactEditor } from 'slate-react';\nimport { CursorOverlay, RemoteAvatarOverlay, Tooltip } from './components';\nimport { DndPreview } from './components/DndPreview/DndPreview';\nimport { NotebookState } from './components/NotebookState/NotebookState';\nimport { useAutoAnimate } from './hooks';\nimport { useUndo } from './hooks/useUndo';\nimport { useWriteLock } from './utils/useWriteLock';\n\nexport interface EditorProps {\n  notebookId: string;\n  isSavedRemotely?: BehaviorSubject<boolean>;\n  readOnly: boolean;\n  editor?: MyEditor;\n  children?: ReactNode;\n}\n\nconst InsidePlate = ({\n  containerRef,\n  children,\n  readOnly,\n}: EditorProps & {\n  containerRef: RefObject<HTMLDivElement>;\n}) => {\n  // setup undo\n  useUndo();\n\n  // upload / fetch data\n  return (\n    <>\n      <Tooltip />\n      <CursorOverlay containerRef={containerRef} />\n      <RemoteAvatarOverlay containerRef={containerRef} />\n      {readOnly ? null : <NumberCatalog />}\n      <DndPreview />\n      {children}\n    </>\n  );\n};\n\n/**\n * TODO: remove Plate.id after plate patch\n */\nexport const Editor = (props: EditorProps) => {\n  const { isSavedRemotely, editor, readOnly } = props;\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [changeSubject] = useState(() => new Subject<undefined>());\n  const onChange = useCallback(() => {\n    // Make sure all components have been updated with the new change.\n    setTimeout(() => {\n      changeSubject.next(undefined);\n    });\n  }, [changeSubject]);\n\n  const { isWritingLocked, lockWriting } = useWriteLock(editor as ReactEditor);\n  const { onRefChange } = useAutoAnimate();\n\n  // When in read-mode, disallow any kind of drag & drop.\n  useWindowListener(\n    'dragstart',\n    (e) => {\n      if (readOnly) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    },\n    true\n  );\n\n  if (!editor) {\n    return <EditorPlaceholder />;\n  }\n\n  return (\n    <EditorReadOnlyContext.Provider\n      value={{ readOnly: readOnly || isWritingLocked, lockWriting }}\n    >\n      <EditorChangeContextProvider changeSubject={changeSubject}>\n        <LoadingFilter loading={isWritingLocked}>\n          <EditorBlockParentRefProvider onRefChange={onRefChange}>\n            <EditorLayout ref={containerRef}>\n              <BlockLengthSynchronizationProvider editor={editor}>\n                <TeleportEditor editor={editor}>\n                  <Plate<MyValue>\n                    editor={editor}\n                    onChange={onChange}\n                    readOnly={\n                      // Only respect write locks here and not the readOnly prop.\n                      // Even if !readOnly, we never lock the entire editor but always keep some elements editable.\n                      // The rest are controlled via EditorReadOnlyContext.\n                      isWritingLocked\n                    }\n                    disableCorePlugins={{\n                      history: true,\n                    }}\n                  >\n                    <InsidePlate {...props} containerRef={containerRef} />\n                    <NotebookState isSavedRemotely={isSavedRemotely} />\n                  </Plate>\n                </TeleportEditor>\n              </BlockLengthSynchronizationProvider>\n            </EditorLayout>\n          </EditorBlockParentRefProvider>\n        </LoadingFilter>\n      </EditorChangeContextProvider>\n    </EditorReadOnlyContext.Provider>\n  );\n};\n","import { MyValue } from '@decipad/editor-types';\nimport { N } from '@decipad/number';\nimport { nanoid } from 'nanoid';\n\nexport const emptyNotebook = (): MyValue => [\n  {\n    type: 'h1',\n    id: nanoid(),\n    children: [\n      {\n        text: '',\n      },\n    ],\n  },\n  {\n    type: 'p',\n    id: nanoid(),\n    children: [\n      {\n        text: '',\n      },\n    ],\n  },\n];\n\nexport const introNotebook = (): MyValue => [\n  {\n    children: [\n      {\n        text: '🦄 Make sense of numbers today',\n      },\n    ],\n    type: 'h1',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: '🎸 Play first, read later',\n      },\n    ],\n    type: 'h2',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            text: 'You = 55 kg',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            text: 'Feather = 0.008 g',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            text: 'You in Feather',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n    ],\n    type: 'code_block',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: '🤔 What is Decipad',\n      },\n    ],\n    type: 'h2',\n    id: nanoid(),\n  },\n  {\n    type: 'p',\n    id: nanoid(),\n    children: [\n      {\n        text: 'From crypto to cashflows, everyone should be able to explore cool and interesting things with data. Decipad is an interactive notebook to gather information, build models in minutes and bring data-driven ideas to life.',\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text: 'Decipad is an interactive document to gather information, build models in minutes and bring data-driven ideas to life.',\n      },\n    ],\n    type: 'blockquote',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: 'Just start writing. No coding skills required.',\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: '🤩 What can I do with it?',\n      },\n    ],\n    type: 'h3',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            children: [\n              {\n                text: 'Narrative to numbers, instantly',\n                bold: true,\n              },\n              {\n                text: ': Supercharge your thoughts with live data, calculations and visuals; make all your documents interactive.',\n              },\n            ],\n            type: 'lic',\n            id: nanoid(),\n          },\n        ],\n        type: 'li',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            children: [\n              {\n                text: 'Easy to use, fast to model',\n                bold: true,\n              },\n              {\n                text: ': ',\n              },\n              {\n                text: 'SUMIF',\n                code: true,\n              },\n              {\n                text: ', ',\n              },\n              {\n                text: 'B1 + B2',\n                code: true,\n              },\n              {\n                text: ', ',\n              },\n              {\n                text: 'VLOOKUP',\n                code: true,\n              },\n              {\n                text: '? Use human language to build models easily and quickly, that anyone can understand.',\n              },\n            ],\n            type: 'lic',\n            id: nanoid(),\n          },\n        ],\n        type: 'li',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            children: [\n              {\n                text: 'Share your work, create collectively',\n                bold: true,\n              },\n              {\n                text: ': Think bigger. Reuse and build upon concepts created by analysts, programmers, colleagues and creators.',\n              },\n            ],\n            type: 'lic',\n            id: nanoid(),\n          },\n        ],\n        type: 'li',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            children: [\n              {\n                text: 'Unlimited potential, any skill set',\n                bold: true,\n              },\n              {\n                text: ': Transition seamlessly between nifty low-code elements and our natural, yet powerful language.',\n              },\n            ],\n            type: 'lic',\n            id: nanoid(),\n          },\n        ],\n        type: 'li',\n        id: nanoid(),\n      },\n    ],\n    type: 'ol',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: '👏Want to make better decisions?',\n      },\n    ],\n    type: 'h2',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: \"Let's go! \",\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: 'ℹ️ Decipad can be a bit intimidating at first. We are still working on making it easier for people to use. In the meantime, join us on Discord and we will be delighted to hear from you.',\n      },\n    ],\n    type: 'blockquote',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            children: [\n              {\n                text: '🌍 ',\n              },\n              {\n                children: [\n                  {\n                    text: 'Discord',\n                  },\n                ],\n                type: 'a',\n                id: nanoid(),\n                url: 'https://discord.gg/CUtKEd3rBn',\n              },\n              {\n                text: '',\n              },\n            ],\n            type: 'lic',\n            id: nanoid(),\n          },\n        ],\n        type: 'li',\n        id: nanoid(),\n      },\n    ],\n    type: 'ul',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: \"Let's learn to improve your runs with Decipad.\",\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            text: 'RunningGoal = 3 miles/day',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            text: 'TargetFrequency = 5 days/week',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            text: 'TargetDistance = RunningGoal * TargetFrequency',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n    ],\n    type: 'code_block',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: 'Or if you are outside the united states:',\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            text: 'round(RunningGoal in km/day)',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n    ],\n    type: 'code_block',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: 'And for those 🌧 rainy days you have to stick to an indoor track:',\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            text: 'UsualRun = 3.2 miles',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            text: 'IndoorTrack = 400 m',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n      {\n        children: [\n          {\n            text: 'round(UsualRun in IndoorTrack)',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n    ],\n    type: 'code_block',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: \"Now let's list your top three favourite routes:\",\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: '',\n      },\n    ],\n    type: 'table-input',\n    id: nanoid(),\n    tableData: {\n      variableName: 'Routes',\n      columns: [\n        {\n          columnName: 'Name',\n          cells: ['🏝 Sandy Beach', '🏰 Buckingham Palace', '🏞 Yosemite'],\n          cellType: {\n            kind: 'string',\n          },\n        },\n        {\n          columnName: 'Distance',\n          cellType: {\n            kind: 'number',\n            unit: [\n              {\n                unit: 'miles',\n                exp: N(1),\n                multiplier: N(1),\n                known: true,\n              },\n            ],\n          },\n          cells: ['3.2', '5', '12'],\n        },\n      ],\n    },\n  },\n  {\n    children: [\n      {\n        text: \"Some training books say you should aim to improve your runs no more than 10% week on week. Let's set the baseline speed you currently run at:\",\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            text: 'Baseline = 5 miles/hour',\n          },\n        ],\n        id: nanoid(),\n        type: 'code_line',\n      },\n      {\n        children: [\n          {\n            text: 'Improvement = 5%',\n          },\n        ],\n        id: nanoid(),\n        type: 'code_line',\n      },\n    ],\n    type: 'code_block',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: 'So you should aim for the following times:',\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        children: [\n          {\n            text: 'YourTrainingPlan = {\\n  Period = [date(2022-03) .. date(2022-06) by month]\\n  TargetSpeed = round(grow(Baseline, Improvement, YourTrainingPlan.Period), 2)\\n  TargetTime = round(Routes.Distance / TargetSpeed in minutes)\\n}',\n          },\n        ],\n        type: 'code_line',\n        id: nanoid(),\n      },\n    ],\n    type: 'code_block',\n    id: nanoid(),\n  },\n  {\n    children: [\n      {\n        text: \"Don't forget to keep having fun in your runs, and above all welcome to Decipad 🤗\",\n      },\n    ],\n    type: 'p',\n    id: nanoid(),\n  },\n];\n","import { FC, useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { ReactEditor } from 'slate-react';\nimport { Subject } from 'rxjs';\nimport { createPlateEditor, Plate } from '@udecode/plate';\nimport { EditorLayout, LoadingFilter } from '@decipad/ui';\nimport {\n  ComputerContextProvider,\n  EditorChangeContextProvider,\n  EditorReadOnlyContext,\n  useComputer,\n  useEditorUserInteractionsContext,\n} from '@decipad/react-contexts';\nimport { MyValue } from '@decipad/editor-types';\nimport {\n  TeleportEditor,\n  NumberCatalog,\n  BlockLengthSynchronizationProvider,\n} from '@decipad/editor-components';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { plugins } from '@decipad/editor-config';\nimport { Tooltip } from './components';\nimport { emptyNotebook, introNotebook } from './exampleNotebooks';\nimport { POPULATE_PLAYGROUND } from './utils/storage';\nimport { useWriteLock } from './utils/useWriteLock';\n\nexport const NoDocSyncEditorInternal: FC = () => {\n  const computer = useComputer();\n  const events = useContext(ClientEventsContext);\n\n  const interactions = useEditorUserInteractionsContext();\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const editorPlugins = useMemo(\n    () =>\n      plugins({\n        computer,\n        readOnly: false,\n        events,\n        interactions,\n      }),\n    [computer, events, interactions]\n  );\n\n  const [editor] = useState(() =>\n    createPlateEditor<MyValue>({ plugins: editorPlugins })\n  );\n\n  const [changeSubject] = useState(() => new Subject<undefined>());\n  const onChange = useCallback(() => {\n    // Make sure all components have been updated with the new change.\n    setTimeout(() => {\n      changeSubject.next(undefined);\n    });\n  }, [changeSubject]);\n\n  const { isWritingLocked, lockWriting } = useWriteLock(editor as ReactEditor);\n\n  return (\n    <EditorChangeContextProvider changeSubject={changeSubject}>\n      <EditorReadOnlyContext.Provider\n        value={{ readOnly: isWritingLocked, lockWriting }}\n      >\n        <LoadingFilter loading={isWritingLocked}>\n          <EditorLayout ref={containerRef}>\n            <BlockLengthSynchronizationProvider editor={editor}>\n              <TeleportEditor editor={editor}>\n                <Plate<MyValue>\n                  editor={editor}\n                  onChange={onChange}\n                  initialValue={\n                    window.localStorage.getItem(POPULATE_PLAYGROUND) === 'true'\n                      ? introNotebook()\n                      : emptyNotebook()\n                  }\n                  readOnly={isWritingLocked}\n                >\n                  <NumberCatalog />\n                  <Tooltip />\n                </Plate>\n              </TeleportEditor>\n            </BlockLengthSynchronizationProvider>\n          </EditorLayout>\n        </LoadingFilter>\n      </EditorReadOnlyContext.Provider>\n    </EditorChangeContextProvider>\n  );\n};\n\nexport const NoDocSyncEditor: FC = () => {\n  return (\n    <ComputerContextProvider>\n      <NoDocSyncEditorInternal />\n    </ComputerContextProvider>\n  );\n};\n","export const POPULATE_PLAYGROUND = 'deciPopulatePlayground';\n","import fetch from 'isomorphic-fetch';\nimport { HttpError } from '../utils/HttpError';\n\ninterface ErrorResponseBody {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\ninterface RequestResponse {\n  contentType?: string | null;\n  statusCode?: number;\n  body: string | JSON;\n}\n\nexport async function request(\n  url: URL,\n  json = false\n): Promise<RequestResponse> {\n  const fetchOptions = {\n    method: 'GET',\n    headers: {\n      Referer: global.location.toString(),\n    },\n  };\n  const response = await fetch(url.toString(), fetchOptions);\n\n  if (!response.ok) {\n    await handleResponseError(response);\n  }\n\n  return {\n    contentType: response.headers.get('content-type'),\n    statusCode: response.status,\n    body: await (json ? response.json() : response.text()),\n  };\n}\n\nasync function handleResponseError(response: Response) {\n  const responseBodyString = await response.text();\n  let responseBodyJson: ErrorResponseBody | undefined;\n  try {\n    responseBodyJson = JSON.parse(responseBodyString as string);\n  } catch (err) {\n    // do nothing\n  }\n  const error = responseBodyJson?.error\n    ? HttpError.fromResponse(responseBodyJson?.error)\n    : new Error(responseBodyString);\n  throw error;\n}\n","import { Computer } from '@decipad/computer';\nimport {\n  ColIndex,\n  ImportElementSource,\n  TableCellType,\n} from '@decipad/editor-types';\nimport { importFromUnknown } from './importFromUnknown';\nimport { decipad, gsheets } from './providers';\nimport { ImportResult } from './types';\n\nexport interface ImportOptions {\n  identifyIslands?: boolean;\n  useFirstRowAsHeader?: boolean;\n  columnTypeCoercions?: Record<ColIndex, TableCellType>;\n  doNotTryExpressionNumbersParse?: boolean;\n  maxCellCount?: number;\n}\n\nconst internalTryImport = (\n  computer: Computer,\n  url: URL,\n  provider?: ImportElementSource,\n  options: ImportOptions = {}\n): Promise<ImportResult[]> => {\n  if (provider) {\n    switch (provider) {\n      case 'gsheets':\n        return gsheets.import(computer, url, options);\n      case 'decipad':\n        return decipad.import();\n    }\n  }\n  return importFromUnknown(computer, url, options);\n};\n\nexport const tryImport = async (\n  computer: Computer,\n  url: URL,\n  provider?: ImportElementSource,\n  options: ImportOptions = {}\n): Promise<ImportResult[]> => {\n  const { identifyIslands, ...restOptions } = options;\n  let result = await internalTryImport(computer, url, provider, options);\n  if (result.length === 1 && identifyIslands) {\n    result = await internalTryImport(computer, url, provider, restOptions);\n  }\n  return result;\n};\n","import {\n  Interpreter,\n  Result,\n  SerializedType,\n  SerializedTypes,\n} from '@decipad/computer';\nimport { N } from '@decipad/number';\nimport { getDefined } from '@decipad/utils';\nimport { tableFromIPC, Table, Type as ArrowType } from 'apache-arrow';\nimport { errorResult } from './utils/errorResult';\n\ninterface ToStringable {\n  toString: () => string;\n}\n\nexport function toInternalType(_type: ArrowType): SerializedType {\n  let type: string | ArrowType = _type;\n  if (\n    typeof _type === 'object' &&\n    typeof (_type as ToStringable).toString === 'function'\n  ) {\n    type = (_type as ToStringable).toString();\n  }\n  switch (type) {\n    case 'Bool':\n    case ArrowType.Bool:\n      return {\n        kind: 'boolean',\n      };\n    case 'Date':\n    case 'DateMillisecond':\n    case 'Date64<MILLISECOND>':\n    case ArrowType.DateMillisecond:\n      // TODO: get granularity from date\n      return {\n        kind: 'date',\n        date: 'millisecond',\n      };\n    case 'Float':\n    case 'Float16':\n    case 'Float32':\n    case 'Float64':\n    case ArrowType.Float:\n    case ArrowType.Float16:\n    case ArrowType.Float32:\n    case ArrowType.Float64:\n      return { kind: 'number', unit: null };\n    case 'Dictionary<Int32, Utf8>':\n    case 'Utf8':\n    case ArrowType.Utf8:\n      return { kind: 'string' };\n    default:\n      return {\n        kind: 'type-error',\n        errorCause: {\n          errType: 'free-form',\n          message: `Don't know how to convert from arrow type ${type} to internal type`,\n        },\n      };\n  }\n}\n\nconst inferData = (data: Table): SerializedType => {\n  const columnTypes: SerializedType[] = [];\n  const columnNames: string[] = [];\n\n  for (let colIndex = 0; colIndex < data.numCols; colIndex += 1) {\n    const columnMeta = data.schema.fields[colIndex];\n    try {\n      const column = getDefined(data.getChildAt(colIndex));\n      const columnType: SerializedType = toInternalType(column.type);\n      columnTypes.push(columnType);\n      columnNames.push(columnMeta.name);\n    } catch (err) {\n      return {\n        kind: 'type-error',\n        errorCause: {\n          errType: 'free-form',\n          message: `Error inferring type of column ${columnMeta.name}: ${\n            (err as Error).message\n          }`,\n        },\n      };\n    }\n  }\n\n  return {\n    kind: 'table',\n    indexName: columnNames[0],\n    columnTypes,\n    columnNames,\n  };\n};\n\nconst evaluateCell = (cell: unknown): Result.OneResult => {\n  const tof = typeof cell;\n  if (cell == null) {\n    return Result.UnknownValue.getData();\n  }\n  if (tof === 'number') {\n    return N(cell as number);\n  }\n  if (tof === 'boolean' || tof === 'string') {\n    return cell as string | boolean;\n  }\n  if (typeof cell === 'object') {\n    if (cell instanceof Date) {\n      return BigInt(cell.getTime());\n    }\n    if ('toString' in cell && typeof cell.toString === 'function') {\n      return cell.toString();\n    }\n  }\n  return Result.UnknownValue.getData();\n};\n\nconst evaluateData = (\n  _type: SerializedTypes.Table,\n  data: Table\n): Result.Result<'table'>['value'] => {\n  const colValues: Interpreter.ResultColumn[] = [];\n\n  for (let colIndex = 0; colIndex < data.numCols; colIndex += 1) {\n    const column = getDefined(\n      data.getChildAt(colIndex),\n      `expected column at ${colIndex}`\n    );\n    const values: Interpreter.ResultColumn = [];\n    for (let rowIndex = 0; rowIndex < column.length; rowIndex += 1) {\n      values.push(evaluateCell(column.get(rowIndex)));\n    }\n    colValues.push(values);\n  }\n\n  return colValues;\n};\n\nexport const importFromArrow = async (\n  resp: Response\n): Promise<Result.Result> => {\n  const arrowTable = await tableFromIPC(resp);\n  const type = inferData(arrowTable);\n  if (type.kind === 'table') {\n    return {\n      type,\n      value: evaluateData(type, arrowTable),\n    };\n  }\n  if (type.kind === 'type-error') {\n    return {\n      type,\n      value: Result.UnknownValue.getData(),\n    };\n  }\n  return errorResult(`Unexpected result of type ${type.kind}`);\n};\n","import { parse as parseCSV } from 'csv-parse';\nimport { Computer, Result } from '@decipad/computer';\nimport { inferTable } from '@decipad/parse';\nimport { pivot } from './utils/pivot';\nimport { Sheet, SpreadsheetValue } from './types';\nimport type { ImportOptions } from './import';\nimport { trimSheet } from './utils/trimSheet';\n\nconst toColumnOriented = (rowOrientedData: SpreadsheetValue[][]): Sheet => {\n  return {\n    values: pivot(rowOrientedData),\n  };\n};\n\nexport const importFromCsv = async (\n  computer: Computer,\n  resp: Response,\n  options: ImportOptions\n): Promise<Result.Result<'table'>> => {\n  const source = await resp.text();\n  return new Promise((resolve, reject) => {\n    const data: string[][] = [];\n    const parser = parseCSV({\n      cast: true,\n      trim: true,\n      delimiter: [',', ';'],\n      relax_quotes: true,\n      relax_column_count: true,\n      skip_empty_lines: true,\n    });\n    let isDone = false;\n    parser.on('readable', () => {\n      let row;\n      while ((row = parser.read())) {\n        if (!isDone) {\n          data.push(row);\n        }\n      }\n    });\n    parser.once('end', async () => {\n      isDone = true;\n      try {\n        const sheet = trimSheet(toColumnOriented(data));\n        resolve(\n          await inferTable(computer, sheet, {\n            ...options,\n            doNotTryExpressionNumbersParse: true,\n          })\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n    parser.once('error', reject);\n    parser.end(source);\n  });\n};\n","import { Computer, Result } from '@decipad/computer';\nimport type { ImportOptions } from './import';\nimport { importFromArrow } from './importFromArrow';\nimport { importFromCsv } from './importFromCsv';\nimport { importFromUnknownJson } from './importFromUnknownJson';\nimport { ImportResult } from './types';\n\nconst importFromUnknownResponse = async (\n  computer: Computer,\n  resp: Response,\n  options: ImportOptions,\n  url?: URL\n): Promise<ImportResult[]> => {\n  if (!resp.ok) {\n    throw new Error(\n      `failed to fetch from ${url} with response ${resp.status}: ${resp.statusText}`\n    );\n  }\n  const contentType = resp.headers.get('content-type');\n  let result: Result.Result | undefined;\n  if (contentType?.startsWith('application/json')) {\n    result = importFromUnknownJson(await resp.json(), options);\n  } else if (contentType?.startsWith('text/csv')) {\n    result = (await importFromCsv(computer, resp, options)) as Result.Result;\n  } else if (contentType?.startsWith('application/vnd.apache.arrow')) {\n    result = await importFromArrow(resp);\n  } else {\n    result = {\n      type: {\n        kind: 'string',\n      },\n      value: await resp.text(),\n    };\n  }\n\n  return [\n    {\n      meta: {\n        sourceUrl: url,\n      },\n      result,\n    },\n  ];\n};\n\nconst importFromUnknownUrl = async (\n  computer: Computer,\n  url: URL,\n  options: ImportOptions = {}\n): Promise<ImportResult[]> => {\n  try {\n    return importFromUnknownResponse(computer, await fetch(url), options, url);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(`Error making request to ${url}`, err);\n    throw err;\n  }\n};\n\nexport const importFromUnknown = (\n  computer: Computer,\n  source: URL | Response,\n  options: ImportOptions\n): Promise<ImportResult[]> => {\n  if (source instanceof URL) {\n    return importFromUnknownUrl(computer, source, options);\n  }\n  return importFromUnknownResponse(computer, source as Response, options);\n};\n","import { Result } from '@decipad/computer';\nimport { ColIndex, TableCellType } from '@decipad/editor-types';\nimport { N } from '@decipad/number';\nimport { columnNameFromIndex, parseBoolean, parseDate } from '@decipad/parse';\nimport type { ImportOptions } from './import';\nimport { errorResult } from './utils/errorResult';\nimport { sameType } from './utils/sameType';\n\nconst importTableFromArray = (\n  arr: Array<unknown>,\n  options: ImportOptions\n): Result.Result => {\n  if (arr.length === 0) {\n    return errorResult('Don`t know how to import empty array');\n  }\n  return importTableFromObject(\n    Object.fromEntries(\n      arr.map((elem, index) => [columnNameFromIndex(index), elem])\n    ),\n    options\n  );\n};\n\nconst importFromArray = (\n  arr: Array<unknown>,\n  options: ImportOptions\n): Result.Result => {\n  if (arr.length === 0) {\n    return {\n      type: {\n        kind: 'anything',\n      },\n      value: Result.UnknownValue.getData(),\n    };\n  }\n  if (arr.some((elem) => Array.isArray(elem))) {\n    return importTableFromArray(arr, options);\n  }\n  const results = arr.map((cell) => importFromUnknownJson(cell, options));\n  if (!sameType(results.map(({ type }) => type))) {\n    return errorResult('not all elements of array are of same type');\n  }\n  return {\n    type: {\n      kind: 'column',\n      indexedBy: null,\n      cellType: results[0].type,\n      columnSize: 'unknown',\n    },\n    value: results.map((r) => r.value) as Result.Result<'column'>['value'],\n  };\n};\n\nconst importTableFromObject = (\n  obj: Record<string, unknown>,\n  options: ImportOptions\n): Result.Result => {\n  const entries = Object.entries(obj);\n  if (entries.length < 0) {\n    return errorResult('Don`t know how to import an empty object');\n  }\n  const results = entries\n    .map(([, value], index) => [index, value])\n    .map(([index, value]) =>\n      importFromUnknownJson(\n        value,\n        options,\n        options.columnTypeCoercions?.[index as ColIndex]\n      )\n    );\n\n  const value = results.map((res) => {\n    if (res.value == null) {\n      return Result.UnknownValue.getData();\n    }\n    if (res.type.kind === 'column') {\n      return res.value as Result.Result['value'];\n    }\n    if (res.type.kind === 'type-error') {\n      return res.value as Result.Result['value'];\n    }\n    return [res.value] as Result.Result['value'];\n  }) as Result.Result<'table'>['value'];\n\n  const columnNames = Object.keys(obj);\n\n  const r: Result.Result<'table'> = {\n    type: {\n      kind: 'table',\n      columnNames,\n      columnTypes: results.map((res) => {\n        if (res.type.kind === 'column') {\n          return res.type.cellType;\n        }\n        return res.type;\n      }),\n      indexName: columnNames[0],\n    },\n    value,\n  };\n\n  return r as Result.Result;\n};\n\ninterface ToStringable {\n  toString: () => string;\n}\n\nexport const importFromUnknownJson = (\n  json: unknown,\n  options: ImportOptions,\n  cohersion?: TableCellType\n): Result.Result => {\n  if (Array.isArray(json)) {\n    return importFromArray(json, options);\n  }\n  const tof = typeof json;\n  if (cohersion?.kind === 'string') {\n    return {\n      type: {\n        ...cohersion,\n      },\n      value: (json as ToStringable).toString(),\n    };\n  }\n\n  if ((tof === 'number' || tof === 'bigint') && cohersion?.kind === 'date') {\n    return {\n      type: {\n        ...cohersion,\n      },\n      value: BigInt(json as number),\n    };\n  }\n\n  if (\n    tof === 'number' ||\n    tof === 'bigint' ||\n    (tof === 'string' && cohersion?.kind === 'number')\n  ) {\n    return {\n      type: {\n        kind: 'number',\n        unit: null,\n      },\n      value: N(json as number | bigint | string),\n    };\n  }\n  if (\n    tof === 'boolean' ||\n    (tof === 'string' && cohersion?.kind === 'boolean')\n  ) {\n    return {\n      type: {\n        kind: 'boolean',\n      },\n      value:\n        tof === 'boolean' ? (json as boolean) : parseBoolean(json as string),\n    };\n  }\n  if (tof === 'string') {\n    const value = (json as string).trim();\n    if (value) {\n      if (cohersion?.kind === 'date') {\n        const date = parseDate(value, cohersion.date);\n        if (date) {\n          return {\n            type: { ...cohersion },\n            value: BigInt(date.date.getTime()),\n          };\n        }\n      }\n      return {\n        type: {\n          kind: 'string',\n        },\n        value: json as string,\n      };\n    }\n    return {\n      type: {\n        kind: 'anything',\n      },\n      value: Result.UnknownValue.getData(),\n    };\n  }\n  if (tof === 'object' && json != null) {\n    return importTableFromObject(json as Record<string, unknown>, options);\n  }\n  return {\n    type: {\n      kind: 'anything',\n    },\n    value: Result.UnknownValue.getData(),\n  };\n};\n","import { ImportElementSource } from '@decipad/editor-types';\nimport { getDefined } from '@decipad/utils';\nimport providers from './providers';\nimport { isRandomImportUrl } from './isRandomImportUrl';\n\ntype IsImportUrlResult = [boolean, undefined | ImportElementSource];\n\nconst isProviderImportUrl = async (\n  url: URL\n): Promise<ImportElementSource | undefined> => {\n  return providers.find(({ matchUrl }) => {\n    try {\n      return matchUrl(url);\n    } catch (err) {\n      return false;\n    }\n  })?.name as undefined | ImportElementSource;\n};\n\nexport const isImportUrl = async (text: string): Promise<IsImportUrlResult> => {\n  let url: URL | undefined;\n  try {\n    url = new URL(text.trim());\n  } catch (err) {\n    // not a URL\n    return [false, undefined];\n  }\n  const provider = await isProviderImportUrl(getDefined(url));\n  if (provider) {\n    return [true, provider];\n  }\n\n  return isRandomImportUrl(getDefined(url));\n};\n","import { ImportElementSource } from '@decipad/editor-types';\n\nconst supportedPathTerminations = new Map<string, ImportElementSource>([\n  ['.csv', 'csv'],\n  ['.arrow', 'arrow'],\n  ['.json', 'json'],\n]);\nconst supportedContentTypes = new Map<string, ImportElementSource>([\n  ['text/csv', 'csv'],\n  ['application/json', 'json'],\n  ['application/vnd.apache.arrow', 'arrow'],\n]);\n\nexport const isRandomImportUrl = async (\n  url: URL\n): Promise<[boolean, undefined | ImportElementSource]> => {\n  const key = Array.from(supportedPathTerminations.keys()).find((path) =>\n    url.pathname.endsWith(path)\n  );\n  if (key) {\n    return [true, supportedPathTerminations.get(key)];\n  }\n\n  try {\n    const { headers } = await fetch(url);\n    const type = headers.get('Content-Type');\n    if (type) {\n      const contentTypeKey = Array.from(supportedContentTypes.keys()).find(\n        (contentType) => type.startsWith(contentType)\n      );\n      if (contentTypeKey) {\n        return [true, supportedContentTypes.get(contentTypeKey)];\n      }\n    }\n  } catch (err) {\n    // do nothing\n  }\n  return [false, undefined];\n};\n","import { ImportElementSource } from '@decipad/editor-types';\nimport { SourceUrlParseResponse } from './types';\nimport { gsheets } from './providers';\n\nexport const parseSourceUrl = (\n  source: ImportElementSource,\n  url: string\n): SourceUrlParseResponse => {\n  switch (source) {\n    case 'gsheets': {\n      return gsheets.parseSourceUrl(url);\n    }\n    default:\n      return {\n        isRange: false,\n        userUrl: url,\n      };\n  }\n};\n","export const decipad = {\n  name: 'decipad',\n  matchUrl: (url: URL): boolean =>\n    (url.hostname === 'localhost' || url.hostname.endsWith('.decipad.com')) &&\n    url.pathname.startsWith('/n/'),\n  import: () => {\n    throw new Error(\n      'Decipad notebooks are not meant to be imported statically. Use a live connection instead'\n    );\n  },\n};\n","import { thirdParty } from '@decipad/client-config';\nimport { stringify as encodeQuery } from 'querystring';\nimport { SheetMeta } from '../../types';\nimport { sheetColumnName } from '../../utils/sheetColumnName';\nimport type { Island } from '../../utils/sheetIslands';\n\nconst islandToRange = (sheetName: string, island: Island): string => {\n  return `${sheetName}!${sheetColumnName(island.firstCol + 1)}${\n    island.firstRow + 1\n  }:${sheetColumnName(island.lastCol + 1)}${island.lastRow + 1}`;\n};\n\nexport const getDataRangeUrlFromSheetAndIslands = (\n  sheetId: string | number,\n  gid: number | string | undefined,\n  sheetMeta: SheetMeta,\n  island: Island\n): URL => {\n  const { googleSheets } = thirdParty();\n  const qs = encodeQuery({\n    majorDimension: 'COLUMNS',\n    valueRenderOption: 'UNFORMATTED_VALUE',\n    dateTimeRenderOption: 'FORMATTED_STRING',\n    key: googleSheets.apiKey,\n  });\n\n  const subSheet =\n    sheetMeta.sheets.find(\n      (sheet) =>\n        sheet.properties.sheetId === gid ||\n        sheet.properties.sheetId === Number(gid)\n    ) ?? sheetMeta.sheets[Number(gid)];\n  const subSheetName = subSheet?.properties.title ?? 'Sheet1';\n\n  const range = islandToRange(subSheetName, island);\n\n  return new URL(\n    `https://content-sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${encodeURIComponent(\n      range\n    )}?${qs}`\n  );\n};\n","import { thirdParty } from '@decipad/client-config';\nimport { stringify as encodeQuery } from 'querystring';\nimport { SheetMeta } from '../../types';\n\nexport const getDataUrlFromSheetMeta = (\n  sheetId: string,\n  gid: number | string,\n  sheetMeta: SheetMeta\n): URL => {\n  const { googleSheets } = thirdParty();\n  const qs = encodeQuery({\n    majorDimension: 'COLUMNS',\n    valueRenderOption: 'UNFORMATTED_VALUE',\n    dateTimeRenderOption: 'FORMATTED_STRING',\n    key: googleSheets.apiKey,\n  });\n\n  const subSheet =\n    sheetMeta.sheets.find(\n      (sheet) =>\n        sheet.properties.sheetId === gid ||\n        sheet.properties.sheetId === Number(gid)\n    ) ?? sheetMeta.sheets[Number(gid)];\n\n  const subSheetName =\n    (subSheet?.properties.title &&\n      encodeURIComponent(subSheet.properties.title)) ??\n    gid;\n\n  return new URL(\n    `https://content-sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${subSheetName}?${qs}`\n  );\n};\n","import { stringify as encodeQuery } from 'querystring';\nimport { thirdParty } from '@decipad/client-config';\nimport { request } from '../../http/request';\nimport { SheetMeta } from '../../types';\n\nexport interface SpreadsheetMetaResponse {\n  body: SheetMeta;\n}\n\nexport const getSheetMeta = async (\n  spreadsheetId: string\n): Promise<SheetMeta> => {\n  const { googleSheets } = thirdParty();\n  const qs = encodeQuery({\n    key: googleSheets.apiKey,\n  });\n\n  const metadataUrl = new URL(\n    `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}?${qs}`\n  );\n\n  const spreadsheet = (await request(\n    metadataUrl,\n    true\n  )) as unknown as SpreadsheetMetaResponse;\n\n  return spreadsheet.body;\n};\n","export interface SheetRequestData {\n  sheetId: string;\n  gid: string;\n}\n\nconst getSheetRequestDataFromApiUrl = (sheetUrl: URL): SheetRequestData => {\n  const match = sheetUrl.pathname.match(\n    /^\\/v4\\/spreadsheets\\/([^/]+)\\/values\\/([^/]+)/\n  );\n\n  if (!match) {\n    throw new Error(`Could not extract request data from ${sheetUrl}`);\n  }\n\n  const [, sheetId, gid] = match;\n  return { sheetId, gid };\n};\n\nconst getSheetRequestDataFromUserUrl = (sheetUrl: URL): SheetRequestData => {\n  const match = sheetUrl.pathname.match(/^\\/spreadsheets\\/d\\/([^/]+)\\/edit/);\n  if (!match) {\n    throw new Error(`Could not extract sheet id from ${sheetUrl}`);\n  }\n  const [, sheetId] = match;\n  if (!sheetId) {\n    throw new Error(`Could not extract sheet id from ${sheetUrl}`);\n  }\n\n  const hashMatch = sheetUrl.hash.match(/gid=([0-9]+)/);\n  const gid = (hashMatch && hashMatch[1]) ?? '';\n\n  return { sheetId, gid };\n};\n\nexport const getSheetRequestDataFromUrl = (sheetUrl: URL): SheetRequestData => {\n  if (sheetUrl.hostname === 'content-sheets.googleapis.com') {\n    return getSheetRequestDataFromApiUrl(sheetUrl);\n  }\n  return getSheetRequestDataFromUserUrl(sheetUrl);\n};\n","import { Computer, Result } from '@decipad/computer';\nimport { inferTable } from '@decipad/parse';\nimport { getDefined } from '@decipad/utils';\nimport { ImportResult, Sheet } from '../../types';\nimport { ImportOptions } from '../../import';\nimport { getSheetMeta } from './getSheetMeta';\nimport { getSheetRequestDataFromUrl } from './getSheetRequestDataFromUrl';\nimport { getDataUrlFromSheetMeta } from './getDataUrlFromSheetUrl';\nimport { trimSheet } from '../../utils/trimSheet';\nimport { findAllIslands } from '../../utils/sheetIslands';\n\nconst sumLength = <T>(acc: number, col: T[]): number => {\n  return acc + col.length;\n};\n\nconst errorResult = (err: string): ImportResult => {\n  return {\n    result: {\n      type: {\n        kind: 'type-error',\n        errorCause: {\n          errType: 'free-form',\n          message: err,\n        },\n      },\n      value: Result.UnknownValue.getData(),\n    },\n  };\n};\n\nconst handleGsheetsResponse = async (\n  computer: Computer,\n  resp: Response,\n  options: ImportOptions\n): Promise<Result.Result> => {\n  const { identifyIslands = false, maxCellCount } = options;\n  const body = (await resp.json()) as unknown as Sheet;\n  if (maxCellCount) {\n    const cellCount = body.values.reduce(sumLength, 0);\n    if (cellCount > maxCellCount) {\n      return errorResult(`Too many cells to import. maximum is ${maxCellCount}`)\n        .result;\n    }\n  }\n  const trimmedBody = identifyIslands ? body : trimSheet(body);\n  return inferTable(computer, trimmedBody, {\n    ...options,\n    doNotTryExpressionNumbersParse: true,\n  }) as Promise<Result.Result>;\n};\n\nconst loadSheet =\n  (computer: Computer, options: ImportOptions) => async (url: URL) => {\n    return handleGsheetsResponse(computer, await fetch(url), options);\n  };\n\nconst loadAllSubsheets = async (\n  computer: Computer,\n  importURL: URL,\n  options: ImportOptions\n): Promise<ImportResult[]> => {\n  const { sheetId } = getSheetRequestDataFromUrl(importURL);\n  const meta = await getSheetMeta(sheetId);\n  const loader = loadSheet(computer, options);\n  const results: ImportResult[] = [];\n  for (const subsheet of meta.sheets) {\n    const url = getDataUrlFromSheetMeta(\n      meta.spreadsheetId,\n      subsheet.properties.sheetId,\n      meta\n    );\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await loader(url);\n      const subMeta: ImportResult['meta'] = {\n        title: subsheet.properties.title,\n        importedAt: new Date(),\n        sourceUrl: url,\n        sheetId,\n        gid: subsheet.properties.sheetId,\n        sourceMeta: meta,\n      };\n      results.push({\n        meta: subMeta,\n        result: result as Result.Result,\n      });\n    } catch (err) {\n      results.push(errorResult((err as Error).message));\n    }\n  }\n  return results;\n};\n\nconst importGsheetIslands = async (\n  computer: Computer,\n  importURL: URL,\n  options: ImportOptions\n): Promise<ImportResult[]> => {\n  return (await loadAllSubsheets(computer, importURL, options)).flatMap(\n    (result) => findAllIslands(getDefined(result.meta?.gid).toString(), result)\n  );\n};\n\nconst importOneGsheet = async (\n  computer: Computer,\n  importURL: URL,\n  options: ImportOptions\n) => {\n  const { sheetId, gid } = getSheetRequestDataFromUrl(importURL);\n  const meta = await getSheetMeta(sheetId);\n  const url = getDataUrlFromSheetMeta(sheetId, gid, meta);\n  let resp: Response | undefined;\n  try {\n    resp = await fetch(url);\n  } catch (err) {\n    return [errorResult((err as Error).message)];\n  }\n  if (!resp.ok) {\n    return [errorResult(resp.statusText || (await resp.text()))];\n  }\n  const result = (await handleGsheetsResponse(\n    computer,\n    resp,\n    options\n  )) as Result.Result;\n\n  const importResult = {\n    meta: {\n      title: meta.properties.title,\n      importedAt: new Date(),\n    },\n    result,\n  };\n\n  return [importResult];\n};\n\nexport const importGsheet = async (\n  computer: Computer,\n  importURL: URL,\n  options: ImportOptions\n): Promise<ImportResult[]> => {\n  return (options.identifyIslands ? importGsheetIslands : importOneGsheet)(\n    computer,\n    importURL,\n    options\n  );\n};\n","import { importGsheet } from './importGsheet';\nimport { parseGsheetsSourceUrl } from './parseGsheetsSourceUrl';\n\nexport const gsheets = {\n  name: 'gsheets',\n  matchUrl: (url: URL): boolean => url.hostname === 'docs.google.com',\n  import: importGsheet,\n  parseSourceUrl: parseGsheetsSourceUrl,\n};\n","import { getSheetRequestDataFromUrl } from './getSheetRequestDataFromUrl';\nimport { SourceUrlParseResponse } from '../../types';\n\nconst getUserUrl = (sheetId: string, gid: string): string =>\n  `https://docs.google.com/spreadsheets/d/${encodeURIComponent(\n    sheetId\n  )}/edit#gid=${encodeURIComponent(gid)}`;\n\nexport const parseGsheetsSourceUrl = (url: string): SourceUrlParseResponse => {\n  const { sheetId, gid } = getSheetRequestDataFromUrl(new URL(url));\n  const indexOfExclamationMark = gid.indexOf('!');\n  const subsheetName = gid.substring(0, indexOfExclamationMark) || '0';\n  const isRange = indexOfExclamationMark > 0;\n  const ranges = decodeURIComponent(\n    gid.slice(indexOfExclamationMark + 1) || ''\n  );\n  const range = ranges.split(':');\n  const userUrl = getUserUrl(sheetId, subsheetName);\n  return { isRange, range, subsheetName, userUrl };\n};\n","import { gsheets } from './gsheets';\nimport { decipad } from './decipad';\n\nexport default [gsheets, decipad];\nexport { gsheets, decipad };\n","export class HttpError extends Error {\n  public code = 500;\n\n  constructor(message: string, code: number | string) {\n    super(message);\n    this.code = Number(code);\n  }\n  static fromResponse({\n    message,\n    code,\n  }: {\n    message: string;\n    code: number;\n  }): HttpError {\n    return new HttpError(message, code);\n  }\n}\n","import { Result } from '@decipad/computer';\n\nexport const errorResult = (message: string): Result.Result => {\n  return {\n    type: {\n      kind: 'type-error',\n      errorCause: {\n        errType: 'free-form',\n        message,\n      },\n    },\n    value: Result.UnknownValue.getData(),\n  };\n};\n","export const matrix = <T>(\n  columnCount: number,\n  rowCount: number,\n  startValue: T\n): Array<Array<T>> => {\n  const columns = Array.from({ length: columnCount });\n  for (let columnIndex = 0; columnIndex < columnCount; columnIndex += 1) {\n    columns[columnIndex] = Array.from({ length: rowCount }).fill(startValue);\n  }\n  return columns as Array<Array<T>>;\n};\n","import { SpreadsheetColumn, SpreadsheetRow } from '../types';\n\nexport const pivot = (rows: SpreadsheetRow[]): SpreadsheetColumn[] => {\n  const columns: SpreadsheetColumn[] = [];\n  for (const row of rows) {\n    row.forEach((cell, columnIndex) => {\n      const column: SpreadsheetColumn = columns[columnIndex] || [];\n      column.push(cell);\n      columns[columnIndex] = column;\n    });\n  }\n  return columns;\n};\n","import { SerializedType } from '@decipad/computer';\nimport { dequal } from 'dequal';\n\nexport const sameType = (types: SerializedType[]): boolean => {\n  if (types.length === 0) {\n    return true;\n  }\n  const firstType = types[0];\n  for (const type of types.slice(1)) {\n    if (!dequal(type, firstType)) {\n      return false;\n    }\n  }\n  return true;\n};\n","export const sheetColumnName = (columnIndex: number): string => {\n  let colName = '';\n  let dividend = Math.floor(Math.abs(columnIndex));\n  let rest;\n\n  while (dividend > 0) {\n    rest = (dividend - 1) % 26;\n    colName = String.fromCharCode(65 + rest) + colName;\n    dividend = parseInt(`${(dividend - rest) / 26}`, 10);\n  }\n  return colName;\n};\n\nexport const sheetColumnnIndex = (colName: string): number => {\n  const digits = colName.toUpperCase().split('');\n  let number = 0;\n\n  for (let i = 0; i < digits.length; i += 1) {\n    number += (digits[i].charCodeAt(0) - 64) * 26 ** (digits.length - i - 1);\n  }\n\n  return number;\n};\n","/* eslint-disable no-param-reassign */\nimport { Result } from '@decipad/computer';\nimport { getDefined } from '@decipad/utils';\nimport { dequal } from 'dequal';\nimport { getDataRangeUrlFromSheetAndIslands } from '../providers/gsheets/getDataRangeUrlFromSheet';\nimport { ImportResult } from '../types';\nimport { matrix } from './matrix';\n\ninterface VisitStackElement {\n  col: number;\n  row: number;\n}\n\ntype VisitStack = Array<VisitStackElement>;\n\nconst neighbourDiffs = [\n  [-1, -1],\n  [0, -1],\n  [1, -1],\n  [-1, 0],\n  [1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n] as const;\n\nexport interface Island {\n  sheetName: string;\n  firstCol: number;\n  firstRow: number;\n  lastCol: number;\n  lastRow: number;\n}\n\nconst makeIsland = (sheetName: string, col: number, row: number): Island => {\n  return {\n    sheetName,\n    firstCol: col,\n    lastCol: col,\n    firstRow: row,\n    lastRow: row,\n  };\n};\n\nconst islandExtension = (\n  island: Island,\n  newCol: number,\n  newRow: number\n): Island => ({\n  ...island,\n  firstCol: Math.min(newCol, island.firstCol),\n  lastCol: Math.max(newCol, island.lastCol),\n  firstRow: Math.min(newRow, island.firstRow),\n  lastRow: Math.max(newRow, island.lastRow),\n});\n\nconst islandToResult =\n  (sheet: Result.Result<'table'>) =>\n  (island: Island): Result.Result => ({\n    type: {\n      ...sheet.type,\n      columnNames: sheet.type.columnNames.slice(\n        island.firstCol,\n        island.lastCol + 1\n      ),\n      columnTypes: sheet.type.columnTypes.slice(\n        island.firstCol,\n        island.lastCol + 1\n      ),\n    },\n    value: sheet.value\n      .filter(\n        (_, columnIndex) =>\n          columnIndex >= island.firstCol && columnIndex <= island.lastCol\n      )\n      .map((column) => column.slice(island.firstRow, island.lastRow + 1)),\n  });\n\nconst partition = (\n  sheetName: string,\n  imported: ImportResult\n): ImportResult[] => {\n  if (imported.result.type.kind !== 'table') {\n    return [];\n  }\n  const sheet = imported.result as Result.Result<'table'>;\n  const columnCount = sheet.type.columnTypes.length;\n  const rowCount = Math.max(...sheet.value.map((col) => col.length));\n  const visited = matrix(columnCount, rowCount, false);\n\n  const { value: sheetColumns } = sheet;\n\n  const islands = new Set<Island>();\n\n  const extendIsland = (island: Island, colIndex: number, rowIndex: number) => {\n    const extension = islandExtension(island, colIndex, rowIndex);\n    if (dequal(island, extension)) {\n      return island;\n    }\n    return extension;\n  };\n\n  const withinRange = (colIndex: number, rowIndex: number): boolean => {\n    return (\n      colIndex >= 0 &&\n      colIndex < columnCount &&\n      rowIndex >= 0 &&\n      rowIndex < rowCount\n    );\n  };\n\n  const hasValue = (col: number, row: number): boolean => {\n    const value = sheetColumns[col][row];\n    if (value == null) {\n      return false;\n    }\n    if (typeof value === 'string') {\n      return value.trim().length > 0;\n    }\n    if (typeof value === 'number') {\n      return true;\n    }\n    return false;\n  };\n\n  const pushNeighbourCells = (col: number, row: number, stack: VisitStack) => {\n    for (const diff of neighbourDiffs) {\n      const nextColIndex = col + diff[0];\n      const nextRowIndex = row + diff[1];\n      if (\n        withinRange(nextColIndex, nextRowIndex) &&\n        !visited[nextColIndex][nextRowIndex] &&\n        hasValue(nextColIndex, nextRowIndex)\n      ) {\n        stack.push({\n          col: nextColIndex,\n          row: nextRowIndex,\n        });\n      }\n    }\n  };\n\n  const exploreIsland = (\n    subSheetName: string,\n    _col: number,\n    _row: number\n  ): Island => {\n    let island = makeIsland(subSheetName, _col, _row);\n    const stack: Array<VisitStackElement> = [{ col: _col, row: _row }];\n    do {\n      const { col, row } = getDefined(stack.pop());\n      if (!visited[col][row] && hasValue(col, row)) {\n        visited[col][row] = true;\n        island = extendIsland(island, col, row);\n        pushNeighbourCells(col, row, stack);\n      }\n    } while (stack.length > 0);\n    return island;\n  };\n\n  for (let col = 0; col < columnCount; col += 1) {\n    for (let row = 0; row < rowCount; row += 1) {\n      if (!visited[col][row] && hasValue(col, row)) {\n        const island = exploreIsland(sheetName, col, row);\n        islands.add(island);\n      }\n    }\n  }\n\n  const newResults = [...islands].map((island) => {\n    const result = islandToResult(sheet)(island);\n    const meta = getDefined(imported.meta);\n    const { sheetId } = meta;\n    return {\n      result,\n      meta: {\n        ...meta,\n        sourceUrl: getDataRangeUrlFromSheetAndIslands(\n          getDefined(sheetId),\n          island.sheetName,\n          getDefined(meta.sourceMeta),\n          island\n        ),\n      },\n    };\n  });\n\n  return newResults;\n};\n\nexport const findAllIslands = (\n  sheetName: string,\n  sheet: ImportResult\n): ImportResult[] => partition(sheetName, sheet);\n","import { Sheet, SpreadsheetColumn, SpreadsheetValue } from '../types';\n\ninterface NeedsTrimming {\n  trimTopRowCount: number;\n  trimBottomRowCount: number;\n  finalRowCount: number;\n}\n\nconst isEmpty = (cell: SpreadsheetValue): boolean =>\n  typeof cell === 'string' && cell.trim().length === 0;\n\nconst columnIsNotEmpty = (column: SpreadsheetColumn): boolean => {\n  return column.find((cell) => !isEmpty(cell)) != null;\n};\n\nconst columnNeedsTrimming = (column: SpreadsheetColumn): NeedsTrimming => {\n  let alreadyHasData = false;\n  let trimTopRowCount = 0;\n  let trimBottomRowCount = 0;\n  for (const cell of column) {\n    const empty = isEmpty(cell);\n    if (alreadyHasData) {\n      if (empty) {\n        trimBottomRowCount += 1;\n      } else {\n        trimBottomRowCount = 0;\n      }\n    } else if (empty) {\n      trimTopRowCount += 1;\n    } else {\n      trimBottomRowCount = 0;\n    }\n    if (!empty) {\n      alreadyHasData = true;\n    }\n  }\n  return {\n    trimTopRowCount,\n    trimBottomRowCount,\n    finalRowCount: column.length - trimTopRowCount - trimBottomRowCount,\n  };\n};\n\nconst trimColumn = (\n  column: SpreadsheetColumn,\n  trimRowCount: number,\n  trimBottomRowCount: number,\n  finalRowCount: number\n): SpreadsheetColumn => {\n  let trimmed = column.slice(trimRowCount);\n  if (trimBottomRowCount > 0) {\n    trimmed = trimmed.slice(0, -trimBottomRowCount);\n  }\n  const needsFillingAtTheBottom = finalRowCount - trimmed.length;\n  if (needsFillingAtTheBottom) {\n    for (let i = 0; i < needsFillingAtTheBottom; i += 1) {\n      trimmed.push('');\n    }\n  }\n  return trimmed;\n};\n\ninterface TrimmerOptions {\n  finalTrimTopRowCount: number;\n  finalTrimBottomRowCount: number;\n  finalRowCount: number;\n}\n\ntype Trimmer = (column: SpreadsheetColumn) => SpreadsheetColumn;\n\nconst createTrimmer = ({\n  finalTrimTopRowCount,\n  finalTrimBottomRowCount,\n  finalRowCount,\n}: TrimmerOptions): Trimmer => {\n  return (column) =>\n    trimColumn(\n      column,\n      finalTrimTopRowCount,\n      finalTrimBottomRowCount,\n      finalRowCount\n    );\n};\n\nexport const trimSheet = (sheet: Sheet): Sheet => {\n  const columns = sheet.values.filter(columnIsNotEmpty);\n  const trimmingNeeds = columns.map(columnNeedsTrimming);\n  const finalTrimTopRowCount = Math.min(\n    ...trimmingNeeds.map((tn) => tn.trimTopRowCount)\n  );\n  const finalTrimBottomRowCount = Math.min(\n    ...trimmingNeeds.map((tn) => tn.trimBottomRowCount)\n  );\n  const finalRowCount = Math.max(\n    ...trimmingNeeds.map((tn) => tn.finalRowCount)\n  );\n  const trimmer = createTrimmer({\n    finalTrimTopRowCount,\n    finalTrimBottomRowCount,\n    finalRowCount,\n  });\n  return {\n    values: columns.map(trimmer),\n  };\n};\n","import { CoercibleType } from './types';\n\nexport const coerceToBoolean = (text: string): string => {\n  switch (text.toLowerCase().trim()) {\n    case 'true':\n    case 'yes':\n      return 'true';\n    default:\n      return 'false';\n  }\n};\n\nexport const parseBoolean = (text: string): boolean => {\n  switch (text.toLowerCase()) {\n    case 'true':\n    case 'yes':\n      return true;\n  }\n  return false;\n};\n\nexport const inferBoolean = (text: string): CoercibleType | undefined => {\n  switch (text.toLowerCase()) {\n    case 'true':\n    case 'false':\n      return { type: { kind: 'boolean' }, coerced: coerceToBoolean(text) };\n  }\n  return undefined;\n};\n","import { Time } from '@decipad/computer';\nimport { parse } from 'date-fns';\nimport { DateFormat } from './types';\n\nconst granularityRank = new Map(\n  Object.entries({\n    year: 1,\n    month: 2,\n    day: 3,\n    hour: 4,\n    minute: 5,\n    second: 6,\n    millisecond: 6,\n  })\n) as Map<Time.Specificity, number>;\n\nexport const highestTimeSpecificity = (\n  ...gs: Time.Specificity[]\n): Time.Specificity | undefined => {\n  let highestG: Time.Specificity | undefined;\n  let highestGRank = -1;\n  for (const g of gs) {\n    const thisRank = granularityRank.get(g);\n    if (thisRank && thisRank > highestGRank) {\n      highestGRank = thisRank;\n      highestG = g;\n    }\n  }\n  return highestG;\n};\n\nconst isValidDate = (d: Date | undefined): d is Date => {\n  return d != null && !Number.isNaN(d.valueOf());\n};\n\nconst combineFormats = (a: string[], b: string[]): string[] => {\n  const formats: string[] = [];\n  for (const aElem of a) {\n    for (const bElem of b) {\n      formats.push(`${aElem} ${bElem}`);\n    }\n  }\n  return formats;\n};\n\n// Format strings reference:\n// https://date-fns.org/v2.25.0/docs/format\nconst dayFormats = [\n  'dd-MM-yyyy',\n  'yyyy-MM-dd',\n  'dd/MM/yyyy',\n  'yyyy/MM/dd',\n  'P',\n  'PP',\n  'PPP',\n];\nconst minuteFormats = ['HH:mm', 'HHmm', 'h:m aaa', 'hh:mm aaa', 'hhmm aaa'];\nconst secondFormats = ['s', 'ss'];\nconst fractionSecondsFormats = ['S', 'SS', 'SSS', 'SSSS'];\nexport const dateFormats: Record<Time.Specificity, DateFormat[]> = {\n  year: ['yy', 'yyyy'],\n  month: [\n    'yyyy-MM',\n    'MM-yyyy',\n    'yyyy/MM',\n    'MM/yyyy',\n    'MMM yyyy',\n    'MMMM yyyy',\n    'MMM/yyyy',\n    'MMMM/yyyy',\n    'MMM-yyyy',\n    'MMMM-yyyy',\n  ],\n  day: dayFormats,\n  hour: combineFormats(dayFormats, ['HH']),\n  minute: combineFormats(dayFormats, minuteFormats),\n  second: combineFormats(\n    combineFormats(dayFormats, minuteFormats),\n    secondFormats\n  ),\n  millisecond: combineFormats(\n    combineFormats(combineFormats(dayFormats, minuteFormats), secondFormats),\n    fractionSecondsFormats\n  ),\n};\n\nconst dateFormatsForSpecificity = (\n  specificity: Time.Specificity\n): Record<Time.Specificity, string[]> => {\n  return Object.fromEntries(\n    Object.entries(dateFormats).filter(([s]) => specificity === s)\n  ) as Record<Time.Specificity, DateFormat[]>;\n};\n\ninterface ParseDateResult {\n  format: string;\n  specificity: Time.Specificity;\n  date: Date;\n}\n\nexport const parseDate = (\n  value: string,\n  specificity?: Time.Specificity,\n  allowedFormats?: string[]\n): ParseDateResult | undefined => {\n  const formats =\n    allowedFormats && specificity\n      ? {\n          [specificity]: allowedFormats,\n        }\n      : specificity\n      ? dateFormatsForSpecificity(specificity)\n      : dateFormats;\n  for (const spec of Object.keys(formats) as Array<Time.Specificity>) {\n    const formatStrings = formats[spec];\n    for (const format of formatStrings) {\n      const date = parse(value, format, new Date());\n      if (isValidDate(date)) {\n        return {\n          format,\n          specificity: spec,\n          date,\n        };\n      }\n    }\n  }\n  return undefined;\n};\n","import { format as formatDate, isValid } from 'date-fns';\nimport { Time } from '@decipad/computer';\nimport { parseDate } from './parseDate';\nimport { CoercibleType, DateGranularity } from './types';\n\nexport const coerceToDate = (\n  d: Date,\n  specificity: Time.Specificity\n): string => {\n  if (!isValid(d)) {\n    throw new Error('invalid date');\n  }\n  switch (specificity) {\n    case 'year':\n      return `date(${formatDate(d, 'yyyy')})`;\n    case 'month':\n      return `date(${formatDate(d, 'yyyy-MM')})`;\n    case 'day':\n      return `date(${formatDate(d, 'yyyy-MM-dd')})`;\n    case 'hour':\n      return `date(${formatDate(d, 'yyyy-MM-dd HH')})`;\n    case 'minute':\n      return `date(${formatDate(d, 'yyyy-MM-dd HH:mm')})`;\n    default:\n      return `date(${formatDate(d, 'yyyy-MM-dd HH:mm:ss')})`;\n  }\n};\n\nexport const inferDate = (\n  text: string,\n  granularity?: DateGranularity,\n  allowedFormats?: string[]\n): CoercibleType | undefined => {\n  const parsed = parseDate(text, granularity, allowedFormats);\n  if (parsed) {\n    return {\n      type: {\n        kind: 'date',\n        date: parsed.specificity,\n      },\n      coerced: coerceToDate(parsed.date, parsed.specificity),\n    };\n  }\n  return undefined;\n};\n","import { Computer, parseExpressionOrThrow } from '@decipad/computer';\nimport { CoercibleType } from './types';\n\nexport const inferExpression = async (\n  computer: Computer,\n  text: string\n): Promise<CoercibleType | undefined> => {\n  try {\n    const parsed = parseExpressionOrThrow(text);\n    const type = await computer.expressionType(parsed);\n    if (parsed.type !== 'noop') {\n      return {\n        type,\n        coerced: text,\n      };\n    }\n  } catch {\n    // Parse error\n  }\n  return undefined;\n};\n","import { CoercibleType } from './types';\n\nconst coerceToString = (text: string): string => {\n  return JSON.stringify(text);\n};\n\nexport const inferText = (text: string): CoercibleType => {\n  return {\n    type: {\n      kind: 'string',\n    },\n    coerced: coerceToString(text),\n  };\n};\n","import { Computer, parseExpressionOrThrow } from '@decipad/computer';\nimport { containsNumber } from '@decipad/utils';\nimport { CoercibleType } from './types';\n\ninterface InferNumberOptions {\n  doNotTryExpressionNumbersParse?: boolean;\n}\n\nconst inferPlainNumber = (text: string): CoercibleType | undefined => {\n  const n = Number(text);\n  if (Number.isNaN(n)) {\n    return undefined;\n  }\n  return {\n    type: { kind: 'number', unit: null },\n    coerced: text,\n  };\n};\n\nexport const inferNumber = async (\n  computer: Computer,\n  text: string,\n  options: InferNumberOptions = {}\n): Promise<CoercibleType | undefined> => {\n  if (options.doNotTryExpressionNumbersParse) {\n    return inferPlainNumber(text);\n  }\n  if (containsNumber(text)) {\n    try {\n      const exp = parseExpressionOrThrow(text);\n      const type = await computer.expressionType(exp);\n      if ((await type).kind === 'number') {\n        return {\n          type,\n          coerced: text,\n        };\n      }\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  return undefined;\n};\n","import type { Computer, SerializedType } from '@decipad/computer';\nimport { containsNumber } from '@decipad/utils';\nimport { CoercibleType } from './types';\nimport { inferBoolean } from './inferBoolean';\nimport { inferDate } from './inferDate';\nimport { inferExpression } from './inferExpression';\nimport { inferText } from './inferText';\nimport { inferNumber } from './inferNumber';\n\nconst inferParseError = (\n  text: string,\n  kind?: SerializedType['kind']\n): CoercibleType => ({\n  type: {\n    kind: 'type-error',\n    errorCause: {\n      errType: 'free-form',\n      message: kind\n        ? `Cannot parse ${kind} out of \"${text}\"`\n        : `Cannot parse \"${text}\"`,\n    },\n  },\n  coerced: text,\n});\n\ninterface InferTypeOptions {\n  type?: SerializedType;\n  doNotTryExpressionNumbersParse?: boolean;\n}\n\nconst tryInferChain = async (\n  computer: Computer,\n  text: string,\n  options: InferTypeOptions\n): Promise<CoercibleType> => {\n  let inferResult = inferDate(text, 'month') ??\n    inferDate(text, 'day') ??\n    inferBoolean(text) ??\n    (await inferNumber(computer, text, options)) ??\n    inferDate(text) ??\n    (options.doNotTryExpressionNumbersParse\n      ? undefined\n      : await inferExpression(computer, text)) ?? {\n      type: { kind: 'string' },\n      coerced: text,\n    };\n\n  if (inferResult.type.kind === 'number' && !containsNumber(text)) {\n    inferResult = {\n      type: { kind: 'string' },\n      coerced: text,\n    };\n  }\n  return inferResult;\n};\n\nexport const inferType = async (\n  computer: Computer,\n  _text: string,\n  options: InferTypeOptions = {}\n): Promise<CoercibleType> => {\n  const text = _text.trim();\n\n  const { type } = options;\n\n  switch (type?.kind) {\n    case 'boolean':\n      return inferBoolean(text) ?? inferParseError(text, type.kind);\n    case 'date':\n      return inferDate(text) ?? inferParseError(text, type.kind);\n    case 'number':\n      return (\n        (await inferNumber(computer, text, options)) ??\n        inferParseError(text, type.kind)\n      );\n    case 'string':\n      return inferText(text) ?? inferParseError(text, type.kind);\n    case 'anything':\n    case 'nothing':\n    case undefined: {\n      if (!text) {\n        return { type: { kind: 'anything' }, coerced: text };\n      }\n      return tryInferChain(computer, text, options);\n    }\n    default:\n      return { type: type ?? inferParseError(text) } as CoercibleType;\n  }\n};\n","import { Computer } from '@decipad/computer';\nimport { dequal } from 'dequal';\nimport mMemoize from 'micro-memoize';\n\nconst memoizeParams = {\n  isEqual: (a: unknown, b: unknown) => {\n    if (a instanceof Computer && b instanceof Computer) {\n      return a === b;\n    }\n    return dequal(a, b);\n  },\n  maxSize: 10000,\n};\n\nexport const memoize: typeof mMemoize = (fn, params) =>\n  mMemoize(fn, { ...memoizeParams, ...params });\n","import {\n  areUnitsConvertible,\n  Computer,\n  SerializedTypes,\n} from '@decipad/computer';\nimport { CellValueType } from '@decipad/editor-types';\nimport { containsNumber } from '@decipad/utils';\nimport { inferType } from '.';\nimport { highestTimeSpecificity } from './parseDate';\nimport { SpreadsheetColumn } from './types';\nimport { memoize } from './utils/memoize';\n\ninterface InferColumnOptions {\n  userType?: CellValueType;\n  doNotTryExpressionNumbersParse?: boolean;\n}\n\nconst INFER_MAX_ROWS = 100;\n\nexport const inferColumn = memoize(\n  async (\n    computer: Computer,\n    column: SpreadsheetColumn,\n    options: InferColumnOptions = {}\n  ): Promise<CellValueType> => {\n    let lastType: CellValueType | undefined = options.userType;\n\n    if (lastType && lastType?.kind !== 'anything') {\n      return lastType;\n    }\n\n    const coalesce = (_newType: CellValueType) => {\n      const newType =\n        _newType.kind === 'type-error'\n          ? ({ kind: 'string' } as SerializedTypes.String)\n          : _newType;\n      if (newType.kind === 'anything' || newType.kind === 'nothing') {\n        return;\n      }\n      if (\n        !lastType ||\n        lastType.kind === 'anything' ||\n        lastType.kind === 'nothing'\n      ) {\n        lastType = newType;\n      } else if (newType.kind !== lastType.kind) {\n        // inconsistent column type: default to string\n        lastType = { kind: 'string' };\n      } else if (newType.kind === 'date') {\n        const lastDateType = lastType as SerializedTypes.Date;\n        if (newType.date !== lastDateType.date) {\n          const newGranularity = highestTimeSpecificity(\n            lastDateType.date,\n            newType.date\n          );\n          if (newGranularity) {\n            lastType = {\n              kind: 'date',\n              date: newGranularity,\n            };\n          }\n        }\n      } else if (newType.kind === 'number') {\n        if (lastType.kind !== 'number') {\n          lastType = {\n            kind: 'string',\n          };\n        } else if (!lastType.unit && newType.unit) {\n          lastType = newType;\n        } else if (\n          newType.unit &&\n          lastType.unit &&\n          !areUnitsConvertible(newType.unit, lastType.unit)\n        ) {\n          lastType = { kind: 'string' };\n        }\n      }\n    };\n\n    for (const value of column.slice(0, INFER_MAX_ROWS)) {\n      switch (typeof value) {\n        case 'boolean':\n          coalesce({ kind: 'boolean' });\n          break;\n        case 'number':\n          if (typeof value === 'string' && !containsNumber(value)) {\n            coalesce({ kind: 'string' });\n          } else {\n            coalesce({ kind: 'number', unit: null });\n          }\n          break;\n        case 'string': {\n          // eslint-disable-next-line no-await-in-loop\n          const inferredType = await inferType(computer, value, options);\n          coalesce(inferredType.type);\n          break;\n        }\n        case 'undefined':\n        case 'object': // null\n          if (value == null) {\n            coalesce({ kind: 'nothing' });\n          }\n          break;\n        default:\n          throw new Error(`Unexpected type of value: ${typeof value}`);\n      }\n    }\n\n    return lastType ?? { kind: 'string' };\n  },\n  { maxSize: 1000 }\n);\n","const base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst baseSize = base.length;\n\nexport function columnNameFromIndex(index: number): string {\n  const oneDigitIndex = index % base.length;\n  const name = base[oneDigitIndex];\n  if (index >= baseSize) {\n    const carry = Math.floor(index / baseSize) - 1;\n    return columnNameFromIndex(carry) + name;\n  }\n  return name;\n}\n","import DeciNumber, { N, ZERO } from '@decipad/number';\n\nconst toNumber = (n: number | bigint | string): bigint | number | undefined => {\n  if (typeof n === 'number' || typeof n === 'bigint') {\n    return n;\n  }\n  const res = Number(n.replaceAll(/[^.0-9]/g, ''));\n  if (Number.isNaN(res)) {\n    // eslint-disable-next-line no-console\n    console.warn(`\"${res}\" was not parsable to a number`);\n    return undefined;\n  }\n  return res;\n};\n\nconst countDecimals = (\n  _n: number | bigint | string\n): [number, string | undefined] => {\n  const n = toNumber(_n);\n  if (n == null) {\n    return [0, undefined];\n  }\n  if (Math.floor(Number(n.valueOf())) === Number(n.valueOf()))\n    return [0, undefined];\n  const str = n.toString(10);\n  if (str.indexOf('e') >= 0) {\n    const parts = str.split('e');\n    const [moreDecimals, fullNumber] = countDecimals(Number(parts[0]));\n    return [-Number(parts[1]) + moreDecimals, fullNumber];\n  }\n  const parts = str.split('.');\n  return [parts[1]?.length || 0, parts.join('')];\n};\n\nexport const fastNumber = (n: number | string): DeciNumber => {\n  if (typeof n === 'string' && n.length < 1) {\n    return ZERO;\n  }\n  const [decimalCount, fullNumber] = countDecimals(n);\n  try {\n    if (typeof fullNumber === 'string' && fullNumber.length < 1) {\n      return ZERO;\n    }\n    return decimalCount === 0\n      ? N(toNumber(n))\n      : N(toNumber(fullNumber ?? ''), BigInt(10 ** decimalCount));\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'Error trying to convert to number',\n      n,\n      [decimalCount, fullNumber],\n      err\n    );\n    throw err;\n  }\n};\n","import type { Computer, Result, SerializedType } from '@decipad/computer';\nimport { varNamify } from '@decipad/utils';\nimport { columnNameFromIndex } from './columnNameFromIndex';\nimport { inferColumn } from './inferColumn';\nimport { parseDate } from './parseDate';\nimport { Sheet, SpreadsheetColumn, InferTableOptions } from './types';\nimport { fastNumber } from './fastNumber';\n\ninterface WithColumnNamesResult {\n  columnNames: string[];\n  columnValues: Sheet['values'];\n}\n\nconst withColumnNames = (\n  data: Sheet,\n  options: InferTableOptions\n): WithColumnNamesResult => {\n  if (options.useFirstRowAsHeader) {\n    return {\n      columnNames: data.values.map((column) =>\n        varNamify((column[0] ?? '_').toString())\n      ),\n      columnValues: data.values.map((column) => column.slice(1)),\n    };\n  }\n  return {\n    columnNames: data.values.map((_, i) => columnNameFromIndex(i)),\n    columnValues: data.values,\n  };\n};\n\nfunction toValue(\n  columnTypes: SerializedType[],\n  columnValues: SpreadsheetColumn[]\n): Result.OneResult[][] {\n  return columnValues.map((col, colIndex) => {\n    const type = columnTypes[colIndex];\n    return col.map((elem) => {\n      switch (type?.kind) {\n        case 'number':\n          return fastNumber(elem as number | string);\n        case 'date':\n          return BigInt(parseDate(elem as string)?.date.getTime() ?? 0);\n        case 'string':\n          return (elem as string) ?? '';\n        default:\n          return elem.toString();\n      }\n    });\n  });\n}\n\nexport const inferTable = async (\n  computer: Computer,\n  data: Sheet,\n  options: InferTableOptions\n): Promise<Result.Result<'table'>> => {\n  const { columnNames, columnValues } = withColumnNames(data, options);\n  const columnTypes = await Promise.all(\n    columnValues.map(\n      async (col, colIndex): Promise<SerializedType> =>\n        (options.columnTypeCoercions?.[colIndex] as SerializedType) ??\n        inferColumn(computer, col, {\n          doNotTryExpressionNumbersParse:\n            options.doNotTryExpressionNumbersParse,\n          userType: options.columnTypeCoercions?.[colIndex],\n        })\n    )\n  );\n  return {\n    type: {\n      kind: 'table',\n      columnTypes,\n      columnNames,\n      indexName: columnNames[0],\n    },\n    value: toValue(columnTypes, columnValues),\n  };\n};\n","// Need this retval ambiguity for the typings to adapt to every kind of AST.Node\n\nimport type { AST } from '@decipad/computer';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const astNode = <\n  T extends AST.Node['type'],\n  RetNode extends Extract<AST.Node, { type: T }>\n>(\n  type: T,\n  ...args: RetNode['args']\n) => ({ type, args } as RetNode);\n\nexport const astColumn = (...items: AST.Expression[]): AST.Column =>\n  astNode('column', astNode('column-items', ...items));\n","import { AST } from '@decipad/computer';\nimport { CellValueType } from '@decipad/editor-types';\nimport { astNode } from './astNode';\n\nexport const dateToAST = (cellType: CellValueType, asDate: Date) => {\n  const parts: AST.Date['args'] = [];\n\n  (() => {\n    parts.push('year', BigInt(asDate.getUTCFullYear()));\n    if (cellType.kind === 'date' && cellType.date === 'year') return;\n\n    parts.push('month', BigInt(asDate.getUTCMonth() + 1));\n    if (cellType.kind === 'date' && cellType.date === 'month') return;\n\n    parts.push('day', BigInt(asDate.getUTCDate()));\n    if (cellType.kind === 'date' && cellType.date === 'day') return;\n\n    parts.push('hour', BigInt(asDate.getUTCHours()));\n    parts.push('minute', BigInt(asDate.getUTCMinutes()));\n  })();\n\n  return astNode('date', ...parts);\n};\n","import { CellValueType, TableCellType } from '@decipad/editor-types';\nimport DeciNumber, { N, ZERO } from '@decipad/number';\nimport {\n  AST,\n  Computer,\n  areUnitsConvertible,\n  convertBetweenUnits,\n  convertToMultiplierUnit,\n  Result,\n  Unit,\n  SerializedType,\n  parseStatement,\n  isExpression,\n} from '@decipad/computer';\nimport { formatUnit, formatError } from '@decipad/format';\nimport { containsNumber } from '@decipad/utils';\nimport { astNode } from './utils/astNode';\nimport { dateToAST } from './utils/dateToAST';\nimport { unitToAST } from './utils/unitToAST';\nimport { inferType } from './inferType';\nimport { memoize } from './utils/memoize';\n\ntype ParseCellResult = Promise<AST.Expression | Error | null>;\n\nconst defaultLocale = 'en-US'; // TODO: make this dynamic\n\nconst parsing = async (\n  computer: Computer,\n  type: SerializedType,\n  text: string,\n  afterParse: (result: Result.Result) => ParseCellResult\n): Promise<ParseCellResult> => {\n  const inferred = await inferType(computer, text, { type });\n  if (inferred.type.kind === 'type-error') {\n    return new Error(formatError(defaultLocale, inferred.type.errorCause));\n  }\n  if (!inferred.coerced) {\n    return null;\n  }\n  const parseResult = parseStatement(inferred.coerced);\n  if (parseResult.error) {\n    return new Error(parseResult.error.message);\n  }\n  if (!parseResult.solution || !isExpression(parseResult.solution)) {\n    return new Error('is not a valid expression');\n  }\n\n  /** This comes from the need to get a percentage number.\n   * If we have `10` as a percentage,previously we had `1000%`.\n   * However,we would prefer to have 10%\n   * Hence the division\n   */\n  if (\n    parseResult.solution.type === 'literal' &&\n    type.kind === 'number' &&\n    type.numberFormat === 'percentage' &&\n    parseResult.solution.args[0] === 'number' &&\n    parseResult.solution.args[2] !== 'percentage'\n  ) {\n    parseResult.solution.args[2] = 'percentage';\n    parseResult.solution.args[1] = parseResult.solution.args[1].div(N('100'));\n  }\n\n  let result = await computer.expressionResult(parseResult.solution);\n  if (result.type.kind === 'type-error') {\n    return new Error(formatError(defaultLocale, result.type.errorCause));\n  }\n  if (type.kind && type.kind !== 'anything' && type.kind !== result.type.kind) {\n    return new Error(`Could not parse \"${text}\" into a ${type.kind}`);\n  }\n  if (result.type.kind === 'number' && !containsNumber(text)) {\n    result = {\n      type: { kind: 'string' },\n      value: text,\n    };\n  }\n\n  try {\n    return afterParse(result);\n  } catch (err) {\n    return err as Error;\n  }\n};\n\nconst fixCellUnit = (unit: Unit[]): Unit[] => {\n  return unit.map((u): Unit => {\n    return {\n      ...u,\n      multiplier: N(u.multiplier),\n      exp: N(u.exp),\n    };\n  });\n};\n\nexport function assertCellType<Kind extends CellValueType['kind']>(\n  type: CellValueType,\n  kind: Kind\n): asserts type is Extract<TableCellType, { kind: Kind }> {\n  if (type.kind && type.kind !== kind) {\n    throw new Error(`Expected input of type ${kind}`);\n  }\n}\n\nexport const parseCell = memoize(\n  async (\n    computer: Computer,\n    cellType: CellValueType,\n    text: string\n  ): Promise<AST.Expression | Error | null> => {\n    if (\n      cellType.kind === 'table-formula' ||\n      cellType.kind === 'series' ||\n      cellType.kind === 'dropdown' ||\n      !text.trim()\n    ) {\n      return null;\n    }\n    try {\n      return await parsing(\n        computer,\n        cellType,\n        text,\n        async (result: Result.Result) => {\n          const { type } = result;\n          switch (type.kind) {\n            case 'number': {\n              assertCellType(cellType, 'number');\n              if (!cellType.unit && type.unit) {\n                return new Error('unexpected unit in number');\n              }\n              const cellUnit = cellType.unit && fixCellUnit(cellType.unit);\n              if (type.unit && cellUnit) {\n                if (!areUnitsConvertible(type.unit, cellUnit)) {\n                  return new Error(\n                    `cannot convert ${formatUnit(\n                      'en-US',\n                      type.unit\n                    )} to ${formatUnit('en-US', cellUnit)} `\n                  );\n                }\n                // eslint-disable-next-line no-param-reassign\n                result.value = convertToMultiplierUnit(\n                  convertBetweenUnits(\n                    result.value as DeciNumber,\n                    type.unit,\n                    cellUnit\n                  ),\n                  cellUnit\n                );\n              }\n\n              if (type.numberFormat) {\n                return astNode(\n                  'literal',\n                  'number' as const,\n                  N(result.value as DeciNumber),\n                  type.numberFormat\n                );\n              }\n\n              const literal = astNode(\n                'literal',\n                'number' as const,\n                N(result.value as DeciNumber)\n              );\n              const unit = unitToAST(cellUnit);\n\n              if (unit == null) {\n                return literal;\n              }\n\n              return astNode(\n                'function-call',\n                astNode('funcref', 'implicit*'),\n                astNode('argument-list', literal, unit)\n              ) as AST.Expression;\n            }\n            case 'date':\n              return dateToAST(cellType, new Date(Number(result.value)));\n\n            case 'boolean':\n              return astNode(\n                'literal',\n                'boolean',\n                text === 'true' || text === 'yes'\n              );\n\n            case 'string':\n              return astNode('literal', 'string', text);\n          }\n          return new Error(\n            `Could not parse a ${cellType.kind} out of \"${text}\"`\n          );\n        }\n      );\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('error parsing cell:', err);\n      throw err;\n    }\n  }\n);\n\nexport const getExpression = (exp: Error | AST.Expression): AST.Expression => {\n  if (exp instanceof Error) {\n    throw exp;\n  }\n  return exp;\n};\n\nexport const getNullReplacementValue = (\n  cellType: CellValueType\n): AST.Expression => {\n  if (cellType.kind === 'date') {\n    return dateToAST(cellType, new Date('2020-01-01'));\n  }\n  if (cellType.kind === 'number') {\n    return astNode('literal', 'number', ZERO);\n  }\n  if (cellType.kind === 'boolean') {\n    return astNode('literal', 'boolean', false);\n  }\n  if (cellType.kind === 'dropdown' && cellType.type === 'number') {\n    return astNode('literal', 'number', ZERO);\n  }\n  return astNode('literal', 'string', '');\n};\n","import { simpleFormatUnit } from '@decipad/format';\nimport { AST, parseBlock } from '@decipad/computer';\nimport { TableCellType } from '@decipad/editor-types';\n\nexport const unitToAST = (\n  unit: Extract<TableCellType, { kind: 'number' }>['unit']\n): AST.Expression | null => {\n  if (unit == null) {\n    return null;\n  }\n\n  // NOTE: seems more error prone to generate an AST from the Units object than to stringify the\n  // units back to the language and parse the AST.\n  const formattedUnit = simpleFormatUnit(unit);\n  const ast = parseBlock(formattedUnit).solution;\n  return ast && ast.args.length > 0 ? (ast.args[0] as AST.Expression) : null;\n};\n","import { Result, Time } from '@decipad/computer';\nimport { SeriesType } from '@decipad/editor-types';\nimport { parseDate } from './parseDate';\n\nexport interface ParseSeriesStartResult {\n  error?: string;\n  type: SeriesType;\n  granularity?: Time.Specificity; // we'll use a union type when we add more series types\n  value?: Result.OneResult;\n}\n\nexport const parseSeriesStart = (\n  type: SeriesType,\n  content: string\n): ParseSeriesStartResult => {\n  switch (type) {\n    case 'date': {\n      const parsedDate = parseDate(content);\n      if (!parsedDate) {\n        return {\n          type,\n          error: 'Could not parse date',\n        };\n      }\n      // no parsing resulted\n      // let's return the last error\n      return {\n        type,\n        granularity: parsedDate.specificity,\n        value: BigInt(parsedDate.date.getTime()),\n      };\n    }\n    default:\n      throw new Error(`unknown series type ${type}`);\n  }\n};\n","import { SeriesType } from '@decipad/editor-types';\nimport { Time } from '@decipad/computer';\nimport { add as addDate, Duration, format as formatDate } from 'date-fns';\nimport { parseDate } from './parseDate';\n\nconst dateGranularityToDateFnsDuration: Record<Time.Specificity, Duration> = {\n  year: { years: 1 },\n  month: { months: 1 },\n  day: { days: 1 },\n  hour: { hours: 1 },\n  minute: { minutes: 1 },\n  second: { seconds: 1 },\n  millisecond: { seconds: 0.001 },\n};\n\nexport const dateIterator = (\n  granularity: Time.Specificity,\n  initialValue: string\n): Iterator<string> => {\n  const parseResult = parseDate(initialValue, granularity);\n  if (!parseResult) {\n    throw new Error(`Could not parse date ${initialValue}`);\n  }\n  const { format } = parseResult;\n  let v: Date = parseResult.date;\n  const g = dateGranularityToDateFnsDuration[granularity];\n  return {\n    next() {\n      v = addDate(v, g);\n      return {\n        value: formatDate(v, format),\n      };\n    },\n  };\n};\n\nexport const seriesIterator = (\n  type: SeriesType,\n  granularity: Time.Specificity,\n  initialValue: string\n): Iterator<string> => {\n  if (granularity == null) {\n    throw new Error('Date series requires granularity');\n  }\n  switch (type) {\n    case 'date':\n      return dateIterator(granularity, initialValue);\n  }\n};\n","import { Result } from '@decipad/computer';\nimport { simpleFormatUnit } from '@decipad/format';\nimport { N } from '@decipad/number';\nimport { coerceToDate } from './inferDate';\n\nconst textifyBoolean = (result: Result.Result<'boolean'>) =>\n  result.value ? 'true' : 'false';\n\nconst textifyDate = (result: Result.Result<'date'>) =>\n  coerceToDate(new Date(Number(result.value)), result.type.date);\n\nconst textifyNumber = (result: Result.Result<'number'>) => {\n  let f = N(result.value).toFraction();\n  if (!/^-?[0-9.]+$/.test(f)) {\n    f = `(${f})`;\n  }\n  if (result.type.unit) {\n    f = `${f} ${simpleFormatUnit(result.type.unit)}`;\n  }\n  return f;\n};\n\nexport const textify = (result: Result.Result): string => {\n  switch (result.type.kind) {\n    case 'boolean':\n      return textifyBoolean(result as Result.Result<'boolean'>);\n    case 'date':\n      return textifyDate(result as Result.Result<'date'>);\n    case 'number':\n      return textifyNumber(result as Result.Result<'number'>);\n    case 'string':\n      return JSON.stringify(result.value);\n    default:\n      throw new Error(`cannot textify ${result.type.kind}`);\n  }\n};\n","import { ClientEventsContext } from '@decipad/client-events';\nimport { BracketError } from '@decipad/computer';\nimport { css } from '@emotion/react';\nimport { FC, useContext } from 'react';\nimport { Tooltip } from '..';\nimport { Warning } from '../../icons';\nimport { red100, red500, setCssVar } from '../../primitives';\nimport { Anchor } from '../../utils';\n\nconst iconWrapperStyles = css({\n  ...setCssVar('iconBackgroundColor', red100.rgb),\n  ...setCssVar('currentTextColor', red500.rgb),\n\n  display: 'inline-flex',\n  //\n  // strange safari bug makes errors not show\n  // if this is replaced with simply height and width\n  //\n  '> svg': {\n    height: '16px',\n    width: '16px',\n  },\n\n  verticalAlign: 'middle',\n  cursor: 'pointer',\n});\n\nconst messageStyles = css({\n  textAlign: 'center',\n});\n\nconst urlStyles = css({\n  textDecoration: 'underline',\n});\n\ninterface CodeErrorProps {\n  message: string;\n  url: string;\n  detailMessage?: string;\n  bracketError?: BracketError;\n  defaultDocsMessage?: string;\n  isEmptyExpressionError?: boolean;\n}\n\nconst bracketErrorMessage = (err: BracketError) => {\n  switch (err.type) {\n    case 'never-opened':\n      return `Closed a bracket \"${err.close.text}\" that was never opened`;\n    case 'mismatched-brackets':\n      return `Mismatched brackets \"${err.open.text}\" and \"${err.close.text}\"`;\n    case 'never-closed':\n      return `Bracket \"${err.open.text}\" was opened but it is not being closed`;\n  }\n};\n\nexport const CodeError = ({\n  message,\n  detailMessage,\n  url,\n  bracketError,\n  defaultDocsMessage = 'Check our docs',\n}: CodeErrorProps): ReturnType<FC> => {\n  const clientEvent = useContext(ClientEventsContext);\n  return (\n    <Tooltip\n      trigger={\n        <span css={iconWrapperStyles} title={message}>\n          <Warning />\n        </span>\n      }\n    >\n      <p css={messageStyles}>{message}</p>\n      {detailMessage && <p css={messageStyles}>{detailMessage}</p>}\n      {bracketError && (\n        <p css={messageStyles}>{bracketErrorMessage(bracketError)}</p>\n      )}\n      <Anchor\n        css={urlStyles}\n        href={url}\n        // Analytics\n        onClick={() =>\n          clientEvent({\n            type: 'action',\n            action: 'notebook code error docs link clicked',\n          })\n        }\n      >\n        {defaultDocsMessage}\n      </Anchor>\n    </Tooltip>\n  );\n};\n","import { css } from '@emotion/react';\nimport { DropLine } from './DropLine';\n\nconst dropStyles = css({\n  position: 'absolute',\n  top: 0,\n  height: 'calc(100% + 1px)',\n});\n\nconst leftDropStyles = css({\n  left: -1,\n});\n\nconst rightDropStyles = css({\n  right: 0,\n});\n\nexport const ColumnDropLine = ({\n  dropDirection,\n}: {\n  dropDirection: 'left' | 'right';\n}) => {\n  return (\n    <div\n      css={[\n        dropStyles,\n\n        dropDirection === 'left' && leftDropStyles,\n        dropDirection === 'right' && rightDropStyles,\n      ]}\n      contentEditable={false}\n    >\n      <DropLine variant=\"inline\" />\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { cssVar } from '../../primitives';\nimport { dropLineWidth } from '../../styles/drop-line';\n\nconst dropLineCommonStyles = css({\n  backgroundColor: cssVar('droplineColor'),\n  zIndex: 1,\n});\n\nconst dropLineBlockStyles = css({\n  height: `${dropLineWidth}px`,\n  border: 'none',\n  borderRadius: '4px',\n  backgroundColor: cssVar('droplineColor'),\n});\n\nconst dropLineTableStyles = css({\n  borderRadius: 'unset',\n});\n\nconst dropLineVerticalStyles = ({ variant }: DropLineProps = {}) =>\n  css([\n    variant !== 'table' ? { position: 'absolute' } : null,\n    {\n      height: '100%',\n      left: '0',\n      top: '0',\n      width: `${dropLineWidth}px`,\n    },\n  ]);\n\nexport type DropLineProps =\n  | undefined\n  | {\n      variant?: 'block' | 'table' | 'inline';\n    };\n\nexport const DropLine = ({\n  variant = 'block',\n}: DropLineProps = {}): ReturnType<React.FC> => {\n  if (['block', 'table'].includes(variant)) {\n    return (\n      <div\n        contentEditable={false}\n        role=\"presentation\"\n        aria-label=\"Drop Line\"\n        css={[\n          dropLineCommonStyles,\n          dropLineBlockStyles,\n          variant === 'table' && dropLineTableStyles,\n        ]}\n      />\n    );\n  }\n  return (\n    <span\n      contentEditable={false}\n      role=\"presentation\"\n      aria-label=\"Drop\"\n      css={[dropLineCommonStyles, dropLineVerticalStyles({ variant })]}\n    >\n      &nbsp;\n    </span>\n  );\n};\n","import { css } from '@emotion/react';\nimport { forwardRef, ReactNode } from 'react';\nimport { p16Regular } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\n// Server as the base vertical space between elements. It's the same height as a 1-liner paragraph.\nconst defaultVerticalSpacing = `calc(${p16Regular.fontSize} * ${p16Regular.lineHeight})`;\n\n// Here lies the main responsability of this block, to define the edge cases of spacings between\n// different components.\nconst spacingStyles = css({\n  paddingTop: defaultVerticalSpacing,\n  // Headings\n  '&[data-type^=heading] + *': {\n    paddingTop: `calc(${defaultVerticalSpacing} / 2)`,\n  },\n  '&[data-type^=heading] + [data-type=divider] + *': {\n    paddingTop: `calc(${defaultVerticalSpacing} / 2)`,\n  },\n\n  // Paragraphs\n  '&[data-type=paragraph] + [data-type=list]': {\n    paddingTop: `8px`,\n  },\n\n  // Lists\n  '&[data-type=list] [data-type=list]': {\n    paddingTop: 0,\n  },\n\n  // Code Lines\n  '&[data-type=codeLine] + [data-type=codeLine]': {\n    paddingTop: 0,\n  },\n\n  // Code Lines\n  '&[data-type=structured] + [data-type=structured]': {\n    paddingTop: 0,\n  },\n\n  // Tables\n  '&[data-type$=Table]': {\n    paddingTop: '40px',\n  },\n  '&[data-type$=Table] + *': {\n    paddingTop: '40px',\n  },\n\n  // Columns\n  '&[data-type$=columns]': {\n    paddingTop: 0,\n  },\n});\n\ninterface EditorBlockProps {\n  readonly blockKind: keyof typeof blockAlignment;\n  readonly children: ReactNode;\n  // This component is one of the main points of contact when integrating between editor and UI. As\n  // such, we'll allow it to receive an arbitrary amount of props in order to facilitate said\n  // integration.\n  readonly [prop: string]: unknown;\n}\n\nexport const EditorBlock: React.FC<EditorBlockProps> = forwardRef<\n  HTMLDivElement,\n  EditorBlockProps\n>(({ blockKind, children, ...props }, ref) => {\n  return (\n    <div\n      {...props}\n      css={[\n        {\n          position: 'relative',\n        },\n        spacingStyles,\n      ]}\n      data-type={blockKind}\n      ref={ref}\n    >\n      {children}\n    </div>\n  );\n});\n","import { nanoid } from 'nanoid';\nimport { useCallback, useEffect, useState } from 'react';\nimport { css } from '@emotion/react';\nimport { noop } from '@decipad/utils';\nimport { codeBlock } from '../../styles';\nimport { cssVar } from '../../primitives';\n\n// If we get further types of labels,\n// consider pulling up the bubble styles into some Bubble Label molecule\n// and making this just about the label text and id behavior.\n\nconst labelContainerStyles = css({\n  display: 'flex',\n  flexWrap: 'nowrap',\n  gap: '4px',\n});\n\nconst hoveredBubbleStyles = css({\n  backgroundColor: cssVar('strongHighlightColor'),\n});\n\nconst bubbleStyles = css(codeBlock.variableStyles, {\n  padding: '4px 8px',\n  borderRadius: '8px',\n\n  backgroundColor: cssVar('highlightColor'),\n  border: `solid 1px ${cssVar('strongerHighlightColor')}`,\n  ':hover': {\n    ...hoveredBubbleStyles,\n  },\n});\n\nconst baseLabelStyles = css({\n  whiteSpace: 'nowrap',\n  lineHeight: 'calc(1.5em + 1px)',\n});\n\ninterface LabelProps {\n  readonly children: React.ReactNode;\n  readonly onHover?: (hover: boolean) => void;\n  readonly renderContent: (id: string) => React.ReactNode;\n}\nexport const Label: React.FC<LabelProps> = ({\n  children,\n  onHover = noop,\n  renderContent,\n}) => {\n  const id = `label-${useState(nanoid)[0]}`;\n  const [hovered, setHovered] = useState(false);\n\n  useEffect(() => {\n    onHover(hovered);\n  }, [hovered, onHover]);\n\n  return (\n    <div\n      css={labelContainerStyles}\n      onMouseEnter={useCallback(() => setHovered(true), [])}\n      onMouseLeave={useCallback(() => setHovered(false), [])}\n    >\n      <label css={baseLabelStyles} htmlFor={id}>\n        {children}\n      </label>\n      <div css={[bubbleStyles, hovered && hoveredBubbleStyles]}>\n        {renderContent(id)}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC, HTMLAttributes, useEffect, useState } from 'react';\nimport { Create } from '../../icons';\nimport { cssVar, p13Medium } from '../../primitives';\n\nconst parentWrapper = css({\n  position: 'absolute',\n  width: '100%',\n  height: 0,\n  top: 0,\n  zIndex: 1,\n});\n\nconst tableStyles = css({\n  left: 0,\n  top: -5,\n});\n\nconst tableReverseStyles = css({\n  left: 0,\n  top: 'auto',\n  bottom: 5,\n});\n\nconst addElementLineWrapper = css({\n  width: '100%',\n  height: 10,\n  paddingTop: 4,\n  paddingBottom: 4,\n  justifyContent: 'center',\n  alignItems: 'center',\n  display: 'flex',\n  opacity: 0,\n  transition: 'all 0.2s ease',\n  '&:hover': {\n    opacity: 1,\n  },\n  position: 'relative',\n});\n\nconst addElementLine = css({\n  width: '100%',\n  height: 2,\n  backgroundColor: cssVar('droplineGreyColor'),\n});\n\nconst buttonStyles = (hasSibling: boolean) =>\n  css(p13Medium, {\n    cursor: 'pointer',\n    display: 'flex',\n    gap: '6px',\n    padding: hasSibling ? `2px` : '7px',\n    borderRadius: '6px',\n    backgroundColor: cssVar('highlightColor'),\n    border: `1px solid ${cssVar('strongHighlightColor')}`,\n  });\n\nconst iconWrapperStyles = css({\n  height: '16px',\n  width: '16px',\n});\n\ninterface NewElementLineProps\n  extends Pick<\n    HTMLAttributes<HTMLDivElement>,\n    'onMouseEnter' | 'onMouseLeave' | 'onClick'\n  > {\n  readonly onAdd: (() => void) | undefined;\n  readonly show: boolean;\n\n  /**\n   * Default is for block insert. Set to true for table row insert.\n   */\n  readonly isTable?: boolean;\n\n  /**\n   * Default position is top. If true, set position at bottom.\n   */\n  readonly reverse?: boolean;\n  /* to be used when isTable is true */\n  readonly tableAdditionalProps?: {\n    isLastColumn: boolean;\n    rowWidth: number;\n  };\n\n  readonly hasPreviousSibling?: boolean;\n}\n\nexport const NewElementLine = ({\n  onAdd,\n  show = true,\n  isTable,\n  tableAdditionalProps,\n  reverse,\n  onMouseLeave,\n  onMouseEnter,\n  onClick,\n  hasPreviousSibling,\n}: NewElementLineProps): ReturnType<FC> => {\n  const [clicked, setClicked] = useState<boolean>(false);\n  /** In order to center the + button , we need to consider the button width:\n   * 16px from the icon size\n   * 12px from the button padding (6px + 6px)\n   * 2px from the button border (1px + 1px)\n   */\n  const buttonWidth = 32;\n\n  useEffect(() => {\n    if (clicked) {\n      setTimeout(() => setClicked(false), 1000);\n    }\n  }, [clicked]);\n\n  if (!show && !isTable) {\n    return <></>;\n  }\n\n  return (\n    <div\n      css={[\n        parentWrapper,\n        clicked ? { opacity: 0 } : {},\n        isTable && tableStyles,\n        reverse && tableReverseStyles,\n      ]}\n      contentEditable={false}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onClick={onClick}\n    >\n      <div\n        css={[\n          addElementLineWrapper,\n          isTable && show && { opacity: 1 },\n          hasPreviousSibling && { marginTop: '-5px' },\n        ]}\n      >\n        {(!isTable || (isTable && tableAdditionalProps?.isLastColumn)) && (\n          <>\n            <span css={addElementLine} />\n            <button\n              style={\n                tableAdditionalProps && {\n                  position: 'absolute',\n                  right: `${\n                    Math.round(\n                      (tableAdditionalProps.rowWidth - buttonWidth) / 2\n                    ) - 20 // this magic number comes from the width of the menu on the left side of the row\n                  }px`,\n                }\n              }\n              css={buttonStyles(!!hasPreviousSibling)}\n              onClick={() => {\n                setClicked(true);\n                if (onAdd !== undefined) onAdd();\n              }}\n            >\n              <span css={iconWrapperStyles}>\n                <Create />\n              </span>\n            </button>\n            <span css={addElementLine} />\n          </>\n        )}\n        {isTable && tableAdditionalProps?.isLastColumn !== true && (\n          <span css={addElementLine} />\n        )}\n        <span></span>\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { cssVar } from '../../primitives';\n\nconst spinnerWrapperStyles = css({\n  display: 'block',\n  position: 'relative',\n  height: '25px',\n  width: '100px',\n});\n\nconst spinnerStyles = css({\n  animation: 'rotate 2s linear infinite',\n  zIndex: 2,\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  margin: '-25px 0 0 -25px',\n  width: '25px',\n  height: '25px',\n});\n\nconst circleStyles = css({\n  stroke: cssVar('normalTextColor'),\n  strokeLinecap: 'round',\n  animation: 'dash 1.5s ease-in-out infinite',\n  '@keyframes rotate': {\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  },\n\n  '@keyframes dash': {\n    '0%': {\n      strokeDasharray: '1, 150',\n      strokeDashoffset: 0,\n    },\n    '50%': {\n      strokeDasharray: '90, 150',\n      strokeDashoffset: -35,\n    },\n    '100%': {\n      strokeDasharray: '90, 150',\n      strokeDashoffset: -124,\n    },\n  },\n});\n\nexport const Spinner: FC = () => (\n  <span css={spinnerWrapperStyles}>\n    <svg css={spinnerStyles} viewBox=\"0 0 25 25\">\n      <circle\n        css={circleStyles}\n        cx=\"12.5\"\n        cy=\"12.5\"\n        r=\"10\"\n        fill=\"none\"\n        strokeWidth=\"2.5\"\n      ></circle>\n    </svg>\n  </span>\n);\n","import {\n  AnyElement,\n  CellValueType,\n  PlateComponentAttributes,\n} from '@decipad/editor-types';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport {\n  ComponentProps,\n  ElementType,\n  FC,\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n} from 'react';\nimport { ConnectDropTarget } from 'react-dnd';\nimport { useMergedRef } from '../../hooks';\nimport { CellEditor, SyntaxErrorHighlight } from '../../molecules';\nimport {\n  cssVar,\n  Opacity,\n  p12Medium,\n  p14Medium,\n  purple100,\n  setCssVar,\n  transparency,\n} from '../../primitives';\nimport { table } from '../../styles';\nimport { tableRowCounter } from '../../utils';\n\nconst lineNumberWidth = '22px';\n\nconst tdBaseStyles = css(p14Medium, {\n  position: 'relative',\n  alignItems: 'center',\n\n  background: cssVar('backgroundColor'),\n\n  minHeight: table.tdMinHeight,\n  minWidth: table.tdMinWidth,\n  maxWidth: table.tdMaxWidth,\n  whiteSpace: 'break-spaces',\n  cursor: 'default',\n  verticalAlign: 'middle',\n  paddingTop: table.tdVerticalPadding,\n  paddingBottom: table.tdVerticalPadding,\n});\n\nconst tdPlaceholderStyles = css({\n  // Show line numbers on the first cell of each row.\n  position: 'relative',\n  minWidth: '0',\n\n  '&:first-of-type': {\n    paddingLeft: '34px',\n  },\n\n  '&:first-of-type::before': {\n    ...setCssVar('normalTextColor', cssVar('weakTextColor')),\n    ...p12Medium,\n    backgroundColor: 'transparent',\n\n    counterIncrement: tableRowCounter,\n    content: `counter(${tableRowCounter})`,\n\n    position: 'absolute',\n    right: `calc(100% - ${lineNumberWidth})`,\n    top: '50%',\n    transform: 'translateY(-50%)',\n    fontVariantNumeric: 'tabular-nums',\n    userSelect: 'none',\n  },\n});\n\nconst tdGridStyles = {};\n\nconst editableStyles = css({\n  paddingLeft: '12px',\n  paddingRight: '12px',\n});\n\nconst tdDisabledStyles = css({\n  ...setCssVar('normalTextColor', cssVar('weakerTextColor')),\n});\n\nconst alignRightStyles = css({\n  textAlign: 'right',\n});\n\nconst liveResultOpacity: Opacity = 0.4;\n\nconst liveResultStyles = css({\n  background: transparency(purple100, liveResultOpacity).rgba,\n});\n\nconst selectedStyles = css({\n  backgroundColor: cssVar('tableSelectionBackgroundColor'),\n});\n\nconst focusedStyles = css({\n  boxShadow: `0 0 0 2px ${cssVar('tableFocusColor')} inset`,\n});\n\nconst draggableStyles = css({\n  ':hover': {\n    '.drag-handle': {\n      display: 'block',\n    },\n  },\n});\n\nexport interface TableDataProps extends HTMLAttributes<HTMLDivElement> {\n  as?: ElementType;\n  alignRight?: boolean;\n  isEditable?: boolean;\n  isUserContent?: boolean;\n  isLiveResult?: boolean;\n  contentEditable?: boolean;\n  attributes?: PlateComponentAttributes;\n  showPlaceholder?: boolean;\n  grabbing?: boolean;\n  selected?: boolean;\n  focused?: boolean;\n  collapsed?: boolean;\n  disabled?: boolean;\n  type?: CellValueType;\n  rowSpan?: number;\n  value?: string;\n  onChangeValue?: ComponentProps<typeof CellEditor>['onChangeValue'];\n  unit?: string;\n  dropTarget?: ConnectDropTarget;\n  parseError?: string;\n  firstChildren?: ReactNode;\n  lastBeforeMoreRowsHidden?: boolean;\n  dropdownOptions?: Pick<\n    ComponentProps<typeof CellEditor>,\n    'dropdownOptions' | 'dropdownResult'\n  >;\n  element?: AnyElement;\n}\n\nexport const TableData = forwardRef(\n  (\n    {\n      as: Component = 'div',\n      isEditable = false,\n      isUserContent = false,\n      isLiveResult = false,\n      attributes,\n      showPlaceholder = true,\n      draggable,\n      grabbing,\n      selected,\n      focused,\n      collapsed,\n      dropTarget,\n      rowSpan,\n      disabled = false,\n      lastBeforeMoreRowsHidden = false,\n      type,\n      unit,\n      value,\n      onChangeValue = noop,\n      alignRight,\n      children,\n      parseError,\n      firstChildren,\n      dropdownOptions,\n      element,\n      ...props\n    }: TableDataProps,\n    ref\n  ): ReturnType<FC> => {\n    const existingRef =\n      attributes && 'ref' in attributes ? attributes.ref : undefined;\n    const tdRef = useMergedRef(existingRef, ref, dropTarget);\n    const additionalProps = isEditable ? {} : { contentEditable: false };\n\n    return (\n      <Component\n        {...attributes}\n        {...additionalProps}\n        ref={tdRef}\n        rowSpan={rowSpan}\n        css={[\n          isUserContent && editableStyles,\n          tdBaseStyles,\n          tdGridStyles,\n          showPlaceholder && tdPlaceholderStyles,\n          disabled && tdDisabledStyles,\n          selected && selectedStyles,\n          focused && focusedStyles,\n          alignRight && alignRightStyles,\n          isLiveResult && liveResultStyles,\n          draggable && draggableStyles,\n        ]}\n        {...props}\n      >\n        {firstChildren}\n\n        <CellEditor\n          focused={focused}\n          type={type}\n          value={value}\n          unit={unit}\n          onChangeValue={onChangeValue}\n          parentType=\"table\"\n          element={element}\n          {...dropdownOptions}\n        >\n          <SyntaxErrorHighlight\n            variant=\"custom\"\n            error={parseError}\n            hideError={!parseError}\n          >\n            {children}\n          </SyntaxErrorHighlight>\n        </CellEditor>\n      </Component>\n    );\n  }\n);\n","import type { CellValueType } from '@decipad/editor-types';\nimport { ElementAttributes } from '@decipad/editor-types';\nimport { useThemeFromStore } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { FC, forwardRef, useContext } from 'react';\nimport {\n  ConnectDragPreview,\n  ConnectDragSource,\n  ConnectDropTarget,\n} from 'react-dnd';\nimport { useMergedRef } from '../../hooks/index';\nimport { DragHandle as DragHandleIcon } from '../../icons';\nimport {\n  cssVar,\n  dragHandleHighlight,\n  p13Medium,\n  strongOpacity,\n  transparency,\n} from '../../primitives';\nimport { table } from '../../styles';\nimport {\n  AvailableSwatchColor,\n  getStringType,\n  getTypeIcon,\n  Swatch,\n  swatchesThemed,\n  TableStyleContext,\n} from '../../utils';\nimport { ColumnDropLine } from '../DropLine/ColumnDropLine';\n\nconst columnStyles = css(p13Medium, {\n  position: 'relative',\n\n  minHeight: table.thMinHeight,\n  paddingLeft: table.tdHorizontalPadding,\n  paddingRight: '8px',\n});\n\nconst headerWrapperStyles = css({\n  display: 'flex',\n  alignItems: 'center',\n  minHeight: '30px',\n  gap: '6px',\n  position: 'relative',\n});\n\nconst columnTypeStyles = css({\n  display: 'inline-block',\n  width: '16px',\n  height: '16px',\n});\n\nconst iconTypeStyles = css(columnTypeStyles, {\n  svg: {\n    width: '16px',\n    height: '16px',\n  },\n});\n\nconst childrenWrapperStyles = css({\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textAlign: 'left',\n  minWidth: '5px',\n  padding: '0 4px',\n  borderRadius: '6px',\n  mixBlendMode: 'luminosity',\n});\n\nconst dragHandleStyles = css({\n  width: '8px',\n  height: 9,\n  transform: 'translateY(50%)',\n  display: 'block',\n  margin: 'auto',\n  cursor: 'grab',\n  pointerEvents: 'all',\n  marginTop: 0,\n  mixBlendMode: 'luminosity',\n  'svg > rect': {\n    fill: 'transparent',\n  },\n});\n\nconst DragHandle = () => {\n  return (\n    <button css={dragHandleStyles} contentEditable={false}>\n      <DragHandleIcon />\n    </button>\n  );\n};\n\ninterface DropSourceAndTargetProps {\n  draggingOver: boolean;\n  onSelectColumn?: () => void;\n}\n\nconst DropSourceAndTarget = forwardRef<\n  HTMLDivElement,\n  DropSourceAndTargetProps\n>(({ draggingOver, onSelectColumn }, ref) => {\n  return (\n    <div\n      css={css([\n        columnTypeStyles,\n        {\n          pointerEvents: draggingOver ? 'all' : 'none', // IMPORTANT!\n          height: '18px',\n          width: '18px',\n          display: 'flex',\n          alignItems: 'center',\n          borderRadius: '6px',\n          ':hover': {\n            background: dragHandleHighlight,\n          },\n        },\n      ])}\n      ref={ref}\n      contentEditable={false}\n      onClick={onSelectColumn}\n    >\n      <DragHandle />\n    </div>\n  );\n});\n\nconst thStyles = (\n  color: AvailableSwatchColor,\n  darkMode: boolean,\n  baseSwatches: Swatch\n) =>\n  css({\n    backgroundColor: color\n      ? transparency(baseSwatches[color as AvailableSwatchColor], strongOpacity)\n          .rgba\n      : cssVar('strongHighlightColor'),\n    // Keep hover effect when hovered, focused or the dropdown menu is opened.\n    '&:hover, &:focus-within, &[data-highlight=\"true\"]': {\n      backgroundColor:\n        color && swatchesThemed(darkMode)[color as AvailableSwatchColor].rgb,\n    },\n\n    boxShadow:\n      color &&\n      `inset 0px -2px 0px ${baseSwatches[color as AvailableSwatchColor].rgb}`,\n  });\nexport interface TableHeaderProps extends Partial<DropSourceAndTargetProps> {\n  children?: React.ReactNode;\n  highlight?: boolean;\n  type?: CellValueType;\n  menu?: React.ReactNode;\n  attributes?: ElementAttributes;\n  isEditable?: boolean;\n  showIcon?: boolean;\n  // drag\n  draggable?: boolean;\n  dragSource?: ConnectDragSource;\n  dragPreview?: ConnectDragPreview;\n  // drop\n  dropTarget?: ConnectDropTarget;\n  dropDirection?: 'left' | 'right';\n}\n\nexport const TableHeader = ({\n  children,\n  highlight = false,\n  type = getStringType(),\n  menu,\n  attributes,\n  isEditable = false,\n  showIcon = true,\n  draggable = false,\n  draggingOver = false,\n  dragSource,\n  dropTarget,\n  dropDirection,\n  onSelectColumn,\n}: TableHeaderProps): ReturnType<FC> => {\n  const Icon = getTypeIcon(type);\n\n  const [darkTheme] = useThemeFromStore();\n  const { color } = useContext(TableStyleContext);\n  const baseSwatches = swatchesThemed(darkTheme);\n\n  const thRef = useMergedRef(attributes?.ref, dropTarget);\n\n  return (\n    <th\n      {...attributes}\n      css={[\n        columnStyles,\n        thStyles(color as AvailableSwatchColor, darkTheme, baseSwatches),\n      ]}\n      ref={thRef}\n      data-highlight={highlight}\n      contentEditable={isEditable}\n    >\n      {isEditable && dropDirection === 'left' && (\n        <ColumnDropLine dropDirection={dropDirection} />\n      )}\n\n      <div css={headerWrapperStyles}>\n        {isEditable && draggable && dragSource && (\n          <DropSourceAndTarget\n            ref={dragSource}\n            draggingOver={draggingOver}\n            onSelectColumn={onSelectColumn}\n          />\n        )}\n        {showIcon && type.kind !== 'anything' && (\n          <span contentEditable={false} css={iconTypeStyles}>\n            <Icon />\n          </span>\n        )}\n\n        <div css={[childrenWrapperStyles]} spellCheck={false}>\n          {children}\n        </div>\n\n        {menu}\n      </div>\n\n      {isEditable && dropDirection === 'right' && (\n        <ColumnDropLine dropDirection={dropDirection} />\n      )}\n    </th>\n  );\n};\n","// @see https://github.com/jaredLunde/react-hook\nimport React from 'react';\n\nexport const useMergedRef =\n  <T>(...refs: (React.Ref<T> | undefined)[]): React.RefCallback<T> =>\n  (element: T) =>\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') ref(element);\n      else if (ref && typeof ref === 'object')\n        // eslint-disable-next-line no-param-reassign\n        (ref as React.MutableRefObject<T>).current = element;\n    });\n","import { css } from '@emotion/react';\nimport type { FC, ReactNode } from 'react';\nimport { Toggle } from '../../atoms';\nimport { p12Medium, p24Medium } from '../../primitives';\n\nconst wrapperStyles = css({\n  display: 'flex',\n  gap: '6px',\n  alignItems: 'center',\n  padding: '0px 6px 0px 8px',\n});\n\nconst hiddenChildrenStyles = css({\n  display: 'none',\n});\n\nexport interface BooleanEditorProps {\n  children?: ReactNode;\n  value?: string;\n  parentType?: 'table' | 'input';\n  onChangeValue: (\n    value: string | undefined // only booleans for now\n  ) => void;\n}\n\nexport const BooleanEditor: FC<BooleanEditorProps> = ({\n  children,\n  value = 'false',\n  onChangeValue,\n  parentType = 'input',\n}) => {\n  return (\n    <div contentEditable={false} css={wrapperStyles}>\n      <Toggle\n        active={value !== 'false' && value.trim() !== ''}\n        onChange={(newValue) => onChangeValue(newValue ? 'true' : 'false')}\n        parentType={parentType}\n      />\n      <span css={parentType === 'input' ? p24Medium : p12Medium}>\n        {parentType !== 'input' ? '' : value === 'true' ? 'On' : 'Off'}\n      </span>\n      <div css={hiddenChildrenStyles}>{children}</div>\n    </div>\n  );\n};\n","import { SerializedTypes } from '@decipad/computer';\nimport { CellValueType } from '@decipad/editor-types';\n\nconst dateFormatsForType: Record<SerializedTypes.Date['date'], string> = {\n  year: 'yyyy',\n  month: 'yyyy-MM',\n  day: 'yyyy-MM-dd',\n  hour: 'yyyy-MM-dd HH',\n  minute: 'yyyy-MM-dd HH:mm',\n  second: 'yyyy-MM-dd HH:mm:ss',\n  millisecond: 'yyyy-MM-dd HH:mm:ss',\n};\n\nexport const dateFormatForGranularity = (type?: CellValueType): string => {\n  if (type?.kind !== 'date') {\n    throw new Error('expected date');\n  }\n  return dateFormatsForType[type.date];\n};\n","import type { SerializedTypes } from '@decipad/computer';\nimport { CellValueType } from '@decipad/editor-types';\nimport { useCanUseDom } from '@decipad/react-utils';\nimport { css } from '@emotion/react';\nimport { format, parse } from 'date-fns';\nimport { FC, MouseEvent, ReactNode, useCallback, useMemo } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { dateFormatForGranularity } from '../../utils/dateFormatForGranularity';\n\nconst unitStyles = css({\n  '&::after': {\n    content: 'attr(data-unit)',\n    marginLeft: '0.25rem',\n  },\n});\n\nexport interface DateEditorProps {\n  open: boolean;\n  children?: ReactNode;\n  type?: CellValueType;\n  value?: string;\n  unit?: string;\n  parentType?: 'table' | 'input';\n  onChangeValue: (\n    value: string | undefined // only booleans for now\n  ) => void;\n}\n\nconst showTimeInputForGranularity: Partial<\n  Record<SerializedTypes.Date['date'], boolean>\n> = {\n  hour: true,\n  minute: true,\n  second: true,\n  millisecond: true,\n};\n\n// Careful: we use date editors for text input because otherwise\n// the cursor would jump when the inferred cell type changes...\n\nexport const DateEditor: FC<DateEditorProps> = ({\n  open,\n  children,\n  value = '',\n  unit,\n  onChangeValue: _onChangeValue,\n  type,\n}) => {\n  const dateFormat = useMemo(\n    () => type && type.kind === 'date' && dateFormatForGranularity(type),\n    [type]\n  );\n\n  const dateValue = useMemo(() => {\n    if (dateFormat) {\n      const d = parse(value, dateFormat, new Date());\n      return d != null && !Number.isNaN(d.valueOf()) ? d : undefined;\n    }\n    return undefined;\n  }, [dateFormat, value]);\n\n  const onChangeValue = useCallback(\n    (newValue: Date | null) => {\n      if (newValue != null && dateFormat) {\n        _onChangeValue(format(newValue, dateFormat));\n      }\n    },\n    [_onChangeValue, dateFormat]\n  );\n\n  const onClick = useCallback(\n    (ev: MouseEvent) => {\n      if (open) {\n        ev.stopPropagation();\n      }\n    },\n    [open]\n  );\n\n  return (\n    <span onClick={onClick} className=\"mydateeditorwrapper\">\n      <DatePicker\n        open={open && type?.kind === 'date'}\n        dateFormat={dateFormat || 'yyyy-MM-dd'}\n        selected={dateValue}\n        onChange={onChangeValue}\n        customInput={\n          <span data-unit={unit ?? ''} css={unit && unitStyles}>\n            {children}\n          </span>\n        }\n        showTimeSelect={\n          type?.kind === 'date' && showTimeInputForGranularity[type.date]\n        }\n        showMonthYearPicker={type?.kind === 'date' && type.date === 'month'}\n        showYearPicker={type?.kind === 'date' && type.date === 'year'}\n        portalId={useCanUseDom() ? 'date-picker-portal' : undefined}\n        todayButton=\"Today\"\n        timeClassName={() => 'deci-datepicker-selectable'}\n      ></DatePicker>\n    </span>\n  );\n};\n","import { getExprRef, Result } from '@decipad/computer';\nimport { AnyElement, CellValueType } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode, useState } from 'react';\nimport { Caret } from '../../icons';\nimport { CodeResult, DropdownMenu } from '../../organisms';\n\nconst dropdownPill = css({\n  display: 'flex',\n  alignItems: 'center',\n});\n\nexport interface DropdownEditorProps {\n  children?: ReactNode;\n  value?: string;\n  type?: CellValueType;\n  parentType?: 'table' | 'input';\n  onChangeValue: (value: string | undefined) => void;\n  dropdownOptions?: Array<{ id: string; value: string; focused?: boolean }>;\n  dropdownResult?: Result.Result;\n  element?: AnyElement;\n}\n\nexport const DropdownEditor: FC<DropdownEditorProps> = ({\n  children,\n  onChangeValue,\n  dropdownResult,\n  dropdownOptions,\n  element,\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <div contentEditable={false} aria-roledescription=\"dropdown-editor\">\n      <DropdownMenu\n        open={open}\n        isReadOnly={true}\n        setOpen={setOpen}\n        items={\n          dropdownOptions?.map((v) => ({\n            item: v.value,\n            focused: v.focused,\n          })) || []\n        }\n        onExecute={(i) => {\n          const id = dropdownOptions?.find((v) => v.value === i);\n          if (!id) return;\n          onChangeValue(getExprRef(id.id));\n          setOpen(false);\n        }}\n      >\n        <div onClick={() => setOpen(!open)} css={dropdownPill}>\n          {dropdownResult && (\n            <CodeResult\n              {...dropdownResult}\n              variant=\"inline\"\n              element={element}\n            />\n          )}\n          <div css={{ width: 16, height: 16, marginLeft: 'auto' }}>\n            <Caret variant={open ? 'up' : 'down'} />\n          </div>\n          <div css={{ display: 'none' }}>{children}</div>\n        </div>\n      </DropdownMenu>\n    </div>\n  );\n};\n","import { AnyElement, CellValueType } from '@decipad/editor-types';\nimport { Result } from '@decipad/computer';\nimport { useWindowListener } from '@decipad/react-utils';\nimport {\n  FC,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  MouseEvent as RMouseEvent,\n} from 'react';\nimport { BooleanEditor } from './BooleanEditor';\nimport { DateEditor } from './DateEditor';\nimport { DropdownEditor } from './DropdownEditor';\n\ninterface SpecificEditorProps {\n  open: boolean;\n  children: ReactNode;\n  type?: CellValueType;\n  value?: string;\n  unit?: string;\n  onChangeValue: (\n    value: string | undefined // only booleans for now\n  ) => void;\n  element?: AnyElement;\n}\n\nconst editorComponents = (): Record<string, FC<SpecificEditorProps>> => ({\n  boolean: BooleanEditor,\n  date: DateEditor,\n  dropdown: DropdownEditor,\n});\n\ninterface CellEditorProps {\n  focused?: boolean;\n  children: ReactNode;\n  type?: CellValueType;\n  unit?: string;\n  value?: string;\n  parentType?: 'table' | 'input';\n  onChangeValue: (\n    value: string | undefined // only booleans for now\n  ) => void;\n  dropdownOptions?: Array<{ id: string; value: string; focused?: boolean }>;\n  dropdownResult?: Result.Result;\n  element?: AnyElement;\n}\n\nexport const CellEditor: FC<CellEditorProps> = ({\n  focused = false,\n  value,\n  type,\n  unit,\n  onChangeValue: _onChangeValue,\n  children,\n  dropdownOptions,\n  dropdownResult,\n  parentType = 'input',\n  element,\n}) => {\n  const [opened, setOpened] = useState(false);\n\n  const toggleOpened = useCallback(() => {\n    setTimeout(() => {\n      // we have to delay the closing because otherwise we may lose the new value\n      setOpened((o) => !o);\n    }, 0);\n  }, []);\n\n  useEffect(() => {\n    if (!focused && opened) {\n      toggleOpened();\n    }\n  }, [focused, opened, toggleOpened]);\n\n  const onChangeValue = useCallback(\n    (newValue: string | undefined) => {\n      _onChangeValue(newValue);\n      setOpened(false);\n    },\n    [_onChangeValue]\n  );\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'Escape':\n          if (opened) {\n            setOpened(false);\n            event.stopPropagation();\n            event.preventDefault();\n          }\n\n          break;\n      }\n    },\n    [opened]\n  );\n\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n  const onGlobalClick = useCallback(\n    (event: MouseEvent) => {\n      const { target } = event;\n      if (\n        target &&\n        (target as Element).getAttribute('class')?.includes('datepicker')\n      ) {\n        return;\n      }\n      if (opened) {\n        toggleOpened();\n      }\n    },\n    [opened, toggleOpened]\n  );\n\n  useWindowListener('keydown', onKeyDown, true);\n  useWindowListener('click', onGlobalClick, true);\n\n  const onClick = useCallback(\n    (event: RMouseEvent) => {\n      if (event.currentTarget.getAttribute('class')?.includes('datepicker')) {\n        event.stopPropagation();\n        return;\n      }\n      toggleOpened();\n    },\n    [toggleOpened]\n  );\n\n  const EditorComponent = useMemo(() => {\n    if (type?.kind === 'dropdown') {\n      return DropdownEditor;\n    }\n    return (type && editorComponents()[type.kind]) || DateEditor;\n  }, [type]);\n\n  return (\n    <div ref={wrapperRef} onClick={onClick} className=\"mycelleditorwrapper\">\n      <EditorComponent\n        open={opened}\n        type={type}\n        value={value}\n        unit={unit}\n        onChangeValue={onChangeValue}\n        parentType={parentType}\n        dropdownOptions={dropdownOptions}\n        dropdownResult={dropdownResult}\n        element={element}\n      >\n        {children}\n      </EditorComponent>\n    </div>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport { noop } from '@decipad/utils';\nimport { useComputer } from '@decipad/react-contexts';\nimport { Tooltip } from '../../atoms';\nimport { p8Regular } from '../../primitives';\nimport { CodeResult } from '../../organisms';\n\nconst goToDefStyles = css(p8Regular);\n\ninterface CodeVariableTooltipProps {\n  variableMissing?: boolean;\n  children: ReactNode;\n  defBlockId?: string | null;\n  provideDefinitionLink: boolean;\n  onGoToDefinition?: () => void;\n}\n\nexport const CodeVariableTooltip: FC<CodeVariableTooltipProps> = ({\n  variableMissing = false,\n  children,\n  defBlockId,\n  provideDefinitionLink,\n  onGoToDefinition = noop,\n}): ReturnType<FC> => {\n  const hasValue = useComputer().getBlockIdResult$.useWithSelector(\n    (result) => result?.result?.value != null,\n    defBlockId\n  );\n\n  const tooltipResult = hasValue && (\n    <TooltipResult defBlockId={defBlockId ?? ''} />\n  );\n  const goToDefinition = provideDefinitionLink && defBlockId && (\n    <a css={goToDefStyles} href={`#${defBlockId}`} onClick={onGoToDefinition}>\n      Go to definition &rarr;\n    </a>\n  );\n\n  const enableTooltip = !variableMissing && (tooltipResult || goToDefinition);\n\n  return (\n    <Tooltip\n      trigger={<span>{children}</span>}\n      open={enableTooltip ? undefined : false}\n    >\n      {tooltipResult}\n      {goToDefinition}\n    </Tooltip>\n  );\n};\n\n/**\n * Subscribes to the result in the tooltip. This separation prevents updates to the\n * tooltip while it's closed, because a closed tooltip won't mount this component, and\n * therefore subscribe to computer results.\n */\nconst TooltipResult: FC<{ defBlockId: string }> = ({ defBlockId }) => {\n  const { type, value } =\n    useComputer().getBlockIdResult$.use(defBlockId)?.result ?? {};\n\n  if (type == null || value == null) {\n    return <></>;\n  }\n  return (\n    <CodeResult type={type} value={value} variant=\"inline\" tooltip={false} />\n  );\n};\n","import type { TableCellType } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport { noop } from 'lodash';\nimport { ReactNode, useMemo } from 'react';\nimport { CodeVariableTooltip } from '..';\nimport { cssVar } from '../../primitives';\nimport { codeBlock } from '../../styles';\nimport { getTypeIcon } from '../../utils';\n\nconst localVarStyles = css({\n  color: cssVar('weakTextColor'),\n});\n\nconst iconStyles = css({\n  display: 'inline-block',\n  verticalAlign: 'text-top',\n  height: '16px',\n  width: '16px',\n  marginRight: '4px',\n});\n\nconst typeStyles = css({\n  borderWidth: '1px',\n  borderStyle: 'solid',\n  borderColor: cssVar('weakerTextColor'),\n  color: cssVar('weakTextColor'),\n  backgroundColor: cssVar('backgroundColor'),\n});\n\nconst selectedStyles = css({\n  backgroundColor: cssVar('bubbleBackground'),\n  color: cssVar('bubbleColor'),\n});\n\ninterface CodeVariableProps {\n  readonly children: ReactNode;\n  readonly onClick?: () => void;\n  readonly provideVariableDefLink?: boolean;\n  readonly type?: TableCellType;\n  readonly variableScope?: VariableScope;\n  readonly defBlockId?: string | null;\n  readonly showTooltip?: boolean;\n  readonly isSelected?: boolean;\n  readonly variableMissing?: boolean;\n  onGoToDefinition?: () => void;\n}\n\nexport type VariableScope = 'global' | 'local' | 'undefined';\n\nexport const CodeVariable = ({\n  children,\n  showTooltip = true,\n  provideVariableDefLink = false,\n  onClick = noop,\n  type,\n  variableScope = 'global',\n  variableMissing = false,\n  defBlockId,\n  onGoToDefinition,\n  isSelected = false,\n}: CodeVariableProps): ReturnType<React.FC> => {\n  const Icon = useMemo(() => type && getTypeIcon(type), [type]);\n  const decoration = (\n    <span\n      onClick={onClick}\n      css={\n        variableMissing\n          ? null\n          : [\n              codeBlock.varStyles,\n              type && typeStyles,\n              variableScope === 'local' && localVarStyles,\n              isSelected && selectedStyles,\n            ]\n      }\n    >\n      {Icon && (\n        <span css={iconStyles} contentEditable={false}>\n          <Icon />\n        </span>\n      )}\n      {children}\n    </span>\n  );\n\n  if (!showTooltip) {\n    return decoration;\n  }\n\n  return (\n    <CodeVariableTooltip\n      variableMissing={variableMissing}\n      defBlockId={defBlockId}\n      provideDefinitionLink={provideVariableDefLink}\n      onGoToDefinition={onGoToDefinition}\n    >\n      {decoration}\n    </CodeVariableTooltip>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC, useCallback } from 'react';\nimport { TextAndIconButton } from '../../atoms';\nimport { Chevron, Eye } from '../../icons';\nimport { hideOnPrint } from '../../styles/editor-layout';\n\nconst showMoreButtonWrapperStyles = css({\n  display: 'flex',\n  flexDirection: 'row',\n  paddingBottom: '5px',\n  'div > button > span > svg': {\n    height: '8px',\n  },\n  padding: '5px',\n});\n\ninterface TableButtonProps {\n  readonly setState?: (state: boolean) => void;\n  readonly onClick?: () => void;\n  readonly isInState?: boolean;\n  readonly captions: string[];\n  readonly isExpandButton?: boolean;\n}\n\nexport const TableButton: FC<TableButtonProps> = ({\n  isInState,\n  setState,\n  onClick,\n  captions,\n  isExpandButton = false,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick?.();\n    setState?.(!isInState);\n  }, [isInState, onClick, setState]);\n\n  const textToShow = captions[1]\n    ? isInState && isExpandButton\n      ? captions[0]\n      : captions[1]\n    : captions[0];\n\n  return (\n    <div\n      css={[showMoreButtonWrapperStyles, hideOnPrint]}\n      data-testid={`table-button-${captions\n        .map((a) => a.replace(/\\W/g, '').toLocaleLowerCase())\n        .join('-')}`}\n      contentEditable={false}\n    >\n      <TextAndIconButton\n        text={textToShow}\n        onClick={handleClick}\n        iconPosition=\"left\"\n      >\n        {isExpandButton ? (\n          <Chevron type={isInState && isExpandButton ? 'expand' : 'collapse'} />\n        ) : (\n          <Eye />\n        )}\n      </TextAndIconButton>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { cssVar } from '../../primitives';\n\nconst formulasDrawerStyles = css({\n  border: `1px solid ${cssVar('borderColor')}`,\n  borderRadius: '10px',\n  margin: '4px 0 16px',\n  padding: '6px 0',\n});\n\ninterface FormulasDrawerProps {\n  readonly blockId?: string;\n  readonly children?: ReactNode;\n}\n\nexport const FormulasDrawer = ({\n  children,\n}: FormulasDrawerProps): ReturnType<FC> => {\n  return (\n    <div>\n      <section css={css(formulasDrawerStyles)} spellCheck={false}>\n        <pre>{children}</pre>\n      </section>\n    </div>\n  );\n};\n","import { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { Children, FC, PropsWithChildren, useContext } from 'react';\nimport * as icons from '../../icons';\nimport { FormulasDrawer, TableButton } from '../../organisms';\nimport {\n  cssVar,\n  display,\n  p16Medium,\n  placeholderOpacity,\n  setCssVar,\n} from '../../primitives';\nimport { slimBlockWidth, wideBlockWidth } from '../../styles/editor-layout';\nimport { AvailableSwatchColor, TableStyleContext } from '../../utils';\nimport { IconPopover } from '../IconPopover/IconPopover';\n\nconst tableCaptionWideStyles = css({\n  maxWidth: `${wideBlockWidth}px`,\n});\n\nconst tableCaptionSlimStyles = css({\n  maxWidth: `${slimBlockWidth}px`,\n});\n\nconst tableCaptionInnerStyles = css({\n  alignItems: 'center',\n  display: 'flex',\n  justifyContent: 'space-between',\n  gap: '9px',\n  lineBreak: 'unset',\n});\n\nconst tableTitleWrapperStyles = css({\n  display: 'flex',\n  alignItems: 'center',\n  gap: '8px',\n});\n\nconst tableIconSizeStyles = css({\n  display: 'grid',\n  width: '16px',\n  height: '16px',\n});\n\nconst placeholderStyles = css(p16Medium, {\n  cursor: 'text',\n  display: 'flex',\n  '&::before': {\n    ...display,\n    ...p16Medium,\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n    pointerEvents: 'none',\n    content: 'attr(aria-placeholder)',\n    opacity: placeholderOpacity,\n  },\n});\n\nconst editableTableCaptionStyles = css(p16Medium);\ntype EditableTableCaptionProps = PropsWithChildren<{\n  onAddDataViewButtonPress: () => void;\n  isForWideTable?: boolean;\n  empty?: boolean;\n  readOnly?: boolean;\n  formulaEditor?: boolean;\n  showToggleCollapsedButton?: boolean;\n}>;\n\nexport const EditableTableCaption: FC<EditableTableCaptionProps> = ({\n  empty,\n  formulaEditor = true,\n  isForWideTable = false,\n  readOnly = false,\n  onAddDataViewButtonPress,\n  children,\n  showToggleCollapsedButton = false,\n}) => {\n  const {\n    color,\n    icon,\n    isCollapsed,\n    hideFormulas,\n    setIcon,\n    setColor,\n    setCollapsed,\n    setHideFormulas,\n    hideAddDataViewButton,\n  } = useContext(TableStyleContext);\n\n  const Icon = icons[icon];\n  const [caption, ...tableFormulaEditors] = Children.toArray(children);\n\n  return (\n    <div css={isForWideTable ? tableCaptionWideStyles : tableCaptionSlimStyles}>\n      <div css={[tableCaptionInnerStyles, tableCaptionSlimStyles]}>\n        <div css={tableTitleWrapperStyles}>\n          <div contentEditable={false} css={tableIconSizeStyles}>\n            {useIsEditorReadOnly() ? (\n              <Icon />\n            ) : (\n              <IconPopover\n                color={color as AvailableSwatchColor}\n                trigger={\n                  <button>\n                    <Icon />\n                  </button>\n                }\n                onChangeIcon={setIcon}\n                onChangeColor={setColor}\n              />\n            )}\n          </div>\n          <div\n            aria-placeholder={empty ? 'Name your table' : ''}\n            aria-roledescription=\"table name\"\n            css={[editableTableCaptionStyles, placeholderStyles]}\n            spellCheck={false}\n          >\n            {caption}\n          </div>\n        </div>\n        <div css={css({ display: 'inline-flex' })}>\n          {showToggleCollapsedButton && setCollapsed ? (\n            <TableButton\n              setState={setCollapsed}\n              isInState={isCollapsed}\n              captions={['Show table', 'Hide table']}\n              isExpandButton\n            />\n          ) : null}\n          {!hideAddDataViewButton && setHideFormulas ? (\n            <TableButton\n              setState={setHideFormulas}\n              isInState={hideFormulas}\n              captions={['Show formulas', 'Hide formulas']}\n              isExpandButton\n            />\n          ) : null}\n          {hideAddDataViewButton || readOnly ? null : (\n            <TableButton\n              onClick={onAddDataViewButtonPress}\n              captions={['Create view']}\n            />\n          )}\n        </div>\n      </div>\n\n      {formulaEditor && !isCollapsed && tableFormulaEditors.length > 0 && (\n        <div css={hideFormulas ? { display: 'none' } : { display: 'block' }}>\n          <FormulasDrawer>{tableFormulaEditors}</FormulasDrawer>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { PlateComponentAttributes } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { cssVar, p12Medium, p14Medium, setCssVar } from '../../primitives';\nimport { table } from '../../styles';\nimport { tableRowCounter } from '../../utils';\n\nconst lineNumberWidth = '22px';\n\nconst tdBaseStyles = css(p14Medium, {\n  alignItems: 'center',\n  backgroundColor: cssVar('tintedBackgroundColor'),\n  minHeight: table.tdMinHeight,\n  verticalAlign: 'middle',\n  cursor: 'default',\n  caretColor: 'transparent',\n\n  // Show line numbers on the first cell of each row.\n  position: 'relative',\n});\n\nconst tdCounterStyles = css({\n  '&:first-of-type': {\n    paddingLeft: lineNumberWidth,\n  },\n  '&:first-of-type::before': {\n    ...setCssVar('normalTextColor', cssVar('weakTextColor')),\n    ...p12Medium,\n    backgroundColor: cssVar('backgroundColor'),\n\n    counterIncrement: tableRowCounter,\n    content: `counter(${tableRowCounter})`,\n\n    position: 'absolute',\n    right: `calc(100% - ${lineNumberWidth})`,\n    top: '50%',\n    transform: 'translateY(-50%)',\n    fontVariantNumeric: 'tabular-nums',\n  },\n});\n\nexport interface TableDataProps {\n  className?: string;\n  children?: ReactNode;\n  attributes?: PlateComponentAttributes;\n  hiddenCounter?: boolean;\n}\n\nexport const TableFormulaCell = ({\n  attributes,\n  className,\n  children,\n  hiddenCounter,\n}: TableDataProps): ReturnType<FC> => {\n  // IMPORTANT NOTE: do not remove the children elements from rendering.\n  // Even though they're one element with an empty text property, their absence triggers\n  // an uncaught exception in slate-react.\n  // Also, be careful with the element structure:\n  // https://github.com/ianstormtaylor/slate/issues/3930#issuecomment-723288696\n  return (\n    <td\n      {...attributes}\n      css={[tdBaseStyles, !hiddenCounter && tdCounterStyles]}\n      className={className}\n    >\n      {children}\n    </td>\n  );\n};\n","import { ComponentProps, FC, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport { useDelayedValue } from '@decipad/react-utils';\nimport { cssVar, p14Medium } from '../../primitives';\nimport { TableFormulaCell } from '../../atoms';\n\nconst tdLineStyles = css(p14Medium, {\n  marginLeft: '12px',\n});\n\nconst selectedStyles = css({\n  backgroundColor: cssVar('tableSelectionBackgroundColor'),\n});\n\nconst noEditingStyles = css({ display: 'none' });\n\nexport type FormulaTableDataProps = ComponentProps<typeof TableFormulaCell> & {\n  result?: ReactNode;\n  resultType?: string;\n  selected?: boolean;\n  firstChildren?: ReactNode;\n};\n\nexport const FormulaTableData = ({\n  children,\n  selected,\n  result,\n  resultType,\n  firstChildren,\n  ...props\n}: FormulaTableDataProps): ReturnType<FC> => {\n  const isError = resultType === 'nothing' || resultType === 'type-error';\n  const delayedResult = useDelayedValue(\n    <span\n      css={resultType !== 'table' ? tdLineStyles : null}\n      contentEditable={false}\n    >\n      {result}\n    </span>,\n    isError /* TODO && whether the formula is selected */\n  );\n\n  // IMPORTANT NOTE: do not remove the children elements from rendering.\n  // Even though they're one element with an empty text property, their absence triggers\n  // an uncaught exception in slate-react.\n  // Also, be careful with the element structure:\n  // https://github.com/ianstormtaylor/slate/issues/3930#issuecomment-723288696\n  return (\n    <TableFormulaCell {...props} css={[selected ? selectedStyles : null]}>\n      {firstChildren}\n      <span css={noEditingStyles} contentEditable={false}>\n        {children}\n      </span>\n      {delayedResult}\n    </TableFormulaCell>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { css } from '@emotion/react';\nimport { Tooltip } from '../../atoms';\nimport { red600 } from '../../primitives';\n\nconst highlightStyles = css({\n  borderBottom: `1px dotted ${red600.rgb}`,\n  color: red600.rgb,\n});\n\ninterface SyntaxErrorHighlightProps {\n  children: ReactNode;\n  variant?: 'mismatched-brackets' | 'never-closed' | 'never-opened' | 'custom';\n  error?: string;\n  hideError?: boolean;\n}\n\nexport const SyntaxErrorHighlight = ({\n  children,\n  variant,\n  error,\n  hideError,\n}: SyntaxErrorHighlightProps): ReturnType<FC> => {\n  if (hideError) {\n    // Retain DOM structure for error highlighting\n    // To avoid jumping cursor when an error is fixed or caused around it.\n    // This keeps happening. Please do not undo.\n    return (\n      <Tooltip\n        trigger={<span css={[]}>{children}</span>}\n        open={false}\n      ></Tooltip>\n    );\n  }\n\n  return (\n    <Tooltip trigger={<span css={highlightStyles}>{children}</span>}>\n      {variant === 'never-closed' && 'Did you forget to close this bracket?'}\n      {variant === 'never-opened' && 'Did you forget the opening bracket?'}\n      {variant === 'mismatched-brackets' &&\n        'This bracket does not match the other one.'}\n      {(variant === 'custom' && error) ?? 'Unknown error'}\n      {variant == null && 'This character is invalid here'}\n    </Tooltip>\n  );\n};\n","import { PlateComponentAttributes, TableCellType } from '@decipad/editor-types';\nimport { FC, ReactNode } from 'react';\nimport { tableControlWidth } from '../../styles/table';\n\ninterface TableHeaderRowProps {\n  readonly children: ReactNode;\n  readonly readOnly?: boolean;\n  readonly attributes?: PlateComponentAttributes;\n  readonly onChangeColumnType?: (type: TableCellType) => void;\n}\n\nexport const TableHeaderRow = ({\n  children,\n  readOnly = false,\n  attributes,\n}: TableHeaderRowProps): ReturnType<FC> => {\n  return (\n    <tr {...attributes}>\n      {!readOnly && (\n        <th\n          contentEditable={false}\n          css={{\n            width: tableControlWidth,\n            border: 'none !important',\n          }}\n        />\n      )}\n      {children}\n    </tr>\n  );\n};\n","import { css } from '@emotion/react';\nimport { once } from 'ramda';\nimport { forwardRef, useState } from 'react';\nimport { MenuItem, Tooltip } from '../../atoms';\nimport { DragHandle, Trash } from '../../icons/index';\nimport {\n  cssVar,\n  mouseMovingOverTransitionDelay,\n  p12Medium,\n  p12Regular,\n  setCssVar,\n  shortAnimationDuration,\n} from '../../primitives';\nimport { editorLayout } from '../../styles';\nimport { importTableDragHandleStyles } from '../../styles/table';\nimport { MenuList } from '../MenuList/MenuList';\n\nexport interface TableCellControlsProps {\n  readonly onSelect?: () => void;\n  readonly onRemove?: () => void;\n  readonly readOnly?: boolean;\n}\n\nexport interface MenuButtonProps {\n  readonly setMenuIsOpen: (menuIsOpen: boolean) => void;\n  readonly menuIsOpen: boolean;\n}\n\nconst gridStyles = once(() =>\n  css({\n    display: 'grid',\n    gridTemplate: `\n      \".                          handle                             \" ${editorLayout.gutterHandleHeight()}\n      \"menu                       .                                  \" auto\n      /minmax(max-content, 144px) ${editorLayout.gutterHandleWidth()}\n    `,\n    justifyContent: 'end',\n  })\n);\n\nexport const TableCellControls = forwardRef<\n  HTMLTableHeaderCellElement,\n  TableCellControlsProps\n>(({ readOnly, onSelect, onRemove }, ref) => {\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n  const handleMenuClick = () => {\n    if (onSelect) {\n      onSelect();\n    }\n    setMenuIsOpen(!menuIsOpen);\n  };\n\n  const menuButton = (\n    <button onClick={() => handleMenuClick()} css={importTableDragHandleStyles}>\n      <DragHandle />\n    </button>\n  );\n\n  return (\n    <th\n      contentEditable={false}\n      ref={ref}\n      css={{\n        opacity: menuIsOpen ? 1 : 0,\n        '*:hover > &': {\n          opacity: 'unset',\n        },\n        transition: `opacity ${shortAnimationDuration} ease-in-out ${mouseMovingOverTransitionDelay}`,\n        verticalAlign: 'middle',\n      }}\n    >\n      {!readOnly && (\n        <div css={gridStyles()}>\n          <MenuList\n            root\n            open={menuIsOpen}\n            onChangeOpen={setMenuIsOpen}\n            trigger={menuButton}\n            dropdown\n          >\n            {onRemove && (\n              <MenuItem\n                icon={<Trash />}\n                onSelect={() => onRemove()}\n                selected={false}\n              >\n                Delete row\n              </MenuItem>\n            )}\n          </MenuList>\n\n          <Tooltip trigger={menuButton} side=\"left\">\n            <span\n              css={css(\n                p12Regular,\n                setCssVar('currentTextColor', cssVar('backgroundColor')),\n                {\n                  whiteSpace: 'nowrap',\n                  textAlign: 'center',\n                }\n              )}\n            >\n              <strong\n                css={css([\n                  p12Medium,\n                  setCssVar('currentTextColor', cssVar('backgroundColor')),\n                ])}\n              >\n                Drag\n              </strong>{' '}\n              to move\n              <br />\n              <strong\n                css={css([\n                  p12Medium,\n                  setCssVar('currentTextColor', cssVar('backgroundColor')),\n                ])}\n              >\n                Click\n              </strong>{' '}\n              for options\n            </span>\n          </Tooltip>\n        </div>\n      )}\n    </th>\n  );\n});\n","import { ElementAttributes } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport { DropLineDirection } from '@udecode/plate-ui-dnd';\nimport { FC, forwardRef, ReactNode, RefCallback, RefObject } from 'react';\nimport { noop } from 'rxjs';\nimport { useMergedRef } from '../../hooks';\nimport { draggingOpacity } from '../../organisms/DraggableBlock/DraggableBlock';\nimport { regularBorder } from '../../organisms/Table/Table';\nimport {\n  TableCellControls,\n  TableCellControlsProps,\n} from '../TableCellControls/TableCellControls';\n\nconst tableRowStyles = (isBeingDragged: boolean) =>\n  css({\n    opacity: isBeingDragged ? draggingOpacity : 'unset',\n    '&:not(:last-child) > td': {\n      borderBottom: regularBorder,\n    },\n  });\n\nconst invisibleTableRowStyles = css({\n  display: 'none',\n});\n\ninterface TableRowProps extends TableCellControlsProps {\n  readonly attributes?: ElementAttributes;\n  readonly children: ReactNode;\n  readonly onRemove?: () => void;\n  readonly readOnly?: boolean;\n  readonly draggable?: boolean;\n  readonly isBeingDragged?: boolean;\n  readonly dropLine?: DropLineDirection;\n  readonly isVisible?: boolean;\n  readonly previewMode?: boolean;\n  readonly tableCellControls?: false | ReactNode;\n\n  /**\n   * Table cell controls ref\n   */\n  readonly dragRef?: RefCallback<HTMLDivElement>;\n  readonly previewRef?: RefObject<HTMLDivElement>;\n}\n\nexport const TableRow = forwardRef<HTMLTableRowElement, TableRowProps>(\n  (\n    {\n      attributes,\n      children,\n      onRemove = noop,\n      onSelect,\n      readOnly = false,\n      dragRef,\n      previewMode,\n      previewRef,\n      isBeingDragged = false,\n      isVisible = true,\n      tableCellControls,\n    },\n    ref\n  ): ReturnType<FC> => {\n    const trRef = useMergedRef(attributes?.ref, ref, previewRef);\n\n    return (\n      <tr\n        {...attributes}\n        ref={trRef}\n        css={[\n          tableRowStyles(isBeingDragged),\n          !isVisible && invisibleTableRowStyles,\n        ]}\n      >\n        {!previewMode &&\n          tableCellControls !== false &&\n          !readOnly &&\n          (tableCellControls || (\n            <TableCellControls\n              ref={dragRef}\n              readOnly={readOnly}\n              onSelect={onSelect}\n              onRemove={onRemove}\n            />\n          ))}\n        {children}\n      </tr>\n    );\n  }\n);\n","import { css } from '@emotion/react';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { FC, useCallback, useRef } from 'react';\nimport { noop } from '@decipad/utils';\nimport { Calendar, Formula, Number, Table, Text } from '../../icons';\nimport { setCssVar, cssVar, p14Medium, teal600 } from '../../primitives';\n\nconst wrapperStyles = (focused: boolean) =>\n  css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '6px',\n    ':hover': {\n      backgroundColor: cssVar('highlightColor'),\n      borderRadius: '6px',\n    },\n    ...(focused && {\n      backgroundColor: cssVar('highlightColor'),\n      borderRadius: '6px',\n    }),\n  });\n\nconst styles = css({\n  width: '100%',\n  display: 'grid',\n  gridTemplateColumns: 'auto 1fr',\n  alignItems: 'center',\n  columnGap: '4px',\n});\n\nconst iconStyles = css(setCssVar('currentTextColor', teal600.rgb), {\n  width: '16px',\n  height: '16px',\n  display: 'grid',\n  borderRadius: '6px',\n});\nconst textStyles = css({\n  display: 'grid',\n  textAlign: 'start',\n});\n\ninterface AutoCompleteMenuItemProps {\n  readonly kind: string;\n  readonly identifier: string;\n  readonly type: string;\n\n  /**\n   * Unfortunately, we cannot use real browser focus for this menu since we need the editor to stay focused.\n   * Even a \"switching focus back and forth on key presses\" does not work well enough because Slate tends to lose selection state on blur.\n   */\n  readonly focused?: boolean;\n  readonly onExecute?: () => void;\n}\n\nexport const AutoCompleteMenuItem = ({\n  identifier,\n  type,\n  focused = false,\n  onExecute = noop,\n}: AutoCompleteMenuItemProps): ReturnType<FC> => {\n  const itemRef = useRef<HTMLButtonElement>(null);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if ((event.key === 'Enter' || event.key === 'Tab') && !event.shiftKey) {\n        if (focused) {\n          onExecute();\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      }\n    },\n    [onExecute, focused]\n  );\n  useWindowListener('keydown', onKeyDown, true);\n\n  if (focused) {\n    itemRef.current?.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  return (\n    <div css={wrapperStyles(focused)}>\n      <button\n        role=\"menuitem\"\n        css={styles}\n        onMouseDown={(event) => {\n          onExecute();\n          event.stopPropagation();\n          event.preventDefault();\n        }}\n        ref={itemRef}\n      >\n        <span css={iconStyles}>\n          {{\n            number: <Number />,\n            string: <Text />,\n            date: <Calendar />,\n            table: <Table />,\n            function: <Formula />,\n          }[type] || <Number />}\n        </span>\n        <div css={textStyles}>\n          <strong css={css(p14Medium)}>{identifier}</strong>\n        </div>\n      </button>\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\nimport { Children, FC, ReactNode } from 'react';\nimport { isElement } from 'react-is';\nimport { AutoCompleteMenuItem } from '../../atoms';\nimport { cssVar, p13Medium } from '../../primitives';\n\nconst styles = css({\n  display: 'grid',\n  gap: '4px',\n});\n\nconst titleStyles = css(p13Medium, {\n  padding: '8px 8px 0px',\n  color: cssVar('weakerTextColor'),\n});\n\nconst itemsStyles = css({\n  display: 'grid',\n});\n\ninterface AutoCompleteMenuGroupProps {\n  readonly title?: string;\n  readonly children?: ReactNode;\n}\nexport const AutoCompleteMenuGroup = ({\n  title,\n  children,\n}: AutoCompleteMenuGroupProps): ReturnType<FC> => {\n  return (\n    <div css={styles} role=\"group\">\n      {title && <div css={titleStyles}>{title}</div>}\n      <div css={itemsStyles}>\n        {Children.map(children, (child) => {\n          if (child == null) {\n            return null;\n          }\n          if (isElement(child) && child.type === AutoCompleteMenuItem) {\n            return child;\n          }\n          console.error(\n            'Received child that is not an auto complete menu item',\n            child\n          );\n          throw new Error(\n            'Expected all children to be auto complete menu items'\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { useWindowListener } from '@decipad/react-utils';\nimport { css } from '@emotion/react';\nimport { dequal } from 'dequal';\nimport {\n  ComponentProps,\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { AutoCompleteMenuItem } from '../../atoms';\nimport { AutoCompleteMenuGroup } from '../../molecules';\nimport { cssVar, mediumShadow, p13Medium, setCssVar } from '../../primitives';\n\ntype AutoCompleteGroup = Omit<\n  ComponentProps<typeof AutoCompleteMenuGroup>,\n  'children'\n> & {\n  readonly items: ReadonlyArray<Identifier>;\n};\n\nconst hotKeyStyle = css({\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n\n  boxSizing: 'border-box',\n  borderRadius: '6px',\n  padding: '0 6px',\n  border: `1px ${cssVar('strongerHighlightColor')} solid`,\n  backgroundColor: cssVar('backgroundColor'),\n  color: cssVar('weakTextColor'),\n});\n\nconst footerStyles = css(\n  p13Medium,\n  {\n    padding: '6px 0px 8px 16px',\n    width: '100%',\n    bottom: '0px',\n    height: '32px',\n    lineHeight: '24px',\n    background: cssVar('highlightColor'),\n    boxShadow: `0px -1px 0px ${cssVar('borderColor')}`,\n    margin: '0px 0px',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '4px',\n  },\n  setCssVar('currentTextColor', cssVar('weakTextColor'))\n);\n\nconst resultStyles = css({\n  display: 'block',\n  maxWidth: '244px',\n  minWidth: '149px',\n  marginTop: '8px',\n});\n\nconst styles = (top: boolean) =>\n  css({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    top: top ? '26px' : '0px',\n    left: 0,\n    userSelect: 'none',\n\n    backgroundColor: cssVar('backgroundColor'),\n    border: `1px solid ${cssVar('borderColor')}`,\n    borderRadius: '12px',\n    boxShadow: `0px 3px 24px -4px ${mediumShadow.rgba}`,\n    position: 'absolute',\n    width: '280px',\n    boxSizing: 'border-box',\n    zIndex: 2,\n  });\n\nconst mainStyles = css({\n  padding: '6px',\n  width: '100%',\n});\n\nexport type Identifier = {\n  kind: 'variable' | 'function';\n  identifier: string;\n  blockId?: string;\n  type: string;\n  editing?: boolean;\n  focused?: boolean;\n};\n\nexport interface AutoCompleteMenuProps {\n  readonly identifiers: Identifier[];\n  readonly search?: string;\n  readonly onExecuteItem?: (identifier: Identifier) => void;\n  readonly top?: boolean;\n  readonly result?: string | null;\n}\n\ntype ItemBlockId = {\n  identifier: string;\n  blockId?: string;\n};\n\nconst matchBlockIdOrIdentifier = (\n  a: ItemBlockId,\n  b: ItemBlockId | undefined\n) => {\n  if (a.blockId && b?.blockId) {\n    return a.blockId === b.blockId;\n  }\n  return a.identifier === b?.identifier;\n};\n\nexport const AutoCompleteMenu = ({\n  search = '',\n  identifiers,\n  onExecuteItem,\n  top = true,\n  result = '',\n}: AutoCompleteMenuProps): ReturnType<FC> => {\n  const isResult = result !== '';\n  const groups: ReadonlyArray<AutoCompleteGroup> = useMemo(\n    () => [\n      {\n        title: 'Variables',\n        items: identifiers\n          .filter((i) => i.kind === 'variable' || i.kind === 'function')\n          .map((i) => ({\n            identifier: i.identifier,\n            blockId: i.blockId,\n            kind: 'variable' as const,\n            type: i.type,\n            focused:\n              isResult && i.kind === 'variable' && i.identifier === result,\n          })),\n      },\n    ],\n    [identifiers, isResult, result]\n  );\n  const groupsWithItemsFiltered = useMemo(\n    () =>\n      groups.map(({ items, title, ...group }) => {\n        const matchingItems = items.filter(({ identifier }) =>\n          [identifier].some((term) => {\n            return term.toLowerCase().includes(search.toLowerCase());\n          })\n        );\n        return groups.length === 1\n          ? { ...group, matchingItems }\n          : { ...group, title, matchingItems };\n      }),\n    [search, groups]\n  );\n\n  const [matchingIdentifiers, setMathingIdentifiers] = useState(\n    groupsWithItemsFiltered\n      .flatMap(({ matchingItems }) => matchingItems)\n      .map(({ identifier, blockId }) => ({ identifier, blockId }))\n  );\n\n  useEffect(() => {\n    setMathingIdentifiers((old) => {\n      const newMatching = groupsWithItemsFiltered\n        .flatMap(({ matchingItems }) => matchingItems)\n        .map(({ identifier, blockId }) => ({ identifier, blockId }));\n      if (dequal(old, newMatching)) return old;\n      return newMatching;\n    });\n  }, [search, groupsWithItemsFiltered]);\n\n  // AutoCompleteMenuItems do not use real browser focus, see their docs\n  const [focusedItem, setFocusedItem] = useState<ItemBlockId>();\n\n  const allItems = groupsWithItemsFiltered.flatMap((g) => g.matchingItems);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (true) {\n        case event.key === 'ArrowDown' && !event.shiftKey:\n          const newFocusedItem =\n            matchingIdentifiers[\n              (focusedItem\n                ? matchingIdentifiers.findIndex((elem) =>\n                    matchBlockIdOrIdentifier(elem, focusedItem)\n                  )\n                : -1) + 1\n            ] ?? matchingIdentifiers[0];\n          setFocusedItem(newFocusedItem);\n          event.stopPropagation();\n          event.preventDefault();\n          break;\n        case event.key === 'ArrowUp' && !event.shiftKey:\n          setFocusedItem(\n            matchingIdentifiers[\n              (focusedItem\n                ? matchingIdentifiers.findIndex((elem) =>\n                    matchBlockIdOrIdentifier(elem, focusedItem)\n                  )\n                : matchingIdentifiers.length) - 1\n            ] ?? matchingIdentifiers.slice(-1)[0]\n          );\n          event.stopPropagation();\n          event.preventDefault();\n          break;\n      }\n    },\n    [focusedItem, matchingIdentifiers]\n  );\n  useWindowListener('keydown', onKeyDown, true);\n\n  useEffect(() => {\n    if (matchingIdentifiers.length > 0 && !isResult) {\n      setFocusedItem(matchingIdentifiers[0]);\n    }\n  }, [isResult, matchingIdentifiers]);\n\n  return allItems.length ? (\n    <span\n      css={{ position: 'relative', zIndex: 3 }}\n      className=\"test-auto-complete-menu\"\n    >\n      <div\n        contentEditable={false}\n        role=\"menu\"\n        aria-orientation=\"vertical\"\n        css={[styles(top), isResult && resultStyles]}\n      >\n        <div\n          css={[\n            mainStyles,\n            allItems.length > 5 && {\n              height: '200px',\n              overflowY: 'scroll',\n            },\n          ]}\n        >\n          {groupsWithItemsFiltered.map(({ matchingItems, ...group }, i) =>\n            matchingItems.length ? (\n              <AutoCompleteMenuGroup key={i} {...group}>\n                {matchingItems.map(({ ...item }) => (\n                  <AutoCompleteMenuItem\n                    {...item}\n                    key={item.blockId ?? item.identifier}\n                    focused={\n                      matchBlockIdOrIdentifier(item, focusedItem) ||\n                      item.focused\n                    }\n                    onExecute={() => onExecuteItem?.(item)}\n                  />\n                ))}\n              </AutoCompleteMenuGroup>\n            ) : null\n          )}\n        </div>\n        <div css={footerStyles} data-testid=\"autocomplete-tooltip\">\n          Press <span css={hotKeyStyle}>{isResult ? 'Enter' : 'Esc'}</span> to\n          {isResult ? ' select' : ' dismiss'}\n        </div>\n      </div>\n    </span>\n  ) : null;\n};\n","import { Result } from '@decipad/computer';\nimport { AnyElement } from '@decipad/editor-types';\nimport { useDelayedValue } from '@decipad/react-utils';\nimport { css } from '@emotion/react';\nimport React, { ComponentProps, ReactNode, useCallback, useState } from 'react';\nimport { CodeResult } from '..';\nimport { CodeError } from '../../atoms';\nimport {\n  antiwiggle,\n  code,\n  cssVar,\n  p14Medium,\n  p14Regular,\n  setCssVar,\n  smallScreenQuery,\n  wiggle,\n} from '../../primitives';\nimport { codeBlock } from '../../styles';\nimport { resultBubbleStyles } from '../../styles/results';\nimport { CodeResultProps } from '../../types';\nimport { isTabularType } from '../../utils';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\n\nconst { lineHeight } = codeBlock;\n\nconst highlightedLineStyles = {\n  borderColor: cssVar('borderHighlightColor'),\n};\n\nconst codeLineStyles = (\n  variant: CodeLineProps['variant'],\n  hasNext?: boolean,\n  hasPrevious?: boolean\n) =>\n  css({\n    ...(variant === 'standalone'\n      ? {\n          border: `1px solid ${cssVar('borderColor')}`,\n\n          backgroundColor: cssVar('highlightColor'),\n          padding: '6px 12px',\n        }\n      : {\n          padding: '0px 12px',\n        }),\n\n    // Think this couldn't be done with CSS since one cannot query the next element to influence\n    // the current one, as it would be needed for the effect given by `hasNext`.\n    ...(!hasPrevious\n      ? { borderTopLeftRadius: '10px', borderTopRightRadius: '10px' }\n      : {}),\n    ...(!hasNext\n      ? {\n          borderBottomLeftRadius: '10px',\n          borderBottomRightRadius: '10px',\n        }\n      : {}),\n\n    ':hover': highlightedLineStyles,\n    position: 'relative',\n\n    ...(variant === 'standalone'\n      ? {\n          display: 'grid',\n          gridGap: '0 16px',\n          // `minmax(0, X)` prevents a grid blowout when code line is made out of huge consecutive text.\n          gridTemplate: `\n  \"code            inline-res  \" 1fr\n  \"expanded-res    expanded-res\" auto\n  /minmax(0, 66%) 1fr\n`,\n        }\n      : {\n          display: 'grid',\n          gridGap: '0 16px',\n          gridTemplateAreas: `\"code inline-res\"`,\n          gridTemplateColumns: 'minmax(0, 90%) 1fr',\n        }),\n  });\n\nconst inlineStyles = css({\n  gridArea: 'inline-res',\n  maxWidth: '100%',\n  display: 'flex',\n  justifySelf: 'end',\n  alignSelf: 'flex-start',\n  padding: '5px 0',\n\n  userSelect: 'all',\n\n  [smallScreenQuery]: {\n    // When in mobile, the inline result, if there is one,  will occupy the space dedicated to\n    // expanded results (i.e. tables, lists, etc.).\n    gridArea: 'expanded-res',\n    width: '100%',\n  },\n});\n\nconst codeStyles = css(code, {\n  gridArea: 'code',\n  ...setCssVar('currentTextColor', cssVar('strongTextColor')),\n  lineHeight,\n  whiteSpace: 'pre-wrap',\n\n  [smallScreenQuery]: {\n    // When in mobile we want to use that extra right-space that usually belongs to inline results.\n    gridArea: '1 / span 2',\n  },\n});\n\nconst placeholderStyles = css(codeStyles, {\n  opacity: 0.4,\n  pointerEvents: 'none',\n\n  [smallScreenQuery]: {\n    position: 'absolute',\n    left: '12px',\n  },\n});\n\nconst inlineResultStyles = (bubble: boolean) =>\n  css(p14Regular, bubble && resultBubbleStyles, {\n    ':empty': { display: 'none' },\n\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n\n    padding: '2px 8px',\n\n    ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n\n    ...(!bubble && {\n      paddingTop: '4px',\n      display: 'flex',\n      alignItems: 'center',\n    }),\n\n    [smallScreenQuery]: {\n      width: '100%',\n    },\n  });\n\nconst expandedResultStyles = css(p14Medium, {\n  gridArea: 'expanded-res',\n  display: 'grid',\n  marginTop: '4px',\n  overflowX: 'auto',\n});\n\nconst canGrabStyles = css({\n  cursor: 'grab',\n\n  ':hover': {\n    animation: `${antiwiggle} 0.5s ease-in-out`,\n  },\n\n  ':hover:after': {\n    backgroundColor: 'blue',\n    animation: `${wiggle} 0.5s ease-in-out`,\n  },\n});\n\nconst grabbingStyles = css({\n  cursor: 'grabbing',\n});\n\ninterface CodeLineProps {\n  readonly variant?: 'table' | 'standalone' | 'inline';\n  readonly children: ReactNode;\n  readonly highlight?: boolean;\n  readonly placeholder?: string;\n  readonly result?: Result.Result;\n  readonly syntaxError?: ComponentProps<typeof CodeError>;\n  readonly isEmpty?: boolean;\n  readonly onDragStartInlineResult?: (e: React.DragEvent) => void;\n  readonly onDragStartCell?: CodeResultProps<'table'>['onDragStartCell'];\n  readonly onDragEnd?: (e: React.DragEvent) => void;\n  readonly onClickedResult?: (arg0: Result.Result) => void;\n  readonly hasNextSibling?: boolean;\n  readonly hasPreviousSibling?: boolean;\n  readonly element?: AnyElement;\n}\n\nexport const CodeLine = ({\n  variant = 'standalone',\n  children,\n  highlight = false,\n  result,\n  placeholder,\n  syntaxError,\n  isEmpty = false,\n  onDragStartInlineResult,\n  onDragStartCell,\n  onDragEnd,\n  onClickedResult,\n  hasNextSibling,\n  hasPreviousSibling,\n  element,\n}: CodeLineProps): ReturnType<React.FC> => {\n  const [grabbing, setGrabbing] = useState(false);\n\n  const freshResult = useResultInfo({\n    result,\n    syntaxError,\n    onDragStartCell,\n    onClickedResult,\n    element,\n  });\n  const { inline, expanded } = useDelayedValue(\n    freshResult,\n    freshResult.errored === true\n  );\n\n  return (\n    <div\n      css={[\n        codeLineStyles(variant, hasNextSibling, hasPreviousSibling),\n        highlight && highlightedLineStyles,\n      ]}\n      spellCheck={false}\n      data-testid=\"code-line\"\n    >\n      <code css={codeStyles}>{children}</code>\n      {placeholder && isEmpty && (\n        <span css={placeholderStyles} contentEditable={false}>\n          {placeholder}\n        </span>\n      )}\n      {!isEmpty && (\n        <div\n          css={[\n            inlineStyles,\n            (onDragStartInlineResult || onDragStartCell || onClickedResult) &&\n              canGrabStyles,\n            grabbing && grabbingStyles,\n          ]}\n          contentEditable={false}\n          draggable\n          onDragStart={(e) => {\n            onDragStartInlineResult?.(e);\n            setGrabbing(true);\n          }}\n          onDragEnd={(e) => {\n            onDragEnd?.(e);\n            setGrabbing(false);\n          }}\n        >\n          {inline}\n        </div>\n      )}\n      {!isEmpty && expanded}\n    </div>\n  );\n};\n\nexport function useResultInfo({\n  variant,\n  result,\n  syntaxError,\n  onDragStartCell,\n  onDragEnd,\n  onClickedResult,\n  element,\n}: Pick<\n  CodeLineProps,\n  | 'variant'\n  | 'result'\n  | 'syntaxError'\n  | 'onDragStartCell'\n  | 'onDragEnd'\n  | 'onClickedResult'\n  | 'element'\n>): { inline?: ReactNode; expanded?: ReactNode; errored?: boolean } {\n  const onOutputClick = useEventNoEffect(\n    useCallback(() => {\n      if (onClickedResult && result) {\n        onClickedResult(result);\n      }\n    }, [onClickedResult, result])\n  );\n\n  // Return early when syntax errors\n  if (syntaxError) {\n    if (syntaxError.isEmptyExpressionError) {\n      return {\n        inline: (\n          <output css={inlineResultStyles(variant !== 'inline')}>\n            <CodeError {...syntaxError} message=\"There is an empty variable\" />\n          </output>\n        ),\n        errored: true,\n      };\n    }\n    return {\n      inline: (\n        <output css={inlineResultStyles(variant !== 'inline')}>\n          <CodeError {...syntaxError} />\n        </output>\n      ),\n      errored: true,\n    };\n  }\n\n  if (!result || result.type.kind === 'nothing') {\n    return {};\n  }\n\n  // Tables are expanded\n  if (isTabularType(result.type)) {\n    return {\n      expanded: (\n        <output contentEditable={false} css={expandedResultStyles}>\n          <CodeResult\n            {...result}\n            variant=\"block\"\n            onDragStartCell={onDragStartCell}\n            onDragEnd={onDragEnd}\n            element={element}\n          />\n        </output>\n      ),\n    };\n  }\n\n  // Any other result\n  return {\n    inline: (\n      <output\n        css={inlineResultStyles(variant !== 'inline')}\n        onClick={onOutputClick}\n      >\n        <CodeResult {...result} variant=\"inline\" element={element} />\n      </output>\n    ),\n    errored: result.type.kind === 'type-error',\n  };\n}\n","import { Result, SerializedTypes } from '@decipad/computer';\nimport { zip } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, useMemo, useRef, useState } from 'react';\nimport { CodeResult, Table } from '..';\nimport { TableData, TableHeader } from '../../atoms';\nimport { DragHandle } from '../../icons/index';\nimport { TableHeaderRow, TableRow } from '../../molecules';\nimport { cssVar } from '../../primitives';\nimport { table } from '../../styles';\nimport {\n  defaultMaxRows,\n  tableControlWidth,\n  tableParentStyles,\n} from '../../styles/table';\nimport { CodeResultProps } from '../../types';\nimport { isTabularType, toTableHeaderType } from '../../utils';\nimport {\n  tableOverflowStyles,\n  tableWrapperStyles,\n} from '../EditorTable/EditorTable';\nimport { TableColumnHeader } from '../TableColumnHeader/TableColumnHeader';\n\nconst recursiveRowCount = (r: Result.Result): number => {\n  if (r.type.kind === 'table') {\n    const { type, value } = r as Result.Result<'table'>;\n    if (value == null) {\n      return 0;\n    }\n\n    const tableLength = Math.max(...value.map((v) => v?.length ?? 0));\n    return (\n      Math.max(\n        ...zip(type.columnTypes, value).map(([ct, cv]) =>\n          cv == null ? 0 : recursiveRowCount({ type: ct, value: cv[0] })\n        )\n      ) * tableLength\n    );\n  }\n  if (r.type.kind === 'column') {\n    const { type, value } = r as Result.Result<'column'>;\n    return (\n      recursiveRowCount({ type: type.cellType, value: value[0] }) * value.length\n    );\n  }\n  return 1;\n};\n\nconst liveTableWrapperStyles = css({\n  left: '20px',\n});\n\nconst liveTableOverflowStyles = css({\n  minWidth: `calc(((100vw - 700px) / 2) - (${tableControlWidth} * -2))`,\n});\n\nconst liveTableEmptyCellStyles = css({\n  border: 0,\n});\n\nexport const TableResult = ({\n  parentType,\n  type,\n  value,\n  onDragStartCell,\n  onDragEnd,\n  tooltip = true,\n  isLiveResult = false,\n  firstTableRowControls,\n  onChangeColumnType,\n  element,\n}: CodeResultProps<'table'>): ReturnType<FC> => {\n  const [showAllRows, setShowAllRows] = useState(false);\n  const { columnNames, columnTypes } = type;\n  const allowsForLookup = columnTypes && columnTypes[0]?.kind === 'string';\n\n  if (value.length !== columnNames.length) {\n    throw new Error(\n      `There are ${columnNames.length} column names. Expected values for ${columnNames.length} columns, but received values for ${value.length} columns.`\n    );\n  }\n\n  const handleSetShowALlRowsButtonPress = () => {\n    setShowAllRows(true);\n  };\n\n  const tableLength = value.at(0)?.length;\n\n  const tableRecursiveLength = useMemo(\n    () => recursiveRowCount({ type, value }),\n    [type, value]\n  );\n\n  const isNested = useMemo(() => isTabularType(parentType), [parentType]);\n\n  const hiddenRowsCount = useMemo(() => {\n    if (isNested || showAllRows || !tableLength) {\n      return 0;\n    }\n    if (tableRecursiveLength <= defaultMaxRows) {\n      return 0;\n    }\n    if (tableRecursiveLength === tableLength) {\n      return tableLength - defaultMaxRows;\n    }\n    const recursiveShowLength = tableRecursiveLength - defaultMaxRows;\n    const proportionOfTableToHide = recursiveShowLength / tableRecursiveLength;\n    return Math.floor(tableLength * proportionOfTableToHide);\n  }, [isNested, tableLength, showAllRows, tableRecursiveLength]);\n\n  if (tableLength == null) {\n    return null;\n  }\n\n  const showRowLength = tableLength - hiddenRowsCount;\n\n  const Cell = ({\n    cellValue,\n    colIndex,\n    rowIndex,\n  }: {\n    cellValue: any;\n    colIndex: number;\n    rowIndex: number;\n  }) => {\n    const previewRef = useRef<Element>(null);\n\n    return (\n      <TableData\n        ref={previewRef}\n        key={colIndex}\n        as=\"td\"\n        isEditable={false}\n        isLiveResult={isLiveResult}\n        showPlaceholder={false}\n        lastBeforeMoreRowsHidden={\n          hiddenRowsCount > 0 && rowIndex === showRowLength - 1\n        }\n        css={{ ...tableParentStyles }}\n        draggable={!!onDragStartCell && allowsForLookup}\n        firstChildren={\n          <div\n            draggable\n            onDragStart={(e) => {\n              onDragStartCell?.(\n                {\n                  tableName: (type as SerializedTypes.Table)\n                    .indexName as string,\n                  columnName: columnNames[colIndex],\n                  cellValue: value[0][rowIndex] as string,\n                },\n                {\n                  previewRef,\n                  result: {\n                    type: columnTypes[colIndex],\n                    value: cellValue,\n                  },\n                }\n              )(e);\n            }}\n            onDragEnd={onDragEnd}\n            className={onDragStartCell && 'drag-handle'}\n            css={{\n              display: 'none',\n              position: 'absolute',\n              top: 8,\n              right: 4,\n              zIndex: 2,\n              height: 18,\n              width: 18,\n              borderRadius: 6,\n              ':hover': {\n                background: cssVar('highlightColor'),\n              },\n            }}\n          >\n            <button\n              css={{\n                width: '8px',\n                height: 9,\n                transform: 'translateY(50%)',\n                display: 'block',\n                margin: 'auto',\n                cursor: 'grab',\n              }}\n            >\n              <DragHandle />\n            </button>\n          </div>\n        }\n        element={element}\n      >\n        <div\n          css={[\n            css(table.getCellWrapperStyles(columnTypes[colIndex])),\n            colIndex === 0 && table.cellLeftPaddingStyles,\n          ]}\n        >\n          <CodeResult\n            parentType={type}\n            type={columnTypes[colIndex]}\n            value={cellValue}\n            variant=\"block\"\n            tooltip={tooltip}\n            isLiveResult={isLiveResult}\n            element={element}\n          />\n        </div>\n      </TableData>\n    );\n  };\n\n  return (\n    <div\n      css={[\n        isLiveResult && tableWrapperStyles,\n        isLiveResult && liveTableWrapperStyles,\n      ]}\n    >\n      <div\n        css={[\n          isLiveResult && tableOverflowStyles,\n          isLiveResult && liveTableOverflowStyles,\n        ]}\n        contentEditable={false}\n      />\n\n      <Table\n        columnCount={columnNames.length}\n        border={isNested ? 'inner' : 'all'}\n        hiddenRowCount={hiddenRowsCount}\n        isReadOnly={!isLiveResult}\n        isLiveResult={isLiveResult}\n        handleSetShowALlRowsButtonPress={handleSetShowALlRowsButtonPress}\n        head={\n          <TableHeaderRow readOnly={!isLiveResult}>\n            {columnNames?.map((columnName, index) =>\n              isLiveResult ? (\n                <TableColumnHeader\n                  key={index}\n                  type={toTableHeaderType(columnTypes[index])}\n                  isFirst={index === 0}\n                  isForImportedColumn={isLiveResult}\n                  onChangeColumnType={(columnType) =>\n                    onChangeColumnType?.(index, columnType)\n                  }\n                >\n                  {columnName}\n                </TableColumnHeader>\n              ) : (\n                <TableHeader\n                  type={toTableHeaderType(columnTypes[index])}\n                  key={index}\n                  isEditable={!isLiveResult}\n                  showIcon={isLiveResult}\n                >\n                  {columnName}\n                </TableHeader>\n              )\n            )}\n          </TableHeaderRow>\n        }\n        body={\n          <>\n            {Array.from({ length: showRowLength }, (_, rowIndex) => (\n              <TableRow\n                key={rowIndex}\n                readOnly={!isLiveResult || rowIndex > 0}\n                tableCellControls={\n                  (isLiveResult && rowIndex === 0 && firstTableRowControls) ||\n                  (isLiveResult && <th></th>) ||\n                  false\n                }\n              >\n                {isLiveResult && rowIndex > 0 && (\n                  <th css={liveTableEmptyCellStyles}></th>\n                )}\n                {value.map((column, colIndex) => (\n                  <Cell\n                    key={colIndex}\n                    cellValue={column[rowIndex]}\n                    rowIndex={rowIndex}\n                    colIndex={colIndex}\n                  />\n                ))}\n              </TableRow>\n            ))}\n          </>\n        }\n      ></Table>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { css } from '@emotion/react';\nimport { useComputer } from '@decipad/react-contexts';\nimport { unnestTableRows } from '@decipad/computer';\nimport { cssVar, setCssVar } from '../../primitives';\nimport { TableData } from '../../atoms';\nimport { TableRow } from '../../molecules';\nimport { CodeResult, Table } from '..';\nimport { table } from '../../styles';\nimport { CodeResultProps } from '../../types';\nimport { cellLeftPaddingStyles } from '../../styles/table';\n\nconst rowLabelStyles = css(cellLeftPaddingStyles, {\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n  color: cssVar('currentTextColor'),\n  display: 'inline-block',\n  lineHeight: 1.2,\n});\n\nexport const ColumnResult = ({\n  type,\n  value,\n  element,\n}: CodeResultProps<'column'>): ReturnType<FC> => {\n  const computer = useComputer();\n\n  const labels = computer.explainDimensions$.use({ type, value });\n\n  return labels ? (\n    <Table\n      isReadOnly={true}\n      columnCount={labels[0].dimensionLength}\n      body={\n        <>\n          {Array.from(unnestTableRows(labels, { type, value })).map(\n            (matrixValue, index) => {\n              return (\n                <TableRow readOnly key={index}>\n                  {matrixValue.labelInfo.map((labelInfo, i) => {\n                    return labelInfo.indexesOfRemainingLengthsAreZero ? (\n                      <TableData\n                        key={i}\n                        as=\"td\"\n                        rowSpan={labelInfo.productOfRemainingLengths}\n                        showPlaceholder={false}\n                        element={element}\n                      >\n                        <span\n                          css={[\n                            css(table.getCellWrapperStyles(type.cellType)),\n                            // In case there is a nested dimension but no labels (ie. the nested dimension\n                            // will render in the first column), we need to give it some space from the row\n                            // number\n                            !labels && table.cellLeftPaddingStyles,\n                            rowLabelStyles,\n                          ]}\n                        >\n                          {labelInfo.label ??\n                            labelInfo.indexAtThisDimension + 1}\n                        </span>\n                      </TableData>\n                    ) : null;\n                  })}\n                  <TableData as=\"td\" showPlaceholder={false} element={element}>\n                    <span css={rowLabelStyles}>\n                      <CodeResult\n                        type={matrixValue.result.type}\n                        value={matrixValue.result.value}\n                        element={element}\n                      />\n                    </span>\n                  </TableData>\n                </TableRow>\n              );\n            }\n          )}\n        </>\n      }\n    />\n  ) : null;\n};\n","import { Fragment } from 'react';\nimport { Interpreter } from '@decipad/computer';\nimport { CodeResult } from '../CodeResult/CodeResult';\nimport { CodeResultProps } from '../../types';\n\nexport const InlineColumnResult = ({\n  value,\n  type,\n  element,\n}: CodeResultProps<'column'>): ReturnType<React.FC> => {\n  const { cellType } = type;\n\n  if (!cellType) {\n    return null;\n  }\n\n  const columnValue = value as Interpreter.ResultColumn;\n  return (\n    <span>\n      {columnValue?.map((row, rowIndex) => {\n        return (\n          <Fragment key={rowIndex}>\n            <CodeResult\n              value={row}\n              variant=\"inline\"\n              type={cellType}\n              element={element}\n            />\n            {rowIndex < columnValue.length - 1 && ', '}\n          </Fragment>\n        );\n      })}\n    </span>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { CodeResult, Table } from '..';\nimport { TableData, TableHeader } from '../../atoms';\nimport { TableHeaderRow, TableRow } from '../../molecules';\nimport { table } from '../../styles';\nimport { CodeResultProps } from '../../types';\nimport { isTabularType, toTableHeaderType } from '../../utils';\n\nexport const RowResult = ({\n  parentType,\n  type,\n  value,\n  element,\n}: CodeResultProps<'row'>): ReturnType<FC> => {\n  const { rowCellNames, rowCellTypes } = type;\n  return (\n    <Table\n      isReadOnly={true}\n      columnCount={1}\n      border={isTabularType(parentType) ? 'inner' : 'all'}\n      head={\n        <TableHeaderRow readOnly>\n          {rowCellNames.map((columnName, colIndex) => (\n            <TableHeader\n              type={toTableHeaderType(rowCellTypes[colIndex])}\n              key={colIndex}\n              showIcon={false}\n            >\n              {columnName}\n            </TableHeader>\n          ))}\n        </TableHeaderRow>\n      }\n      body={\n        <TableRow readOnly>\n          {value.map((col, colIndex) => {\n            return (\n              <TableData\n                as=\"td\"\n                key={colIndex}\n                showPlaceholder={false}\n                element={element}\n              >\n                <div\n                  css={[\n                    css(table.getCellWrapperStyles(rowCellTypes[colIndex])),\n                    colIndex === 0 && table.cellLeftPaddingStyles,\n                  ]}\n                >\n                  <CodeResult\n                    parentType={type}\n                    type={rowCellTypes[colIndex]}\n                    value={col}\n                    variant=\"block\"\n                    element={element}\n                  />\n                </div>\n              </TableData>\n            );\n          })}\n        </TableRow>\n      }\n    />\n  );\n};\n","import { Fragment } from 'react';\nimport { CodeResult } from '../CodeResult/CodeResult';\nimport { CodeResultProps } from '../../types';\n\nexport const InlineRowResult = ({\n  value,\n  type,\n  tooltip = true,\n  element,\n}: CodeResultProps<'row'>): ReturnType<React.FC> => {\n  const { rowCellTypes } = type;\n\n  return (\n    <span>\n      {value.map((column, colIndex) => {\n        return (\n          <Fragment key={colIndex}>\n            <CodeResult\n              value={column}\n              variant=\"inline\"\n              type={rowCellTypes[colIndex]}\n              tooltip={tooltip}\n              element={element}\n            />\n            {colIndex < value.length - 1 && ', '}\n          </Fragment>\n        );\n      })}\n    </span>\n  );\n};\n","import { FC } from 'react';\nimport { CodeResult } from '..';\nimport { CodeResultProps } from '../../types';\n\nexport const RangeResult = ({\n  type: { rangeOf },\n  value,\n  variant,\n  element,\n}: CodeResultProps<'range'>): ReturnType<FC> => {\n  if (!rangeOf) {\n    return null;\n  }\n\n  return (\n    <span data-highlight-changes>\n      <CodeResult\n        type={rangeOf}\n        value={value[0]}\n        variant={variant}\n        element={element}\n      />{' '}\n      &rarr;{' '}\n      <CodeResult\n        type={rangeOf}\n        value={value[1]}\n        variant={variant}\n        element={element}\n      />\n    </span>\n  );\n};\n","import { useComputer } from '@decipad/react-contexts';\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { CodeResultProps } from '../../types';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nconst numberResultStyles = css({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  display: 'inline',\n  verticalAlign: 'baseline',\n  lineHeight: 1.2,\n  fontFeatureSettings: '\"tnum\"',\n});\n\nexport const NumberResult: FC<CodeResultProps<'number'>> = ({\n  type,\n  value,\n  tooltip = true,\n}) => {\n  const computer = useComputer();\n\n  const formatted = computer.formatNumber(type, value);\n\n  const fullResult = <span css={numberResultStyles}>{formatted.asString}</span>;\n\n  const trigger = (\n    <span\n      data-testid={`number-result:${formatted.asString}`}\n      data-highlight-changes\n      css={numberResultStyles}\n    >\n      {fullResult}\n    </span>\n  );\n\n  if (!tooltip || formatted.asString === formatted.asStringPrecise) {\n    return trigger;\n  }\n\n  return (\n    <Tooltip trigger={trigger} stopClickPropagation>\n      {formatted.asStringPrecise}\n    </Tooltip>\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport {\n  BooleanCheckboxSelected,\n  BooleanCheckboxUnselected,\n} from '../../icons';\nimport { CodeResultProps } from '../../types';\n\nconst booleanResultStyles = css({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n\n  '> svg': {\n    width: '16px',\n    height: '16px',\n  },\n});\n\nexport const BooleanResult = ({\n  value,\n}: CodeResultProps<'boolean'>): ReturnType<FC> => {\n  return (\n    <span\n      data-highlight-changes\n      css={booleanResultStyles}\n      contentEditable={false}\n    >\n      {value ? <BooleanCheckboxSelected /> : <BooleanCheckboxUnselected />}\n    </span>\n  );\n};\n","import { FC } from 'react';\nimport { DateTime } from 'luxon';\nimport { CodeResultProps } from '../../types';\n\nexport const formatUTCDate = (date: Date, form: string, tz = false): string => {\n  const dateTime = DateTime.fromMillis(date.valueOf()).toUTC();\n  return dateTime.toFormat(form) + (tz ? ' UTC' : '');\n};\n\nexport const DateResult = ({\n  type,\n  value,\n}: CodeResultProps<'date'>): ReturnType<FC> => {\n  const date = new Date(Number(value));\n  let fullUTC = false;\n  let format;\n  switch (type.date) {\n    case 'year': {\n      format = 'yyyy';\n      break;\n    }\n    case 'month': {\n      format = 'MMM yyyy';\n      break;\n    }\n    case 'day': {\n      format = 'MMM d yyyy';\n      break;\n    }\n    default: {\n      if (date.getUTCSeconds() === 0 && date.getUTCMilliseconds() === 0) {\n        fullUTC = true;\n        format = 'MMM d yyyy HH:mm';\n      }\n      break;\n    }\n  }\n\n  const string = format\n    ? formatUTCDate(date, format, fullUTC)\n    : date.toISOString();\n  return <span data-highlight-changes>{string}</span>;\n};\n","export const DefaultFunctionResult = () => <span>ƒ</span>;\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { CodeResultProps } from '../../types';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nconst numberResultStyles = css({\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n  display: 'inline',\n  verticalAlign: 'baseline',\n  lineHeight: 1.2,\n});\n\nexport const AnyResult: FC<CodeResultProps<'anything'>> = () => {\n  const trigger = (\n    <span data-highlight-changes css={numberResultStyles}>\n      ?\n    </span>\n  );\n\n  return <Tooltip trigger={trigger}>Unknown value</Tooltip>;\n};\n","import { FC, useEffect, useContext } from 'react';\nimport { InferError } from '@decipad/computer';\nimport { useComputer } from '@decipad/react-contexts';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { AnyElement } from '@decipad/editor-types';\nimport { CodeError } from '../../atoms';\nimport { CodeResultProps } from '../../types';\n\ntype InlineCodeErrorProps = CodeResultProps<'type-error'> & {\n  element?: AnyElement;\n};\n\nexport const InlineCodeError: FC<InlineCodeErrorProps> = ({\n  type,\n  element,\n}) => {\n  const computer = useComputer();\n  const { url } = new InferError(type.errorCause);\n  const message = computer.formatError(type.errorCause);\n  const clientEvent = useContext(ClientEventsContext);\n\n  useEffect(() => {\n    clientEvent({\n      type: 'action',\n      action: 'user code error',\n      props: {\n        errorType: type.errorCause.errType,\n        elementType: element?.type,\n        message,\n        url,\n      },\n    });\n  }, [clientEvent, element?.type, message, type.errorCause.errType, url]);\n\n  return <CodeError message={message} url={url} />;\n};\n","import { SerializedTypeKind } from '@decipad/computer';\nimport { isDeciNumberInput } from '@decipad/number';\nimport {\n  ColumnResult,\n  InlineColumnResult,\n  InlineRowResult,\n  RangeResult,\n  RowResult,\n  TableResult,\n} from '..';\nimport {\n  AnyResult,\n  BooleanResult,\n  DateResult,\n  DefaultFunctionResult,\n  NumberResult,\n} from '../../atoms';\nimport { InlineCodeError } from '../../molecules';\nimport { CodeResultProps } from '../../types';\n\n// Simple result components\n\ntype CodeResultComponentType<T extends SerializedTypeKind> = (\n  props: CodeResultProps<T>\n) => ReturnType<React.FC>;\n\nconst DefaultResult: CodeResultComponentType<SerializedTypeKind> = ({\n  value,\n}) => <span>{String(value ?? '')}</span>;\nconst InlineTableResult: CodeResultComponentType<'table'> = () => (\n  <span>Table</span>\n);\n\n// Result matchers\n\ninterface ResultMatcher {\n  component: Partial<CodeResultComponentType<SerializedTypeKind>>;\n  match: <T extends SerializedTypeKind>(props: CodeResultProps<T>) => boolean;\n}\n// Lazy to avoid strange cyclic import bug\nconst getResultMatchers = (): ResultMatcher[] => [\n  {\n    component: NumberResult,\n    match: ({ type, value }) =>\n      type.kind === 'number' && isDeciNumberInput(value),\n  },\n  {\n    component: BooleanResult,\n    match: ({ type, value }) =>\n      type.kind === 'boolean' && typeof value === 'boolean',\n  },\n  {\n    component: DateResult,\n    match: ({ type }) => type.kind === 'date',\n  },\n  {\n    component: TableResult,\n    match: ({ type, variant }) => type.kind === 'table' && variant === 'block',\n  },\n  {\n    component: InlineTableResult,\n    match: ({ type, variant }) => type.kind === 'table' && variant === 'inline',\n  },\n  {\n    component: ColumnResult,\n    match: ({ type, variant }) => type.kind === 'column' && variant === 'block',\n  },\n  {\n    component: InlineColumnResult,\n    match: ({ type, variant }) =>\n      type.kind === 'column' && variant === 'inline',\n  },\n  {\n    component: RowResult,\n    match: ({ type, variant }) => type.kind === 'row' && variant === 'block',\n  },\n  {\n    component: InlineRowResult,\n    match: ({ type, variant }) => type.kind === 'row' && variant === 'inline',\n  },\n  {\n    component: DefaultFunctionResult,\n    match: ({ type }) => type.kind === 'function',\n  },\n  {\n    component: RangeResult,\n    match: ({ type }) => type.kind === 'range',\n  },\n  {\n    component: InlineCodeError,\n    match: ({ type, variant }) =>\n      type.kind === 'type-error' && variant === 'inline',\n  },\n  {\n    component: AnyResult,\n    match: ({ type }) => type.kind === 'anything' || type.kind === 'nothing',\n  },\n];\n\nfunction getResultComponent<T extends SerializedTypeKind>(\n  props: CodeResultProps<T>\n): CodeResultComponentType<T> {\n  return (\n    ((getResultMatchers().find(({ match }) => match(props))?.component ??\n      DefaultResult) as CodeResultComponentType<T>) || null\n  );\n}\n\n// Component\n\nexport function CodeResult<T extends SerializedTypeKind>(\n  props: CodeResultProps<T>\n): ReturnType<React.FC> {\n  const { type, value, variant = 'block', element } = props;\n  const ResultComponent = getResultComponent({ value, variant, type, element });\n\n  // Does not present result when result is not present, except for type errors.\n  if (value == null && type.kind !== 'type-error') {\n    return null;\n  }\n\n  return <ResultComponent {...props} />;\n}\n","import { BlocksInUseInformation } from '@decipad/computer';\nimport { useThemeFromStore } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, useCallback } from 'react';\nimport { MenuItem, Tooltip } from '../../atoms';\nimport { Warning } from '../../icons';\nimport {\n  animationTwoColours,\n  antiwiggle,\n  cssVar,\n  p12Medium,\n  purple300,\n  purple700,\n  transparency,\n  wiggle,\n} from '../../primitives';\n\ninterface DeleteWithDepsMenuItemProps {\n  readonly blockInfo: BlocksInUseInformation;\n  readonly onSelect?: () => void;\n}\n\nexport const DeleteWithDepsMenuItem: FC<DeleteWithDepsMenuItemProps> = ({\n  blockInfo,\n  onSelect = noop,\n}) => {\n  const nextBlockIdToFix = blockInfo.usedInBlockId[0];\n  const blocksAffected = blockInfo.usedInBlockId.length;\n  const [isDarkMode] = useThemeFromStore();\n  const selectedColor = isDarkMode ? purple700 : purple300;\n  const boxShadowSpread = 15;\n\n  const onClick = useCallback(\n    (ev: any) => {\n      const scaleUp = [\n        {\n          boxShadow: `${transparency(selectedColor, 0.4).rgba} 0px ${\n            5 + boxShadowSpread\n          }px 2px -${boxShadowSpread}px, ${\n            transparency(selectedColor, 0.3).rgba\n          } 0px ${10 + boxShadowSpread}px 2px -${boxShadowSpread}px, ${\n            transparency(selectedColor, 0.2).rgba\n          } 0px ${15 + boxShadowSpread}px 2px -${boxShadowSpread}px, ${\n            transparency(selectedColor, 0.1).rgba\n          } 0px ${20 + boxShadowSpread}px 2px -${boxShadowSpread}px, ${\n            transparency(selectedColor, 0.04).rgba\n          } 0px ${25 + boxShadowSpread}px 2px -${boxShadowSpread}px`,\n          zIndex: 999,\n        },\n        {\n          boxShadow: `unset`,\n          zIndex: 1,\n        },\n        { zIndex: 'unset' },\n      ];\n      const scaleTime = {\n        duration: 2000,\n        iterations: 1,\n      };\n      if (typeof nextBlockIdToFix === 'string') {\n        const el = document.getElementById(nextBlockIdToFix);\n        el?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        el?.focus();\n        setTimeout(() => el?.animate(scaleUp, scaleTime), 500);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    },\n    [nextBlockIdToFix, selectedColor]\n  );\n\n  return (\n    <MenuItem icon={<Warning />} onSelect={onSelect}>\n      <Tooltip\n        trigger={\n          <div css={deleteWithDepsWrapperStyles}>\n            <span>Delete</span>\n            <a\n              href={`#${nextBlockIdToFix}`}\n              css={deleteWithDepsMenuItemStyles}\n              onClick={onClick}\n            >\n              {blocksAffected}\n            </a>\n          </div>\n        }\n      >\n        <p\n          css={css({\n            textAlign: 'center',\n            maxWidth: '170px',\n          })}\n        >\n          Deleting this block will affect {blocksAffected} other places. 😢\n        </p>\n        <p\n          css={css({\n            textAlign: 'center',\n            maxWidth: '170px',\n          })}\n        >\n          Remove references before deleting by clicking the\n          <div\n            css={[\n              deleteWithDepsMenuItemStyles,\n              { margin: '0 4px', display: 'inline-block' },\n            ]}\n          >\n            {blocksAffected}\n          </div>\n          .\n        </p>\n      </Tooltip>\n    </MenuItem>\n  );\n};\n\nconst deleteWithDepsMenuItemStyles = css(p12Medium, {\n  borderRadius: 4,\n  backgroundColor: cssVar('notebookStateDangerLight'),\n  color: cssVar('notebookStateDangerHeavy'),\n  border: `1px solid ${cssVar('notebookStateDangerHeavy')}`,\n  cursor: 'pointer',\n  width: 17,\n  height: 17,\n  textAlign: 'center',\n  ':hover': {\n    animation: `${antiwiggle} 0.5s ease-in-out,\n${animationTwoColours(\n  'background-color',\n  cssVar('notebookStateDangerLight'),\n  cssVar('notebookStateWarningLight')\n)} 0.5s ease-in-out`,\n  },\n\n  ':hover:after': {\n    backgroundColor: 'blue',\n    animation: `${wiggle} 0.5s ease-in-out`,\n  },\n});\n\nconst deleteWithDepsWrapperStyles = css({\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n});\n","import { BlocksInUseInformation } from '@decipad/computer';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { once } from 'ramda';\nimport { FC, HTMLProps, ReactNode, useCallback, useState } from 'react';\nimport { MenuItem, Tooltip } from '../../atoms';\nimport {\n  Delete,\n  DragHandle,\n  Duplicate,\n  Hide,\n  Link,\n  Plus,\n  Show,\n} from '../../icons';\nimport { DeleteWithDepsMenuItem, MenuList } from '../../molecules';\nimport { cssVar, p12Medium, p12Regular, setCssVar } from '../../primitives';\nimport { editorLayout } from '../../styles';\nimport { hideOnPrint } from '../../styles/editor-layout';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\n\nconst gridStyles = once(() =>\n  css({\n    display: 'grid',\n    gridTemplate: `\n      \".                          plus handle                             \" ${editorLayout.gutterHandleHeight()}\n      \"menu                       .    .                                  \" auto\n      /minmax(max-content, 144px) ${editorLayout.gutterHandleWidth()}\n    `,\n    justifyContent: 'end',\n  })\n);\n\nconst handleButtonStyle = css({\n  borderRadius: '6px',\n\n  ':hover': {\n    background: cssVar('highlightColor'),\n  },\n});\n\nconst eyeLabelStyles = css(handleButtonStyle, {\n  height: '20px',\n  width: '20px',\n  padding: '2px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n\n  '> svg': {\n    height: '100%',\n  },\n});\n\nconst handleStyle = css(handleButtonStyle, {\n  gridArea: 'handle',\n  cursor: 'grab',\n  height: '20px',\n  width: '20px',\n  marginLeft: '2px',\n});\n\nconst plusStyle = css(handleButtonStyle, {\n  gridArea: 'plus',\n  cursor: 'pointer',\n\n  height: '20px',\n  width: '20px',\n});\n\ninterface BlockDragHandleProps {\n  readonly children?: ReactNode;\n  readonly menuOpen?: boolean;\n  readonly dependenciesForBlock?: BlocksInUseInformation[];\n  readonly onMouseDown?: HTMLProps<HTMLDivElement>['onMouseDown'];\n  readonly onChangeMenuOpen?: (newMenuOpen: boolean) => void;\n  readonly isHidden?: boolean;\n  readonly showEyeLabel?: boolean;\n  readonly showAddBlock?: boolean;\n  readonly onPlus?: () => void;\n  readonly onDelete?: (() => void) | 'none';\n  readonly onDuplicate?: () => void;\n  readonly onShowHide?: (action: 'show' | 'hide') => void;\n  readonly onCopyHref?: () => void;\n}\n\nexport const BlockDragHandle = ({\n  children,\n  menuOpen = false,\n  isHidden = false,\n  onShowHide = noop,\n  showEyeLabel = false,\n  onMouseDown,\n  showAddBlock = true,\n  onChangeMenuOpen = noop,\n  onPlus = noop,\n  onDelete = noop,\n  onDuplicate = noop,\n  onCopyHref,\n  dependenciesForBlock,\n}: BlockDragHandleProps): ReturnType<FC> => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const showAction = useCallback(() => onShowHide('show'), [onShowHide]);\n  const hideAction = useCallback(() => onShowHide('hide'), [onShowHide]);\n  const setHovered = useCallback(() => setIsHovered(true), [setIsHovered]);\n  const setNotHovered = useCallback(() => setIsHovered(false), [setIsHovered]);\n\n  const onClick = useCallback(() => {\n    onDelete !== 'none' && onChangeMenuOpen(!menuOpen);\n  }, [menuOpen, onChangeMenuOpen, onDelete]);\n\n  const isThisBlockUsedInCalculations =\n    Array.isArray(dependenciesForBlock) && dependenciesForBlock.length !== 0;\n\n  const showHidden = showEyeLabel && !isHovered;\n  const menuButton = (\n    <div\n      data-testid=\"drag-handle\"\n      onMouseEnter={setHovered}\n      onMouseLeave={setNotHovered}\n      onClick={onClick}\n      css={[handleStyle, !showHidden && css({ padding: '5px' })]}\n    >\n      {showHidden ? <EyeLabel /> : <DragHandle />}\n    </div>\n  );\n\n  const showHideButton = isHidden ? (\n    <MenuItem icon={<Show />} onSelect={showAction}>\n      Show to reader\n    </MenuItem>\n  ) : (\n    <MenuItem icon={<Hide />} onSelect={hideAction}>\n      Hide from reader\n    </MenuItem>\n  );\n\n  const plusButton = (\n    <button onClick={useEventNoEffect(onPlus)} css={plusStyle}>\n      <Plus />\n    </button>\n  );\n\n  return (\n    <div css={[gridStyles(), hideOnPrint]} onMouseDown={onMouseDown}>\n      {showAddBlock && (\n        <Tooltip trigger={plusButton} side=\"bottom\" hoverOnly>\n          <span css={css({ whiteSpace: 'nowrap', textAlign: 'center' })}>\n            <strong>Click</strong> to add block below\n          </span>\n        </Tooltip>\n      )}\n\n      {menuOpen && (\n        <MenuList\n          root\n          open={menuOpen}\n          onChangeOpen={onChangeMenuOpen}\n          trigger={menuButton}\n          dropdown\n          side=\"left\"\n        >\n          {showHideButton}\n          <MenuItem icon={<Duplicate />} onSelect={onDuplicate}>\n            Duplicate\n          </MenuItem>\n          {onCopyHref && (\n            <MenuItem icon={<Link />} onSelect={onCopyHref}>\n              Copy reference\n            </MenuItem>\n          )}\n          {children}\n          <MenuItem disabled>\n            <hr css={{ color: cssVar('highlightColor') }} />\n          </MenuItem>\n          {/* onDelete can be disabled by the parent component */}\n          {isThisBlockUsedInCalculations ? (\n            <DeleteWithDepsMenuItem\n              blockInfo={dependenciesForBlock[0]}\n              onSelect={typeof onDelete === 'function' ? onDelete : noop}\n            />\n          ) : typeof onDelete === 'function' ? ( // dependency graph\n            <MenuItem icon={<Delete />} onSelect={onDelete}>\n              Delete\n            </MenuItem>\n          ) : null}\n        </MenuList>\n      )}\n\n      <Tooltip trigger={menuButton} side=\"bottom\" hoverOnly>\n        <span\n          css={css([\n            p12Regular,\n            setCssVar('currentTextColor', cssVar('backgroundColor')),\n            { whiteSpace: 'nowrap', textAlign: 'center' },\n          ])}\n        >\n          <strong\n            css={css([\n              p12Medium,\n              setCssVar('currentTextColor', cssVar('backgroundColor')),\n            ])}\n          >\n            Drag\n          </strong>{' '}\n          to move\n          <br />\n          <strong\n            css={css([\n              p12Medium,\n              setCssVar('currentTextColor', cssVar('backgroundColor')),\n            ])}\n          >\n            Click\n          </strong>{' '}\n          for options\n        </span>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst EyeLabel = () => (\n  <div css={eyeLabelStyles} contentEditable={false}>\n    <Hide />\n  </div>\n);\n","import { BlocksInUseInformation } from '@decipad/computer';\nimport { BlockIsActiveProvider } from '@decipad/react-contexts';\nimport { css, SerializedStyles } from '@emotion/react';\nimport {\n  ComponentProps,\n  FC,\n  Fragment,\n  HTMLProps,\n  ReactNode,\n  Ref,\n  useState,\n} from 'react';\nimport { ConnectDragSource } from 'react-dnd';\nimport { BlockDragHandle } from '..';\nimport { DropLine, EditorBlock, MenuItem, TriggerMenuItem } from '../../atoms';\nimport { NewElementLine } from '../../atoms/NewElementLine/NewElementLine';\nimport { CircularArrow } from '../../icons';\nimport { MenuList } from '../../molecules';\nimport {\n  mouseMovingOverTransitionDelay,\n  Opacity,\n  shortAnimationDuration,\n} from '../../primitives';\nimport { blockAlignment, editorLayout } from '../../styles';\nimport { slimBlockWidth } from '../../styles/editor-layout';\n\nconst handleWidth = 16;\nconst totalSpaceWithGap = handleWidth + editorLayout.gutterGap;\n\nexport const draggingOpacity: Opacity = 0.4;\n\nconst horizontalDropLineStyle = css({\n  position: 'absolute',\n  width: '100%',\n  zIndex: 2,\n});\n\n// This positioning puts the dropLine in line with the NewElementLine.\nconst topDropLineStyle = css({ top: '4px' });\nconst bottomDropLineStyle = css({ bottom: '-6px' });\n\nconst verticalDropLineStyle = css({\n  position: 'absolute',\n  width: 'auto',\n  height: '100%',\n  top: 0,\n  zIndex: 2,\n});\nconst leftDropLineStyle = css({ left: `-6px` });\nconst rightDropLineStyle = css({ right: '-6px' });\n\nconst hiddenEditorBlockStyle = css({\n  opacity: '.5',\n  transition: 'opacity .2s ease',\n});\nconst hiddenFocusedStyle = css({\n  opacity: '1',\n  filter: 'unset',\n});\n\ninterface DraggableBlockProps extends ComponentProps<typeof EditorBlock> {\n  readonly isSelected?: boolean;\n  readonly isHidden?: boolean;\n  readonly isBeingDragged?: boolean;\n  readonly dropLine?: 'top' | 'bottom' | 'left' | 'right';\n\n  readonly dragSource?: ConnectDragSource;\n  readonly blockRef?: Ref<HTMLDivElement>;\n  readonly previewRef?: Ref<HTMLDivElement>;\n  readonly dependenciesForBlock?: BlocksInUseInformation[];\n\n  readonly draggableCss?: SerializedStyles;\n\n  readonly onMouseDown?: HTMLProps<HTMLDivElement>['onMouseDown'];\n  readonly onShowHide?: (action: 'show' | 'hide') => void;\n  readonly onDelete?: (() => void) | 'none';\n  readonly onDuplicate?: () => void;\n  readonly onAdd?: () => void;\n  readonly onPlus?: () => void;\n  readonly onCopyHref?: () => void;\n  readonly showLine?: boolean;\n\n  readonly onTurnInto?: (value: string) => void;\n  readonly turnInto?: { title: string; value: string }[];\n\n  readonly children: ReactNode;\n\n  readonly disableDrag?: boolean;\n\n  /** Should the icons on the left be centered?\n   * Tables for example shouldnt be\n   */\n  readonly isCentered?: boolean;\n  readonly hasPreviousSibling?: boolean;\n}\nexport const DraggableBlock = ({\n  isSelected = false,\n  isHidden = false,\n  isBeingDragged = false,\n  dropLine,\n\n  dragSource,\n  blockRef,\n  previewRef,\n\n  draggableCss,\n\n  onMouseDown,\n  onDelete,\n  onDuplicate,\n  onAdd,\n  onPlus,\n  showLine = true,\n  onShowHide,\n  onCopyHref,\n\n  dependenciesForBlock,\n\n  onTurnInto,\n  turnInto,\n\n  blockKind,\n  children,\n\n  disableDrag = false,\n  isCentered = false,\n  hasPreviousSibling,\n\n  ...props\n}: DraggableBlockProps): ReturnType<FC> => {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const BlockActiveProvider = menuOpen ? BlockIsActiveProvider : Fragment;\n\n  const { typography } = blockAlignment[blockKind];\n\n  const showEyeLabel = isHidden && !menuOpen;\n\n  const dropLineEl = (\n    <div\n      contentEditable={false}\n      css={[\n        dropLine === 'top' && [horizontalDropLineStyle, topDropLineStyle],\n        dropLine === 'bottom' && [horizontalDropLineStyle, bottomDropLineStyle],\n        dropLine === 'left' && [verticalDropLineStyle, leftDropLineStyle],\n        dropLine === 'right' && [verticalDropLineStyle, rightDropLineStyle],\n      ]}\n    >\n      <DropLine\n        variant={\n          dropLine === 'left' || dropLine === 'right' ? 'inline' : 'block'\n        }\n      />\n    </div>\n  );\n\n  return (\n    <EditorBlock blockKind={blockKind} ref={blockRef} {...props}>\n      <div\n        css={{\n          display: 'grid',\n          gridTemplateColumns: `${handleWidth}px auto`,\n          gridColumnGap: `${editorLayout.gutterGap}px`,\n\n          marginLeft: `-${totalSpaceWithGap}px`,\n          transition: `margin-left ${shortAnimationDuration} ease-out`,\n        }}\n      >\n        <div\n          contentEditable={false}\n          ref={dragSource}\n          css={[\n            showEyeLabel\n              ? {}\n              : {\n                  opacity: menuOpen ? 'unset' : 0,\n                  '*:hover > &': {\n                    opacity: 'unset',\n                  },\n                },\n            {\n              transition: `opacity ${shortAnimationDuration} ease-in-out ${mouseMovingOverTransitionDelay}`,\n\n              paddingTop: typography\n                ? // Align with first line of text in addition to paddingTop\n                  `calc((\n                  ${typography.lineHeight} * ${typography.fontSize}\n                  -\n                  ${editorLayout.gutterHandleHeight()}\n                ) / 2\n              )`\n                : 0,\n\n              // Draw over following blocks instead of increasing the current block's height\n              height: 0,\n            },\n            isCentered && {\n              display: 'flex',\n              alignItems: 'center',\n              height: '100%',\n              marginLeft: '-32px',\n            },\n            draggableCss,\n          ]}\n        >\n          {!disableDrag && (\n            <BlockDragHandle\n              menuOpen={menuOpen}\n              isHidden={isHidden}\n              dependenciesForBlock={dependenciesForBlock}\n              onMouseDown={onMouseDown}\n              onChangeMenuOpen={setMenuOpen}\n              onPlus={onPlus}\n              onDelete={onDelete}\n              onDuplicate={onDuplicate}\n              onShowHide={onShowHide}\n              showEyeLabel={showEyeLabel}\n              showAddBlock={!isHidden}\n              onCopyHref={onCopyHref}\n            >\n              {turnInto != null && turnInto.length > 0 && (\n                <MenuList\n                  itemTrigger={\n                    <TriggerMenuItem icon={<CircularArrow />}>\n                      Turn into\n                    </TriggerMenuItem>\n                  }\n                >\n                  {turnInto.map((option) => (\n                    <MenuItem\n                      key={option.value}\n                      onSelect={() => onTurnInto?.(option.value)}\n                    >\n                      {option.title}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              )}\n            </BlockDragHandle>\n          )}\n        </div>\n        <div\n          css={[\n            isBeingDragged ? { opacity: draggingOpacity } : {},\n            isHidden ? hiddenEditorBlockStyle : {},\n            isSelected || menuOpen ? hiddenFocusedStyle : {},\n            // Duplication from `EditorBlock` but forces any rogue elements not to overflow.\n            { maxWidth: slimBlockWidth, width: '100%' },\n          ]}\n          ref={previewRef}\n        >\n          {(dropLine === 'top' || dropLine === 'left') && dropLineEl}\n          <NewElementLine\n            onAdd={onAdd}\n            show={showLine}\n            hasPreviousSibling={hasPreviousSibling}\n          />\n          <BlockActiveProvider>{children}</BlockActiveProvider>\n          {(dropLine === 'bottom' || dropLine === 'right') && dropLineEl}\n        </div>\n      </div>\n    </EditorBlock>\n  );\n};\n","import { FC } from 'react';\nimport { css } from '@emotion/react';\nimport {\n  cssVar,\n  grey500,\n  p12Medium,\n  p12Regular,\n  p13Medium,\n} from '../../primitives';\nimport { Warning } from '../../icons';\nimport { Tooltip } from '../../atoms';\n\nconst wrapperStyles = css({\n  paddingRight: '6px',\n  display: 'flex',\n  alignItems: 'center',\n  backgroundColor: cssVar('highlightColor'),\n  borderRadius: '6px',\n});\n\nconst inputOptionStyles = css(p13Medium, {\n  marginTop: '2px',\n  padding: '6px 6px 6px 8px',\n  width: '100%',\n  height: '32px',\n  backgroundColor: cssVar('highlightColor'),\n  borderRadius: '6px',\n  display: 'flex',\n  alignItems: 'center',\n});\n\nexport interface DropdownAddOptionProps {\n  readonly value: string;\n  readonly setValue: (a: string) => void;\n  readonly error?: boolean;\n}\n\nexport const DropdownOption = ({\n  value,\n  setValue,\n  error = false,\n}: DropdownAddOptionProps): ReturnType<FC> => {\n  return (\n    <div css={wrapperStyles}>\n      <input\n        autoFocus\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        placeholder=\"Type here\"\n        css={inputOptionStyles}\n        onClick={(e) => e.stopPropagation()}\n      />\n      {error && (\n        <Tooltip\n          trigger={\n            <div css={{ width: 16, height: 16 }}>\n              <Warning />\n            </div>\n          }\n        >\n          <p css={p12Medium}>\n            <strong>Option already exists</strong>\n          </p>\n          <p css={[p12Regular, { color: grey500.rgb }]}>\n            Specify another option\n          </p>\n        </Tooltip>\n      )}\n    </div>\n  );\n};\n","import { FC, ReactNode, useCallback, useState } from 'react';\nimport { css } from '@emotion/react';\nimport { noop } from '@decipad/utils';\nimport { useWindowListener } from '@decipad/react-utils';\nimport { Result } from '@decipad/computer';\nimport { cssVar, p14Medium } from '../../primitives';\nimport { Edit, Trash } from '../../icons';\nimport { DropdownOption } from '../../molecules';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\n\nconst wrapper = css({\n  width: '100%',\n  overflow: 'hidden',\n  height: '32px',\n  display: 'flex',\n  paddingLeft: '4px',\n  paddingRight: '4px',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  ':not(:hover) aside:last-child': {\n    display: 'none',\n  },\n  '&:hover': {\n    backgroundColor: cssVar('highlightColor'),\n    borderRadius: '6px',\n    'aside:last-child': {\n      display: 'flex',\n    },\n  },\n});\n\nconst textStyles = css(p14Medium, {\n  textAlign: 'start',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap',\n  flexGrow: 0,\n});\n\nconst iconWrapper = css({\n  alignItems: 'center',\n  gap: '4px',\n});\n\nconst iconStyles = css({\n  cursor: 'pointer',\n  width: 24,\n  height: 24,\n});\n\nexport type SelectItemTypes = 'column';\nexport interface SelectItems {\n  item: string;\n  blockId?: string;\n  type?: SelectItemTypes;\n  focused?: boolean;\n  itemValue?: Result.Result;\n  icon?: ReactNode;\n}\n\nexport type EditItemsOptions = {\n  readonly onRemoveOption?: (a: string) => void;\n  readonly onEditOption?: (a: string, b: string) => boolean;\n  readonly onExecute: (a: string, t?: SelectItemTypes) => void;\n};\n\ntype SelectItemProps = EditItemsOptions & {\n  readonly item: SelectItems;\n  readonly isEditAllowed?: boolean;\n};\n\n/*\n * SelectItem is a component used in SelectMenu to display a \"Select\" menu of options\n * This is used through parts of the application that need a dropdown in order to be\n * consist in design everywhere\n */\nexport const SelectItem: FC<SelectItemProps> = ({\n  item,\n  onExecute,\n  isEditAllowed = false,\n  onRemoveOption = noop,\n  onEditOption = noop,\n}) => {\n  const [newValue, setNewValue] = useState(item.item);\n  const [editing, setEditing] = useState(false);\n  const [editingError, setEditingError] = useState(false);\n\n  const keydown = useCallback(\n    (event: KeyboardEvent) => {\n      if ((event.key === 'Enter' || event.key === 'Escape') && editing) {\n        event.preventDefault();\n        event.stopPropagation();\n        const changed = onEditOption(item.item, newValue);\n        if (changed) {\n          setEditing(false);\n        } else {\n          setEditingError(true);\n        }\n      }\n    },\n    [onEditOption, editing, item, newValue]\n  );\n  useWindowListener('keydown', keydown, true);\n\n  const onExecuteItem = useCallback(() => {\n    if (item.type === 'column') {\n      onExecute(item.blockId || item.item, 'column');\n    } else {\n      onExecute(item.item);\n    }\n  }, [onExecute, item.item, item.type, item.blockId]);\n\n  const onEdit = useEventNoEffect(\n    useCallback(() => {\n      setEditing(true);\n    }, [setEditing])\n  );\n\n  const onRemove = useEventNoEffect(\n    useCallback(() => {\n      onRemoveOption(item.item);\n    }, [item.item, onRemoveOption])\n  );\n\n  if (editing) {\n    return (\n      <DropdownOption\n        value={newValue}\n        setValue={setNewValue}\n        error={editingError}\n      />\n    );\n  }\n\n  return (\n    <div\n      css={[\n        wrapper,\n        item.focused && {\n          backgroundColor: cssVar('highlightColor'),\n          borderRadius: '6px',\n        },\n      ]}\n      onClick={onExecuteItem}\n      aria-roledescription=\"dropdownOption\"\n    >\n      <div css={{ display: 'flex', gap: '4px', maxWidth: '100%' }}>\n        {item.icon && <div css={{ width: 16, height: 16 }}>{item.icon}</div>}\n        <span css={textStyles}>{item.item}</span>\n      </div>\n      {isEditAllowed && (\n        <aside css={[iconWrapper]}>\n          <div\n            css={iconStyles}\n            onClick={onEdit}\n            aria-roledescription=\"dropdown-edit\"\n          >\n            <Edit />\n          </div>\n          <div\n            css={[iconStyles, { width: 14, height: 14 }]}\n            onClick={onRemove}\n            aria-roledescription=\"dropdown-delete\"\n          >\n            <Trash />\n          </div>\n        </aside>\n      )}\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { EditItemsOptions, SelectItem, SelectItems } from '../../atoms';\nimport { cssVar, p14Medium } from '../../primitives';\n\ntype DropdownMenuGroupProps = EditItemsOptions & {\n  readonly items: Array<SelectItems>;\n  readonly title?: string;\n  readonly isEditingAllowed?: boolean;\n};\n\nexport const DropdownMenuGroup: FC<DropdownMenuGroupProps> = ({\n  items,\n  title,\n  isEditingAllowed = false,\n  ...itemProps\n}) => {\n  return (\n    <div css={{ padding: '4px 4px' }}>\n      {title && (\n        <p\n          css={[\n            p14Medium,\n            {\n              color: cssVar('weakTextColor'),\n            },\n          ]}\n        >\n          {title}\n        </p>\n      )}\n      {items.map((i) => (\n        <SelectItem\n          key={i.item}\n          item={i}\n          isEditAllowed={isEditingAllowed}\n          {...itemProps}\n        />\n      ))}\n    </div>\n  );\n};\n","import { useWindowListener } from '@decipad/react-utils';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport * as Popover from '@radix-ui/react-popover';\nimport { nanoid } from 'nanoid';\nimport { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { EditItemsOptions, SelectItems } from '../../atoms';\nimport { Plus } from '../../icons';\nimport { DropdownOption } from '../../molecules';\nimport { cssVar, mediumShadow, p13Medium, setCssVar } from '../../primitives';\nimport { DropdownMenuGroup } from '../DropdownMenuGroup/DropdownMenuGroup';\n\nconst styles = css({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start',\n  overflowX: 'hidden',\n  marginTop: '8px',\n  backgroundColor: cssVar('backgroundColor'),\n  border: `1px solid ${cssVar('borderColor')}`,\n  borderRadius: '12px',\n  boxShadow: `0px 3px 24px -4px ${mediumShadow.rgba}`,\n  width: '100%',\n  maxWidth: '244px',\n  minWidth: '244px',\n  boxSizing: 'border-box',\n});\n\nconst mainStyles = css({\n  padding: '6px',\n  marginTop: '2px',\n  marginBottom: '2px',\n  width: '100%',\n  overflowY: 'auto',\n  maxHeight: '300px',\n});\n\nconst footerStyles = css(\n  p13Medium,\n  {\n    padding: '6px 0px 8px 16px',\n    width: '100%',\n    bottom: '0px',\n    height: '32px',\n    lineHeight: '24px',\n    background: cssVar('highlightColor'),\n    boxShadow: `0px -1px 0px ${cssVar('borderColor')}`,\n    display: 'flex',\n    alignItems: 'center',\n    gap: '4px',\n  },\n  setCssVar('currentTextColor', cssVar('weakTextColor'))\n);\n\nconst hotKeyStyle = css({\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n\n  boxSizing: 'border-box',\n  borderRadius: '6px',\n  padding: '0 6px',\n  border: `1px ${cssVar('strongerHighlightColor')} solid`,\n  backgroundColor: cssVar('backgroundColor'),\n  color: cssVar('weakTextColor'),\n});\n\nexport type DropdownMenuProps = EditItemsOptions & {\n  readonly open: boolean;\n  readonly setOpen: (a: boolean) => void;\n  readonly isReadOnly: boolean;\n  readonly items: Array<SelectItems>;\n  readonly otherItems?: Array<{ title?: string; items: Array<SelectItems> }>;\n  readonly addOption?: (a: string) => void;\n  readonly children: JSX.Element;\n};\n\nexport const DropdownMenu: FC<DropdownMenuProps> = ({\n  open,\n  setOpen,\n  isReadOnly,\n  items,\n  otherItems = [],\n  addOption = noop,\n  onExecute,\n  onEditOption,\n  onRemoveOption,\n  children,\n}) => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  const [inputValue, setInputValue] = useState('');\n  const [addingNew, setAddingNew] = useState(false);\n  const [error, setError] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1);\n\n  const showInput = items.length === 0 || addingNew;\n\n  // Handles keyboard selection of items (up and down), as well as\n  // Enter press when user is adding new option\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!open) return;\n      switch (true) {\n        case event.key === 'ArrowDown' && !event.shiftKey:\n          setFocusedIndex(\n            focusedIndex === items.length - 1 ? 0 : focusedIndex + 1\n          );\n          break;\n        case event.key === 'ArrowUp' && !event.shiftKey:\n          setFocusedIndex(\n            focusedIndex === 0 ? items.length - 1 : focusedIndex - 1\n          );\n          break;\n        case event.key === 'Enter' && inputValue.length > 0 && showInput:\n          if (items.some((i) => i.item === inputValue)) {\n            setError(true);\n          } else {\n            addOption(inputValue);\n            setInputValue('');\n            setAddingNew(false);\n            event.preventDefault();\n            event.stopPropagation();\n          }\n          break;\n        case event.key === 'Enter' && !showInput: {\n          const item = items[focusedIndex];\n          if (item) {\n            onExecute(item.item);\n          }\n          break;\n        }\n        case event.key === 'Escape':\n          setOpen(false);\n      }\n    },\n    [\n      open,\n      addOption,\n      inputValue,\n      items,\n      focusedIndex,\n      showInput,\n      setOpen,\n      onExecute,\n    ]\n  );\n\n  useWindowListener('keydown', onKeyDown);\n\n  useEffect(() => {\n    if (showInput && open) {\n      ref.current?.focus();\n    }\n  }, [showInput, open]);\n\n  useEffect(() => {\n    if (error && !items.some((i) => i.item === inputValue)) {\n      setError(false);\n    }\n  }, [error, inputValue, items]);\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen}>\n      <Popover.Trigger css={{ width: '100%' }}>{children}</Popover.Trigger>\n      <Popover.Content>\n        <div css={styles}>\n          <div css={mainStyles}>\n            {otherItems.length > 0 &&\n              otherItems.map((group) => (\n                <DropdownMenuGroup\n                  key={nanoid()}\n                  items={group.items}\n                  onExecute={onExecute}\n                  title={group.title}\n                  onEditOption={onEditOption}\n                  onRemoveOption={onRemoveOption}\n                />\n              ))}\n            {items.length > 0 && (\n              <DropdownMenuGroup\n                key={nanoid()}\n                items={items}\n                onExecute={onExecute}\n                onEditOption={onEditOption}\n                onRemoveOption={onRemoveOption}\n                isEditingAllowed={!isReadOnly}\n              />\n            )}\n            {!isReadOnly && showInput && (\n              <DropdownOption\n                value={inputValue}\n                setValue={setInputValue}\n                error={error}\n              />\n            )}\n          </div>\n\n          {!isReadOnly && (\n            <div\n              css={footerStyles}\n              onClick={() => {\n                if (addingNew) {\n                  addOption(inputValue);\n                  setInputValue('');\n                  setAddingNew(false);\n                } else {\n                  setAddingNew(true);\n                }\n              }}\n            >\n              {addingNew ? (\n                <>\n                  Press <span css={hotKeyStyle}>Enter</span> to save\n                </>\n              ) : (\n                <>\n                  <div css={{ width: 16, height: 16 }}>\n                    <Plus />\n                  </div>\n                  Add new\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { Create } from '../../icons';\nimport { cssVar, p13Medium } from '../../primitives';\nimport { table } from '../../styles';\n\nconst buttonStyles = css(p13Medium, {\n  cursor: 'pointer',\n  display: 'flex',\n  alignItems: 'center',\n  gap: '6px',\n  width: 'auto',\n  padding: `6px ${table.tdHorizontalPadding}`,\n  marginTop: `${table.smartRowHorizontalPadding}`,\n  borderRadius: '6px',\n\n  backgroundColor: cssVar('highlightColor'),\n});\n\nconst hiddenStyles = css({\n  visibility: 'hidden',\n});\n\nconst iconWrapperStyles = css({\n  height: '16px',\n  width: '16px',\n});\n\ninterface AddTableRowButtonProps {\n  readonly onAddRow?: () => void;\n  readonly mouseOver?: boolean;\n}\n\nexport const AddTableRowButton = ({\n  onAddRow = noop,\n  mouseOver = false,\n}: AddTableRowButtonProps): ReturnType<FC> => {\n  return (\n    <>\n      <th></th>\n      <th key=\"firstcol\" css={css({ height: '36px' })}>\n        <button\n          css={[buttonStyles, !mouseOver && hiddenStyles]}\n          onClick={onAddRow}\n        >\n          <span css={iconWrapperStyles}>\n            <Create />\n          </span>\n          <span>Add row</span>\n        </button>\n      </th>\n    </>\n  );\n};\n","import {\n  useDndPreviewSelectors,\n  useEditorStylesContext,\n} from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { Children, FC, ReactNode, useCallback, useMemo, useState } from 'react';\nimport { ConnectDropTarget } from 'react-dnd';\nimport { Table } from '..';\nimport { Add } from '../../icons';\nimport { AddTableRowButton } from '../../molecules';\nimport { cssVar, smallScreenQuery } from '../../primitives';\nimport { editorLayout } from '../../styles';\nimport { tableControlWidth } from '../../styles/table';\nimport { Column } from '../../types';\nimport {\n  AvailableSwatchColor,\n  TableStyleContext,\n  UserIconKey,\n} from '../../utils';\nimport { useEventNoEffect } from '../../utils/useEventNoEffect';\nimport { TableWidth } from '../Table/Table';\n\nconst halfSlimBlockWidth = `${Math.round(editorLayout.slimBlockWidth / 2)}px`;\nconst totalWidth = '100vw';\nconst halfTotalWidth = '50vw';\nconst wideToSlimBlockWidthDifference = `${\n  editorLayout.wideBlockWidth - editorLayout.slimBlockWidth\n}px`;\nconst gutterWidth = '60px';\nconst leftMargin = `calc(${halfTotalWidth} - ${halfSlimBlockWidth} - ${wideToSlimBlockWidthDifference})`;\nconst restWidthBlock = `calc(${totalWidth} - ${leftMargin} - ${gutterWidth} - ${gutterWidth})`;\n\nconst scrollRightOffset = `(((100vw - 610px) / 2) + ${tableControlWidth})`;\n\nconst wrapperStyles = css({\n  margin: '0',\n});\n\nconst tableCaptionWrapperStyles = css({\n  width: '100%',\n  minWidth: editorLayout.slimBlockWidth,\n  maxWidth: restWidthBlock,\n  display: 'inline-block',\n  [smallScreenQuery]: {\n    maxWidth: `calc(100vw - ${gutterWidth})`,\n    minWidth: '0',\n  },\n});\n\nconst tableWrapperTransformStyles = css({\n  position: 'relative',\n  transform: `translateX(calc((((100vw - 580px) / 2) + ${tableControlWidth}) * -1 ))`,\n  left: tableControlWidth,\n});\n\nconst tableWrapperDraggingStyles = css({\n  left: `-${tableControlWidth}`,\n});\n\nconst tableWrapperDefaultStyles = css({\n  width: '100vw',\n  minWidth: editorLayout.slimBlockWidth,\n  overflowX: 'auto',\n  overflowY: 'hidden',\n  scrollbarWidth: 'none',\n  msOverflowStyle: 'none',\n  position: 'relative',\n  whiteSpace: 'nowrap',\n  display: 'flex',\n  '&:hover': {\n    scrollbarWidth: 'inherit',\n    msOverflowStyle: 'inherit',\n    '&::-webkit-scrollbar-thumb': {\n      backgroundColor: cssVar('highlightColor'),\n    },\n  },\n  '&::-webkit-scrollbar': {\n    width: '100px',\n    height: '8px',\n  },\n\n  '&::-webkit-scrollbar-thumb': {\n    width: '3px',\n    height: '3px',\n    backgroundColor: 'transparent',\n    borderRadius: '8px',\n  },\n\n  '&::-webkit-scrollbar-track': {\n    backgroundColor: 'transparent',\n    height: '3px',\n  },\n\n  '&::-webkit-scrollbar-button': {\n    width: `calc((100vw - 580px)/4)`,\n  },\n\n  '&::-ms-scrollbar-thumb': {\n    width: '3px',\n    height: '3px',\n    backgroundColor: cssVar('highlightColor'),\n    borderRadius: '8px',\n  },\n\n  '&::-ms-scrollbar-track': {\n    backgroundColor: 'transparent',\n    height: '3px',\n  },\n\n  '&::-ms-scrollbar-button': {\n    width: `calc((100vw - 580px)/4)`,\n  },\n\n  [smallScreenQuery]: {\n    maxWidth: `calc(100vw - ${gutterWidth})`,\n    transform: `translateX(-40px)`,\n    minWidth: '0',\n  },\n});\n\nexport const tableWrapperStyles = css([\n  tableWrapperTransformStyles,\n  tableWrapperDefaultStyles,\n]);\n\nexport const tableScroll = css({\n  paddingRight: `calc(${scrollRightOffset})`,\n  [smallScreenQuery]: {\n    paddingRight: '0px',\n  },\n});\n\nexport const tableOverflowStyles = css({\n  display: 'inline-block',\n  height: '20px',\n  minWidth: `calc(((100vw - 580px) / 2) - ${tableControlWidth})`,\n});\n\nconst tableAddColumnButtonWrapperStyles = css({\n  width: '40px',\n  minWidth: '40px',\n  paddingLeft: '8px',\n  position: 'relative',\n  marginLeft: `calc(${scrollRightOffset} *-1)`,\n  [smallScreenQuery]: {\n    marginLeft: '0px',\n  },\n});\n\nconst tableAddColumnButtonStyles = css({\n  width: '40px',\n  minWidth: '40px',\n  backgroundColor: cssVar('highlightColor'),\n  borderRadius: '8px',\n  padding: '8px',\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  visibility: 'hidden',\n});\n\nconst mouseOverAddColumnButtonStyles = css({\n  visibility: 'unset',\n});\n\ninterface EditorTableProps {\n  readonly id?: string;\n  readonly icon: UserIconKey;\n  readonly color: AvailableSwatchColor;\n  readonly isCollapsed?: boolean;\n  readonly hideFormulas?: boolean;\n  readonly onChangeIcon?: (newIcon: UserIconKey) => void;\n  readonly onChangeColor?: (newColor: AvailableSwatchColor) => void;\n\n  readonly columns: Column[];\n  readonly children?: ReactNode;\n  readonly dropRef?: ConnectDropTarget;\n  readonly onAddRow?: () => void;\n  readonly onAddColumn?: () => void;\n  readonly previewMode?: boolean;\n  readonly tableWidth?: TableWidth;\n  readonly isSelectingCell?: boolean;\n  readonly showAllRows?: boolean;\n  readonly hiddenRowCount?: number;\n  readonly onSetCollapsed?: (collapsed: boolean) => void;\n  readonly onSetHideFormulas?: (isHidden: boolean) => void;\n\n  readonly smartRow?: ReactNode;\n}\n\nexport const EditorTable: FC<EditorTableProps> = ({\n  id,\n  onAddRow,\n  onAddColumn,\n  columns,\n  children,\n  dropRef,\n  icon,\n  color,\n  isCollapsed,\n  hideFormulas,\n  tableWidth,\n  isSelectingCell,\n  onChangeIcon = noop,\n  onChangeColor = noop,\n  onSetCollapsed = noop,\n  onSetHideFormulas = noop,\n  hiddenRowCount = 0,\n  smartRow,\n  previewMode,\n}: EditorTableProps): ReturnType<FC> => {\n  const [caption, thead, ...tbody] = Children.toArray(children);\n\n  useDndPreviewSelectors().previewText();\n\n  const { color: defaultColor } = useEditorStylesContext();\n\n  const tableStyleContextValue = useMemo(\n    () => ({\n      icon,\n      color: color ?? defaultColor,\n      isCollapsed,\n      hideFormulas,\n      setIcon: onChangeIcon,\n      setColor: onChangeColor,\n      setCollapsed: onSetCollapsed,\n      setHideFormulas: onSetHideFormulas,\n    }),\n    [\n      color,\n      defaultColor,\n      icon,\n      isCollapsed,\n      hideFormulas,\n      onChangeColor,\n      onChangeIcon,\n      onSetCollapsed,\n      onSetHideFormulas,\n    ]\n  );\n\n  const [mouseOver, setMouseOver] = useState(false);\n  const onMouseEnter = useCallback(() => setMouseOver(true), []);\n  const onMouseLeave = useCallback(() => setMouseOver(false), []);\n\n  const onAddColumnClick = useEventNoEffect(onAddColumn);\n\n  const draggingId = useDndPreviewSelectors().draggingId();\n\n  const isDragging = draggingId === id;\n\n  return (\n    <TableStyleContext.Provider value={tableStyleContextValue}>\n      <div css={wrapperStyles}>\n        <div>\n          {!previewMode && <div css={tableCaptionWrapperStyles}>{caption}</div>}\n\n          {!isCollapsed ? (\n            <div\n              css={[\n                !isDragging\n                  ? tableWrapperTransformStyles\n                  : tableWrapperDraggingStyles,\n                tableWrapperDefaultStyles,\n              ]}\n            >\n              {!isDragging && (\n                <div css={tableOverflowStyles} contentEditable={false} />\n              )}\n              <div css={tableScroll}>\n                <Table\n                  isReadOnly={false}\n                  columnCount={columns.length}\n                  dropRef={dropRef}\n                  tableWidth={tableWidth}\n                  isSelectingCell={isSelectingCell}\n                  hiddenRowCount={hiddenRowCount}\n                  head={thead}\n                  body={tbody}\n                  previewMode={previewMode}\n                  addTable={\n                    <AddTableRowButton\n                      mouseOver={mouseOver}\n                      onAddRow={onAddRow}\n                    />\n                  }\n                  smartRow={smartRow}\n                  onMouseOver={setMouseOver}\n                ></Table>\n              </div>\n              {!previewMode && (\n                <div\n                  css={tableAddColumnButtonWrapperStyles}\n                  onMouseEnter={onMouseEnter}\n                  onMouseLeave={onMouseLeave}\n                >\n                  <button\n                    onClick={onAddColumnClick}\n                    css={[\n                      tableAddColumnButtonStyles,\n                      mouseOver && mouseOverAddColumnButtonStyles,\n                    ]}\n                    title=\"Add Column\"\n                  >\n                    <Add />\n                  </button>\n                </div>\n              )}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </TableStyleContext.Provider>\n  );\n};\n","import autoAnimate, { AutoAnimateOptions } from '@formkit/auto-animate';\nimport { useEffect, useRef } from 'react';\nimport {\n  easing as defaultEasing,\n  shortAnimationDurationMs as defaultDuration,\n} from '../primitives';\n\nconst supportsAnimation = process.browser && 'IntersectionObserver' in global;\n\n/**\n * AutoAnimate hook for adding dead-simple transitions and animations to react.\n * @param options - Auto animate options or a plugin\n * @returns\n */\nexport function useAutoAnimate<T extends HTMLElement>({\n  easing = defaultEasing,\n  duration = defaultDuration,\n}: Partial<AutoAnimateOptions> = {}) {\n  const element = useRef<T>(null);\n  useEffect(() => {\n    if (element.current instanceof HTMLElement && supportsAnimation)\n      autoAnimate(element.current, { easing, duration });\n  }, [element, easing, duration]);\n  return [element];\n}\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport pluralize from 'pluralize';\nimport { FC, ReactNode, useCallback } from 'react';\nimport { ConnectDropTarget } from 'react-dnd';\nimport { TextAndIconButton } from '../../atoms';\nimport { useAutoAnimate } from '../../hooks';\nimport { Eye } from '../../icons';\nimport { cssVar } from '../../primitives';\nimport { table } from '../../styles';\nimport { tableRowCounter } from '../../utils';\n\nexport const regularBorder = `1px solid ${cssVar('borderTable')}`;\nconst liveResultBorder = `1px solid ${cssVar('borderTable')}`;\nconst borderRadius = '8px';\n\nconst tableBaseStyles = css({\n  // NOTE: border radius on the table does not work with `borderCollapse: collapse`,\n  // that's why we need `borderCollapse: separate` on the table and to style <th>\n  // and <td> separately for borders and border radius.\n  borderCollapse: 'inherit',\n  borderSpacing: '0',\n  tableLayout: 'auto',\n  counterReset: tableRowCounter,\n  display: 'inline-table',\n  backgroundColor: cssVar('backgroundColor'),\n  'tr td': {\n    borderBottom: regularBorder,\n  },\n  td: {\n    borderLeft: regularBorder,\n  },\n  'td:last-child': {\n    borderRight: regularBorder,\n  },\n  table: {\n    marginBottom: 0,\n    'tr:last-child td': {\n      borderBottom: 0,\n    },\n    'tr td:first-of-type': {\n      borderLeft: 0,\n    },\n    'tr td:last-child': {\n      borderRight: 0,\n    },\n  },\n});\n\nconst nestedStyles = css({\n  borderBottom: 0,\n  'tr:last-child td': {\n    borderBottom: 0,\n  },\n  'td:first-of-type': {\n    borderLeft: 0,\n  },\n});\n\nconst readOnlyTableStyles = css({\n  width: '100%',\n  marginBottom: '12px',\n});\n\nconst wideTableStyles = css({\n  width: 'initial',\n  maxWidth: 'initial',\n});\n\n// Top border and border-radius, applied to table headers if they exist or to the first table row.\n// Bottom border-radius, applied to the last table row, whether it's inside the tfoot or tbody.\nconst borderRadiusStyles = css({\n  '> thead > tr > th:nth-of-type(2), > tbody:not(thead + tbody) > tr:nth-of-type(2) > td:nth-of-type(2)':\n    {\n      borderTopLeftRadius: borderRadius,\n    },\n  '> thead > tr > th:last-of-type, > tbody:not(thead + tbody) > tr:nth-of-type(2) > td:last-of-type':\n    {\n      borderTopRightRadius: borderRadius,\n    },\n  '> tbody > tr:last-of-type > td:first-of-type': {\n    borderBottomLeftRadius: borderRadius,\n  },\n  '> tbody > tr:last-of-type > td:last-of-type': {\n    borderBottomRightRadius: borderRadius,\n  },\n});\n\nconst allBorderStyles = (outerBorder: string, innerBorder: string) =>\n  css({\n    '': {\n      borderRight: innerBorder,\n      borderBottom: innerBorder,\n    },\n    '> thead > tr > th, > tbody:not(thead + tbody) > tr:nth-of-type(2) > td': {\n      borderTop: innerBorder,\n    },\n    '> thead > tr > th:nth-of-type(2), > tbody > tr > td:nth-of-type(1), > tfoot > tr > td:nth-of-type(1)':\n      {\n        borderLeft: outerBorder,\n      },\n  });\n\nconst hiddenSelectionStyles = css({\n  '*::selection': {\n    background: 'none',\n  },\n});\n\nconst liveResultStyles = css({\n  '> thead > tr > th': {\n    borderTop: liveResultBorder,\n  },\n  '> thead > tr > th:last-of-type, > tbody > tr > td:last-of-type, > tfoot > tr > td:last-of-type':\n    {\n      borderRight: liveResultBorder,\n    },\n  '> tbody > tr:last-of-type > td': {\n    borderBottom: liveResultBorder,\n  },\n});\n\ninterface ShowAllRowsProps {\n  readonly columnCount: number;\n  readonly hiddenRowCount: number;\n  readonly isReadOnly: boolean;\n  readonly isLiveResult: boolean;\n  readonly handleSetShowALlRowsButtonPress: () => void;\n}\n\nconst showAllRowsTdStyles = (border: string) =>\n  css({\n    borderBottom: border,\n  });\n\nconst showAllRowsWrapperStyle = css({\n  position: 'relative',\n});\n\nconst thinVeilAtTheEndStyles = css({\n  position: 'absolute',\n  height: `calc(${table.tdMinHeight} * 1.5)`,\n  left: 0,\n  right: 0,\n  bottom: '57px',\n  background: `linear-gradient(180deg, transparent, ${cssVar(\n    'backgroundColor'\n  )})`,\n  border: '1px solid ref',\n});\n\nconst showMoreWrapperStyles = css({\n  width: '100%',\n  position: 'relative',\n  paddingBottom: '20px',\n  marginTop: '10px',\n  display: 'flex',\n  justifyContent: 'center',\n});\n\nconst showMoreButtonWrapperStyles = css({\n  display: 'flex',\n  flexDirection: 'row',\n});\n\nconst ShowAllRows: FC<ShowAllRowsProps> = ({\n  columnCount,\n  hiddenRowCount,\n  handleSetShowALlRowsButtonPress,\n  isReadOnly,\n  isLiveResult,\n}) => (\n  <tr>\n    {!isReadOnly && <td contentEditable={false} style={{ border: 0 }}></td>}\n    <td\n      colSpan={isReadOnly ? columnCount : columnCount + 1}\n      contentEditable={false}\n      css={showAllRowsTdStyles(isLiveResult ? liveResultBorder : regularBorder)}\n      style={{ borderRight: 0 }}\n    >\n      <div css={showAllRowsWrapperStyle}>\n        <div css={thinVeilAtTheEndStyles}></div>\n        <div css={showMoreWrapperStyles}>\n          <div css={showMoreButtonWrapperStyles}>\n            <TextAndIconButton\n              text={`View ${hiddenRowCount} more ${pluralize(\n                'result',\n                hiddenRowCount\n              )}`}\n              onClick={handleSetShowALlRowsButtonPress}\n            >\n              <Eye />\n            </TextAndIconButton>\n          </div>\n        </div>\n      </div>\n    </td>\n  </tr>\n);\n\ntype Border = 'all' | 'inner';\nexport type TableWidth = 'SLIM' | 'WIDE';\n\ninterface TableProps {\n  readonly head?: ReactNode;\n  readonly body: ReactNode;\n  readonly addTable?: ReactNode;\n  readonly smartRow?: ReactNode;\n  readonly previewMode?: boolean;\n  readonly columnCount?: number;\n  readonly border?: Border;\n  readonly dropRef?: ConnectDropTarget;\n  readonly tableWidth?: TableWidth;\n  readonly isSelectingCell?: boolean;\n  readonly hiddenRowCount?: number;\n  readonly handleSetShowALlRowsButtonPress?: () => void;\n  readonly setCollapsed?: (collapsed: boolean) => void;\n  readonly isCollapsed?: boolean;\n  readonly isReadOnly?: boolean;\n  readonly isLiveResult?: boolean;\n  readonly onMouseOver?: (over: boolean) => void;\n}\n\nexport const Table = ({\n  head,\n  body,\n  smartRow,\n  addTable,\n  previewMode = true,\n  border: b = 'all',\n  columnCount = 1,\n  dropRef,\n  tableWidth,\n  isSelectingCell,\n  hiddenRowCount = 0,\n  handleSetShowALlRowsButtonPress = noop,\n  isReadOnly = false,\n  isLiveResult = false,\n  onMouseOver = noop,\n}: TableProps): ReturnType<FC> => {\n  const [animateBody] = useAutoAnimate<HTMLTableSectionElement>();\n  const border = isLiveResult ? liveResultBorder : regularBorder;\n  const onMouseEnter = useCallback(() => onMouseOver(true), [onMouseOver]);\n  const onMouseLeave = useCallback(() => onMouseOver(false), [onMouseOver]);\n\n  return (\n    <table\n      ref={dropRef}\n      css={[\n        tableBaseStyles,\n        b === 'all' &&\n          !isReadOnly && [\n            borderRadiusStyles,\n            allBorderStyles(border, regularBorder),\n          ],\n        tableWidth === 'WIDE' && wideTableStyles,\n        isSelectingCell && hiddenSelectionStyles,\n        isLiveResult && liveResultStyles,\n        b === 'inner' && nestedStyles,\n        isReadOnly && readOnlyTableStyles,\n        !head && { borderTop: border },\n      ]}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {head && <thead>{head}</thead>}\n      <tbody ref={animateBody}>\n        {body}\n\n        {hiddenRowCount > 0 && (\n          <ShowAllRows\n            columnCount={columnCount}\n            hiddenRowCount={hiddenRowCount}\n            handleSetShowALlRowsButtonPress={handleSetShowALlRowsButtonPress}\n            isReadOnly={isReadOnly}\n            isLiveResult={isLiveResult}\n          />\n        )}\n      </tbody>\n\n      <tfoot>\n        {previewMode && (\n          <tr contentEditable={false} css={[css({ position: 'relative' })]}>\n            {addTable}\n            {smartRow}\n          </tr>\n        )}\n      </tfoot>\n    </table>\n  );\n};\n","import type { Unit } from '@decipad/computer';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, useEffect, useReducer, useRef } from 'react';\nimport { MenuItem } from '../../atoms';\nimport { cssVar, p12Medium, p13Medium, setCssVar } from '../../primitives';\nimport { menu } from '../../styles';\n\nconst menuItemStyles = css({\n  background: cssVar('backgroundColor'),\n  border: `1px solid ${cssVar('borderColor')}`,\n  borderRadius: '6px',\n  ':hover, :focus-within': {\n    borderColor: `${cssVar('strongerHighlightColor')}`,\n  },\n\n  display: 'flex',\n\n  margin: `calc(-1 * ${menu.itemPadding})`,\n});\n\nconst inputStyles = css(p13Medium, {\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n  ':focus-within': {\n    ...setCssVar('currentTextColor', cssVar('normalTextColor')),\n  },\n  background: cssVar('highlightColor'),\n  borderRadius: '6px',\n  padding: '6px 12px',\n\n  // Make input adjust alongside button\n  width: 0, // Override vendor default width\n  flex: '1 1 0px',\n});\n\nconst buttonStyles = css(p12Medium, {\n  ':hover, :focus': {\n    background: cssVar('strongHighlightColor'),\n  },\n\n  borderRadius: '6px',\n  margin: '2px',\n  padding: '4px 8px',\n});\n\ntype UnitsAction =\n  | { type: 'text'; value: string }\n  | { type: 'unit'; value: Unit[] | null };\n\ninterface UnitsState {\n  text: string;\n  unit: Unit[] | null;\n}\n\nconst initialState: UnitsState = {\n  text: '',\n  unit: null,\n};\n\nfunction reducer(state: UnitsState, action: UnitsAction): UnitsState {\n  switch (action.type) {\n    case 'text':\n      return { ...state, text: action.value };\n    case 'unit':\n      return { ...state, unit: action.value };\n  }\n}\n\ninterface UnitMenuItemProps {\n  readonly onSelect?: (unit: Unit[] | null) => void;\n  readonly parseUnit?: (value: string) => Promise<Unit[] | null>;\n  readonly placeholder?: string;\n}\n\nexport const UnitMenuItem = ({\n  onSelect = noop,\n  parseUnit = () => Promise.resolve(null),\n  placeholder = 'Create a custom unit',\n}: UnitMenuItemProps): ReturnType<FC> => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    if (state.text.length > 0) {\n      (async () => {\n        try {\n          const unit = await parseUnit(state.text);\n          dispatch({ type: 'unit', value: unit });\n        } catch {\n          dispatch({ type: 'unit', value: null });\n        }\n      })();\n    }\n  }, [state.text, parseUnit]);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <MenuItem\n      onSelect={() => onSelect(state.unit)}\n      onFocus={() => inputRef.current?.focus()}\n    >\n      <div css={menuItemStyles}>\n        <input\n          css={inputStyles}\n          defaultValue=\"\"\n          onClick={(e) => {\n            // Prevent propagation to the MenuItem which will try to select itself\n            // as an option and close the dropdown\n\n            e.stopPropagation();\n          }}\n          ref={inputRef}\n          onChange={(e) => {\n            dispatch({ type: 'text', value: e.target.value });\n          }}\n          onMouseLeave={() => inputRef.current?.focus()}\n          onKeyDown={(e) => {\n            if (e.key !== 'Enter' && e.key !== 'Escape') {\n              // Prevent propagation to the MenuItem which can lead to focus/blur\n              // state changes that will mess up the user writing experience.\n              e.stopPropagation();\n            }\n          }}\n          placeholder={placeholder}\n        />\n        {state.unit != null && (\n          <button css={buttonStyles} onClick={() => onSelect(state.unit)}>\n            Add new\n          </button>\n        )}\n      </div>\n    </MenuItem>\n  );\n};\n","import { currencyUnits, Unit, UnitOfMeasure } from '@decipad/computer';\nimport type {\n  CellValueType,\n  ColumnMenuDropdown,\n  TableCellType,\n} from '@decipad/editor-types';\nimport {} from '@decipad/language';\nimport { N, ONE } from '@decipad/number';\nimport { useComputer, useEditorTableContext } from '@decipad/react-contexts';\nimport { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { ComponentProps, ReactNode, useState } from 'react';\nimport { MenuItem, TriggerMenuItem } from '../../atoms';\nimport {\n  AddToWorkspace,\n  All,\n  Calendar,\n  CheckboxSelected,\n  DollarCircle,\n  Formula,\n  Leaf,\n  Number,\n  Shapes,\n  Text,\n  Trash,\n} from '../../icons';\nimport { MenuList, UnitMenuItem } from '../../molecules';\nimport {\n  getBooleanType,\n  getDateType,\n  getNumberType,\n  getSeriesType,\n  getStringType,\n} from '../../utils';\nimport { getFormulaType } from '../../utils/table';\n\nconst tableColumnMenuStyles = css({\n  marginLeft: 'auto',\n  mixBlendMode: 'luminosity',\n});\n\nconst presentableCurrencyUnits = currencyUnits.filter((f) => {\n  return !!f.pretty && f.pretty.length <= 3;\n});\n\ntype ExpandableColumns = 'currency' | 'date' | 'series' | 'dropdowns' | null;\n\ninterface TableColumnMenuProps\n  extends Pick<ComponentProps<typeof MenuList>, 'open' | 'onChangeOpen'>,\n    Pick<ComponentProps<typeof UnitMenuItem>, 'parseUnit'> {\n  readonly onChangeColumnType?: (type: TableCellType) => void;\n  readonly onRemoveColumn?: () => void;\n  readonly isFirst?: boolean;\n  readonly isReadOnly?: boolean;\n  readonly trigger: ReactNode;\n  readonly type: CellValueType;\n  readonly isForImportedColumn?: boolean;\n  readonly dropdownNames?: ColumnMenuDropdown[];\n}\n\nconst isCurrencyUnit = (unit?: Unit[]): boolean => {\n  return (\n    (unit && unit.length === 1 && unit[0].baseSuperQuantity === 'currency') ||\n    false\n  );\n};\n\nconst sameUnits = (\n  unit: Unit[] | null | undefined,\n  um: UnitOfMeasure\n): boolean => {\n  if (!unit || unit.length !== 1) {\n    return false;\n  }\n  const u = unit[0];\n  return (\n    u.unit === um.name &&\n    N(u.exp).equals(ONE) &&\n    N(u.multiplier).equals(ONE) &&\n    u.baseSuperQuantity === um.superBaseQuantity\n  );\n};\n\nexport const TableColumnMenu: React.FC<TableColumnMenuProps> = ({\n  open,\n  onChangeOpen,\n  onChangeColumnType = noop,\n  onRemoveColumn = noop,\n  parseUnit,\n  isFirst = false,\n  trigger,\n  type,\n  isForImportedColumn = false,\n  dropdownNames = [],\n}) => {\n  const computer = useComputer();\n\n  const editorTableContext = useEditorTableContext();\n  const { length } = editorTableContext.cellTypes;\n\n  const [currentOpen, setCurrentOpen] = useState<ExpandableColumns>(null);\n  const onColumnExpand = (current: ExpandableColumns) => {\n    if (current === currentOpen) {\n      setCurrentOpen(null);\n    } else {\n      setCurrentOpen(current);\n    }\n  };\n\n  return (\n    <div contentEditable={false} css={tableColumnMenuStyles}>\n      <MenuList\n        root\n        dropdown\n        open={open}\n        onChangeOpen={onChangeOpen}\n        trigger={trigger}\n      >\n        <MenuList\n          itemTrigger={\n            <TriggerMenuItem icon={<Shapes />}>\n              <div css={{ minWidth: '132px' }}>Change type</div>\n            </TriggerMenuItem>\n          }\n        >\n          {type.kind === 'number' &&\n            type.unit != null &&\n            !isCurrencyUnit(type.unit) && (\n              <MenuItem key=\"all\" icon={<All />} selected>\n                {computer.formatUnit(type.unit, N(1))}\n              </MenuItem>\n            )}\n          <MenuItem\n            key=\"number\"\n            icon={<Number />}\n            onSelect={() => onChangeColumnType(getNumberType())}\n            selected={type.kind === 'number' && type.unit == null}\n          >\n            Number\n          </MenuItem>\n          <MenuList\n            key=\"currency\"\n            itemTrigger={\n              <TriggerMenuItem icon={<DollarCircle />}>\n                <div css={{ minWidth: '132px' }}>Currency</div>\n              </TriggerMenuItem>\n            }\n            open={currentOpen === 'currency'}\n            onChangeOpen={() => onColumnExpand('currency')}\n          >\n            {presentableCurrencyUnits.map((unit, index) => (\n              <MenuItem\n                key={index}\n                icon={<span>{unit.pretty ?? unit.name}</span>}\n                onSelect={() =>\n                  onChangeColumnType(\n                    getNumberType([\n                      {\n                        exp: ONE,\n                        multiplier: ONE,\n                        known: true,\n                        unit: unit.name,\n                        baseSuperQuantity: unit.superBaseQuantity,\n                        baseQuantity: unit.name as Unit['baseQuantity'],\n                      },\n                    ])\n                  )\n                }\n                selected={type.kind === 'number' && sameUnits(type.unit, unit)}\n                itemAlignment=\"center\"\n              >\n                <span css={{ marginLeft: '2px' }}>{unit.baseQuantity}</span>\n              </MenuItem>\n            ))}\n          </MenuList>\n\n          {!isForImportedColumn && !isFirst && (\n            <MenuItem\n              key=\"table-formula\"\n              icon={<Formula />}\n              onSelect={() => onChangeColumnType(getFormulaType())}\n              selected={type.kind === 'table-formula'}\n            >\n              Formula\n            </MenuItem>\n          )}\n          <MenuItem\n            key=\"boolean\"\n            icon={<CheckboxSelected />}\n            onSelect={() => onChangeColumnType(getBooleanType())}\n            selected={type.kind === 'boolean'}\n          >\n            Checkbox\n          </MenuItem>\n          <MenuItem\n            key=\"string\"\n            icon={<Text />}\n            onSelect={() => onChangeColumnType(getStringType())}\n            selected={type.kind === 'string'}\n          >\n            Text\n          </MenuItem>\n\n          {!isFirst && dropdownNames.length > 0 && (\n            <MenuList\n              key=\"dropdown-tables\"\n              itemTrigger={\n                <TriggerMenuItem\n                  icon={<AddToWorkspace />}\n                  selected={type.kind === 'date'}\n                >\n                  <div css={{ minWidth: '116px' }}>Categories</div>\n                </TriggerMenuItem>\n              }\n              open={currentOpen === 'dropdowns'}\n              onChangeOpen={() => onColumnExpand('dropdowns')}\n            >\n              {dropdownNames.map((d, index) => (\n                <MenuItem\n                  key={index}\n                  icon={<AddToWorkspace />}\n                  onSelect={() =>\n                    onChangeColumnType({\n                      kind: 'dropdown',\n                      id: d.id,\n                      type: d.type,\n                    })\n                  }\n                  selected={false}\n                >\n                  {d.value}\n                </MenuItem>\n              ))}\n            </MenuList>\n          )}\n          <MenuList\n            key=\"dates\"\n            itemTrigger={\n              <TriggerMenuItem\n                icon={<Calendar />}\n                selected={type.kind === 'date'}\n              >\n                <div css={{ minWidth: '116px' }}>Date</div>\n              </TriggerMenuItem>\n            }\n            open={currentOpen === 'date'}\n            onChangeOpen={() => onColumnExpand('date')}\n          >\n            <MenuItem\n              key=\"year\"\n              icon={<Calendar />}\n              onSelect={() => onChangeColumnType(getDateType('year'))}\n              selected={type.kind === 'date' && type.date === 'year'}\n            >\n              Year\n            </MenuItem>\n            <MenuItem\n              key=\"month\"\n              icon={<Calendar />}\n              onSelect={() => onChangeColumnType(getDateType('month'))}\n              selected={type.kind === 'date' && type.date === 'month'}\n            >\n              Month\n            </MenuItem>\n            <MenuItem\n              key=\"day\"\n              icon={<Calendar />}\n              onSelect={() => onChangeColumnType(getDateType('day'))}\n              selected={type.kind === 'date' && type.date === 'day'}\n            >\n              Day\n            </MenuItem>\n            <MenuItem\n              key=\"minute\"\n              icon={<Calendar />}\n              onSelect={() => onChangeColumnType(getDateType('minute'))}\n              selected={type.kind === 'date' && type.date === 'minute'}\n            >\n              Time\n            </MenuItem>\n          </MenuList>\n          {!isForImportedColumn && (\n            <MenuList\n              key=\"series\"\n              itemTrigger={\n                <TriggerMenuItem\n                  icon={<Leaf />}\n                  selected={type.kind === 'series'}\n                >\n                  <div css={{ minWidth: '116px' }}>Series</div>\n                </TriggerMenuItem>\n              }\n              open={currentOpen === 'series'}\n              onChangeOpen={() => onColumnExpand('series')}\n            >\n              <MenuItem\n                icon={<Calendar />}\n                onSelect={() => onChangeColumnType(getSeriesType('date'))}\n                selected={type.kind === 'series' && type.seriesType === 'date'}\n              >\n                Date\n              </MenuItem>\n            </MenuList>\n          )}\n          <UnitMenuItem\n            placeholder=\"create custom\"\n            onSelect={(unit) => {\n              onChangeColumnType({ kind: 'number', unit });\n            }}\n            parseUnit={parseUnit}\n          />\n        </MenuList>\n        {length > 1 ? (\n          <MenuItem\n            key=\"delete column\"\n            icon={<Trash />}\n            onSelect={() => onRemoveColumn()}\n          >\n            Delete column\n          </MenuItem>\n        ) : null}\n      </MenuList>\n    </div>\n  );\n};\n","import { ElementAttributes } from '@decipad/editor-types';\nimport { css } from '@emotion/react';\nimport {\n  ComponentProps,\n  ElementType,\n  FC,\n  PropsWithChildren,\n  useState,\n} from 'react';\nimport { TableColumnMenu } from '..';\nimport { TableHeader } from '../../atoms';\nimport { Caret } from '../../icons';\nimport { table } from '../../styles';\nimport { getStringType } from '../../utils';\n\nconst rightSlotStyles = css({\n  display: 'grid',\n  alignItems: 'center',\n  width: '16px',\n  minHeight: table.thMinHeight,\n});\n\ntype TableColumnHeaderProps = PropsWithChildren<\n  Pick<\n    ComponentProps<typeof TableHeader>,\n    | 'type'\n    | 'draggingOver'\n    | 'dropDirection'\n    | 'dragSource'\n    | 'dropTarget'\n    | 'dragPreview'\n    | 'draggable'\n    | 'onSelectColumn'\n  > &\n    Pick<\n      ComponentProps<typeof TableColumnMenu>,\n      | 'onChangeColumnType'\n      | 'onRemoveColumn'\n      | 'parseUnit'\n      | 'isFirst'\n      | 'dropdownNames'\n    > & {\n      as?: ElementType;\n      empty?: boolean;\n      focused?: boolean;\n      readOnly?: boolean;\n      isForImportedColumn?: boolean;\n      attributes?: ElementAttributes;\n    }\n>;\n\nexport const TableColumnHeader: FC<TableColumnHeaderProps> = ({\n  onChangeColumnType,\n  onRemoveColumn,\n  parseUnit,\n  isFirst,\n  type = getStringType(),\n  readOnly = false,\n  isForImportedColumn = false,\n  children,\n  dropdownNames = [],\n  ...props\n}) => {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  return (\n    <TableHeader\n      {...props}\n      isEditable={!readOnly}\n      menu={\n        !readOnly && (\n          <TableColumnMenu\n            trigger={\n              <button css={rightSlotStyles}>\n                <Caret variant=\"down\" />\n              </button>\n            }\n            open={isMenuOpen}\n            onChangeOpen={setMenuOpen}\n            onChangeColumnType={onChangeColumnType}\n            onRemoveColumn={onRemoveColumn}\n            parseUnit={parseUnit}\n            isFirst={isFirst}\n            type={type}\n            isForImportedColumn={isForImportedColumn}\n            dropdownNames={dropdownNames}\n          />\n        )\n      }\n      highlight={isMenuOpen}\n      type={type}\n    >\n      {children}\n    </TableHeader>\n  );\n};\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, InputHTMLAttributes } from 'react';\nimport { MenuItem, Tooltip } from '../../atoms';\nimport { cssVar, p13Medium, red200, setCssVar } from '../../primitives';\nimport { menu } from '../../styles';\n\nconst menuItemStyles = css({\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n  background: cssVar('backgroundColor'),\n\n  alignItems: 'center',\n  display: 'flex',\n  gap: '6px',\n\n  // Overlap MenuItem's background hover color effect. This component is the\n  // exception to that background hover effect.\n  margin: `calc(-1 * ${menu.itemPadding})`,\n  padding: `0 ${menu.itemPadding}`,\n\n  cursor: 'initial',\n});\n\nconst labelStyles = css({\n  flex: '1 1 0px',\n});\n\nconst inputStyles = css(p13Medium, {\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n  ':focus-within': {\n    ...setCssVar('currentTextColor', cssVar('normalTextColor')),\n  },\n\n  border: `1px solid ${cssVar('borderColor')}`,\n  borderRadius: '6px',\n  '*:hover > &, :focus': {\n    borderColor: `${cssVar('strongerHighlightColor')}`,\n  },\n\n  padding: '4px 12px',\n  margin: '2px 0',\n\n  width: 0, // Override vendor default width so flex basis can apply\n  flex: '0 1 100%',\n\n  background: cssVar('highlightColor'),\n});\n\nconst errorInputStyles = css({\n  borderColor: red200.rgb,\n  '*:hover > &, :focus': {\n    borderColor: red200.rgb,\n  },\n});\n\ninterface InputMenuItemProps {\n  readonly error?: string;\n  readonly label?: string;\n  readonly onChange?: (value: string) => void;\n  readonly pattern?: InputHTMLAttributes<HTMLInputElement>['pattern'];\n  readonly placeholder?: InputHTMLAttributes<HTMLInputElement>['placeholder'];\n  readonly type?: InputHTMLAttributes<HTMLInputElement>['type'];\n  readonly value?: InputHTMLAttributes<HTMLInputElement>['value'];\n}\n\nexport const InputMenuItem = ({\n  error,\n  label,\n  onChange = noop,\n  pattern,\n  placeholder,\n  type = 'text',\n  value,\n}: InputMenuItemProps): ReturnType<FC> => {\n  const input = (\n    <input\n      css={[inputStyles, error && errorInputStyles]}\n      onClick={(e) => {\n        // Prevent propagation to the MenuItem which will try to select itself\n        // as an option and close the dropdown\n        e.stopPropagation();\n      }}\n      onChange={(e) => onChange(e.target.value)}\n      pattern={pattern}\n      placeholder={placeholder}\n      type={type}\n      value={value}\n    />\n  );\n\n  return (\n    <MenuItem\n      onPointerMove={(e) => {\n        // Prevents MenuItem to loose focus in some scenarios.\n        e.preventDefault();\n      }}\n    >\n      <div css={menuItemStyles}>\n        {label && <span css={labelStyles}>{label}</span>}\n        {/* Tooltip is always rendered and explicitly set to not opened when\n            there's no error to avoid changing the DOM tree and losing focus on\n            the input */}\n        <Tooltip open={error ? undefined : false} trigger={input}>\n          <p>{error}</p>\n        </Tooltip>\n      </div>\n    </MenuItem>\n  );\n};\n","import { ComponentProps, ReactNode, useCallback } from 'react';\nimport { noop } from '@decipad/utils';\nimport { isFlagEnabled } from '@decipad/feature-flags';\nimport { SerializedType, tokenRules } from '@decipad/language';\nimport { CellValueType } from '@decipad/editor-types';\nimport { MenuItem, MenuSeparator, TriggerMenuItem } from '../../atoms';\nimport { InputMenuItem, MenuList } from '../../molecules';\nimport {\n  Calendar,\n  Number as NumberIcon,\n  Shapes,\n  Table,\n  Text,\n} from '../../icons';\nimport { getDateType, getNumberType, getStringType } from '../../utils';\n\ntype VariableEditorMenuProps = {\n  readonly onCopy?: () => void;\n  readonly onDelete?: () => void;\n  readonly type?: CellValueType;\n  readonly onChangeType?: (\n    type: SerializedType | 'smart-selection' | undefined\n  ) => void;\n  readonly trigger: ReactNode;\n  readonly smartSelection?: boolean;\n} & (\n  | {\n      // By marking this variant as optional, when not provided it will be assumed as the default.\n      readonly variant?: 'expression' | 'toggle' | 'date' | 'dropdown';\n      readonly onChangeMax?: never;\n      readonly onChangeMin?: never;\n      readonly onChangeStep?: never;\n      readonly max?: never;\n      readonly min?: never;\n      readonly step?: never;\n    }\n  | {\n      readonly variant?: 'slider';\n      readonly onChangeMax?: ComponentProps<typeof InputMenuItem>['onChange'];\n      readonly onChangeMin?: ComponentProps<typeof InputMenuItem>['onChange'];\n      readonly onChangeStep?: ComponentProps<typeof InputMenuItem>['onChange'];\n      readonly max?: string;\n      readonly min?: string;\n      readonly step?: string;\n    }\n  | {\n      readonly variant?: 'display';\n      readonly onChangeMax?: never;\n      readonly onChangeMin?: never;\n      readonly onChangeStep?: never;\n      readonly max?: never;\n      readonly min?: never;\n      readonly step?: never;\n    }\n);\n\nexport const VariableEditorMenu: React.FC<VariableEditorMenuProps> = ({\n  onChangeMax,\n  onChangeMin,\n  onChangeStep,\n  onCopy = noop,\n  onDelete = noop,\n  type,\n  onChangeType = noop,\n  max,\n  min,\n  step,\n  trigger,\n  variant = 'expression',\n  smartSelection = false,\n}) => {\n  const onSmartSelection = useCallback(() => {\n    onChangeType('smart-selection');\n  }, [onChangeType]);\n\n  return (\n    <MenuList root dropdown trigger={trigger}>\n      {variant === 'slider' && [\n        <InputMenuItem\n          error={\n            max != null && min != null && Number(min) > Number(max)\n              ? `Must be lower than ${max}`\n              : undefined\n          }\n          key=\"min\"\n          label=\"Minimum\"\n          onChange={onChangeMin}\n          pattern={tokenRules.main.number.match.source}\n          value={min}\n        />,\n        <InputMenuItem\n          error={\n            max != null && min != null && Number(max) < Number(min)\n              ? `Must be bigger than ${min}`\n              : undefined\n          }\n          key=\"max\"\n          label=\"Maximum\"\n          onChange={onChangeMax}\n          pattern={tokenRules.main.number.match.source}\n          value={max}\n        />,\n        <InputMenuItem\n          error={\n            max != null && min != null && step != null\n              ? Math.abs(Number(min) - Number(max)) < Number(step)\n                ? `Must be lower than ${Math.abs(Number(min) - Number(max))}`\n                : Number(step) <= 0\n                ? 'Must be bigger than 0'\n                : undefined\n              : undefined\n          }\n          key=\"step\"\n          label=\"Step\"\n          onChange={onChangeStep}\n          pattern={tokenRules.main.number.match.source}\n          value={step}\n        />,\n        <MenuSeparator key=\"sep\" />,\n      ]}\n      {variant === 'expression' || variant === 'dropdown' ? (\n        <MenuList\n          itemTrigger={\n            <TriggerMenuItem icon={<Shapes />}>\n              <div css={{ minWidth: '132px' }}>Change type</div>\n            </TriggerMenuItem>\n          }\n        >\n          <MenuItem\n            icon={<NumberIcon />}\n            onSelect={() => onChangeType(getNumberType())}\n            selected={\n              type?.kind === 'number' && type.unit == null && !smartSelection\n            }\n          >\n            Number\n          </MenuItem>\n          <MenuItem\n            icon={<Text />}\n            onSelect={() => onChangeType(getStringType())}\n            selected={type?.kind === 'string' && !smartSelection}\n          >\n            Text\n          </MenuItem>\n          {variant === 'dropdown' && (\n            <MenuItem\n              icon={<Table />}\n              onSelect={onSmartSelection}\n              selected={smartSelection}\n            >\n              Smart Selection\n            </MenuItem>\n          )}\n        </MenuList>\n      ) : (\n        variant === 'date' && (\n          <MenuList\n            itemTrigger={\n              <TriggerMenuItem icon={<Shapes />}>\n                <div css={{ minWidth: '132px' }}>Change type</div>\n              </TriggerMenuItem>\n            }\n          >\n            <MenuItem\n              icon={<Calendar />}\n              onSelect={() => onChangeType(getDateType('year'))}\n              selected={type?.kind === 'date' && type.date === 'year'}\n            >\n              Year\n            </MenuItem>\n            <MenuItem\n              icon={<Calendar />}\n              onSelect={() => onChangeType(getDateType('month'))}\n              selected={type?.kind === 'date' && type.date === 'month'}\n            >\n              Month\n            </MenuItem>\n            <MenuItem\n              icon={<Calendar />}\n              onSelect={() => onChangeType(getDateType('day'))}\n              selected={type?.kind === 'date' && type.date === 'day'}\n            >\n              Day\n            </MenuItem>\n            <MenuItem\n              icon={<Calendar />}\n              onSelect={() => onChangeType(getDateType('minute'))}\n              selected={type?.kind === 'date' && type.date === 'minute'}\n            >\n              Time\n            </MenuItem>\n          </MenuList>\n        )\n      )}\n      {isFlagEnabled('INPUT_COPY') && (\n        <MenuItem onSelect={onCopy}>Copy</MenuItem>\n      )}\n\n      <MenuItem onSelect={onDelete}>\n        <div css={{ minWidth: '165px' }}>Delete</div>\n      </MenuItem>\n    </MenuList>\n  );\n};\n","import { Children, ComponentProps, FC, ReactNode, useMemo } from 'react';\nimport { css } from '@emotion/react';\nimport { noop } from 'lodash';\nimport { AnyElement } from '@decipad/editor-types';\nimport { SerializedType } from '@decipad/computer';\nimport { useThemeFromStore } from '@decipad/react-contexts';\nimport { useSelected } from 'slate-react';\nimport { VariableEditorMenu } from '../VariableEditorMenu/VariableEditorMenu';\nimport { Ellipsis, Virus } from '../../icons';\nimport { CellEditor } from '../../molecules/CellEditor/CellEditor';\nimport {\n  cssVar,\n  grey300,\n  grey700,\n  offBlack,\n  setCssVar,\n  smallScreenQuery,\n  transparency,\n  white,\n} from '../../primitives';\nimport { AvailableSwatchColor, getTypeIcon, swatchesThemed } from '../../utils';\n\nconst leftBarSize = 6;\n\ntype Variant = Pick<ComponentProps<typeof VariableEditorMenu>, 'variant'>;\n\nconst wrapperStyles = ({ variant }: Variant, color: string) => {\n  const bgColor = cssVar('backgroundColor');\n  const targetColor = variant === 'display' ? grey300.rgb : color;\n  const finalColor = cssVar('borderColor');\n  const gradient = `linear-gradient(${bgColor}, ${bgColor}), linear-gradient(to right, ${targetColor} 0%, ${finalColor} 18.71%)`;\n  return css({\n    // Because `borderImage` with a linear gradient and `borderRadius` cannot\n    // work together, we mimic a border by setting a linear gradient in the\n    // background and clipping the content box.\n    border: '1px solid transparent',\n    borderRadius: '8px',\n    backgroundImage: gradient,\n    backgroundOrigin: 'border-box',\n    backgroundClip: 'content-box, border-box',\n\n    // Last shadow is the left side color bar.\n    boxShadow: `0px 2px 20px ${transparency(grey700, 0.04).rgba},\n     0px 2px 8px ${transparency(offBlack, 0.02).rgba},\n     -${leftBarSize}px 0px ${color}`,\n    marginLeft: `${leftBarSize}px`,\n\n    maxWidth: `262px`,\n    minWidth: '175px',\n    width: '100%',\n  });\n};\n\nconst widgetWrapperStyles = css({\n  alignItems: 'center',\n  display: 'grid',\n  gap: '8px',\n  padding: '8px 8px 16px',\n});\n\nconst headerWrapperStyles = css({\n  position: 'relative',\n  display: 'inline-flex',\n  gridAutoColumns: 'auto',\n  minWidth: 0,\n  gap: '4px',\n});\n\nconst iconWrapperStyles = ({ variant }: Variant) =>\n  css(setCssVar('currentTextColor', cssVar('weakTextColor')), {\n    display: 'grid',\n    height: '20px',\n    width: '20px',\n    flexShrink: 0,\n    ...(variant === 'display' && {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n    }),\n\n    [smallScreenQuery]: {\n      height: '16px',\n      width: '16px',\n    },\n  });\n\nconst buttonWrapperStyles = ({ variant }: Variant) =>\n  css({\n    padding: '2px',\n    flexShrink: 0,\n    ':hover': {\n      backgroundColor: cssVar('highlightColor'),\n      borderRadius: '50%',\n    },\n    ...(variant === 'display' && {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      width: '20px',\n      height: '20px',\n    }),\n  });\n\nconst variableNameStyles = ({ variant }: Variant) =>\n  css({\n    alignSelf: 'start',\n    flexGrow: 2,\n    minWidth: 0,\n    position: 'relative',\n\n    '::after': {\n      display: 'block',\n      height: '100%',\n      width: '24px',\n      content: '\"\"',\n      right: 0,\n      top: 0,\n      position: 'absolute',\n      pointerEvents: 'none',\n      ...(variant !== 'display' && {\n        color: 'white',\n        background: `linear-gradient(\n      90deg,\n      ${transparency(white, 0).rgba},\n      ${cssVar('backgroundColor')}\n    )`,\n      }),\n    },\n  });\n\ninterface VariableEditorProps\n  extends Omit<ComponentProps<typeof VariableEditorMenu>, 'trigger'> {\n  children?: ReactNode;\n  color?: AvailableSwatchColor;\n  readOnly?: boolean;\n  type?: SerializedType;\n  onChangeType?: (type: SerializedType | 'smart-selection' | undefined) => void;\n  value?: string;\n  onChangeValue?: (\n    value: string | undefined // only booleans for now\n  ) => void;\n  smartSelection?: boolean;\n  element?: AnyElement;\n}\n\nexport const VariableEditor = ({\n  children,\n  readOnly = false,\n  color = 'Sulu',\n  type,\n  onChangeType = noop,\n  value,\n  onChangeValue = noop,\n  element,\n  ...menuProps\n}: VariableEditorProps): ReturnType<FC> => {\n  const childrenArray = Children.toArray(children);\n  const [darkTheme] = useThemeFromStore();\n  const baseSwatches = swatchesThemed(darkTheme);\n\n  const Icon = useMemo(\n    () => (type && getTypeIcon(type, true)) ?? Virus,\n    [type]\n  );\n  const selected = useSelected();\n  return (\n    <div\n      css={wrapperStyles(\n        { variant: menuProps.variant },\n        menuProps.variant === 'display' ? '#FFFFFF' : baseSwatches[color].rgb\n      )}\n    >\n      <div css={widgetWrapperStyles}>\n        <div\n          css={[\n            headerWrapperStyles,\n            menuProps.variant === 'display' && {\n              gap: 0,\n            },\n          ]}\n        >\n          <>\n            <div\n              css={variableNameStyles({\n                variant: menuProps.variant,\n              })}\n            >\n              {childrenArray[0]}\n            </div>\n            {!readOnly && menuProps.variant !== 'display' && (\n              <span\n                contentEditable={false}\n                css={iconWrapperStyles({ variant: menuProps.variant })}\n              >\n                <Icon />\n              </span>\n            )}\n            <div\n              contentEditable={false}\n              css={iconWrapperStyles({ variant: menuProps.variant })}\n            >\n              {!readOnly && (\n                // TS can't tell which variant of the union type that composes VariableEditorMenu\n                // is being used at any given moment but we're using these type definitions on\n                // VariableEditor's typings, so we know things will be ok in the end, we just need\n                // TS to shut up.\n                <VariableEditorMenu\n                  {...(menuProps as ComponentProps<typeof VariableEditorMenu>)}\n                  trigger={\n                    <button\n                      css={buttonWrapperStyles({\n                        variant: menuProps.variant,\n                      })}\n                    >\n                      <Ellipsis />\n                    </button>\n                  }\n                  type={type}\n                  onChangeType={onChangeType}\n                />\n              )}\n            </div>\n          </>\n        </div>\n        {menuProps.variant !== 'display' && childrenArray.length > 1 && (\n          <CellEditor\n            type={type}\n            value={value}\n            onChangeValue={onChangeValue}\n            focused={selected}\n            element={element}\n          >\n            <div css={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n              {childrenArray.slice(1)}\n            </div>\n          </CellEditor>\n        )}\n      </div>\n    </div>\n  );\n};\n","import {\n  display,\n  h1,\n  h2,\n  p14Medium,\n  p16Regular,\n  p8Regular,\n  TypographyStyles,\n} from '../primitives';\n\ninterface StyleData {\n  spacingTop?: string;\n  spacingBottom?: string;\n  typography?: TypographyStyles;\n}\n\nexport const title: StyleData = {\n  typography: display,\n};\nexport const paragraph: StyleData = {\n  typography: p16Regular,\n};\nexport const blockquote: StyleData = {\n  typography: p16Regular,\n};\nexport const callout: StyleData = {\n  typography: p14Medium,\n};\n\nexport const media: StyleData = {\n  typography: p14Medium,\n};\n\nexport const heading1: StyleData = {\n  typography: h1,\n};\nexport const heading2: StyleData = {\n  typography: h2,\n};\nexport const list: StyleData = {\n  typography: p16Regular,\n};\nexport const codeLine: StyleData = {};\nexport const editorTable: StyleData = {\n  typography: h2,\n};\nexport const editorWideTable: StyleData = {\n  typography: h2,\n};\nexport const plot: StyleData = {};\nexport const interactive: StyleData = {\n  typography: p16Regular,\n};\nexport const divider: StyleData = {\n  typography: p8Regular,\n};\nexport const dividerBlock: StyleData = {};\nexport const columns: StyleData = {\n  spacingTop: '0',\n  spacingBottom: '0',\n};\nexport const draw: StyleData = {};\n\nexport const structured: StyleData = {};\n","import { CSSObject, css } from '@emotion/react';\nimport { code, cssVar, p14Regular, setCssVar } from '../primitives';\n\nexport const lineHeight = '36px';\n\nexport const variableStyles: CSSObject = {\n  ...code,\n  ...setCssVar('currentTextColor', cssVar('variableHighlightTextColor')),\n  backgroundColor: cssVar('variableHighlightColor'),\n  fontWeight: 500,\n  fontSize: '13px',\n};\n\nexport const varStyles = css(variableStyles, {\n  padding: '4px 6px',\n  borderRadius: '6px',\n  fontSize: '13px',\n});\n\nexport const structuredVariableStyles: CSSObject = {\n  ...p14Regular,\n};\n","export const dropLineWidth = 2;\n","import { CSSObject } from '@emotion/react';\nimport { cssVar } from '../primitives';\n\nexport const resultBubbleStyles: CSSObject = {\n  ':empty': { display: 'none' },\n  borderRadius: 8,\n  backgroundColor: cssVar('backgroundColor'),\n  border: `1px solid ${cssVar('borderColor')}`,\n  filter: `drop-shadow(0px 1px 0px ${cssVar('borderColor')})`,\n  '@media print': {\n    backgroundColor: 'unset',\n    border: 'unset',\n    filter: 'unset',\n  },\n};\n","import { SerializedType } from '@decipad/computer';\nimport { css, CSSObject } from '@emotion/react';\nimport { cssVar, setCssVar } from '../primitives';\nimport { isTabularType } from '../utils';\n\nexport const buttonColumnWidth = '44px';\n\nexport const tableControlWidth = '20px';\n\nexport const thMinHeight = '32px';\nexport const thMinWidth = '269px';\nexport const tdMinHeight = '36px';\nexport const tdMinWidth = '120px';\nexport const tdMaxWidth = '240px';\nexport const tdVerticalPadding = '8px';\nexport const tdHorizontalPadding = '12px';\n\nexport const smartRowHorizontalPadding = '5px';\n\nexport const firstTdLeftPadding = '20px';\n\nexport const cellLeftPaddingStyles = css({\n  paddingLeft: tdHorizontalPadding,\n  paddingRight: tdHorizontalPadding,\n});\n\nexport const tableParentStyles = css({\n  padding: 0,\n  overflow: 'hidden',\n  table: {\n    width: '100%',\n  },\n});\n\nexport const importTableDragHandleStyles = css({\n  gridArea: 'handle',\n  cursor: 'grab',\n  width: '18px',\n  height: '18px',\n  borderRadius: '6px',\n  ...setCssVar('currentTextColor', cssVar('weakTextColor')),\n  padding: '5px',\n  ':hover': {\n    background: cssVar('highlightColor'),\n  },\n});\n\nexport const getCellWrapperStyles = (type: SerializedType): CSSObject => ({\n  padding: isTabularType(type)\n    ? undefined\n    : `${tdVerticalPadding} ${tdHorizontalPadding}`,\n});\n\nexport const defaultMaxRows = 10;\n","export const listItemCounter = 'list-item';\nexport const tableRowCounter = 'table-row';\n","import { SerializedType } from '@decipad/computer';\n\nexport function isTabularType(type: SerializedType | undefined): boolean {\n  return (\n    type != null &&\n    (type.kind === 'column' || type.kind === 'row' || type.kind === 'table')\n  );\n}\n","import { SerializedType, SerializedTypes, Unit, Time } from '@decipad/computer';\nimport type {\n  SeriesType,\n  CellValueType,\n  TableCellType,\n} from '@decipad/editor-types';\nimport { createContext, FunctionComponent, ElementType } from 'react';\nimport {\n  All,\n  Calendar,\n  CheckboxSelected,\n  Code,\n  DollarCircle,\n  Formula,\n  Number,\n  Text,\n  Warning,\n} from '../icons';\nimport { AvailableSwatchColor } from './swatches';\nimport { UserIconKey } from './user-icons';\n\nconst isCurrencyUnit = (unit: Unit[] | null | undefined): boolean =>\n  unit?.length === 1 && unit[0].baseSuperQuantity === 'currency';\n\nexport function getTypeIcon(\n  type: CellValueType,\n  onExpressionEditor = false\n): FunctionComponent | ElementType {\n  switch (type.kind) {\n    case 'date':\n      return Calendar;\n    case 'boolean':\n      return CheckboxSelected;\n    case 'number':\n      return type.unit == null\n        ? Number\n        : isCurrencyUnit(type.unit)\n        ? DollarCircle\n        : All;\n    case 'table-formula':\n      return Formula;\n    case 'series':\n      return Calendar; // only calendar for now\n    case 'dropdown':\n      return type.type === 'number' ? Number : Text;\n    case 'anything':\n      return onExpressionEditor ? Code : 'span';\n    case 'type-error':\n      return Warning;\n    default:\n      return Text;\n  }\n}\n\nexport function getDateType(\n  specificity: Time.Specificity\n): SerializedTypes.Date {\n  return { kind: 'date', date: specificity };\n}\n\nexport function getSeriesType(type: SeriesType): TableCellType {\n  return { kind: 'series', seriesType: type };\n}\n\nexport function getNumberType(unit?: Unit[]): SerializedTypes.Number {\n  return { kind: 'number', unit: unit ?? null };\n}\n\nexport function getBooleanType(): SerializedTypes.Boolean {\n  return { kind: 'boolean' };\n}\n\nexport function getFormulaType(): Extract<\n  TableCellType,\n  { kind: 'table-formula' }\n> {\n  return {\n    kind: 'table-formula',\n  };\n}\n\nexport function getStringType(): SerializedTypes.String {\n  return { kind: 'string' };\n}\n\nexport function toTableHeaderType(\n  type: SerializedType\n): TableCellType | undefined {\n  switch (type.kind) {\n    case 'number':\n    case 'string':\n    case 'date':\n    case 'boolean':\n      return type;\n    default:\n      return undefined;\n  }\n}\n\ninterface TableStyleContextValue {\n  readonly icon: UserIconKey;\n  readonly color?: AvailableSwatchColor;\n  readonly isCollapsed?: boolean;\n  readonly hideFormulas?: boolean;\n\n  readonly setIcon: (newIcon: UserIconKey) => void;\n  readonly setColor: (newColor: AvailableSwatchColor) => void;\n  readonly setCollapsed?: (collapsed: boolean) => void;\n  readonly setHideFormulas?: (isHidden: boolean) => void;\n\n  readonly hideAddDataViewButton?: boolean;\n}\nexport const TableStyleContext = createContext<TableStyleContextValue>({\n  icon: 'Table',\n  color: undefined,\n  hideAddDataViewButton: false,\n  isCollapsed: false,\n  hideFormulas: false,\n  setIcon: () => {\n    throw new Error('No way to change the icon provided');\n  },\n  setColor: () => {\n    throw new Error('No way to change the color provided');\n  },\n  setCollapsed: () => {\n    throw new Error('No way to set collapsed');\n  },\n  setHideFormulas: () => {\n    throw new Error('No way to set hide formulas');\n  },\n});\n"],"names":["defaultEnvValues","REACT_APP_SENTRY_DSN","REACT_APP_GOOGLE_SHEETS_API_KEY","defaultEnv","key","thirdParty","once","googleSheets","apiKey","value","deduplicateVarNameInBlock","computer","el","type","ELEMENT_VARIABLE_DEF","e","children","text","getAvailableIdentifier","getNodeString","deduplicateVarNameInDef","ELEMENT_CODE_LINE","code","parsed","parseStatement","error","solution","varName","args","newVarName","replace","deduplicateAssignmentVarName","ELEMENT_CODE_LINE_V2","ELEMENT_STRUCTURED_IN","deduplicateVarNameInStructuredIn","ELEMENT_TABLE","captionEl","deduplicateTableVarName","clone","deduplicateVarName","cloneEl","isText","cloneDeep","allElementKinds","isElement","elm","n","id","nanoid","deduplicateId","Array","isArray","map","centeredFlex","errorBlock","css","padding","gap","borderRadius","width","slimBlockWidth","smallScreenQuery","minWidth","maxWidth","errorBlockWrapperStyles","errorMessageStypes","p16Regular","color","cssVar","errorBlockRowStyles","buttonRow","ErrorBlock","onDelete","onUndo","backgroundColor","contentEditable","Button","onClick","Fallback","element","resetError","console","editor","useTEditorRef","delPath","useNodePath","undefined","undoManager","canUndo","removeNodes","at","undo","BlockErrorBoundary","fallback","props","showDialog","BlockSelectable","_BlockSelectable","selectedColor","defaultOnDelete","parentOnDelete","path","findNodePath","hasNode","point","getStartPoint","setSelection","anchor","focus","DraggableBlock","forwardRef","forwardedRef","onceDeleted","noop","accept","getAxis","onDrop","hasPreviousSibling","isCentered","dependencyId","deleted","setDeleted","useState","readOnly","useIsEditorReadOnly","useComputer","dependencyArray","dependenciesForBlock","blocksInUse$","use","selected","useSelected","setIsHidden","useElementMutatorCallback","blockRef","useRef","previewRef","dragRef","dropLine","isDragging","useDnd","nodeRef","useEffect","dndPreviewActions","draggingIds","dndStore","ref","useMergedRef","event","useContext","ClientEventsContext","useCallback","action","blockType","onDuplicate","newEl","insertElements","requirePathBelowBlock","onAdd","entry","getPreviousNode","prevNode","insertNodes","ELEMENT_PARAGRAPH","select","onPlus","openSlashMenu","onCopyHref","url","URL","window","location","toString","hash","copyToClipboard","onShowHide","a","onMouseDown","nodePath","showLine","length","isHidden","EditorBlock","alwaysWritableElementTypes","suppressContentEditableWarning","isSelected","dragSource","isBeingDragged","has","isFlagEnabled","selectedBlock","selection","selectedNode","getNode","getEndPoint","focusEditor","currentLine","isParagraph","nextNode","getNextNode","nextPath","insertText","initialGroups","variableNameColumn","resultColumn","blockTypes","Set","BlockLengthSynchronizationProvider","measuredLengths","Map","targetWidths","setTargetWidths","updatedLength$","Subject","editorChange$","EditorChangeContext","sub","pipe","debounceTime","mergeWith","of","editorChildren","groups","inGroup","block","memberIds","push","getContiguousGroups","distinctUntilChanged","cur","next","dequal","combineLatestWith","ret","lengthsPerGroup","groupName","Object","keys","lengths","flatMap","get","Math","max","set","getNewGroupsTargetLengths","current","subscribe","unsubscribe","setMeasuredLength","group","blockId","delete","setIn","context","useMemo","NameSyncContext","Provider","createSelectableContext","BlockLengthSynchronizationReceiver","syncGroupName","topLevelBlockId","alignment","useSelectableContext","targetLengths","rest","measurableRef","report","getBoundingClientRect","observer","ResizeObserver","observe","disconnect","display","justifyContent","style","ensureSelectionHack","force","hackSelection","offset","isSelectionInsideBlock","operation","newFocus","newProperties","newAnchor","focusRoot","properties","anchorRoot","cancelSetSelectionOperation","trackArrowKeys","tracker","arrowKeyUsed","document","removeEventListener","onWindowKeyDown","startsWith","setTimeout","addEventListener","FocusStatus","useFocusControl","editing","closeEditor","focusState","setFocusState","None","useWatchTeleported","elementId","useSelection","isTeleported","codeLineId","shouldBeFocused","isInsideBlock","shouldBeBlurred","Focused","shouldPreventArrowKeys","shouldPreventDeletion","shouldPreventJumpingOut","apply","useSelectionTrap","onPreventDeletion","shouldPreventBackspace","collapsed","isCollapsed","isAtBlockStart","preventDefault","stopPropagation","useDeletionTrap","Focusing","focusAndSetSelection","openEditor$","editorAnalytics$","TeleportEditor","portal","setPortal","setEditing","clientEvent","focusNumber","node","numberNode","focusCodeLine","codeLineNode","onClose","old","anyCodeLine","matchingCodeLine","onBlur","openEditor","useNodeText","options","setText","useEditorChange","newText","CLPlaceholders","useTextTypeInference","inferredType","setInferredType","kind","selectTextValue","inferAndSetType","newType","inferType","useOnBlurNormalize","targetNode","nodeToNormalize","normalizeNode","CodeLineFloat","offsetTop","cssAnim","setCssAnim","appearStyle","wrapperStyle","ev","codeLineStyle","instructionsStyle","position","left","top","zIndex","marginTop","cursor","transition","boxShadow","mediumShadow","CodeLinePlaceholder","height","onBringBack","linkStyle","p14Regular","opacity","border","alignItems","userSelect","DISMISS_KEYS","CodeLineTeleport","codeLine","onDismiss","onTeleport","isVisible","teleportRef","useWindowListener","includes","contentHeight","setContentHeight","codeLineRef","currentHeight","offsetHeight","canUseDom","useCanUseDom","editable","offsetY","createPortal","getSyntaxError","line","isSyntaxError","column","docs","page","name","$","isBracketError","bracketError","message","DRAG_INLINE_RESULT","onDragStartInlineResult","asText","result","onDragStartSmartRef","dragging","setSlateFragment","dataTransfer","setFragmentData","DRAG_TABLE_CELL_RESULT","onDragStartTableCellResult","data","formatted","formatNumber","asString","setDragImage","dropEffect","useCodeLineClickReference","useTurnIntoProps","lineId","symbol","getSymbolDefinedInBlock$","parseableType","getParseableTypeInBlock$","onTurnInto","variant","coercedKind","date","dateGranularity","expression","dateStr","split","trim","getElementExpression","withoutNormalizing","coerceToType","ELEMENT_CAPTION","ELEMENT_EXPRESSION","turnInto","getWidgetOptionByType","title","CodeLine","attributes","assertElementType","codeLineContent","debounceTimeMs","isEmpty","siblingCodeLines","useEditorChangeState","currentPath","ReactEditor","isNearbyVisibleCodeLine","p","Path","hasNext","match","hasPrevious","useSiblingCodeLines","syntaxError","lineResult","getBlockIdResult$","useWithSelector","onClickedResult","newDisplayElement","ELEMENT_DISPLAY","isReadOnly","handleDragStartCell","handleDragStartInlineResult","onDragEnd","useOnDragEnd","useEditorTeleportContext","teleport","turnIntoProps","onTeleportDismiss","aPlaceholder","floor","random","blockKind","highlight","placeholder","onDragStartCell","hasNextSibling","types","isStructuredElement","structuredInputContainerStyles","gridTemplate","childrenStyles","borderStyles","pos","gridArea","pointerEvents","right","borderTop","borderTopStyles","borderBotStyles","fadeLineStyles","side","maskImage","fadeLineTopLeftStyles","fadeLineTopRightStyles","fadeLineBotLeftStyles","fadeLineBotRightStyles","StructuredInputLines","lineHeight","codeBlock","highlightedLineStyles","borderColor","codeLineStyles","inlineStyles","variableNameContainerStyles","codeContainerStyles","setCssVar","borderLeft","canGrabStyles","animation","antiwiggle","wiggle","grabbingStyles","CodeLineStructured","variableNameChild","codeChild","grabbing","setGrabbing","freshResult","useResultInfo","inline","expanded","useDelayedValue","errored","spellCheck","grey400","draggable","onDragStart","varStyles","background","iconStyles","emptyStyles","formulaIconStyles","CodeVariableDefinition","isValue","empty","Icon","getTypeIcon","Formula","CodeLineV2","sourceCode","subValue","setIsValue","isCodeValue","parseExpressionOrThrow","childrenArray","Children","Error","prevElement","IsValueContext","VarResultContext","createContext","CodeLineV2Varname","ELEMENT_STRUCTURED_VARNAME","varResult","errorMessage","useEnsureValidVariableName","Tooltip","trigger","unit","open","CodeLineV2Code","ELEMENT_CODE_LINE_V2_CODE","wrapperStyles","triggerStyles","fontSize","minHeight","textWrapperStyles","DisplayWidget","dropdownContent","openMenu","onChangeOpen","setSelectedId","ArrowOutlined","p32Medium","CodeResult","Caret","AutoCompleteMenu","identifiers","item","identifier","onExecuteItem","i","Display","setOpenMenu","loaded","setLoaded","focused","useFocused","userEvents","changeBlockId","changeVarName","res","useResult","safeDelete","onCopy","copy","serializeHtml","nodes","format","namesDefined","getNamesDefined$","names","values","filter","resultsWithNoName","getSymbolDefinedInBlock","codelineResult","codeline","c","ELEMENT_SMART_REF","allResults","isHorizontal","hasLayoutAncestor","_","monitor","horizontal","getItemType","vertical","direction","defaultMoveNode","Editor","dragPath","findNode","dropPath","wrapIntoColumns","moveNodes","to","changeResult","newRes","find","VariableEditor","selectedId","importWrapperStyles","Import","fetching","Spinner","CodeError","valueToString","fmt","Date","Number","cellType","dataRows","table","it","rows","columnTypes","hasMoreData","cells","col","colIndex","ELEMENT_TD","ELEMENT_TR","importTable","insertPath","tableResult","t","meta","ELEMENT_TABLE_CAPTION","ELEMENT_TABLE_VARIABLE_NAME","varNamify","columnNames","columnName","columnIndex","ELEMENT_TH","tableElement","ELEMENT_IMPORT","fetched","setFetched","setFetching","setError","setResult","imported","tryImport","source","maxCellCount","firstImported","err","computerResult","formatError","errorCause","styles","gridTemplateColumns","columnGap","clipPath","textStyles","soonStyles","p8Medium","titleStyles","p14Medium","descriptionStyles","p12Regular","disabledStyles","enabledStyles","blackFontStyles","InlineMenuItem","icon","description","enabled","onExecute","testId","itemRef","onKeyDown","shiftKey","scrollIntoView","behavior","role","p13Medium","itemsStyles","InlineMenuGroup","child","maxHeight","overflowX","overflowY","transparency","offBlack","rgba","content","InlineMenu","search","groupsWithItemsFiltered","items","matchingItems","toLowerCase","command","extraSearchTerms","some","term","matchingCommands","focusedCommand","setFocusedCommand","firstMatch","indexOf","slice","SlashCommandsMenu","menuGroups","FormulaSlash","Calculations","TableSlash","DataView","Chart","Input","I","Toggle","DatePicker","Slider","Result","Dropdown","CodeBlock","Heading1","Heading2","Callout","Blockquote","Divider","Sketch","sourceToName","decipad","csv","gsheets","json","arrow","sourceName","ppSource","pluralize","toLocaleLowerCase","ConnectRanges","ConnectTable","ImportRangeCopies","ImportTable","Boolean","ImportFromLinkMenu","drawDummyElement","ELEMENT_FREEDRAW","points","pressures","__dummy","x","y","angle","strokeColor","fillStyle","strokeWidth","strokeStyle","roughness","groupIds","insertDrawBelow","newFocusPath","ELEMENT_DRAW","insertInputBelow","getVariantAndHolder","input","caption","getInitialInputElement","valuePath","valueEnd","valueStart","insertSliderInputBelow","ELEMENT_SLIDER","min","step","insertDisplayBelow","insertDropdownBelow","dropdown","ELEMENT_DROPDOWN","insertPlotBelow","ELEMENT_PLOT","sourceVarName","xColumnName","yColumnName","markType","thetaColumnName","sizeColumnName","colorColumnName","insertTableBelow","findSlashCommand","findInlineSlashCommand","standalone","findStandaloneSlashCommand","isInline","deleteFragment","exec","slashCommand","justInsertLiveData","async","docId","docIdMatch","getDefined","pathname","decodeURIComponent","getURLComponents","hasAccess","exists","isPublic","resp","fetch","encodeURIComponent","notebookId","status","notebook","getNotebook","liveConnEl","ELEMENT_LIVE_CONNECTION","isFirstRowHeaderRow","columnTypeCoercions","ELEMENT_LIVE_CONNECTION_VARIABLE_NAME","insertLiveConnection","_url","identifyIslands","blockPath","nextBlock","imports","Promise","all","imp","sourceUrl","paragraphEl","italic","timeout","then","insertLiveConnectionToGsheets","useInteractiveMenu","showInteractionMenu","setShowInteractionMenu","interactions","useEditorUserInteractions","interaction","useObservable","interactionsSource","useEditorUserInteractionsContext","lastInterestingUserInteraction","setLastInterestingUserInteraction","isInteractionOfType","cleanupAfterCommand","inter","textAfterUrlRemoval","toast","useToast","onInteractionMenuExecute","selBefore","fetchEl","insertImport","InteractiveParagraph","paragraphElement","showSlashCommands","menuRef","elementPath","slashMenuSuppressed","setSlashMenuSuppressed","selectionFocus","shouldJumpToEnd","endPoint","useSlashMenu","insertStructuredCodeLineBelow","insertCodeLineBelow","insertDataViewBelow","insertBlockOfTypeBelow","ELEMENT_FETCH","ELEMENT_H2","ELEMENT_H3","insertDividerBelow","ELEMENT_HR","ELEMENT_CALLOUT","ELEMENT_BLOCKQUOTE","ELEMENT_EVAL","deleteText","requireBlockParentPath","execute","bind","drawStyles","excalidrawContainerStyles","blue300","blue200","canvas","mixBlendMode","excalidrawReadOnlyStyles","ExcalidrawElementWithRef","ExcalidrawElement","Draw","draggableBlock","Draggable","excalidrawRef","elements","onChange","onInteractingChange","appState","onExcalidrawChange","newElements","newAppState","draggingElement","editingElement","editingLinearElement","resizingElement","inferInteracting","darkTheme","useThemeFromStore","stopClickPropagation","draggableCss","excalidrawProps","gridModeEnabled","zenModeEnabled","viewModeEnabled","initialData","theme","THEME","UIOptions","canvasActions","export","clearCanvas","loadScene","saveToActiveFile","saveAsImage","changeViewBackgroundColor","notDeleted","isDeleted","unfixElement","hasOwnProperty","__text","fixElement","_elem","elem","findRemoved","elementsBefore","elementsAfter","deletedIds","elBefore","reverse","foundElement","findAdded","added","elAfter","diffElements","elementBefore","elementAfter","version","diff","invariant","entries","valueAfter","findModified","modified","findElementsDiff","removed","applyElementsDiffToEditor","parent","elementsDiff","m","voids","setNodes","modifyModified","newElementPath","addAdded","childrenCountAfter","r","removeRemoved","useApplyUserChanges","updateScene","updating","isInteracting","elementRef","needsUpdate","onDebouncedUserChange","useDebouncedCallback","fixElements","nextElements","lastUserValue","onUserChange","setIsInteracting","previousElements","excalidrawApi","previousEditorElements","applyElementsDiffToDrawing","newScene","extend","draw","useApplyEditorChanges","getResponsiveWidth","Div","FigCaption","plateButtonCss","floatingRootCss","floatingRowCss","floatingButtonCss","floatingInputCss","FloatingVerticalDivider","RemoveNodeButton","useEditorRef","FloatingInputWrapper","FloatingIconWrapper","FloatingMedia","pluginKey","isEditing","useFloatingMediaSelectors","useElement","rootStyles","resizableStyles","resizableSelectedStyles","figureStyles","captionStyles","captionTextareaStyles","borderStyle","resize","textAlign","handleStyles","handleSelectedStyles","handleLeftStyles","paddingLeft","marginLeft","handleRightStyles","paddingRight","marginRight","draggableStyles","imgStyles","imagePlaceholderStyles","imageLoad","resizableImagePlaceholderStyles","Image","floatingOptions","mediaFloatingOptions","handleComponent","as","onError","target","ELEMENT_IMAGE","MediaEmbed","provider","useMediaStore","urlData","providerPadding","youtube","vimeo","youku","dailymotion","coub","ELEMENT_MEDIA_EMBED","counterWrapperStyles","aspectRatio","normalOpacity","weakOpacity","black","white","strongOpacity","Counter","NumberCatalogHeading","headingLevel","href","numberCatalogListStyles","svg","ArrowDiagonalTopRight","NumberCatalogItem","undebouncedResult","baseSwatches","swatchesThemed","formatResultPreview","numberCatalogListItemStyles","transform","stroke","rgb","NestIndicator","p12Medium","alignSelf","dragHandleStyles","DragHandle","D","fill","span","boldOpacity","NumberCatalog","startCollapsed","setCollapsed","useEditorStylesContext","floatyStyles","hideOnPrint","numberCatalogMenuStyles","gridHeaderNumberCatStyles","borderBottomLeftRadius","borderBottomRightRadius","menuHeaderStyles","numberFontStyles","menuHeaderChevronStyles","Chevron","menuBodyStyles","getNumberCatalogItemComponent","smallestDesktop","p14Bold","acceptableNumberCatalogKinds","selectCatalogNames","searchNodeTypes","findParent","getParentNode","before","searchAbove","above","catalogItem","curr","parentNode","parentPath","parentIndex","findIndex","heading","insertAt","found","insertInOrder","insertAtIndex","toVar","setItems","editorChanges","catalog","reduce","catalogItems","concat","observeWithSelector","blockAlignment","wordBreak","activeStyles","isBlockActive","useIsBlockActive","defaultTextConversions","defaultConvertInto","callout","typography","gridGap","margin","iconWrapperStyles","saveIcon","saveColor","icons","IconPopover","onChangeColor","onChangeIcon","defaultColor","Heading","Link","ELEMENT_LINK","htmlProps","useLink","InlineNumber","calcId","shadow","useShadowCodeLine","editSource","containerStyle","selectedStyle","numberRef","brand700","ListItem","ListItemContent","p16Bold","Bold","InlineCode","Code","highlightStyles","boxDecorationBreak","webkitBoxDecorationBreak","backgroundImage","Highlight","Italic","resultBubbleStyles","formulaHeaderStyles","expressionStyles","IntrospectMagicNumber","MagicNumber","tempId","loadingState","hasResult","noEffectOnClick","useEventNoEffect","tooltip","Loading","_text","exp","useEditorSelector","getAboveNodeSafe","Element","magicNumberId","useMagicNumberId","defBlockId","getVarBlockId$","getElementById","spoilerStyles","textShadow","milkIsSpoiledStyles","Spoiler","spoiled","isSpoiled","Strikethrough","Underline","gridAutoFlow","rowGap","counterReset","listItemCounter","counterIncrement","itemStyles","OrderedList","hotKeyStyle","boxSizing","slashKey","equalsKey","ParagraphPlaceholder","placeholderStyles","label","Paragraph","range","getRange","getRangeSafe","Range","showPlaceHolder","isElementEmpty","isSelectionExpanded","EditorTitle","Title","ELEMENT_H1","Depth","bulletStyles","justifySelf","alignContent","UnorderedList","depth","Bullet","dataView","ELEMENT_DATA_VIEW","expandedGroups","ELEMENT_DATA_VIEW_CAPTION","ELEMENT_DATA_VIEW_NAME","ELEMENT_DATA_VIEW_TR","getInitialDataViewElement","newPath","findPath","_e","DEFAULT_AXIS","createStore","elementKinds","setDropLine","preview","useDragNode","selectedIds","blockSelectionSelectors","blockSelectionActions","getPath","canDrop","isOver","drop","useDrop","onDropNode","dragItem","getDirection","axis","collect","hover","onHoverNode","onChangeDropLine","didDrop","dragId","dropId","pathRefs","getNodeEntries","forEach","createPathRef","pathRef","unref","dragNode","analytics","getAnalytics","track","isOverCurrent","shallow","hoverBoundingRect","hoverMiddleY","bottom","clientOffset","getClientOffset","hoverClientY","hoverClientLeft","hoverClientRigt","plateDndStore","dataViewTableHeaderStyles","alignRightStyles","globalStyles","DataViewTableHeader","rowSpan","colSpan","onHover","alignRight","global","onMouseOver","onMouseOut","DataViewHeader","onChangeExpandedGroups","groupId","collapsible","handleCollapseGroupButtonPress","deselect","matchingGroupIndex","groupIsExpanded","resultWrapperStyles","FolderOpen","Folder","selectFontStyles","hoveredStyles","selectStyles","fontWeight","unselectedValueStyles","SelectInput","labelText","setValue","hovered","setHovered","Label","renderContent","VariableNameSelector","variableNames","selectedVariableName","onChangeVariableName","dataViewWrapperStyles","dataViewControlsStyles","halfSlimBlockWidth","round","editorLayout","wideToSlimBlockWidthDifference","gutterWidth","leftMargin","restWidthBlock","tableCaptionWrapperStyles","dataViewTableStyles","dataViewTableWrapperStyles","scrollbarWidth","msOverflowStyle","paddingBottom","whiteSpace","tableScroll","flexDirection","dataViewTableOverflowStyles","availableVariableNames","variableName","thead","addNewColumnComponent","setIcon","setColor","hideAddDataViewButton","VoidBlock","discardEvents","onPointerDown","dataViewMenuWrapperStyles","menuButtonStyles","iconTypeStyles","DataViewMenu","availableColumns","onInsertColumn","menuIsOpen","setMenuIsOpen","Add","MenuList","root","availableColumn","index","MenuItem","testid","onSelect","DataViewData","DataViewDataLayout","useDataViewActions","withPath","columnChanges$","setDataColumns","columns","headerRow","existingColumns","setColumnTypes","existingColumn","matchingDataColumn","columnPath","aggregation","withoutCapturingUndo","setVarName","clearColumns","onVariableNameChange","onMoveColumn","fromColIndex","toColIndex","headerRowPath","fromPath","toPath","serializedType","maybeRemoveFirstText","firstHeaderRowPath","firstHeaderRowChild","childLength","ELEMENT_DATA_VIEW_TH","onDeleteColumn","dataViewHeaderPath","asObservable","namesThatLookLikeTablesOnly","isTable","useSourceTableNames","tableNames","setTableNames","greaterOrEqualToZero","useDataView","tableName","setAvailableColumns","getAllColumns$","useAvailableColumns","sortedColumns","setSortedColumns","sortColumns","useSortColumns","selectColumnOrder","dataViewPath","columnRowEntry","columnRow","injectObservable","selectedAggregationTypes","th","generateSmartRow","aggregationTypes","previousColumns","parentHighlight$","firstColumn","elementType","ResultTransforms","generateGroups","parentGroupId","restOfColumns","sortMap","sortedFirstColumn","applyMap","sortedRestOfColumns","slices","contiguousSlices","subGenerateGroups","subGenerateSmartRow","start","end","atIndex","generatedHash","objectToBeHashed","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","from","Uint8Array","b","padStart","join","generateHash","isExpanded","groupColumns","hideSmartRow","slicePreviousColumns","selfHighlight$","BehaviorSubject","newGroups","expandable","sliceToGroup","layoutPowerData","rootGroups","totalGroup","generateTotalGroup","columnMap","newSortedColumns","getData","dataViewColumnHeaderStyles","borderBottom","borderBottomColor","borderLeftStyles","dataViewColumnHeaderSelectWrapperStyles","DataViewColumnHeader","availableAggregations","selectedAggregation","onAggregationChange","connectDragSource","connectDropTarget","hoverDirection","menuListOpened","setMenuListOpened","onTriggerClick","refs","borderRightStyles","translate","offsetWidth","Trash","itemTrigger","TriggerMenuItem","availableAggregation","capitalize","DataViewColumnHeaderRow","dataViewRowStyles","dataViewRowGlobalStyles","DataViewRow","hasTempChildren","tempChildren","traversalRowSpan","tree","rowspan","nSpan","assertDefined","traversalColSpan","pDepth","colspan","treeToTable","toArray","j","q","traversalToTable","DataViewDataGroupElement","Header","SmartCell","aggregationType","isFullWidthRow","groupLength","parentHover","setParentHover","selfHover","setSelfHover","isCellAlignRight","smartCellStyles","hoverCellStyles","labelStyles","emptyCellStyles","expressionFilter","previous","escapedValue","textify","columnType","totalAggregationExpressions","aggregator","columnAggregationTypes","agg","maybeAggregate","sum","expressionResultFromText$","EMPTY","DRAG_SMART_CELL","onDragStartSmartCell","dataGroups","resolvedDataGroups","setResolvedDataGroups","useDataViewLayoutData","cols","row","maxCols","isFullWidth","isBeforeFullWidthRow","elementIndex","normalizeDataViewPlugin","wrapNodes","normalizeDataViewElement","childPath","getChildren","byId","ELEMENT_TABLE_COLUMN_FORMULA","columnId","normalizeDataViewHeaders","createDataViewPlugin","createPluginFactory","component","saveExpandedGroups","wideTable","onBlockDelete","plugins","getAboveNode","onAddDataViewButtonPress","getNodeChild","EditableTableCaption","showToggleCollapsedButton","isVoid","connectDragPreview","_editor","useDrag","useDragColumn","getNodeEntry","columnHeaderRef","setHoverDirection","swapCtx","overDirection","getHoverDirection","columnItem","findSwappableColumns","useDropColumn","isFirstChild","handleColumnDelete","getColumnNameDefinedInBlock$","createNormalizerPlugin","acceptableElementProperties","acceptableSubElements","plugin","createEventInterceptorPluginFactory","elementTypes","interceptor","noopPromise","resolve","DECORATION_EXPRESSION_SYNTAX","getPoint","currentOffset","mutateText","converge","d","difference","distance","defaultWidgetConversions","createStructuredCodeLine","VariableEditorContext","useVariableEditorContext","VariableEditorContextProvider","VariableDef","onChangeMax","onChangeMin","onChangeStep","onChangeSmartSelection","onChangeTypeMutator","onChangeType","subVar","smartSelection","onChangeValue","nameWrapperStyles","flexShrink","overflow","placeholderOpacity","p13Regular","Caption","isEditable","nodeText","oldStr","hoverOnly","baseWrapperStyles","expressionInputStyles","focusedExpressionInputStyles","p24Medium","lineStyles","errorContainerStyles","Expression","inputRef","scrollLeft","getPlaceHolder","parseError","showParseError","useDelayedTrue","leafStylesByTokenType","number","ws","CodeSyntax","leafStyle","leaf","tokenType","sliderWrapperStyles","sliderStyles","trackStyles","flexGrow","rangeStyles","brand400","thumbStyles","grey700","onFocus","onCommit","colorName","onValueChange","onValueCommit","useTPlateEditorRef","selectElement","newValue","allowableVariant","createNormalizeVariableDefPlugin","createNormalizerPluginFactory","isElementOfType","newOptions","changed","op","num","createMigrateElementInputToVariableDefPlugin","DEPRECATED_ELEMENT_INPUT","replacement","inputElement","syntaxDecorations","ranges","tokenToRange","token","withTokenToRange","tokenize","withErrorDecorations","isExpression","expressionFromEditorSource","getSyntaxErrorRanges","createNormalizeSliderPlugin","isNaN","unwrapNodes","isSlider","createSliderExpressionSyncPlugin","createOverrideApplyPluginFactory","sliderNode","sliderPath","expressionEntry","expressionNode","expressionPath","parseNumberWithUnit","sliderEntry","mainStyles","WidgetDisplay","allowOpen","showMenu","dropdownOpen","setDropdownOpen","setColumns","editorChanges$","allColumn$","dropdownIds","elementChangeOptions","elementChangeColumn","addOption","newOption","changeOptions","removeOption","removeOptionn","onEditOption","newV","v","newOps","selectedColumn","otherItems","colValues","Table","DropdownMenu","setOpen","onRemoveOption","createNormalizeCaptionPlugin","normalizeIdentifierElement","createNormalizeExpressionPlugin","createVariableDefPlugin","deserializeHtml","rules","validNodeName","validAttribute","getAttribute","isLeaf","decorate","filterDecorate","memoizeDecorate","syntax","varDef","decorateExpression","setSelectionNext","doesSelectionAllowTextStyling","allowsTextStyling","getPathContainingSelection","autoformatBlocks","mode","query","requireCollapsedSelection","triggerAtBlockStart","insertStructuredCodeLineBelowOrReplace","getTrailingImage","textPotentiallyEndingWithImage","unified","remarkParse","parse","visit","image","startOffset","alt","getTextBeforeCursorWithTrigger","getEditorString","autoformatImages","allPass","insertImageBelow","getTrailingLink","textPotentiallyEndingWithLink","link","textStartOffset","textEndOffset","substring","autoformatLinks","autoformatLists","ELEMENT_LI","toggleList","ELEMENT_UL","ELEMENT_OL","autoformatMarks","MARK_BOLD","MARK_ITALIC","MARK_UNDERLINE","MARK_STRIKETHROUGH","MARK_CODE","MARK_HIGHLIGHT","MARK_MAGICNUMBER","MARK_SPOILER","disableCodelineFormatting","someNode","rulesForbiddenInCodeLines","autoformatPunctuation","autoformatArrow","rule","autoformatRules","components","ELEMENT_LIC","exitBreakOptions","hotkey","allow","resetBlockTypesCommonRule","defaultType","resetBlockTypeOptions","predicate","isBlockAboveEmpty","isSelectionAtBlockStart","events","notebookTitle","onNotebookTitleChange","createPlugins","createParagraphPlugin","createBlockquotePlugin","createHeadingPlugin","levels","createListPlugin","createCalloutPlugin","createDividerPlugin","createDisplayPlugin","createNotebookTitlePlugin","createLayoutColumnsPlugin","createNormalizeEditorPlugin","createNormalizeVoidPlugin","createNormalizeRichTextBlockPlugin","createNormalizePlainTextBlockPlugin","createNormalizeCodeBlockPlugin","createNormalizeCodeLinePlugin","createNormalizeListPlugin","createNormalizeLinkPlugin","createNormalizeImagePlugin","createNormalizeElementIdPlugin","createDeduplicateElementIdsPlugin","createNormalizeTextPlugin","createTrailingParagraphPlugin","createNormalizeColumnsPlugin","createDndSmartRefPlugin","createExitBreakPlugin","createSoftBreakPlugin","createResetNodePlugin","createDndPlugin","enableScroller","scrollerProps","strengthMultiplier","createDragOverCursorPlugin","createBlockSelectionPlugin","createSelectOnBackspacePlugin","createMarksPlugins","createLinkPlugin","createImagePlugin","createMediaEmbedPlugin","createTAutoformatPlugin","createAutoFormatCodeLinePlugin","createImportPlugin","createLiveConnectionPlugin","createCodeVariableHighlightPlugin","createAutoCompleteMenuPlugin","createSyntaxErrorHighlightPlugin","createAutoPairsPlugin","createNavigationPlugin","createSmartRefPlugin","createEvalPlugin","createCodeLinePlugin","createCodeLineV2Plugin","createUpdateComputerPlugin","createPotentialFormulaHighlightPlugin","createTablePlugin","createPlotPlugin","createEditorApplyErrorReporterPlugin","createOperationsBlackboxPlugin","createDeserializeDocxPlugin","createJuicePlugin","createWithDocSyncHistoryPlugin","createUserEventPlugin","createSelectionShortcutPlugin","createRenderPerformanceStatsPlugin","createPersistSelectionPlugin","createDrawPlugin","createRemoteCursorsPlugin","createEventInterceptionSuperHandlerPlugin","createMigrateStructuredInputs","useEditorPlugins","configuration","needsSpaceAfter","character","getCharacterBeforeCursor","compareNames","isLocal","localNamesFirst","sort","selectNames","getBuiltinsForAutocomplete","AutoCompleteWrapper","variableInfo","word","menuSuppressed","setMenuSuppressed","showAutoComplete","onGlobalKeyDown","characterBefore","Transforms","commitAutocompleteItem","createTPluginFactory","withOverrides","prevInterceptor","interceptEvent","editorParam","EXPECTED_ELEMENT_PROPERTIES","withNormalizerOverride","myEditor","getMyEditor","newNormalize","removeUnacceptableElementProperties","acceptable","acceptableSubElementNames","isNotAcceptableSubElement","propertiesToRemove","unsetNodes","removeIndex","removePath","withRemoveUnacceptableElementProperties","acceptedTypes","createOnKeyDownPluginFactory","handlers","overrideApply","pluginName","store","pluginStore","lastFormattedBlock","hasModifiers","ctrlKey","altKey","metaKey","getBlockAbove","oldText","paragraphPath","paragraph","textBefore","getTextBeforeCursor","autoVarName","newCodeLine","codeTextPath","endsWith","commitPotentialFormula","expressionRange","codeLineBelow","magicNumberInstead","getExprRef","viewInstead","currentBlockEnd","domNode","toDOMNode","dataNode","querySelector","numberId","dataset","pairs","parentEntry","cursorOffset","acc","activePair","pair","isAtEndOfLine","moveSelection","endPair","startPair","_createBlockSelectionPlugin","renderAboveEditable","getBoundaries","placement","size","inject","aboveComponent","cleanString","str","JSON","stringify","deserializeCalloutHtml","swatchNames","userIconKeys","innerText","deserializeCodeLineHtml","createCodeLine","nodeName","toUpperCase","serializeCodeLineHtml","onDropCodeLine","selectEventRange","fragment","getSlateFragment","filteredFragment","blockAbove","variable","getVariableRanges","isDeclaration","isDefined","pointBefore","getPointBefore","pointAfter","getPointAfter","insertFragment","isEditorFocused","onDropInlineResult","onDropSmartCell","cellValue","onDropTableCellResult","normalizeInsertNodeText","replaceAll","normalizeCodeLineSpace","normalizeEdge","firstPoint","secondPoint","isRangeAcrossBlocks","char","test","lastPoint","applyCodeLineSelection","insideCodeLine","getNodeChildren","lineChild","lineChildNode","lineChildPath","equalIndex","doubleEquals","charAfter","withCodeLine","onKeyDownCodeLine","findCodeLineParentEntry","shouldSoftBreak","_entry","cursorStart","codeLineEntry","nText","tok","STATEMENT_SEP_TOKEN_TYPE","filterStatementSeparator","nodeEntry","codeLineEnd","jumpToCodeLineEnd","decorateCode","baseProps","basePropsFor","assertElementOrText","normalizeExcessProperties","allowedPropKeys","propKeys","getNodeProps","basePropKeys","excessPropKeys","normalizeCodeChildren","_node","charIndex","charBefore","normalizeSmartRefs","normalizeCodeLine","normalizePlainTextChildren","childEntry","childNode","createNormalizeCodeLineCodePlugin","createSelectionContainmentPlugin","elType","prevOnChange","selectionFixerTimerHandle","clearTimeout","anchorEntry","focusEntry","createStructuredKeyboard","variableScope","vars","local","getVariableScope","visibleVariables","variableMissing","provideVariableDefLink","goToDefinition","slateNode","toSlateNode","onGoToDefinition","deserializeDividerHtml","surroundWithPlusSigns","precedingText","followingText","hypotheses","textAfter","last","onDropSmartRef","DRAG_SMART_REF","DRAG_BLOCK_ID_CONTENT_TYPE","getCollapsedSelection","blockAbovePath","myBlockIndex","blocksBefore","blocksAfter","blockItself","getText","blocks","findTextBeforeAndAfterPoint","insertSmartRef","cursorStore","cursors","onDragOver","findEventRange","drag","onDragLeave","LoadingIndicator","EditorElementPlaceholder","useLockEditorWriting","lazyElementComponent","factory","LazyElementComponent","lazy","Suspense","LazyDraw","history","shift","pushOp","call","captureException","extra","EvalCodeArea","containerStyles","evalUnsafeCodeDebounced","evalUnsafeCode","evalPluginCore","unsafeCode","updateResult","expr","catch","_computer","isCursorAtBlockEdge","edge","cursorPath","leafNodeInCollapsedSelection","nonLeafElement","Point","isEditor","onKeyDownCapture","topLevel","ancestors","ELEMENT_COLUMNS","findClosestBlockOrColumn","getNodeParent","prevBlock","activeElement","tagName","bubbleCancelableEvent","interceptableEvent","bubbleAt","elementsBubblePath","gql","ExternalProvider","PermissionType","withImportOverrides","insertData","isImportable","isImportUrl","LazyImport","flexBasis","EditorColumns","disableDrag","IconWrapper","InputWrapper","inputCss","floatingLinkRootCss","VerticalDivider","buttonCss","iconButtonCss","FloatingLink","useFloatingLinkSelectors","editContent","_createLinkPlugin","renderAfterEditable","tagStyles","Tag","explanation","tooltipTrigger","editableLiveCaptionStyles","marginBottom","tableTitleWrapper","lineBreak","iconSvgStyles","editableTableCaptionStyles","notSelectedAriaStyles","EditableLiveDataCaption","rel","textTransform","LazyLiveConnection","returnRange","parentUrl","sourceParams","parseSourceUrl","userUrl","isRange","subsheetName","formattedRange","rangeExplanation","removeMagicNumberInput","findMagicNumberInput","getPluginType","isMagicNumber","createNormalizeMagicNumbersPlugin","firstChild","lastChild","createMagicNumberCursorPlugin","onSelectionChange","createMagicCursorKeysPlugin","beforeNode","beforePath","beforeBefore","after","afterNode","afterPath","afterAfter","afterAfterNode","afterAfterPath","createMagicNumberPlugin","deleteBackward","deleteForward","currentMentionInput","createInlineNumberPlugin","ELEMENT_INLINE_NUMBER","createSpoilerPlugin","withHotkeyRestrictedToAllowedBlocks","pi","createBoldPlugin","createItalicPlugin","createUnderlinePlugin","createCodePlugin","createStrikethroughPlugin","createHighlightPlugin","_createImagePlugin","disableUploadInsert","insertMediaEmbed","_createMediaEmbedPlugin","parser","ELEMENT_STRUCTURED_IN_CHILD","getCodeLineText","incrementLastElementOfPath","clonePath","sel","plateSetSelection","getOffsetFromPoint","codeBlockPath","codeBlockIndex","codeLineTextPath","getOffsetFromPath","getPointFromOffset","lineText","getSelectionFromOffsets","offsets","cloneSelection","reinstateCursorOffsets","reconcileByMergingWithNext","codeLinePath","expectedStatement","nextCodeLinePath","currentCodeLine","mergeNodes","reconcileCodeLineByMergingWithNext","reconcileLine","_expectedStatement","childText","nextLineText","newNode","reconcileBySplitting","needsReconciliation","reconcileStatements","statements","childIndex","statementIndex","getCodeBlockOffsets","expectedText","splitSeparationTokenText","hadNewLine","DEPRECATED_ELEMENT_CODE_BLOCK","blockChild","blockChildNode","blockChildPath","blockCode","codeBlockToCode","pending","resultStatements","beforeAndAfter","beginning","statement","splitCodeIntoStatements","liftNodes","blockEntry","blockNode","allowedTopLevelBlockTypes","scanIds","add","done","newId","log","licChild","listChild","furtherChildren","licChildNode","licChildPath","listChildNode","listChildPath","furtherChildEntry","furtherChildPath","PLAIN_TEXT_BLOCK_TYPES","ALLOWED_CHILD_TYPES","RICH_TEXT_BLOCK_TYPES","markKinds","VOID_TYPE_PROPERTIES","DEPRECATED_ELEMENT_TABLE_INPUT","emptyString","MISSING_ATTRIBUTE_GENERATOR","tableData","colorScheme","addMissingProperties","mandatoryPropKeys","missingPropGenerator","presentPropKeys","newProps","normalizeMissingProperties","removeExcessProperties","removeBadChildren","onNotebookTitleChangeDebounced","debounce","lastNotebookTitle","newTitle","logsColor","debug","selectionStorageKey","selectionKey","storageKey","localStorage","setItem","getPersistedSelection","encodedSelection","getItem","warn","LazyPlot","acceptableOperators","findPotentialFormulas","locs","allTokens","errorProofTokenize","followsWhitespace","skipAssignments","skipPrefixes","latestGood","formulaEndFinder","isPotentialFormula","tokens","isBasicStatement","unitName","wantedQuantities","getUnitByName","baseQuantity","superBaseQuantity","isAcceptableUnit","ident","every","plain","withBinopSatisfier","restTok","allMarks","decoratePotentialFormula","DECORATE_POTENTIAL_FORMULA","activateStyles","tabKeyStyles","grey500","grey600","tooltipContentStyles","PotentialFormulaHighlight","tooltipOpen","useIsPotentialFormulaSelected","decoration","parentSelected","setSelected","cursorPos","leafStart","leafEnd","isPotentialFormulaSelected","afterCommit","inlineNumberInstead","isReadonly","entriesGen","isBlock","getEntries","addBreadcrumb","timestamp","now","SmartRef","symbolName","hasPreviousContent","hasNextContent","CodeVariable","isSmartRef","createSmartRefKeysPlugin","smartRefPoint","siblingContent","previousNode","previousStr","previousElement","nextStr","nextElement","mutateLastSeen","getSymbolOrColumnName$","lastSeenVariableName","symbolName$","debouncedSymbolName","isHotkey","byKey","queryNode","getSoftBreakOnKeyDown","exclude","SyntaxErrorHighlight","errorsVisible","hideError","DECORATE_SYNTAX_ERROR","compute","pushCompute","editorToProgram","redo","editorParent","currentNode","getLastNodeByLevel","lastChildNode","exitBreak","level","queryEdge","isEdge","isStart","isSelectionAtBlockEnd","exitBreakAtEdges","selectionPath","stats","deci","showStats","stat","totalRenderCount","totalTimeμs","totalTimeMs","averageRenderTimeμs","maxRenderTimeμs","maxTimeMs","clear","schedule","awareness","on","newCursorData","getStates","clientId","sharedType","doc","clientID","cursorColor","_backgroundColor","setSelectionFullText","ALLOWED_ELEMENTS","anchorPath","anchorOffset","shortcut","getShortcut","getFirstNode","getLastNode","newRange","needsDeduping","seenIds","insertNeedsDeduping","info","lookForId","elementsNeedingDedup","elementPos","splice","removeNeedsDeduping","eval","promise","DRAG_SMART_CELL_RESULT","onDragSmartCellResultStarted","SmartRow","smartCells","smartCell","aggregationTypeNames","onAggregationTypeNameChange","selectedAggregationTypeName","inlineResultStyles","textOverflow","smartColumnCellStyles","SmartColumnCell","aggregationTypeMenu","selectWrapperStyles","menuListWrapperStyles","selectButtonStyles","Select","caretColor","opened","setOpened","o","itemAlignment","tablePath","selectedAggregationType","setSelectedAggregationType","availableAggregationTypes","useColumnAggregationTypes","aggType","columnRef","onDragExpressionStart","shortName","findColumnAndDragItem","dragItemCell","cell","findColumnByCell","TableDndProvider","useTableActions","columnDropLine","setColumnDropLine","tableDndContextValue","onCellHover","dnd","thPath","focusEditorForColumnDnd","onCellDrop","onCellDragEnd","TableDndContext","onAddRow","onAddColumn","onChangeColumnAggregation","onSetCollapsed","onSetHideFormulas","onSaveColor","onSaveIcon","selectedCells","useTableStore","setSelectedCells","cellEntries","getTableGridAbove","useSelectedCells","headers","rowCount","useTable","contextValue","cellTypes","columnBlockIds","EditorTable","hideFormulas","tableWidth","isSelectingCell","hiddenRowCount","smartRow","h","TableCaption","columnCount","useTableColumnCount","varNameElement","isForWideTable","TableRow","TableStyleContext","MAX_UNCOLLAPSED_TABLE_ROWS","tableEntry","onRemoveRow","trRef","useDndNode","useTableRowStore","setRowWidth","rowWidth","rowObserver","React","rowEntries","rowEntry","contentRect","currentRef","TableHeaderRow","onRemove","rowPath","selectRow","tableDnd","dragPreview","DRAG_ITEM_COLUMN","createElement","captureDraggingState","TableHeaderCell","nThChild","onChangeColumnType","onRemoveColumn","dropTarget","dropDirection","useColumnDropDirection","parseUnit","getUnitFromText","setCols","mutateDropdownType","selectedDropdown","useColumnInferredType","TableColumnHeader","isFirst","onSelectColumn","cellPath","tableNode","selectColumn","draggingOver","dropdownNames","RowDropLine","dropLineWidth","DropLine","TableCell","useIsCellSelected","hoveredRowId","setHoveredRowId","hoveredRowBottomId","setHoveredRowBottomId","isRowHovered","isLastRow","isLastRowHovered","isLastColumnPerRow","formulaResult","useTableColumnFormulaResultForCell","useCellType","isColumnSelected","useIsColumnSelected","isSeriesColumn","disabled","hasText","isSoleNumber","formatUnit","getImperativeParseError$","parseErrorMessage","forceAlignRight","setForceAlignRight","dropdownResult","getVarResult$","dropdownOptions","NewElementLine","onMouseEnter","onMouseLeave","addRowFromCell","cellElement","show","tableAdditionalProps","isLastColumn","ColumnDropLine","FormulaTableData","resultType","firstChildren","TableData","isUserContent","TableColumnFormula","header","useTableColumnHeaderOfTableAbove","typeErrorResult","selectTypeErrors","showTooltip","Node","blockResult","createAtomStore","scope","addColumn","body","getColumnName","_row","rowIndex","addRow","elementCount","emptyCells","newRow","onChangeColumnName","newColumnName","columnHeaderPath","changeColumnType","columnHeaderId","cellToDeletePath","fromIndex","toIndex","sourcePath","targetPath","headerElement","headerPath","getColumnDropDirection","useElementAbove","setType","inferColumnType","inferColumn","columnData","columnEnded","dataPath","collectColumnData","userType","settleType","tableCell","selectedPath","selectedTablePath","selectedSubTablePath","collectColumnsData","setTypes","inferColumnsTypes","columnsData","headerCells","settleColumnTypes","settledColumnTypes","useColumnsInferredTypes","useTableColumnFormulaResultForColumn","normalizeTableFormula","firstRow","formulas","headersWithFormulas","columnIdToHeader","formula","formulaPath","createNormalizeTableFormulaPlugin","getBlankCell","isHeader","normalizeSeriesColumn","restRows","firstCell","firstCellContent","granularity","parseSeriesStart","seriesType","cellId","imperativelySetParseError","hasImperativelySetParseError","imperativelyUnsetParseError","series","seriesIterator","cellEl","existingText","selectionBefore","normalizeTableFormulaAndSeries","tr","tableIsSquare","formulaColIndices","didTransform","enumerate","newCellPath","newCell","cellIndex","tdPath","normalizeFormulaColumns","_ths","ths","normalizeSeriesColumns","createNormalizeTableFormulaAndSeriesCellsPlugin","createTableCaption","convertLegacyType","normalizeTableHeaderCell","replaceWith","insert","newCellType","normalizeTableDataCell","normalizeTableDataRow","normalizeTable","normalizeTableStructure","captionChildIndex","captionChild","captionChildNode","captionChildPath","varNameText","normalizeTableCaption","thIndex","normalizeTableHeaderRow","normalizeTableDataRows","rowChildCount","deleteAt","normalizeTableRowColumnCount","firstDataRowPath","normalizeTableRowCount","normalizeTableInput","restOfTableColumns","firstColumnCell","rowCells","rowCell","tableHeader","tableFromLegacyTableInputElement","createNormalizeTablesPlugin","createPreventEnterToCreateCellPlugin","createPreventDestructiveDeleteOnTablePlugin","isInsideTable","isInsideTableColumnFormula","avoidActionAtPoint","createCellFormulaShortcutPlugin","getTablePathFromCell","onDropSmartCellResult","createEmptyTableHeaderCell","withTable","withDeleteTable","withGetFragmentTable","withInsertFragmentTable","withInsertTextTable","withSelectionTable","unshift","onKeyDownTable","onKeyDownTablePlate","insertColumn","fromCell","insertRow","fromRow","createCursorFocusPlugin","attributeNames","nodeProps","_1","PLUGIN_KEY","focusCursorOnPath","columnColumnElement","formulaElement","findTableFormulaPath","counter","textResult","tableCaptionPath","newFormulaPath","maybePreviousPath","headerId","maybePreviousNode","boolean","colRef","colDef","string","getColumnNames","createProposal","proposal","hoverMiddleX","hoverClientX","sourceColumnIndex","targetColumnIndex","swappableColumns","colHeaderElements","idx","colIdx","_p","DECORATE_CODE_VARIABLE","DECORATE_AUTO_COMPLETE_MENU","topLevelBlockKinds","getTEditor","usePlateEditorRef","useTPlateEditorState","usePlateEditorState","createTPlateEditor","createPlateEditor","defaultPlugin","override","overrideByKey","createAutoformatPlugin","elementKindsModule","freeze","blockParentPath","getBlockParentPath","closestBlockAncestorHasType","isBlockEmpty","isNotExpreRef","isExprRef","memoizeDecorateWithSelection","syntaxErrorDecorations","variableDecorations","variableRanges","autoCompleteMenuDecoration","varRange","getVariableUnderCursor","cursorInsideVariable","nodeId","getRootNodeId","sourceString","getCodeLineSource","sourceStrings","firstDeclarationFound","varPath","varRanges","vr","subNodes","sn","subNodeCoords","decorations","subNode","simpleRangeToSubNodeRange","decoded","atob","hasBracketError","close","getUsedIdentifiers","elementsFrom","plateInsertNodes","cache","WeakMap","dedupeKey","cacheEntry","decoratorRet","RegExp","identifierRegExpGlobal","getNamesDefined","namesToIds","fromEntries","idsToNames","handleSmartRefNode","handleTextNode","curName","nextEntry","nextNodeStr","fullStr","identifs","isBeforeDot","textRange","replaceTextWithSmartRef","smartRef","setData","currentBlockPath","pluginStoreSymbol","Symbol","create","globalStore","defineProperty","writable","enumerable","editorStore","getPluginStore","pop","encoded","btoa","propName","sideEffects","mutation","defaultVarName","validationMessage$","useSlateOnBlur","currentVarName","varExists","variableExists","getVariableValidationErrorMessage","shouldRename","tentativeNewName","stripOffInvalidIdentifierCharacters","newName","useBehaviorSubject","hideMessageLater","variableValidationErrors","obs","switchMap","previouslySelected","requestDebounceMs","findFormulaCoordinates","columnBlockId","useColumnBlockId","getColumnResult","useEditorTableContext","fn","loadingKeyframes","keyframes","LoadingFilter","loading","EditorLayout","floatingButtonStyles","activeFloatingButtonStyles","FloatingButton","isActive","dividerStyle","ToggleMarkButton","divider","active","setActive","isMarkActive","className","getPreventDefaultHandler","toggleMark","offWhite","LinkButton","isLink","prevSelection","unwrapLink","triggerFloatingLink","iconWrapper","toolTipMarks","floating","floatingToolbar","useFloatingToolbar","useEditorTooltip","CursorOverlay","remoteAvatarOverlayWrapperStyles","remoteAvatarOverlayStyles","mobileQuery","invisibleOnSmallScreens","RemoteAvatarOverlay","avatarSize","remoteAvatarStyles","shortAnimationDuration","RemoteAvatar","email","rightDisplacement","Avatar","isTopLevelBlock","_el","potentiallyWideElementTypes","containerRef","user","containerVerticalDisplacement","verticallyCenterOnBlock","cursorName","DndCellPreview","hiddenCounter","showPlaceholder","ColumnPreview","thEntry","tableCells","previewMode","DndColumnPreview","DndPreview","previewText","useDndPreviewSelectors","usePreview","itemType","buttonStyles","inactiveStyles","activeButtonStyles","revertChangesStyles","p13Bold","activeRevertChangesStyles","stateStyles","state","colours","foreground","getColour","saved","isOffline","NotebookState","revertChanges","canRedo","authed","CurvedArrow","CircularArrow","isSavedRemotely","setSaved","session","useSession","newSaved","setIsOffline","handleOfflineStatusChange","navigator","onLine","ok","useIsOffline","supportsAnimation","browser","useWriteLock","writeLockCount","setWriteLockCount","lockWriting","prevCount","locked","newCount","isWritingLocked","InsidePlate","useUndo","changeSubject","onRefChange","easing","defaultEasing","duration","defaultDuration","HTMLElement","autoAnimate","useAutoAnimate","disableCorePlugins","EditorPlaceholder","NoDocSyncEditorInternal","editorPlugins","initialValue","bold","N","multiplier","known","NoDocSyncEditor","request","fetchOptions","method","Referer","response","handleResponseError","contentType","statusCode","responseBodyString","responseBodyJson","HttpError","internalTryImport","importFromUnknown","restOptions","toInternalType","_type","ArrowType","errType","evaluateCell","tof","BigInt","getTime","evaluateData","numCols","getChildAt","importFromArrow","arrowTable","tableFromIPC","columnMeta","schema","fields","indexName","inferData","errorResult","importFromCsv","reject","parseCSV","cast","delimiter","relax_quotes","relax_column_count","skip_empty_lines","isDone","read","sheet","trimSheet","rowOrientedData","pivot","inferTable","doNotTryExpressionNumbersParse","importFromUnknownResponse","statusText","importFromUnknownJson","importFromUnknownUrl","importFromArray","arr","importTableFromObject","columnNameFromIndex","importTableFromArray","results","sameType","indexedBy","columnSize","obj","cohersion","parseBoolean","parseDate","providers","matchUrl","isProviderImportUrl","isRandomImportUrl","supportedPathTerminations","supportedContentTypes","contentTypeKey","hostname","import","getDataRangeUrlFromSheetAndIslands","sheetId","gid","sheetMeta","island","qs","encodeQuery","majorDimension","valueRenderOption","dateTimeRenderOption","subSheet","sheets","sheetName","sheetColumnName","firstCol","lastCol","lastRow","islandToRange","getDataUrlFromSheetMeta","subSheetName","getSheetMeta","metadataUrl","spreadsheetId","getSheetRequestDataFromUrl","sheetUrl","getSheetRequestDataFromApiUrl","hashMatch","getSheetRequestDataFromUserUrl","sumLength","handleGsheetsResponse","trimmedBody","loadAllSubsheets","importURL","loader","loadSheet","subsheet","subMeta","importedAt","sourceMeta","importGsheetIslands","findAllIslands","importOneGsheet","importGsheet","parseGsheetsSourceUrl","indexOfExclamationMark","getUserUrl","constructor","super","this","static","matrix","startValue","firstType","colName","dividend","abs","String","fromCharCode","parseInt","neighbourDiffs","partition","visited","sheetColumns","islands","extendIsland","extension","newCol","islandExtension","hasValue","pushNeighbourCells","stack","nextColIndex","nextRowIndex","exploreIsland","_col","makeIsland","newResults","islandToResult","columnIsNotEmpty","columnNeedsTrimming","alreadyHasData","trimTopRowCount","trimBottomRowCount","finalRowCount","trimmingNeeds","trimmer","finalTrimTopRowCount","finalTrimBottomRowCount","trimRowCount","trimmed","needsFillingAtTheBottom","trimColumn","createTrimmer","tn","coerceToBoolean","inferBoolean","coerced","granularityRank","year","month","day","hour","minute","second","millisecond","highestTimeSpecificity","highestG","highestGRank","gs","g","thisRank","combineFormats","formats","aElem","bElem","dayFormats","minuteFormats","secondFormats","dateFormats","specificity","allowedFormats","s","dateFormatsForSpecificity","spec","formatStrings","valueOf","coerceToDate","isValid","formatDate","inferDate","coerceToString","inferText","inferPlainNumber","inferNumber","containsNumber","expressionType","inferParseError","tryInferChain","inferResult","inferExpression","memoizeParams","isEqual","Computer","maxSize","memoize","params","mMemoize","lastType","coalesce","_newType","lastDateType","newGranularity","areUnitsConvertible","base","baseSize","toNumber","countDecimals","_n","parts","moreDecimals","fullNumber","toValue","columnValues","ZERO","decimalCount","fastNumber","useFirstRowAsHeader","withColumnNames","astNode","dateToAST","asDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","defaultLocale","parseCell","afterParse","inferred","parseResult","numberFormat","div","expressionResult","parsing","assertCellType","cellUnit","u","fixCellUnit","convertToMultiplierUnit","convertBetweenUnits","literal","formattedUnit","simpleFormatUnit","ast","parseBlock","unitToAST","getNullReplacementValue","parsedDate","dateGranularityToDateFnsDuration","years","months","days","hours","minutes","seconds","addDate","dateIterator","textifyBoolean","textifyDate","f","toFraction","textifyNumber","red100","red500","verticalAlign","messageStyles","urlStyles","bracketErrorMessage","detailMessage","defaultDocsMessage","dropStyles","leftDropStyles","rightDropStyles","dropLineCommonStyles","dropLineBlockStyles","dropLineTableStyles","dropLineVerticalStyles","defaultVerticalSpacing","spacingStyles","paddingTop","labelContainerStyles","hoveredBubbleStyles","bubbleStyles","baseLabelStyles","htmlFor","parentWrapper","tableStyles","tableReverseStyles","addElementLineWrapper","addElementLine","clicked","setClicked","hasSibling","spinnerWrapperStyles","spinnerStyles","circleStyles","strokeLinecap","strokeDasharray","strokeDashoffset","viewBox","cx","cy","tdBaseStyles","tdPlaceholderStyles","tableRowCounter","fontVariantNumeric","tdGridStyles","editableStyles","tdDisabledStyles","liveResultStyles","purple100","selectedStyles","focusedStyles","Component","isLiveResult","lastBeforeMoreRowsHidden","existingRef","tdRef","additionalProps","parentType","columnStyles","headerWrapperStyles","columnTypeStyles","childrenWrapperStyles","DropSourceAndTarget","dragHandleHighlight","thStyles","darkMode","TableHeader","getStringType","menu","showIcon","thRef","hiddenChildrenStyles","BooleanEditor","dateFormatsForType","unitStyles","showTimeInputForGranularity","DateEditor","_onChangeValue","dateFormat","dateFormatForGranularity","dateValue","customInput","showTimeSelect","showMonthYearPicker","showYearPicker","portalId","todayButton","timeClassName","dropdownPill","DropdownEditor","CellEditor","toggleOpened","wrapperRef","onGlobalClick","currentTarget","EditorComponent","goToDefStyles","p8Regular","CodeVariableTooltip","provideDefinitionLink","tooltipResult","TooltipResult","enableTooltip","localVarStyles","typeStyles","borderWidth","showMoreButtonWrapperStyles","TableButton","isInState","setState","captions","isExpandButton","handleClick","textToShow","TextAndIconButton","iconPosition","Eye","formulasDrawerStyles","FormulasDrawer","tableCaptionWideStyles","wideBlockWidth","tableCaptionSlimStyles","tableCaptionInnerStyles","tableTitleWrapperStyles","tableIconSizeStyles","p16Medium","formulaEditor","setHideFormulas","tableFormulaEditors","lineNumberWidth","tdCounterStyles","TableFormulaCell","tdLineStyles","noEditingStyles","isError","delayedResult","red600","tableControlWidth","gridStyles","TableCellControls","menuButton","importTableDragHandleStyles","mouseMovingOverTransitionDelay","tableRowStyles","draggingOpacity","regularBorder","invisibleTableRowStyles","tableCellControls","teal600","AutoCompleteMenuItem","Text","Calendar","function","AutoCompleteMenuGroup","footerStyles","resultStyles","matchBlockIdOrIdentifier","isResult","matchingIdentifiers","setMathingIdentifiers","newMatching","focusedItem","setFocusedItem","allItems","newFocusedItem","borderTopLeftRadius","borderTopRightRadius","gridTemplateAreas","codeStyles","bubble","expandedResultStyles","onOutputClick","isEmptyExpressionError","isTabularType","recursiveRowCount","tableLength","zip","ct","cv","liveTableWrapperStyles","liveTableOverflowStyles","liveTableEmptyCellStyles","TableResult","firstTableRowControls","showAllRows","setShowAllRows","allowsForLookup","tableRecursiveLength","isNested","hiddenRowsCount","defaultMaxRows","proportionOfTableToHide","showRowLength","Cell","tableParentStyles","tableWrapperStyles","tableOverflowStyles","handleSetShowALlRowsButtonPress","head","toTableHeaderType","isForImportedColumn","rowLabelStyles","cellLeftPaddingStyles","ColumnResult","labels","explainDimensions$","dimensionLength","unnestTableRows","matrixValue","labelInfo","indexesOfRemainingLengthsAreZero","productOfRemainingLengths","indexAtThisDimension","InlineColumnResult","columnValue","Fragment","RowResult","rowCellNames","rowCellTypes","InlineRowResult","RangeResult","rangeOf","numberResultStyles","NumberResult","fullResult","asStringPrecise","booleanResultStyles","BooleanResult","BooleanCheckboxSelected","BooleanCheckboxUnselected","DateResult","fullUTC","getUTCSeconds","getUTCMilliseconds","form","tz","DateTime","toUTC","toFormat","formatUTCDate","toISOString","DefaultFunctionResult","AnyResult","InlineCodeError","InferError","errorType","DefaultResult","InlineTableResult","getResultComponent","isDeciNumberInput","ResultComponent","DeleteWithDepsMenuItem","blockInfo","nextBlockIdToFix","usedInBlockId","blocksAffected","isDarkMode","purple700","purple300","boxShadowSpread","scaleUp","scaleTime","iterations","animate","Warning","deleteWithDepsWrapperStyles","deleteWithDepsMenuItemStyles","animationTwoColours","handleButtonStyle","eyeLabelStyles","handleStyle","plusStyle","BlockDragHandle","menuOpen","showEyeLabel","showAddBlock","onChangeMenuOpen","isHovered","setIsHovered","showAction","hideAction","setNotHovered","isThisBlockUsedInCalculations","showHidden","EyeLabel","showHideButton","Show","Hide","plusButton","Plus","Duplicate","Delete","totalSpaceWithGap","horizontalDropLineStyle","topDropLineStyle","bottomDropLineStyle","verticalDropLineStyle","leftDropLineStyle","rightDropLineStyle","hiddenEditorBlockStyle","hiddenFocusedStyle","setMenuOpen","BlockActiveProvider","BlockIsActiveProvider","dropLineEl","gridColumnGap","option","inputOptionStyles","DropdownOption","autoFocus","wrapper","SelectItem","isEditAllowed","setNewValue","editingError","setEditingError","keydown","onEdit","Edit","DropdownMenuGroup","isEditingAllowed","itemProps","inputValue","setInputValue","addingNew","setAddingNew","focusedIndex","setFocusedIndex","showInput","onOpenChange","hiddenStyles","AddTableRowButton","mouseOver","Create","scrollRightOffset","tableWrapperTransformStyles","tableWrapperDraggingStyles","tableWrapperDefaultStyles","tableAddColumnButtonWrapperStyles","tableAddColumnButtonStyles","visibility","mouseOverAddColumnButtonStyles","dropRef","tbody","tableStyleContextValue","setMouseOver","onAddColumnClick","draggingId","addTable","liveResultBorder","tableBaseStyles","borderCollapse","borderSpacing","tableLayout","td","borderRight","nestedStyles","readOnlyTableStyles","wideTableStyles","borderRadiusStyles","hiddenSelectionStyles","showAllRowsWrapperStyle","thinVeilAtTheEndStyles","showMoreWrapperStyles","ShowAllRows","animateBody","outerBorder","innerBorder","menuItemStyles","inputStyles","flex","initialState","reducer","UnitMenuItem","dispatch","useReducer","defaultValue","tableColumnMenuStyles","presentableCurrencyUnits","currencyUnits","pretty","sameUnits","um","equals","ONE","baseSuperQuantity","TableColumnMenu","editorTableContext","currentOpen","setCurrentOpen","onColumnExpand","Shapes","All","getNumberType","DollarCircle","getFormulaType","CheckboxSelected","getBooleanType","AddToWorkspace","getDateType","Leaf","getSeriesType","rightSlotStyles","isMenuOpen","errorInputStyles","red200","InputMenuItem","pattern","onPointerMove","VariableEditorMenu","onSmartSelection","tokenRules","MenuSeparator","bgColor","targetColor","grey300","finalColor","gradient","backgroundOrigin","backgroundClip","widgetWrapperStyles","buttonWrapperStyles","variableNameStyles","menuProps","Virus","Ellipsis","blockquote","media","heading1","h1","heading2","h2","list","editorTable","editorWideTable","plot","interactive","dividerBlock","spacingTop","spacingBottom","structured","variableStyles","structuredVariableStyles","thMinHeight","tdMinHeight","tdMinWidth","tdMaxWidth","tdVerticalPadding","tdHorizontalPadding","smartRowHorizontalPadding","getCellWrapperStyles","isCurrencyUnit","onExpressionEditor"],"sourceRoot":""}
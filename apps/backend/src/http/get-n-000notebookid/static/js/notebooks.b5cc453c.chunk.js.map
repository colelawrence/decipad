{"version":3,"file":"static/js/notebooks.b5cc453c.chunk.js","mappings":"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","sources":["../../editor-utils/src/serializeDocument.ts","../../../apps/frontend/src/notebooks/notebook/hooks/useNotebookStateAndActions.tsx","../../../apps/frontend/src/notebooks/notebook/hooks/useDuplicateNotebook.ts","../../../apps/frontend/src/notebooks/notebook/Notebook.tsx","../../../apps/frontend/src/notebooks/notebookInvite/notebookInvite.tsx","../../../apps/frontend/src/notebooks/Notebooks.tsx","../../../apps/frontend/src/utils/parseIconColorFromIdentifier.ts","../../ui/src/atoms/placeholders/TopbarPlaceholder/TopbarPlaceholder.tsx"],"sourcesContent":["import { MyEditor } from '@decipad/editor-types';\n\nconst serialize = (_: string, value: unknown): unknown =>\n  typeof value === 'bigint' ? value.toString() : value;\n\nexport const serializeDocument = (editor: MyEditor): string => {\n  return JSON.stringify({ children: editor.children }, serialize);\n};\n","import {\n  ComponentProps,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { BehaviorSubject } from 'rxjs';\nimport { DocSyncEditor, SyncSource } from '@decipad/docsync';\nimport { MyEditor } from '@decipad/editor-types';\nimport { useToast } from '@decipad/toast';\nimport { ClientEventsContext } from '@decipad/client-events';\nimport { parseIconColorFromIdentifier } from '../../../utils/parseIconColorFromIdentifier';\nimport {\n  GetNotebookByIdQuery,\n  useCreateOrUpdateNotebookSnapshotMutation,\n  useGetNotebookByIdQuery,\n  useSetNotebookPublicMutation,\n  useUpdateNotebookIconMutation,\n  useAttachFileToNotebookMutation,\n  useGetCreateAttachmentFormMutation,\n  useSharePadWithEmailMutation,\n} from '../../../graphql';\nimport { useDuplicateNotebook } from './useDuplicateNotebook';\nimport EditorIcon from '../EditorIcon';\nimport {\n  PermissionType,\n  useUnsharePadWithUserMutation,\n} from '../../../graphql/generated';\n\ntype Icon = ComponentProps<typeof EditorIcon>['icon'];\ntype IconColor = ComponentProps<typeof EditorIcon>['color'];\nexport type Notebook = GetNotebookByIdQuery['getPadById'];\n\ninterface useNotebookStateAndActionsProps {\n  readonly notebookId: string;\n  readonly editor?: MyEditor;\n  readonly docsync?: DocSyncEditor;\n}\n\ninterface NotebookConnectionParams {\n  url: string;\n  token: string;\n}\ninterface UseNotebookStateAndActionsResult {\n  error?: Error;\n  notebook: Notebook | undefined;\n  isReadOnly: boolean;\n  isPublic: boolean;\n  isPublishing?: boolean;\n  icon: Icon | undefined;\n  iconColor: IconColor;\n  hasLocalChanges: BehaviorSubject<boolean> | undefined;\n  isSavedRemotely: BehaviorSubject<boolean> | undefined;\n  connectionParams?: NotebookConnectionParams;\n  initialState?: string;\n  hasUnpublishedChanges: boolean;\n\n  duplicate: () => Promise<void>;\n  removeLocalChanges: () => Promise<void>;\n  updateIcon: (icon: Icon) => void;\n  updateIconColor: (icon: IconColor) => void;\n  setNotebookPublic: (isPublic: boolean) => void;\n  publishNotebook: () => void;\n  unpublishNotebook: () => void;\n  inviteEditorByEmail: (email: string) => Promise<void>;\n  removeEditorById: (id: string) => Promise<void>;\n  getAttachmentForm: (\n    file: File\n  ) => Promise<undefined | [URL, FormData, string]>;\n  onAttached: (handle: string) => Promise<undefined | { url: URL }>;\n}\n\nconst SNAPSHOT_NAME = 'Published 1';\n\nexport const useNotebookStateAndActions = ({\n  notebookId,\n  editor,\n  docsync,\n}: useNotebookStateAndActionsProps): UseNotebookStateAndActionsResult => {\n  // ------- internal hooks -------\n  const toast = useToast();\n\n  // ------- state -------\n  const [getNotebookResult] = useGetNotebookByIdQuery({\n    variables: {\n      id: notebookId,\n    },\n  });\n  const notebook = getNotebookResult.data?.getPadById;\n  const [error, setError] = useState<Error | undefined>();\n  const [icon, setIcon] = useState<Icon | undefined>();\n  const [iconColor, setIconColor] = useState<IconColor>(() => 'Sulu');\n  const hasLocalChanges = useMemo(() => docsync?.hasLocalChanges(), [docsync]);\n  const isSavedRemotely = useMemo(() => docsync?.isSavedRemotely(), [docsync]);\n  const isReadOnly = useMemo(\n    () => (notebook ? notebook.myPermissionType === 'READ' : false),\n    [notebook]\n  );\n  const isPublic = useMemo(\n    () => (notebook ? notebook.isPublic ?? false : false),\n    [notebook]\n  );\n\n  // ------- remote api -------\n  const [remoteDuplicateNotebook] = useDuplicateNotebook({\n    id: notebookId,\n    editor,\n  });\n  const [, remoteUpdateNotebookIcon] = useUpdateNotebookIconMutation();\n  const [, remoteUpdateNotebookIsPublic] = useSetNotebookPublicMutation();\n  const [, shareNotebookWithEmail] = useSharePadWithEmailMutation();\n  const [, unsharePadWithUser] = useUnsharePadWithUserMutation();\n\n  const [, createOrUpdateSnapshot] =\n    useCreateOrUpdateNotebookSnapshotMutation();\n\n  // ------- attachments -------\n  const [, getCreateAttachmentForm] = useGetCreateAttachmentFormMutation();\n  const getAttachmentForm = useCallback(\n    async (file: File): Promise<undefined | [URL, FormData, string]> => {\n      const result = await getCreateAttachmentForm({\n        notebookId,\n        fileName: file.name,\n        fileType: file.type,\n      });\n\n      const form = result.data?.getCreateAttachmentForm;\n      if (!form) {\n        return;\n      }\n      const url = new URL(form.url);\n      const formData = new FormData();\n      for (const { key, value } of form.fields) {\n        formData.set(key, value);\n      }\n      return [url, formData, form.handle];\n    },\n    [getCreateAttachmentForm, notebookId]\n  );\n  const [, attachFileToNotebook] = useAttachFileToNotebookMutation();\n  const onAttached = useCallback(\n    async (handle: string) => {\n      const resp = await attachFileToNotebook({ handle });\n      if (resp.error) {\n        throw new Error(resp.error.message);\n      }\n      const urlString = resp.data?.attachFileToPad?.url;\n      if (!urlString) {\n        return;\n      }\n      const url = new URL(urlString);\n      return {\n        url,\n      };\n    },\n    [attachFileToNotebook]\n  );\n\n  // ------- analytics -------\n  const event = useContext(ClientEventsContext);\n\n  // ------- actions -------\n  const duplicate = useCallback(async () => {\n    await remoteDuplicateNotebook();\n    event({ type: 'action', action: 'notebook duplicated' });\n  }, [remoteDuplicateNotebook, event]);\n\n  const removeLocalChanges = useCallback(async () => {\n    await docsync?.removeLocalChanges();\n    await event({ type: 'action', action: 'notebook local changes removed' });\n    window.location.reload();\n  }, [docsync, event]);\n\n  // ------- effects -------\n  useEffect(() => {\n    // set / unset error\n    if (getNotebookResult.error !== error) {\n      setError(getNotebookResult.error);\n    }\n  }, [error, getNotebookResult]);\n\n  useEffect(() => {\n    if (notebook) {\n      const { icon: remoteIcon, iconColor: remoteIconColor } =\n        parseIconColorFromIdentifier(notebook.icon);\n      if (remoteIcon && icon !== remoteIcon) {\n        setIcon(remoteIcon);\n      }\n      if (remoteIconColor && remoteIconColor !== iconColor) {\n        setIconColor(remoteIconColor);\n      }\n    }\n  }, [icon, iconColor, notebook]);\n\n  // -------- user callbacks -------------\n  const updateIcon = useCallback(\n    (newIcon: Icon) => {\n      if (newIcon !== icon) {\n        setIcon(newIcon);\n      }\n      if (iconColor) {\n        const iconString = `${newIcon}-${iconColor}`;\n        if (iconString !== notebook?.icon) {\n          remoteUpdateNotebookIcon({\n            id: notebookId,\n            icon: iconString,\n          }).catch((err) => {\n            toast(`Error updating icon: ${(err as Error).message}`, 'error');\n          });\n          event({ type: 'action', action: 'notebook icon changed' });\n        }\n      }\n    },\n    [\n      event,\n      icon,\n      iconColor,\n      notebook?.icon,\n      notebookId,\n      remoteUpdateNotebookIcon,\n      toast,\n    ]\n  );\n\n  const updateIconColor = useCallback(\n    (newIconColor: IconColor) => {\n      if (newIconColor !== iconColor) {\n        setIconColor(newIconColor);\n      }\n      if (icon) {\n        const iconString = `${icon}-${newIconColor}`;\n        if (iconString !== notebook?.icon) {\n          remoteUpdateNotebookIcon({\n            id: notebookId,\n            icon: iconString,\n          }).catch((err) => {\n            toast(`Error updating icon: ${(err as Error).message}`, 'error');\n          });\n          event({ type: 'action', action: 'notebook icon color changed' });\n        }\n      }\n    },\n    [\n      event,\n      icon,\n      iconColor,\n      notebook?.icon,\n      notebookId,\n      remoteUpdateNotebookIcon,\n      toast,\n    ]\n  );\n\n  // -------- publishing -------------\n\n  const [hasUnpublishedChanges, setHasUnpublishedChanges] = useState(false);\n\n  // Grabbing the snapshot here so the effect can depend on it instead of the whole notebook. The\n  // notebook appears to be a mutable reference from the local cache and so we'd miss effects.\n  const snapshot = notebook?.snapshots.filter(\n    (s) => s.snapshotName === SNAPSHOT_NAME\n  )[0];\n  useEffect(() => {\n    if (!docsync || !snapshot || !isPublic) {\n      return;\n    }\n\n    const onSavedChanges = (source: SyncSource) => {\n      if (source === 'remote') {\n        setHasUnpublishedChanges(\n          !(snapshot?.version && docsync.equals(snapshot?.version))\n        );\n      }\n    };\n\n    docsync.onSaved(onSavedChanges);\n    onSavedChanges('remote');\n    return () => docsync?.offSaved(onSavedChanges);\n  }, [docsync, isPublic, snapshot, setHasUnpublishedChanges]);\n\n  const setNotebookPublic = useCallback(\n    async (newIsPublic: boolean) => {\n      await remoteUpdateNotebookIsPublic({\n        id: notebookId,\n        isPublic: newIsPublic,\n      });\n    },\n    [notebookId, remoteUpdateNotebookIsPublic]\n  );\n\n  const [isPublishing, setIsPublishing] = useState(false);\n\n  const publishNotebook = useCallback(() => {\n    setIsPublishing(true);\n    // TODO: this must invalidate the Pad since snapshots are a property of Pad. One way to do\n    // this is if the mutation returns a Pad instead of a PadSnapshot. Another way to do it is to\n    // programatically invalidate/update cache, either here or in the urql config.\n    createOrUpdateSnapshot({ notebookId, snapshotName: SNAPSHOT_NAME })\n      .then((ret) => {\n        if (ret.error) {\n          console.error(`Error publishing notebook: ${ret.error.message}`);\n          toast('Error publishing notebook', 'error');\n          return;\n        }\n        return setNotebookPublic(true).then(() => {\n          event({\n            type: 'action',\n            action: 'publish notebook',\n            props: { id: notebookId },\n          });\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        toast('Error publishing notebook', 'error');\n      })\n      .finally(() => setIsPublishing(false));\n  }, [createOrUpdateSnapshot, event, notebookId, setNotebookPublic, toast]);\n\n  const unpublishNotebook = useCallback(() => {\n    setNotebookPublic(false).then(() => {\n      event({\n        type: 'action',\n        action: 'unpublish notebook',\n        props: { id: notebookId },\n      });\n    });\n  }, [event, notebookId, setNotebookPublic]);\n\n  const inviteEditorByEmail = useCallback(\n    (email: string): Promise<void> => {\n      // TODO: return a correct type instead of void\n      // @ts-ignore\n      return shareNotebookWithEmail({\n        padId: notebookId,\n        email,\n        canComment: true,\n        permissionType: PermissionType.Write,\n      });\n    },\n    [notebookId, shareNotebookWithEmail]\n  );\n\n  const removeEditorById = useCallback(\n    (userId: string): Promise<void> => {\n      // TODO: return a correct type instead of void\n      // @ts-ignore\n      return unsharePadWithUser({\n        userId,\n        padId: notebookId,\n      });\n    },\n    [notebookId, unsharePadWithUser]\n  );\n\n  return {\n    error,\n    notebook,\n    isReadOnly,\n    isPublic,\n    isPublishing,\n    icon,\n    iconColor,\n    hasLocalChanges,\n    isSavedRemotely,\n    connectionParams: notebook?.padConnectionParams,\n    initialState: notebook?.initialState ?? undefined,\n    hasUnpublishedChanges,\n\n    duplicate,\n    removeLocalChanges,\n    setNotebookPublic,\n    updateIcon,\n    updateIconColor,\n\n    publishNotebook,\n    unpublishNotebook,\n    inviteEditorByEmail,\n    removeEditorById,\n    getAttachmentForm,\n    onAttached,\n  };\n};\n","import type { MyEditor } from '@decipad/editor-types';\nimport { serializeDocument } from '@decipad/editor-utils';\nimport { notebooks } from '@decipad/routing';\nimport { useToast } from '@decipad/toast';\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  useDuplicateNotebookMutation,\n  useGetWorkspacesIDsQuery,\n} from '../../../graphql';\n\ntype UseDuplicateNotebookArgs = {\n  readonly editor?: MyEditor;\n  readonly id: string;\n};\n\nexport const useDuplicateNotebook = ({\n  editor,\n  id,\n}: UseDuplicateNotebookArgs) => {\n  const toast = useToast();\n  const navigate = useNavigate();\n  const [{ data, error }] = useGetWorkspacesIDsQuery();\n  const [, duplicateNotebook] = useDuplicateNotebookMutation();\n\n  if (error) {\n    console.error(error);\n    throw new Error('Could not fetch workspaces');\n  }\n\n  const mutate = useCallback(async () => {\n    if (!editor || !data) {\n      console.error(\n        'Failed to duplicate notebook. Missing editor or workspaces data.'\n      );\n      toast('Failed to duplicate notebook', 'error');\n      return;\n    }\n\n    try {\n      const { data: duplicateData, error: duplicateError } =\n        await duplicateNotebook({\n          id,\n          targetWorkspace: data.workspaces[0].id,\n          document: serializeDocument(editor),\n        });\n\n      if (duplicateError) {\n        console.error('Failed to duplicate notebook. Error:', duplicateError);\n        toast('Failed to duplicate notebook', 'error');\n      } else if (!duplicateData) {\n        console.error(\n          'Failed to duplicate notebook. Received empty response.',\n          duplicateError\n        );\n        toast('Failed to duplicate notebook.', 'error');\n      } else {\n        navigate(\n          notebooks({}).notebook({\n            notebook: duplicateData.duplicatePad,\n          }).$\n        );\n      }\n    } catch (err) {\n      console.error('Failed to duplicate notebook. Error:', err);\n      toast('Failed to duplicate notebook.', 'error');\n    }\n  }, [data, duplicateNotebook, editor, id, navigate, toast]);\n\n  return [mutate];\n};\n","import { DocSyncEditor } from '@decipad/docsync';\nimport { MyEditor } from '@decipad/editor-types';\nimport {\n  EditorStylesContext,\n  EditorStylesContextValue,\n} from '@decipad/react-contexts';\nimport { notebooks, useRouteParams } from '@decipad/routing';\nimport { isServerSideRendering } from '@decipad/support';\nimport {\n  EditorPlaceholder,\n  LoadingLogo,\n  NotebookIconPlaceholder,\n  NotebookPage,\n  TopbarPlaceholder,\n} from '@decipad/ui';\nimport { FC, lazy, useCallback, useMemo, useState } from 'react';\nimport {\n  useGetWorkspacesIDsQuery,\n  useRenameNotebookMutation,\n} from '../../graphql';\nimport { ErrorPage, Frame } from '../../meta';\nimport { useAnimateMutations } from './hooks/useAnimateMutations';\nimport { useNotebookStateAndActions } from './hooks/useNotebookStateAndActions';\n\nconst loadTopbar = () =>\n  import(/* webpackChunkName: \"notebook-topbar\" */ './Topbar');\nconst Topbar = lazy(loadTopbar);\nconst loadEditorIcon = () =>\n  import(/* webpackChunkName: \"notebook-editor-icon\" */ './EditorIcon');\nconst EditorIcon = lazy(loadEditorIcon);\nconst loadEditor = () =>\n  import(/* webpackChunkName: \"notebook-editor\" */ './Editor');\nconst Editor = lazy(loadEditor);\n\n// prefetch\nloadTopbar().then(loadEditorIcon).then(loadEditor);\n\nconst Notebook: FC = () => {\n  const [editor, setEditor] = useState<MyEditor | undefined>();\n  const [docsync, setDocsync] = useState<DocSyncEditor | undefined>();\n\n  const {\n    notebook: { id: notebookId },\n    secret,\n  } = useRouteParams(notebooks({}).notebook);\n\n  const {\n    error,\n    notebook,\n    initialState,\n    connectionParams,\n    hasLocalChanges,\n    hasUnpublishedChanges,\n    isReadOnly,\n    isPublishing,\n    icon,\n    iconColor,\n    updateIcon,\n    updateIconColor,\n    duplicate,\n    removeLocalChanges,\n    publishNotebook,\n    unpublishNotebook,\n    inviteEditorByEmail,\n    removeEditorById,\n    getAttachmentForm,\n    onAttached,\n  } = useNotebookStateAndActions({\n    notebookId,\n    editor,\n    docsync,\n  });\n\n  const [userWorkspaces] = useGetWorkspacesIDsQuery();\n\n  const [, renameNotebook] = useRenameNotebookMutation();\n\n  useAnimateMutations();\n\n  const onNotebookTitleChange = useCallback(\n    (newName: string) => {\n      if (!isServerSideRendering()) {\n        const nameTrimmed = newName.trim();\n        renameNotebook({\n          id: notebookId,\n          name: nameTrimmed,\n        });\n        window.history.replaceState(\n          {},\n          nameTrimmed,\n          notebooks({}).notebook({\n            notebook: { id: notebookId, name: nameTrimmed },\n          }).$\n        );\n      }\n    },\n    [notebookId, renameNotebook]\n  );\n\n  const styles = useMemo(\n    () => ({ color: iconColor }),\n    [iconColor]\n  ) as EditorStylesContextValue;\n\n  if (error) {\n    if (/no such/i.test(error?.message))\n      return <ErrorPage Heading=\"h1\" wellKnown=\"404\" />;\n    if (/forbidden/i.test(error?.message)) {\n      return <ErrorPage Heading=\"h1\" wellKnown=\"403\" />;\n    }\n    throw error;\n  }\n\n  return (\n    <EditorStylesContext.Provider value={styles}>\n      <Frame\n        Heading=\"h1\"\n        title={notebook?.name ?? ''}\n        suspenseFallback={<LoadingLogo />}\n      >\n        <NotebookPage\n          notebook={\n            <Frame\n              Heading=\"h1\"\n              title={null}\n              suspenseFallback={<EditorPlaceholder />}\n            >\n              <Editor\n                notebookMetaLoaded={notebook != null}\n                notebookTitle={notebook?.name ?? ''}\n                onNotebookTitleChange={onNotebookTitleChange}\n                notebookId={notebookId}\n                readOnly={isReadOnly}\n                secret={secret}\n                connectionParams={connectionParams}\n                initialState={initialState}\n                onEditor={setEditor}\n                onDocsync={setDocsync}\n                getAttachmentForm={getAttachmentForm}\n                onAttached={onAttached}\n              />\n            </Frame>\n          }\n          notebookIcon={\n            <Frame\n              Heading=\"h1\"\n              title={null}\n              suspenseFallback={<NotebookIconPlaceholder />}\n            >\n              <EditorIcon\n                color={iconColor}\n                icon={icon ?? 'Rocket'}\n                onChangeIcon={updateIcon}\n                onChangeColor={updateIconColor}\n                readOnly={isReadOnly}\n              />\n            </Frame>\n          }\n          topbar={\n            <Frame\n              Heading=\"h1\"\n              title={null}\n              suspenseFallback={<TopbarPlaceholder />}\n            >\n              <Topbar\n                userWorkspaces={userWorkspaces.data?.workspaces}\n                notebook={notebook}\n                hasLocalChanges={hasLocalChanges}\n                hasUnpublishedChanges={hasUnpublishedChanges}\n                isPublishing={isPublishing}\n                duplicateNotebook={duplicate}\n                removeLocalChanges={removeLocalChanges}\n                publishNotebook={publishNotebook}\n                unpublishNotebook={unpublishNotebook}\n                inviteEditorByEmail={inviteEditorByEmail}\n                removeEditorById={removeEditorById}\n              />\n            </Frame>\n          }\n        />\n      </Frame>\n    </EditorStylesContext.Provider>\n  );\n};\n\nexport default Notebook;\n","import { FC, useEffect, useState } from 'react';\nimport { notebooks, useRouteParams } from '@decipad/routing';\nimport { Navigate } from 'react-router-dom';\nimport { LoadingLogo } from '@decipad/ui';\nimport { useGetNotebookByIdQuery } from '../../graphql';\n\nconst getInviteAcceptUrl = (inviteId: string) =>\n  `${window.location.origin}/api/invites/${inviteId}/accept`;\n\nconst NotebookInvite: FC = () => {\n  const [inviteAccepted, setInviteAccepted] = useState(false);\n\n  const {\n    notebook: { id: notebookId },\n    invite: { id: inviteId },\n  } = useRouteParams(notebooks({}).acceptInvite);\n\n  const [getNotebookResult, refetchNotebook] = useGetNotebookByIdQuery({\n    variables: { id: notebookId },\n    requestPolicy: 'network-only',\n  });\n\n  const isLoaded = !getNotebookResult.fetching;\n  const accessLevel = getNotebookResult.data?.getPadById?.myPermissionType;\n  const forbiddenError = getNotebookResult.error?.graphQLErrors.find(\n    (e) => e.extensions?.code === 'FORBIDDEN'\n  );\n\n  const shouldRedirect = accessLevel != null && forbiddenError == null;\n  const shouldAcceptInvite =\n    isLoaded &&\n    !inviteAccepted &&\n    (accessLevel == null || forbiddenError != null);\n\n  useEffect(() => {\n    if (shouldAcceptInvite) {\n      const inviteUrl = getInviteAcceptUrl(inviteId);\n      fetch(inviteUrl, {\n        method: 'GET',\n        credentials: 'same-origin',\n      }).then((res) => {\n        if (res.ok) {\n          setInviteAccepted(true);\n          refetchNotebook({\n            variables: { id: notebookId },\n          });\n        } else {\n          console.error('Failed to accept invite', res);\n        }\n      });\n    }\n  }, [inviteId, notebookId, refetchNotebook, shouldAcceptInvite]);\n\n  if (!isLoaded) return <LoadingLogo />;\n  if (shouldRedirect) {\n    return <Navigate replace to={`${notebooks({}).$}/${notebookId}`} />;\n  }\n\n  return <LoadingLogo />;\n};\n\nexport default NotebookInvite;\n","import { notebooks } from '@decipad/routing';\nimport { Routes, Route, useLocation } from 'react-router-dom';\nimport { ErrorPage, RequireSession, RouteEvents } from '../meta';\nimport Notebook from './notebook/Notebook';\nimport NotebookInvite from './notebookInvite/notebookInvite';\n\nconst Notebooks: React.FC = () => {\n  const routeDefs = notebooks({});\n  const { key } = useLocation();\n\n  return (\n    <Routes>\n      <Route\n        path={routeDefs.notebook.template}\n        element={\n          <RouteEvents category=\"notebook\">\n            <Notebook key={key} />\n          </RouteEvents>\n        }\n      />\n      <Route\n        path={routeDefs.acceptInvite.template}\n        element={\n          <RouteEvents category=\"notebook\">\n            <RequireSession>\n              <NotebookInvite />\n            </RequireSession>\n          </RouteEvents>\n        }\n      />\n      <Route\n        path=\"*\"\n        element={\n          <RequireSession>\n            <ErrorPage Heading=\"h1\" wellKnown=\"404\" />\n          </RequireSession>\n        }\n      />\n    </Routes>\n  );\n};\nexport default Notebooks;\n","import {\n  AvailableSwatchColor,\n  swatchNames,\n  UserIconKey,\n  userIconKeys,\n} from 'libs/ui/src/utils';\n\nexport function parseIconColorFromIdentifier(\n  iconIdentifier: string | null | undefined\n) {\n  const parsedIcon = iconIdentifier?.replace(' ', '').split('-');\n\n  if (parsedIcon) {\n    if (parsedIcon.length !== 2) {\n      console.error(`Cannot parse notebook icon ${iconIdentifier}`);\n      return { ok: false };\n    }\n\n    const icon = parsedIcon[0] as UserIconKey;\n    const iconColor = parsedIcon[1] as AvailableSwatchColor;\n\n    if (!userIconKeys.includes(icon)) {\n      return { ok: false };\n    }\n\n    if (!swatchNames.includes(iconColor)) {\n      return { ok: false };\n    }\n\n    return { icon, iconColor, ok: true };\n  }\n  if (typeof iconIdentifier === 'string') {\n    console.error(`bad parameter for iconIdentifier ${iconIdentifier}`);\n  }\n  return { ok: false };\n}\n","import React from 'react';\nimport { css } from '@emotion/react';\nimport { cssVar } from '../../../primitives';\n\nconst containerStyle = css({\n  width: '100%',\n  display: 'flex',\n  padding: '16px 0',\n  borderBottom: '1px solid',\n  borderColor: `${cssVar('highlightColor')}`,\n  justifyContent: 'space-between',\n});\n\nconst backButtonStyles = css({\n  height: '32px',\n  width: '32px',\n  borderRadius: '32px',\n  backgroundColor: `${cssVar('highlightColor')}`,\n});\n\nconst rightPanel = css({\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  gap: '16px',\n  marginRight: '-1rem',\n});\n\nconst avatarPlaceholderStyles = css({\n  height: '24px',\n  width: '24px',\n  borderRadius: '24px',\n  backgroundColor: `${cssVar('highlightColor')}`,\n});\n\nconst shareButtonPlaceholderStyles = css({\n  height: '33.68px',\n  width: '64px',\n  borderRadius: '6px',\n  backgroundColor: `${cssVar('highlightColor')}`,\n});\n\nexport const TopbarPlaceholder: React.FC = () => (\n  <div css={containerStyle}>\n    <div css={backButtonStyles} />\n    <div css={rightPanel}>\n      <div css={avatarPlaceholderStyles} />\n      <div css={shareButtonPlaceholderStyles} />\n    </div>\n  </div>\n);\n"],"names":["serialize","_","value","toString","serializeDocument","editor","JSON","stringify","children","SNAPSHOT_NAME","useNotebookStateAndActions","notebookId","docsync","toast","useToast","getNotebookResult","useGetNotebookByIdQuery","variables","id","notebook","data","getPadById","error","setError","useState","icon","setIcon","iconColor","setIconColor","hasLocalChanges","useMemo","isSavedRemotely","isReadOnly","myPermissionType","isPublic","remoteDuplicateNotebook","navigate","useNavigate","useGetWorkspacesIDsQuery","duplicateNotebook","useDuplicateNotebookMutation","console","Error","useCallback","async","duplicateData","duplicateError","targetWorkspace","workspaces","document","notebooks","duplicatePad","$","err","useDuplicateNotebook","remoteUpdateNotebookIcon","useUpdateNotebookIconMutation","remoteUpdateNotebookIsPublic","useSetNotebookPublicMutation","shareNotebookWithEmail","useSharePadWithEmailMutation","unsharePadWithUser","useUnsharePadWithUserMutation","createOrUpdateSnapshot","useCreateOrUpdateNotebookSnapshotMutation","getCreateAttachmentForm","useGetCreateAttachmentFormMutation","getAttachmentForm","form","fileName","file","name","fileType","type","url","URL","formData","FormData","key","fields","set","handle","attachFileToNotebook","useAttachFileToNotebookMutation","onAttached","resp","message","urlString","attachFileToPad","event","useContext","ClientEventsContext","duplicate","action","removeLocalChanges","window","location","reload","useEffect","remoteIcon","remoteIconColor","parseIconColorFromIdentifier","updateIcon","newIcon","iconString","catch","updateIconColor","newIconColor","hasUnpublishedChanges","setHasUnpublishedChanges","snapshot","snapshots","filter","s","snapshotName","onSavedChanges","source","version","equals","onSaved","offSaved","setNotebookPublic","newIsPublic","isPublishing","setIsPublishing","publishNotebook","then","ret","props","finally","unpublishNotebook","inviteEditorByEmail","email","padId","canComment","permissionType","PermissionType","removeEditorById","userId","connectionParams","padConnectionParams","initialState","undefined","loadTopbar","Topbar","lazy","loadEditorIcon","EditorIcon","loadEditor","Editor","setEditor","setDocsync","secret","useRouteParams","userWorkspaces","renameNotebook","useRenameNotebookMutation","useAnimateMutations","onNotebookTitleChange","newName","isServerSideRendering","nameTrimmed","trim","history","replaceState","styles","color","test","Heading","wellKnown","title","suspenseFallback","LoadingLogo","NotebookPage","EditorPlaceholder","notebookMetaLoaded","notebookTitle","readOnly","onEditor","onDocsync","notebookIcon","NotebookIconPlaceholder","onChangeIcon","onChangeColor","topbar","TopbarPlaceholder","inviteAccepted","setInviteAccepted","invite","inviteId","acceptInvite","refetchNotebook","requestPolicy","isLoaded","fetching","accessLevel","forbiddenError","graphQLErrors","find","e","extensions","code","shouldRedirect","shouldAcceptInvite","inviteUrl","origin","getInviteAcceptUrl","fetch","method","credentials","res","ok","replace","to","routeDefs","useLocation","path","template","element","category","iconIdentifier","parsedIcon","split","length","userIconKeys","swatchNames","containerStyle","css","width","display","padding","borderBottom","borderColor","cssVar","justifyContent","backButtonStyles","height","borderRadius","backgroundColor","rightPanel","avatarPlaceholderStyles","shareButtonPlaceholderStyles"],"sourceRoot":""}
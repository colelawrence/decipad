{"version":3,"file":"static/js/editor-plot.6a79e7b5.chunk.js","mappings":"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","sources":["../../ui/src/atoms/CellInput/CellInput.tsx","../../ui/src/atoms/ErrorMessage/ErrorMessage.tsx","../../ui/src/organisms/PlotParams/PlotParams.tsx","../../ui/src/organisms/PlotResult/usePlotTheme.tsx","../../ui/src/organisms/PlotResult/PlotResult.tsx","../../ui/src/organisms/PlotBlock/PlotBlock.tsx","../../editor-plugins/src/plugins/Plot/utils/plotUtils.ts","../../editor-plugins/src/plugins/Plot/utils/defaultPlotSpec.ts","../../editor-plugins/src/plugins/Plot/utils/usePlot.ts","../../editor-plugins/src/plugins/Plot/utils/normalizePlotSpec.ts","../../editor-plugins/src/plugins/Plot/initializeVega.ts","../../editor-plugins/src/plugins/Plot/Plot.tsx"],"sourcesContent":["import { identity, noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC, useEffect, useRef, useState } from 'react';\nimport { p13Medium, p16Medium } from '../../primitives';\nimport { blockAlignment } from '../../styles';\n\nconst inputStyles = css({\n  width: '100%',\n  background: 'transparent',\n  border: 0,\n  fontVariantNumeric: 'tabular-nums',\n\n  '::placeholder': {\n    opacity: 0.5,\n  },\n});\n\nconst headingStyles = css(blockAlignment.editorTable.typography, {\n  // Height needs to be explicitly set to the line height because <input>s are weird\n  height: `calc(${blockAlignment.editorTable.typography?.lineHeight} * ${blockAlignment.editorTable.typography?.fontSize})`,\n});\n\nconst headerStyles = css(p13Medium, {\n  padding: '6px 0',\n});\n\nconst dataStyles = css(p16Medium, {\n  padding: '8px 0',\n});\n\nconst alwaysTrue = () => true;\n\ntype Variant = 'heading' | 'header' | 'data';\n\nexport interface CellInputProps {\n  readonly id?: string;\n  readonly placeholder?: string;\n  readonly readOnly?: boolean;\n  readonly variant?: Variant;\n  readonly value: string;\n  readonly format?: (value: string) => string;\n  readonly onChange?: (newValue: string) => void;\n  readonly validate?: (value: string) => boolean;\n  readonly transform?: (newValue: string) => string;\n}\n\n/** Sort of coupled to tables. Once blurred, commits changes by calling onChange */\nexport const CellInput = ({\n  id,\n  placeholder,\n  readOnly = false,\n  variant = 'data',\n  value,\n  format = identity,\n  onChange = noop,\n  validate = alwaysTrue,\n  transform = identity,\n}: CellInputProps): ReturnType<FC> => {\n  const [state, setState] = useState<string | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Reset our state whenever `props.value` change.\n  useEffect(() => {\n    setState(null);\n  }, [value]);\n\n  const submit = () => {\n    if (state == null) {\n      return;\n    }\n\n    if (validate(state)) {\n      onChange(transform(state));\n    } else {\n      onChange('');\n    }\n\n    setState(null);\n  };\n\n  const displayValue = state != null ? state : format(value);\n\n  return (\n    <input\n      id={id}\n      css={[\n        inputStyles,\n        variant === 'heading' && headingStyles,\n        variant === 'header' && headerStyles,\n        variant === 'data' && dataStyles,\n      ]}\n      ref={inputRef}\n      onBlur={submit}\n      onChange={(e) => {\n        setState(e.target.value);\n      }}\n      onFocus={() => {\n        setState(value);\n      }}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          submit();\n        }\n      }}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      value={displayValue}\n    />\n  );\n};\n","import { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { cssVar, p16Medium, setCssVar } from '../../primitives';\n\nconst errorStyles = css(\n  p16Medium,\n  setCssVar('currentTextColor', cssVar('errorColor'))\n);\n\nexport const ErrorMessage = ({\n  message,\n}: {\n  message: string;\n}): ReturnType<FC> => (\n  <p contentEditable={false} css={errorStyles}>\n    {message}\n  </p>\n);\n","import { css } from '@emotion/react';\nimport { FC, ReactNode } from 'react';\nimport { Label } from '../../atoms';\nimport { cssVar, p12Medium } from '../../primitives';\nimport { hideOnPrint } from '../../styles/editor-layout';\n\ntype StringSetter<T extends string | undefined = string> = (str: T) => void;\n\nconst markTypes = ['line', 'bar', 'arc', 'area', 'point'] as const;\n\ntype MarkType = typeof markTypes[number];\n\nconst markTypeNames: Record<MarkType, string> = {\n  bar: 'Bar',\n  line: 'Line',\n  point: 'Point',\n  area: 'Area',\n  arc: 'Pie',\n};\n\nconst shapes = ['point', 'circle', 'square', 'tick'];\n\nexport interface PlotParamsProps {\n  readonly sourceVarName: string;\n  readonly sourceVarNameOptions: ReadonlyArray<string>;\n  readonly sourceExprRefOptions?: ReadonlyArray<string>;\n  readonly setSourceVarName: StringSetter;\n  readonly markType: MarkType;\n  readonly setMarkType: StringSetter;\n  readonly columnNameOptions: ReadonlyArray<string>;\n  readonly xColumnName: string;\n  readonly setXColumnName: StringSetter;\n  readonly yColumnName: string;\n  readonly setYColumnName: StringSetter;\n  readonly sizeColumnName: string;\n  readonly setSizeColumnName: StringSetter;\n  readonly colorColumnName: string;\n  readonly setColorColumnName: StringSetter;\n  readonly thetaColumnName: string;\n  readonly setThetaColumnName: StringSetter;\n  readonly colorScheme?: string;\n  readonly setColorScheme: StringSetter;\n  readonly shape: string;\n  readonly setShape: StringSetter;\n}\n\ninterface SelectInputProps {\n  readonly labelText: string;\n  readonly children: ReactNode;\n  readonly value: string;\n  readonly setValue: StringSetter;\n}\n\nconst selectFontStyles = css(p12Medium);\n\nconst selectStyles = css({\n  backgroundColor: cssVar('highlightColor'),\n  width: '100%',\n  maxWidth: '140px',\n});\n\nconst SelectInput = ({\n  labelText,\n  children,\n  value,\n  setValue,\n}: SelectInputProps): ReturnType<FC> => {\n  return (\n    <Label\n      renderContent={(id) => (\n        <select\n          css={[selectFontStyles, selectStyles]}\n          id={id}\n          onChange={(ev) => {\n            setValue(ev.target.value);\n          }}\n          value={value}\n        >\n          {children}\n        </select>\n      )}\n    >\n      <span css={selectFontStyles}>{labelText}:</span>\n    </Label>\n  );\n};\n\nconst wrapperContainerStyles = css({\n  marginBottom: '20px',\n});\n\nconst containerStyles = css({\n  display: 'flex',\n  flexWrap: 'wrap',\n  gap: '4px',\n  marginBottom: '4px',\n});\n\nconst colorSchemes = [\n  'deciblues',\n  'accent',\n  'category20',\n  'dark2',\n  'paired',\n  'pastel1',\n  'pastel2',\n  'set2',\n  'set3',\n];\n\nconst ColorSchemeOptions = () => {\n  return (\n    <>\n      <option key=\"__none\" value=\"\"></option>;\n      {colorSchemes.map((scheme) => (\n        <option key={scheme} value={scheme}>\n          {scheme}\n        </option>\n      ))}\n    </>\n  );\n};\n\nexport const PlotParams = ({\n  sourceVarName,\n  sourceVarNameOptions,\n  sourceExprRefOptions,\n  columnNameOptions,\n  setSourceVarName,\n  markType,\n  setMarkType,\n  xColumnName,\n  setXColumnName,\n  yColumnName,\n  setYColumnName,\n  sizeColumnName,\n  setSizeColumnName,\n  colorColumnName,\n  setColorColumnName,\n  thetaColumnName,\n  setThetaColumnName,\n  colorScheme,\n  setColorScheme,\n  shape,\n  setShape,\n}: PlotParamsProps): ReturnType<FC> => {\n  const emptyColumnOption = <option key=\"__none\" value=\"\"></option>;\n  const sourceVarNameOptionsOptions = [emptyColumnOption].concat(\n    sourceVarNameOptions.map((sourceVarNameOption, index) => (\n      <option\n        key={sourceVarNameOption}\n        value={sourceExprRefOptions?.[index] ?? sourceVarNameOption}\n      >\n        {sourceVarNameOption}\n      </option>\n    ))\n  );\n\n  const columnOptions = [emptyColumnOption].concat(\n    columnNameOptions.map((columnNameOption) => (\n      <option key={columnNameOption} value={columnNameOption}>\n        {columnNameOption}\n      </option>\n    ))\n  );\n\n  const markTypeOptions = [emptyColumnOption].concat(\n    markTypes.map((mark) => (\n      <option key={mark} value={mark}>\n        {markTypeNames[mark]}\n      </option>\n    ))\n  );\n\n  return (\n    <div css={[wrapperContainerStyles, hideOnPrint]}>\n      <div css={containerStyles}>\n        <SelectInput\n          labelText=\"Table\"\n          setValue={setSourceVarName}\n          value={sourceVarName}\n        >\n          {sourceVarNameOptionsOptions}\n        </SelectInput>\n        {sourceVarName && (\n          <>\n            <SelectInput\n              labelText=\"Chart\"\n              setValue={setMarkType}\n              value={shapes.includes(markType) ? 'point' : markType}\n            >\n              {markTypeOptions}\n            </SelectInput>\n            {shapes.includes(markType) && (\n              <SelectInput labelText=\"Shape\" setValue={setShape} value={shape}>\n                {shapes.map((s) => (\n                  <option key={s} value={s}>\n                    {s}\n                  </option>\n                ))}\n              </SelectInput>\n            )}\n          </>\n        )}\n      </div>\n\n      {sourceVarName && (\n        <div css={containerStyles}>\n          {markType !== 'arc' && (\n            <>\n              <SelectInput\n                labelText=\"Label\"\n                setValue={setXColumnName}\n                value={xColumnName}\n              >\n                {columnOptions}\n              </SelectInput>\n              <SelectInput\n                labelText=\"Value\"\n                setValue={setYColumnName}\n                value={yColumnName}\n              >\n                {columnOptions}\n              </SelectInput>\n              {(shapes.includes(markType) || markType === 'area') && (\n                <SelectInput\n                  labelText=\"Sizes\"\n                  setValue={setSizeColumnName}\n                  value={sizeColumnName}\n                >\n                  {columnOptions}\n                </SelectInput>\n              )}\n            </>\n          )}\n\n          {markType === 'arc' && (\n            <SelectInput\n              labelText=\"Slice size\"\n              setValue={setThetaColumnName}\n              value={thetaColumnName}\n            >\n              {columnOptions}\n            </SelectInput>\n          )}\n\n          {(markType === 'bar' || markType === 'arc') && (\n            <SelectInput\n              labelText=\"Colors\"\n              setValue={setColorColumnName}\n              value={colorColumnName}\n            >\n              {columnOptions}\n            </SelectInput>\n          )}\n          {(markType === 'bar' || markType === 'arc') && colorColumnName && (\n            <SelectInput\n              labelText=\"Color Scheme\"\n              setValue={setColorScheme}\n              value={colorScheme || ''}\n            >\n              <ColorSchemeOptions />\n            </SelectInput>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useThemeFromStore } from '@decipad/react-contexts';\nimport { ComponentProps } from 'react';\nimport { dark as darkTheme } from 'vega-themes';\nimport { VegaLite } from 'react-vega';\n\ntype PlotTheme = ComponentProps<typeof VegaLite>['config'];\n\nconst customDarkTheme = () => ({\n  ...darkTheme,\n  background: 'transparent',\n});\n\nexport const usePlotTheme = (): PlotTheme => {\n  const [dark] = useThemeFromStore();\n\n  return dark ? customDarkTheme() : undefined;\n};\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport { FC } from 'react';\nimport { VegaLite } from 'react-vega';\nimport type { VegaProps } from 'react-vega/lib/Vega';\nimport { slimBlockWidth } from '../../styles/editor-layout';\nimport { usePlotTheme } from './usePlotTheme';\n\nconst styles = css({\n  // Couldn't find another way to attach styles to the underlying SVG for responsiveness.\n  '& > svg': {\n    maxWidth: '100%',\n  },\n});\n\nconst GOLDEN_RATIO = 1.618;\n\ninterface PlotResultProps {\n  spec: NonNullable<VegaProps['spec']>;\n  data: NonNullable<VegaProps['data']>;\n  onError?: VegaProps['onError'];\n}\n\nexport const PlotResult = ({\n  spec,\n  data,\n  onError = noop,\n}: PlotResultProps): ReturnType<FC> => {\n  // For some reason, react-vega seems to add 10px to the width.\n  const width = slimBlockWidth - 10;\n  return (\n    <VegaLite\n      css={styles}\n      renderer=\"svg\"\n      spec={spec}\n      data={data}\n      width={width}\n      height={width / GOLDEN_RATIO}\n      onError={onError}\n      actions={false}\n      config={usePlotTheme()}\n    />\n  );\n};\n","import { noop } from '@decipad/utils';\nimport { css } from '@emotion/react';\nimport type { ComponentProps } from 'react';\nimport { FC } from 'react';\nimport { CellInput, ErrorMessage } from '../../atoms';\nimport { Plot as PlotIcon } from '../../icons';\nimport { PlotParams } from '../PlotParams/PlotParams';\nimport { PlotResult } from '../PlotResult/PlotResult';\n\nconst plotIconSizeStyles = css({\n  display: 'grid',\n  width: '22px',\n  height: '22px',\n});\n\nconst plotTitleStyles = css({\n  // TODO: title styles\n  display: 'flex',\n  alignItems: 'center',\n  gap: 4,\n});\n\nconst plotBlockStyles = css({\n  display: 'grid',\n  rowGap: '16px',\n});\n\nconst plotStyles = css({\n  alignSelf: 'center',\n});\n\ninterface PlotBlockProps {\n  readOnly?: boolean;\n  errorMessage?: string;\n  plotParams: ComponentProps<typeof PlotParams>;\n  result?: ComponentProps<typeof PlotResult>;\n  title: string;\n  onTitleChange?: (newValue: string) => void;\n}\n\nexport const PlotBlock = ({\n  readOnly = false,\n  errorMessage,\n  plotParams,\n  result,\n  title,\n  onTitleChange = noop,\n}: PlotBlockProps): ReturnType<FC> => {\n  return (\n    <section css={plotBlockStyles} contentEditable={false}>\n      <div css={plotTitleStyles}>\n        <div css={plotIconSizeStyles}>\n          <PlotIcon />\n        </div>\n        <CellInput\n          value={title}\n          onChange={onTitleChange}\n          placeholder=\"Chart title\"\n        />\n      </div>\n      <>\n        {!readOnly && <PlotParams {...plotParams} />}\n        {errorMessage && <ErrorMessage message={errorMessage} />}\n        {result && (\n          <output css={plotStyles}>\n            <PlotResult {...result} />\n          </output>\n        )}\n      </>\n    </section>\n  );\n};\n","import { PlotElement } from '@decipad/editor-types';\nimport {\n  Computer,\n  convertToMultiplierUnit,\n  Result,\n  SerializedType,\n} from '@decipad/computer';\nimport { ResultTable } from 'libs/language/src/interpreter/interpreter-types';\nimport DeciNumber from '@decipad/number';\n\nexport type DisplayProps = {\n  sourceVarName: string;\n  markType: PlotElement['markType'];\n  xColumnName: string;\n  yColumnName: string;\n  sizeColumnName: string;\n  colorColumnName: string;\n  thetaColumnName: string;\n  colorScheme?: string;\n};\n\ninterface LegendConfig {\n  direction: 'horizontal' | 'vertical';\n  orient:\n    | 'left'\n    | 'right'\n    | 'top'\n    | 'bottom'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'none';\n}\n\ninterface PlotConfig {\n  legend?: LegendConfig;\n  autosize?: 'fit' | 'pad' | 'none';\n  encoding?: {\n    color?: {\n      scheme?: string;\n      legend?: unknown;\n    };\n  };\n  style?: {\n    cell?: {\n      stroke?: string;\n    };\n  };\n  symbol?: {\n    stroke?: string;\n    fill?: string;\n  };\n  axis?: Axis;\n  mark?: {\n    stroke?: string;\n    fill?: string;\n    strokeWidth?: number;\n  };\n}\n\ntype DisplayType = 'quantitative' | 'temporal' | 'ordinal' | 'nominal';\n\ntype Interpolate =\n  | 'linear'\n  | 'linear-closed'\n  | 'step'\n  | 'basis'\n  | 'basis-open'\n  | 'basis-closed'\n  | 'cardinal'\n  | 'cardinal-closed'\n  | 'bundle';\n\ntype Point =\n  | boolean\n  | {\n      filled?: boolean;\n      fill?: string;\n      size?: number;\n      strokeWidth?: number;\n    };\n\nexport interface PlotSpec {\n  mark: {\n    type: PlotElement['markType'];\n    tooltip: boolean;\n    cornerRadiusEnd?: number;\n    interpolate?: Interpolate;\n    theta?: number;\n    innerRadius?: number;\n    point?: Point;\n  };\n  data: { name: 'table' };\n  encoding: Record<EncodingKey, EncodingSpec>;\n  config?: PlotConfig;\n}\n\nexport type AllowedPlotValue = string | boolean | number | Date;\n\nexport type Row = Record<string, AllowedPlotValue>;\n\nexport type PlotData = {\n  table: Row[];\n};\n\ntype TimeUnit =\n  | 'utcyear'\n  | 'utcquarter'\n  | 'utcyearmonth'\n  | 'utcyearmonthdate'\n  | 'utcyearmonthdatehours'\n  | 'utcyearmonthdatehoursminutes'\n  | 'utcyearmonthdatehoursminutesseconds';\n\ntype Axis =\n  | undefined\n  | {\n      grid?: boolean;\n      gridDash?: number[];\n      gridColor?: string;\n      labelAngle?: number;\n      labelBaseline?: string;\n      labelAlign?: string;\n      labelColor?: string;\n      labelFontSize?: number;\n      labelFontWeight?: number;\n      labelBound?: boolean;\n      titleColor?: string;\n      domainColor?: string;\n      domainOpacity?: number;\n      label?: number;\n      tickSize?: number;\n    };\n\ntype EncodingSpec =\n  | undefined\n  | {\n      field: string;\n      type: DisplayType;\n      sort?: null;\n      timeUnit?: TimeUnit;\n      title?: string;\n      scale?: {\n        scheme?: string;\n        range?: Array<string>;\n        domain?: [number, number];\n        domainMin?: number;\n        domainMax?: number;\n      };\n      axis?: Axis;\n      legend?: null | undefined;\n    };\ntype EncodingKey = 'x' | 'y' | 'size' | 'color' | 'theta';\n\nconst displayPropsToEncoding: Record<string, EncodingKey> = {\n  xColumnName: 'x',\n  yColumnName: 'y',\n  sizeColumnName: 'size',\n  colorColumnName: 'color',\n  thetaColumnName: 'theta',\n};\n\nconst hasGrid: Record<EncodingKey, boolean> = {\n  x: false,\n  y: true,\n  size: false,\n  color: false,\n  theta: false,\n};\n\nconst relevantDataDisplayProps: Array<keyof DisplayProps> = Object.keys(\n  displayPropsToEncoding\n) as Array<keyof DisplayProps>;\n\nconst markTypeToFill = (\n  markType: DisplayProps['markType']\n): string | undefined => {\n  switch (markType) {\n    case 'bar':\n    case 'area':\n    case 'point':\n      return 'rgba(69, 195, 235)';\n    case 'circle':\n    case 'square':\n      return 'white';\n    default:\n      return undefined;\n  }\n};\n\nexport function encodingTypeForColumnType(type: SerializedType): DisplayType {\n  switch (type.kind) {\n    case 'date':\n      return 'temporal';\n    case 'string':\n      return 'nominal';\n    default:\n      return 'quantitative';\n  }\n}\n\nfunction relevantColumnNames(displayProps: DisplayProps): string[] {\n  return [\n    displayProps.xColumnName,\n    displayProps.yColumnName,\n    displayProps.sizeColumnName,\n    displayProps.colorColumnName,\n    displayProps.thetaColumnName,\n  ].filter(Boolean);\n}\n\nfunction displayTimeUnitType(type: SerializedType): TimeUnit {\n  if (type.kind !== 'date') {\n    throw new Error('expected column to be of date type');\n  }\n  switch (type.date) {\n    case 'year': {\n      return 'utcyear';\n    }\n    case 'month': {\n      return 'utcyearmonth';\n    }\n    case 'day': {\n      return 'utcyearmonthdate';\n    }\n    case 'hour': {\n      return 'utcyearmonthdatehours';\n    }\n    case 'minute': {\n      return 'utcyearmonthdatehoursminutes';\n    }\n    case 'second':\n    case 'millisecond': {\n      return 'utcyearmonthdatehoursminutesseconds';\n    }\n  }\n}\n\nexport function encodingFor(\n  _computer: Computer,\n  columnName: string,\n  columnType: SerializedType,\n  grid: boolean,\n  markType: PlotElement['markType']\n): EncodingSpec {\n  const type = encodingTypeForColumnType(columnType);\n  const spec: EncodingSpec = {\n    field: columnName,\n    type,\n    title: '',\n    timeUnit:\n      columnType.kind === 'date' ? displayTimeUnitType(columnType) : undefined,\n    axis: {\n      grid,\n    },\n    legend: markType !== 'arc' ? null : undefined,\n  };\n\n  if (type === 'nominal') {\n    // remove sort\n    spec.sort = null;\n  }\n  return spec;\n}\n\nexport function specFromType(\n  computer: Computer,\n  type: undefined | SerializedType,\n  displayProps: DisplayProps\n): undefined | PlotSpec {\n  if (!displayProps.markType || !type || type.kind !== 'table') {\n    return;\n  }\n  const columnNames = relevantColumnNames(displayProps);\n  const columnIndexes = columnNames.map((name) =>\n    type.columnNames.indexOf(name)\n  );\n  const columnTypes = columnIndexes.map(\n    (index) => (index >= 0 && type.columnTypes[index]) || undefined\n  );\n\n  const encoding = relevantDataDisplayProps.reduce(\n    (encodings, specPropName) => {\n      const columnName = displayProps[specPropName];\n      if (!columnName) {\n        return encodings;\n      }\n      const columnIndex = columnNames.indexOf(columnName);\n      const columnType = columnTypes[columnIndex];\n      if (columnType) {\n        const channelKey = displayPropsToEncoding[specPropName];\n        // eslint-disable-next-line no-param-reassign\n        encodings[channelKey] = encodingFor(\n          computer,\n          columnName,\n          columnType,\n          hasGrid[channelKey],\n          displayProps.markType\n        );\n      }\n\n      return encodings;\n    },\n    {} as Record<EncodingKey, EncodingSpec>\n  );\n\n  if (encoding.color && !encoding.color.scale) {\n    encoding.color.scale = {\n      scheme: displayProps.colorScheme,\n    };\n  }\n  if (encoding.y && encoding.y.axis) {\n    encoding.y.axis.labelAngle = 0;\n    encoding.y.axis.labelBaseline = 'line-bottom';\n    // encoding.y.axis.offset = -30;\n    encoding.y.axis.labelAlign = 'left';\n  }\n  if (encoding.x && encoding.x.axis) {\n    encoding.x.axis.labelColor = '#777E89';\n    encoding.x.axis.labelFontSize = 14;\n    encoding.x.axis.labelFontWeight = 700;\n  }\n  if (displayProps.markType !== 'bar' && displayProps.markType !== 'arc') {\n    encoding.color = undefined;\n  }\n\n  const markProps =\n    displayProps.markType === 'bar' ? { width: { band: 0.75 } } : {};\n\n  return {\n    mark: { type: displayProps.markType, tooltip: true, ...markProps },\n    data: { name: 'table' },\n    encoding,\n    config: {\n      encoding: {\n        color: {\n          scheme: displayProps.colorScheme || 'deciblues',\n        },\n      },\n      symbol: {\n        stroke: 'rgba(69, 195, 235)',\n        fill: '0xfff',\n      },\n      mark: {\n        stroke:\n          displayProps.markType !== 'arc' && !encoding.color\n            ? 'rgba(69, 195, 235)'\n            : undefined,\n        fill: markTypeToFill(displayProps.markType),\n        strokeWidth: 6,\n      },\n      axis: {\n        gridColor: '#AAB1BD',\n        gridDash: [5, 5],\n        labelColor: '#D6D6D6',\n        domainColor: '#AAB1BD',\n        domainOpacity: 0,\n        labelAngle: -45,\n        labelBound: true,\n        labelFontSize: 12,\n        tickSize: 0,\n      },\n      autosize: 'fit',\n    },\n  };\n}\n\nfunction toPlotColumn(\n  type: SerializedType,\n  column: Array<Result.OneResult>\n): Array<AllowedPlotValue> {\n  if (!column || !column.length) {\n    return column as Array<AllowedPlotValue>;\n  }\n  if (type.kind === 'number') {\n    return (column as Array<DeciNumber>).map((f) =>\n      convertToMultiplierUnit(f, type.unit).valueOf()\n    );\n  }\n  if (type.kind === 'date') {\n    return (column as Array<bigint>).map((d) => new Date(Number(d)));\n  }\n  return column as Array<AllowedPlotValue>;\n}\n\nfunction makeWide(\n  table: Record<string, Array<AllowedPlotValue>>\n): Array<Record<string, AllowedPlotValue>> {\n  const rows: Array<Array<[string, AllowedPlotValue]>> = [];\n  let first = true;\n  for (const [key, values] of Object.entries(table)) {\n    if (!key || !values) {\n      continue;\n    }\n    // eslint-disable-next-line no-loop-func\n    values.forEach((value, index) => {\n      if (first) {\n        rows.push([[key, value]]);\n      } else {\n        const row = rows[index];\n        row.push([key, value]);\n      }\n    });\n    first = false;\n  }\n  return rows.map((row) => Object.fromEntries(row));\n}\n\nexport function resultToPlotResultData(\n  result: undefined | Result.Result,\n  displayProps: DisplayProps\n): undefined | PlotData {\n  if (!result || result.type.kind !== 'table') {\n    return;\n  }\n  const type = result?.type;\n  if (!type || type.kind !== 'table') {\n    return undefined;\n  }\n  const value = result?.value;\n  if (!value) {\n    return;\n  }\n  const tableValue = value as ResultTable;\n  const columnNames = relevantColumnNames(displayProps);\n  const columnsTypesAndResults: Array<[SerializedType, Result.OneResult[]]> =\n    columnNames.map((columnName): [SerializedType, Result.OneResult[]] => {\n      const index = type.columnNames.indexOf(columnName);\n      return [type.columnTypes[index], tableValue[index]];\n    });\n  const returnValue: Record<string, Array<AllowedPlotValue>> = {};\n  columnNames.forEach((columnName, index) => {\n    const [columnType, values] = columnsTypesAndResults[index];\n    returnValue[columnName] = toPlotColumn(columnType, values);\n  });\n  return { table: makeWide(returnValue) };\n}\n\nfunction findWideDataDomain(key: string, data: Row[]): [number, number] | void {\n  let min = Infinity;\n  let max = -Infinity;\n\n  for (const row of data) {\n    const value = row[key];\n    if (value) {\n      if (typeof value === 'number') {\n        if (value < min) {\n          min = value;\n        }\n        if (value > max) {\n          max = value;\n        }\n      }\n    }\n  }\n\n  if (Number.isFinite(min) && Number.isFinite(max)) {\n    const range = max - min;\n    return [Math.min(min, 0), Math.ceil(max + range / 10)];\n  }\n}\n\nexport function enhanceSpecFromWideData(\n  spec: PlotSpec,\n  data: PlotData\n): PlotSpec {\n  if (spec.mark.type !== 'arc') {\n    for (const encValue of Object.values(spec?.encoding)) {\n      if (encValue) {\n        const { field } = encValue;\n        const domain = findWideDataDomain(field, data.table);\n        if (domain) {\n          if (!encValue.scale) {\n            encValue.scale = {};\n          }\n          encValue.scale.domain = domain;\n        }\n      }\n    }\n  }\n\n  return spec;\n}\n","/* eslint-disable no-param-reassign */\nimport { Computer, SerializedType } from '@decipad/computer';\nimport { encodingFor, PlotSpec } from './plotUtils';\n\ntype KindSet = Set<SerializedType['kind']>;\n\ntype ExclusionList = Array<string | undefined>;\n\nconst quantitativeKinds: KindSet = new Set(['number', 'date']);\n\nconst nominalKinds: KindSet = new Set(['string', 'boolean']);\n\nconst firstColumnInKind = (\n  type: SerializedType,\n  kinds: KindSet,\n  exclude: ExclusionList = []\n): [string, SerializedType] | undefined => {\n  if (type.kind !== 'table') {\n    return undefined;\n  }\n  let columnIndex = -1;\n  for (const columnType of type.columnTypes) {\n    columnIndex += 1;\n    const columnName = type.columnNames[columnIndex];\n    if (exclude.indexOf(columnName) >= 0) {\n      continue;\n    }\n    if (columnType.kind === 'column' && kinds.has(columnType.cellType.kind)) {\n      return [type.columnNames[columnIndex], columnType.cellType];\n    }\n  }\n  return undefined;\n};\n\nconst firstQuantitativeColumn = (\n  type: SerializedType,\n  exclude?: ExclusionList\n) => firstColumnInKind(type, quantitativeKinds, exclude);\n\nconst firstNominalColumn = (type: SerializedType, exclude?: ExclusionList) =>\n  firstColumnInKind(type, nominalKinds, exclude);\n\nexport const defaultPlotSpec = (\n  computer: Computer,\n  type: undefined | SerializedType,\n  spec: PlotSpec | undefined\n): PlotSpec | undefined => {\n  if (type?.kind !== 'table' || !spec) {\n    return spec;\n  }\n\n  // pie charts\n  if (spec.mark.type === 'arc') {\n    const exclude: ExclusionList = [];\n    if (!spec.encoding.theta) {\n      const column = firstQuantitativeColumn(type, exclude);\n      if (column) {\n        exclude.push(column[0]);\n        spec.encoding.theta = encodingFor(\n          computer,\n          ...column,\n          false,\n          spec.mark.type\n        );\n      }\n    }\n    if (!spec.encoding.color) {\n      const column = firstNominalColumn(type, exclude);\n      if (column) {\n        spec.encoding.theta = encodingFor(\n          computer,\n          ...column,\n          false,\n          spec.mark.type\n        );\n      }\n    }\n\n    // break here, as pie charts dont need more encodings\n    return spec;\n  }\n\n  if (!spec.encoding.x) {\n    const exclusions = [\n      spec.encoding.y?.field,\n      spec.encoding.size?.field,\n      spec.encoding.color?.field,\n    ];\n    const column =\n      firstNominalColumn(type, exclusions) ||\n      firstQuantitativeColumn(type, exclusions);\n    if (column) {\n      spec.encoding.x = encodingFor(computer, ...column, false, spec.mark.type);\n    }\n  }\n\n  if (!spec.encoding.y) {\n    const exclusions = [\n      spec.encoding.x?.field,\n      spec.encoding.size?.field,\n      spec.encoding.color?.field,\n    ];\n    const column =\n      firstQuantitativeColumn(type, exclusions) ||\n      firstNominalColumn(type, exclusions);\n    if (column) {\n      spec.encoding.y = encodingFor(computer, ...column, true, spec.mark.type);\n    }\n  }\n\n  if (!spec.encoding.y) {\n    const column = firstQuantitativeColumn(type) || firstNominalColumn(type);\n    if (column) {\n      spec.encoding.y = encodingFor(computer, ...column, true, spec.mark.type);\n    }\n  }\n\n  return spec;\n};\n","import { PlotElement, useTEditorRef } from '@decipad/editor-types';\nimport { Computer, AutocompleteName, getExprRef } from '@decipad/computer';\nimport { useElementMutatorCallback } from '@decipad/editor-utils';\nimport { useComputer } from '@decipad/react-contexts';\nimport { useMemo } from 'react';\nimport type { PlotData, PlotSpec } from './plotUtils';\nimport {\n  enhanceSpecFromWideData,\n  resultToPlotResultData,\n  specFromType,\n} from './plotUtils';\nimport { defaultPlotSpec } from './defaultPlotSpec';\nimport { normalizePlotSpec } from './normalizePlotSpec';\n\ntype StringSetter = (value: string) => void;\n\nexport type PlotParams = Omit<PlotElement, 'children' | 'id' | 'type'> & {\n  sourceVarNameOptions: string[];\n  sourceExprRefOptions: string[];\n  columnNameOptions: string[];\n  setSourceVarName: StringSetter;\n  setMarkType: StringSetter;\n  setXColumnName: StringSetter;\n  setYColumnName: StringSetter;\n  setSizeColumnName: StringSetter;\n  setColorColumnName: StringSetter;\n  setThetaColumnName: StringSetter;\n  setColorScheme: StringSetter;\n};\n\ntype UsePlotReturn = {\n  spec?: PlotSpec;\n  data?: PlotData;\n  plotParams: PlotParams;\n};\n\ntype AutocompleteNameWithExpRef = AutocompleteName & {\n  exprRef: string;\n};\n\nconst autocompleteNameToExprRef = (\n  computer: Computer,\n  table: AutocompleteName\n): AutocompleteNameWithExpRef => {\n  return {\n    ...table,\n    exprRef: getExprRef(computer.getVarBlockId(table.name) ?? ''),\n  };\n};\n\nconst isTable = (name: AutocompleteName) =>\n  !name.name.includes('.') && name.type.kind === 'table';\n\nconst shapes = ['point', 'circle', 'square', 'tick'] as const;\n\nexport type Shape = typeof shapes[number];\n\nexport const usePlot = (element: PlotElement): UsePlotReturn => {\n  const editor = useTEditorRef();\n  const computer = useComputer();\n\n  const names = computer.getNamesDefined$.useWithSelector((n) =>\n    n.filter(isTable).map((table) => autocompleteNameToExprRef(computer, table))\n  );\n\n  const source = computer.getVarResult$.use(element.sourceVarName)?.result;\n\n  let spec = normalizePlotSpec(\n    defaultPlotSpec(\n      computer,\n      source?.type,\n      specFromType(computer, source?.type, element)\n    )\n  );\n\n  const data = resultToPlotResultData(source, element);\n\n  spec = spec && data && enhanceSpecFromWideData(spec, data);\n\n  const setMarkType = useElementMutatorCallback(editor, element, 'markType');\n\n  const shape = useMemo(() => {\n    if (shapes.includes(element.markType as Shape)) {\n      return element.markType;\n    }\n    return undefined;\n  }, [element.markType]);\n\n  const plotParams: PlotParams = {\n    sourceVarNameOptions: names.map((name) => name.name),\n    sourceExprRefOptions: names.map((name) => name.exprRef),\n    columnNameOptions:\n      (source?.type.kind === 'table' && source.type.columnNames) || [],\n    setSourceVarName: useElementMutatorCallback(\n      editor,\n      element,\n      'sourceVarName'\n    ),\n    setMarkType: setMarkType as StringSetter,\n    setXColumnName: useElementMutatorCallback(editor, element, 'xColumnName'),\n    setYColumnName: useElementMutatorCallback(editor, element, 'yColumnName'),\n    setSizeColumnName: useElementMutatorCallback(\n      editor,\n      element,\n      'sizeColumnName'\n    ),\n    setColorColumnName: useElementMutatorCallback(\n      editor,\n      element,\n      'colorColumnName'\n    ),\n    setThetaColumnName: useElementMutatorCallback(\n      editor,\n      element,\n      'thetaColumnName'\n    ),\n    setColorScheme: useElementMutatorCallback(editor, element, 'colorScheme'),\n    ...element,\n    setShape: setMarkType,\n    shape,\n  };\n\n  return { spec, data, plotParams };\n};\n","/* eslint-disable no-param-reassign */\nimport { PlotSpec } from './plotUtils';\n\nexport const normalizePlotSpec = (\n  spec: PlotSpec | undefined\n): PlotSpec | undefined => {\n  if (!spec) {\n    return spec;\n  }\n  if (spec.mark.type === 'arc') {\n    // pie charts\n    if (spec.encoding.x) {\n      spec.encoding.x = undefined;\n    }\n    if (spec.encoding.y) {\n      spec.encoding.y = undefined;\n    }\n    if (spec.encoding.size) {\n      spec.encoding.size = undefined;\n    }\n    if (!spec.mark.theta) {\n      spec.mark.theta = 0;\n    }\n    if (!spec.mark.innerRadius) {\n      spec.mark.innerRadius = 50;\n    }\n    if (spec.encoding.theta?.scale) {\n      spec.encoding.theta.scale = undefined;\n    }\n  } else if (spec.encoding.theta) {\n    spec.encoding.theta = undefined;\n  }\n\n  if (spec.mark.type === 'line' || spec.mark.type === 'area') {\n    if (!spec.mark.point) {\n      spec.mark.point = {\n        filled: false,\n        fill: 'white',\n        size: 140,\n        strokeWidth: 5,\n      };\n    }\n  }\n\n  if (spec.mark.type === 'line') {\n    if (spec.encoding.size) {\n      spec.encoding.size = undefined;\n    }\n  }\n\n  if (spec.mark.type === 'bar' && !spec.mark.cornerRadiusEnd) {\n    spec.mark.cornerRadiusEnd = 4;\n    if (spec.encoding?.y?.axis) {\n      spec.encoding.y.axis.labelAlign = 'right';\n    }\n    if (spec.encoding.size) {\n      spec.encoding.size = undefined;\n    }\n  }\n\n  if (!spec.config) {\n    spec.config = {};\n  }\n  if (!spec.config.autosize) {\n    spec.config.autosize = 'fit';\n  }\n  if (!spec.config.axis) {\n    spec.config.axis = {\n      titleColor: '#999',\n    };\n  }\n  if (!spec.config.style) {\n    spec.config.style = {\n      cell: {\n        stroke: 'transparent',\n      },\n    };\n  }\n  if (!spec.config.legend) {\n    spec.config.legend = {\n      direction: 'horizontal',\n      orient: 'top',\n    };\n  }\n\n  if (spec.encoding.color) {\n    if (!spec.encoding.color.scale?.scheme) {\n      spec.encoding.color.scale = {\n        scheme: 'sameblue',\n      };\n    }\n  }\n\n  return spec;\n};\n","import { scheme } from 'vega';\n\nexport const initializeVega = () => {\n  scheme('deciblues', [\n    '#ecf9fd',\n    '#daf3fb',\n    '#c7edf9',\n    '#b5e7f7',\n    '#a2e1f5',\n    '#8fdbf3',\n    '#7dd5f1',\n    '#6acfef',\n    '#58c9ed',\n    'rgba(69, 195, 235)',\n  ]);\n\n  scheme('sameblue', [\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n    'rgba(69, 195, 235)',\n  ]);\n};\n","import { ComponentProps } from 'react';\nimport {\n  ELEMENT_PLOT,\n  PlateComponent,\n  useTEditorRef,\n} from '@decipad/editor-types';\nimport { useIsEditorReadOnly } from '@decipad/react-contexts';\nimport { PlotBlock } from '@decipad/ui';\nimport { DraggableBlock } from '@decipad/editor-components';\nimport {\n  assertElementType,\n  useElementMutatorCallback,\n} from '@decipad/editor-utils';\nimport { usePlot } from './utils/usePlot';\nimport { initializeVega } from './initializeVega';\n\nconst DEFAULT_TITLE = 'Plot';\n\ntype PlotBlockProps = ComponentProps<typeof PlotBlock>;\ntype PlotParamsProps = PlotBlockProps['plotParams'];\n\nconst Plot: PlateComponent = ({ attributes, element, children }) => {\n  assertElementType(element, ELEMENT_PLOT);\n  const editor = useTEditorRef();\n  const readOnly = useIsEditorReadOnly();\n  const { spec, data, plotParams } = usePlot(element);\n  const onTitleChange = useElementMutatorCallback(editor, element, 'title');\n\n  // IMPORTANT NOTE: do not remove the children elements from rendering.\n  // Even though they're one element with an empty text property, their absence triggers\n  // an uncaught exception in slate-react.\n  // Also, be careful with the element structure:\n  // https://github.com/ianstormtaylor/slate/issues/3930#issuecomment-723288696\n\n  return (\n    <DraggableBlock\n      element={element}\n      blockKind=\"plot\"\n      contentEditable={false}\n      {...attributes}\n    >\n      <PlotBlock\n        readOnly={readOnly}\n        plotParams={plotParams as unknown as PlotParamsProps}\n        result={\n          spec &&\n          data &&\n          ({\n            spec,\n            data,\n          } as PlotBlockProps['result'])\n        }\n        title={element.title || DEFAULT_TITLE}\n        onTitleChange={onTitleChange}\n      />\n      {children}\n    </DraggableBlock>\n  );\n};\n\n// Default export so we can use React.lazy\nexport default Plot;\n\ninitializeVega();\n"],"names":["inputStyles","headingStyles","css","blockAlignment","height","lineHeight","fontSize","headerStyles","p13Medium","dataStyles","p16Medium","alwaysTrue","CellInput","id","placeholder","readOnly","variant","value","format","identity","onChange","noop","validate","transform","state","setState","useState","inputRef","useRef","useEffect","submit","displayValue","ref","onBlur","e","target","onFocus","onKeyDown","key","errorStyles","setCssVar","cssVar","ErrorMessage","message","contentEditable","markTypes","markTypeNames","bar","line","point","area","arc","shapes","selectFontStyles","p12Medium","selectStyles","backgroundColor","width","maxWidth","SelectInput","labelText","children","setValue","Label","renderContent","ev","wrapperContainerStyles","containerStyles","colorSchemes","ColorSchemeOptions","map","scheme","PlotParams","sourceVarName","sourceVarNameOptions","sourceExprRefOptions","columnNameOptions","setSourceVarName","markType","setMarkType","xColumnName","setXColumnName","yColumnName","setYColumnName","sizeColumnName","setSizeColumnName","colorColumnName","setColorColumnName","thetaColumnName","setThetaColumnName","colorScheme","setColorScheme","shape","setShape","emptyColumnOption","sourceVarNameOptionsOptions","concat","sourceVarNameOption","index","columnOptions","columnNameOption","markTypeOptions","mark","hideOnPrint","includes","s","usePlotTheme","dark","useThemeFromStore","darkTheme","background","undefined","styles","PlotResult","spec","data","onError","slimBlockWidth","VegaLite","renderer","actions","config","plotIconSizeStyles","plotTitleStyles","plotBlockStyles","plotStyles","PlotBlock","errorMessage","plotParams","result","title","onTitleChange","Plot","displayPropsToEncoding","hasGrid","x","y","size","color","theta","relevantDataDisplayProps","Object","keys","markTypeToFill","relevantColumnNames","displayProps","filter","Boolean","displayTimeUnitType","type","kind","Error","date","encodingFor","_computer","columnName","columnType","grid","encodingTypeForColumnType","field","timeUnit","axis","legend","sort","makeWide","table","rows","first","values","entries","forEach","push","row","fromEntries","resultToPlotResultData","tableValue","columnNames","columnsTypesAndResults","indexOf","columnTypes","returnValue","column","length","f","convertToMultiplierUnit","unit","valueOf","d","Date","Number","toPlotColumn","findWideDataDomain","min","Infinity","max","isFinite","range","Math","ceil","quantitativeKinds","Set","nominalKinds","firstColumnInKind","kinds","exclude","columnIndex","has","cellType","firstQuantitativeColumn","firstNominalColumn","isTable","name","usePlot","element","editor","useTEditorRef","computer","useComputer","names","getNamesDefined$","useWithSelector","n","exprRef","getExprRef","getVarBlockId","autocompleteNameToExprRef","source","getVarResult$","use","encoding","innerRadius","scale","filled","fill","strokeWidth","cornerRadiusEnd","labelAlign","autosize","titleColor","style","cell","stroke","direction","orient","normalizePlotSpec","exclusions","defaultPlotSpec","reduce","encodings","specPropName","channelKey","labelAngle","labelBaseline","labelColor","labelFontSize","labelFontWeight","markProps","band","tooltip","symbol","gridColor","gridDash","domainColor","domainOpacity","labelBound","tickSize","specFromType","encValue","domain","enhanceSpecFromWideData","useElementMutatorCallback","useMemo","attributes","assertElementType","ELEMENT_PLOT","useIsEditorReadOnly","blockKind"],"sourceRoot":""}
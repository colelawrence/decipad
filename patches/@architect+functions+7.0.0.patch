diff --git a/node_modules/@architect/functions/src/discovery/index.js b/node_modules/@architect/functions/src/discovery/index.js
index a2c2bef..7bf7896 100644
--- a/node_modules/@architect/functions/src/discovery/index.js
+++ b/node_modules/@architect/functions/src/discovery/index.js
@@ -27,7 +27,7 @@ module.exports = function lookup (callback) {
   if (local) {
     let port = 2222
     if (ARC_SANDBOX) {
-      let { ports } = JSON.parse(ARC_SANDBOX)
+      let { ports = { _arc: 2222} } = JSON.parse(ARC_SANDBOX || '{}')
       if (!ports._arc) {
         return callback(ReferenceError('Sandbox internal port not found'))
       }
diff --git a/node_modules/@architect/functions/src/events/publish.js b/node_modules/@architect/functions/src/events/publish.js
index b8e7e22..b1ef00a 100644
--- a/node_modules/@architect/functions/src/events/publish.js
+++ b/node_modules/@architect/functions/src/events/publish.js
@@ -73,16 +73,24 @@ function _publishSandbox (type, params, callback) {
   req.end('\n')
 }
 
+const clientOptions = {
+  marshallOptions: {
+    removeUndefinedValues: true
+  },
+  maxAttempts: 10,
+  retryMode: 'adaptive',
+};
+
 function eventFactory (arc) {
   return function live ({ name, payload }, callback) {
     if (!snsClient) {
       if (isNode18) {
         let { SNS } = require('@aws-sdk/client-sns')
-        sns = new SNS
+        sns = new SNS(clientOptions)
       }
       else {
         let SNS = require('aws-sdk/clients/sns')
-        sns = new SNS
+        sns = new SNS(clientOptions)
       }
     }
     snsClient = (params, callback) => {
diff --git a/node_modules/@architect/functions/src/index.js b/node_modules/@architect/functions/src/index.js
index 70f27a8..fb0e144 100644
--- a/node_modules/@architect/functions/src/index.js
+++ b/node_modules/@architect/functions/src/index.js
@@ -23,21 +23,28 @@ let serviceDiscovery = require('./discovery')
 let ws = require('./ws')
 
 let services
+let servicesPromise
 let arc = {
   http,
   static: _static,
   ws,
   services: function () {
-    return new Promise(function (resolve, reject) {
+    if (servicesPromise) {
+      return servicesPromise;
+    }
+    servicesPromise = new Promise(function (resolve, reject) {
       if (services) resolve(services)
       else serviceDiscovery(function (err, serviceMap) {
-        if (err) reject(err)
-        else {
+        if (err){
+          servicesPromise = undefined;
+          reject(err)
+        } else {
           services = serviceMap
           resolve(services)
         }
       })
     })
+    return servicesPromise;
   }
 }
 arc.events = require('./events')(arc, 'events')
diff --git a/node_modules/@architect/functions/src/tables/dynamo.js b/node_modules/@architect/functions/src/tables/dynamo.js
index adfe2e3..391fd6f 100644
--- a/node_modules/@architect/functions/src/tables/dynamo.js
+++ b/node_modules/@architect/functions/src/tables/dynamo.js
@@ -5,6 +5,14 @@ let { getPorts, isNode18, useAWS } = require('../lib')
  */
 let db, doc
 
+const clientOptions = {
+  marshallOptions: {
+    removeUndefinedValues: true
+  },
+  maxAttempts: 10,
+  retryMode: 'adaptive',
+};
+
 function getDynamo (type, callback) {
 
   if (!type)
@@ -49,7 +57,7 @@ function getDynamo (type, callback) {
       }
     }
     db = new DB(config)
-    doc = isNode18 ? Doc.from(db) : new Doc(config)
+    doc = isNode18 ? Doc.from(db, clientOptions) : new Doc(config)
     return callback(null, type === 'db' ? db : doc)
   }
   else {
@@ -73,7 +81,7 @@ function getDynamo (type, callback) {
           })
         }
         db = new DB(config)
-        doc = isNode18 ? Doc.from(db) : new Doc(config)
+        doc = isNode18 ? Doc.from(db, clientOptions) : new Doc(config)
         return callback(null, type === 'db' ? db : doc)
       }
     })
diff --git a/node_modules/@architect/functions/src/ws/index.js b/node_modules/@architect/functions/src/ws/index.js
index d018a21..f9d640f 100644
--- a/node_modules/@architect/functions/src/ws/index.js
+++ b/node_modules/@architect/functions/src/ws/index.js
@@ -22,6 +22,11 @@ function instantiateAPI () {
     _api = new ApiGatewayManagementApi({
       apiVersion: '2018-11-29',
       endpoint: `${ARC_WSS_URL.replace(/^ws/, 'http')}`,
+      marshallOptions: {
+        removeUndefinedValues: true
+      },
+      maxAttempts: 10,
+      retryMode: 'adaptive',
     })
   }
   else {
@@ -33,6 +38,11 @@ function instantiateAPI () {
       apiVersion: '2018-11-29',
       endpoint: `http://localhost:${port}/_arc/ws`,
       region: AWS_REGION || 'us-west-2',
+      marshallOptions: {
+        removeUndefinedValues: true
+      },
+      maxAttempts: 10,
+      retryMode: 'adaptive',
     })
   }
 
@@ -86,7 +96,7 @@ function send ({ id, payload }, callback) {
   instantiateAPI()
   return _send({
     ConnectionId: id,
-    Data: JSON.stringify(payload)
+    Data: Buffer.isBuffer(payload) ? payload : JSON.stringify(payload)
   }, callback)
 }
 

diff --git a/node_modules/@nasa-gcn/architect-plugin-search/index.js b/node_modules/@nasa-gcn/architect-plugin-search/index.js
index 919e908..689e807 100644
--- a/node_modules/@nasa-gcn/architect-plugin-search/index.js
+++ b/node_modules/@nasa-gcn/architect-plugin-search/index.js
@@ -586,6 +586,9 @@ function addTransforms(cloudformation, ...transforms) {
 var deploy = {
   // @ts-expect-error: The Architect plugins API has no type definitions.
   start({ cloudformation, inventory, arc, stage }) {
+    if (process.env.DEPLOY_NAME !== 'alpha' && process.env.DEPLOY_NAME !== 'dev') {
+      return cloudformation;
+    }
     let resources;
     const config = getConfig(arc);
     if (config.availabilityZoneCount) {
@@ -601,8 +604,13 @@ var deploy = {
   },
   // @ts-expect-error: The Architect plugins API has no type definitions.
   services({ stage, arc }) {
-    if (stage !== "production") {
-      return { node: "http://localhost:9200" };
+    if (process.env.DEPLOY_NAME !== 'alpha' && process.env.DEPLOY_NAME !== 'dev') {
+      var port = parseInt(process.env.DECI_SEARCH_PORT ?? '9200');
+      return { node: "http://localhost:" + port };
+    }
+    if (stage !== "production" && stage !== "staging") {
+      var port = parseInt(process.env.DECI_SEARCH_PORT ?? '9200');
+      return { node: "http://localhost:" + port };
     } else if (arc.search) {
       return services2;
     } else {
@@ -614,11 +622,11 @@ var deploy = {
     executeSearchRequests(inventory.inv._project.cwd);
   }
 };
-var local;
-function getEngine(name2) {
-  if (name2?.toLowerCase() === "opensearch") return "opensearch";
-  else return "elasticsearch";
-}
+// var local;
+// function getEngine(name2) {
+//   if (name2?.toLowerCase() === "opensearch") return "opensearch";
+//   else return "elasticsearch";
+// }
 var sandbox = {
   async start({
     // @ts-expect-error: The Architect plugins API has no type definitions.
@@ -630,13 +638,13 @@ var sandbox = {
       }
     }
   }) {
-    const engine = getEngine(getConfig(arc).sandboxEngine);
-    local = await launch({ engine });
+    // const engine = getEngine(getConfig(arc).sandboxEngine);
+    // local = await launch({ engine });
     await executeSearchRequests(cwd);
-    await populate(cwd, { node: local.url });
+    // await populate(cwd, { node: local.url });
   },
   async end() {
-    await local.stop();
+    // empty
   }
 };
 export {
